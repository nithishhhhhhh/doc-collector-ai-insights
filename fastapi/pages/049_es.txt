URL: https://fastapi.tiangolo.com/es/
================================================================================

FastAPI¬∂
========

FastAPI
FastAPI framework, alto rendimiento, f√°cil de aprender, r√°pido de programar, listo para producci√≥n
Documentaci√≥n
:
https://fastapi.tiangolo.com
C√≥digo Fuente
:
https://github.com/fastapi/fastapi
FastAPI es un framework web moderno, r√°pido (de alto rendimiento), para construir APIs con Python basado en las anotaciones de tipos est√°ndar de Python.
Las caracter√≠sticas clave son:
R√°pido
: Muy alto rendimiento, a la par con
NodeJS
y
Go
(gracias a Starlette y Pydantic).
Uno de los frameworks Python m√°s r√°pidos disponibles
.
R√°pido de programar
: Aumenta la velocidad para desarrollar funcionalidades en aproximadamente un 200% a 300%. *
Menos bugs
: Reduce en aproximadamente un 40% los errores inducidos por humanos (desarrolladores). *
Intuitivo
: Gran soporte para editores.
Autocompletado
en todas partes. Menos tiempo depurando.
F√°cil
: Dise√±ado para ser f√°cil de usar y aprender. Menos tiempo leyendo documentaci√≥n.
Corto
: Minimiza la duplicaci√≥n de c√≥digo. M√∫ltiples funcionalidades desde cada declaraci√≥n de par√°metro. Menos bugs.
Robusto
: Obt√©n c√≥digo listo para producci√≥n. Con documentaci√≥n interactiva autom√°tica.
Basado en est√°ndares
: Basado (y completamente compatible) con los est√°ndares abiertos para APIs:
OpenAPI
(anteriormente conocido como Swagger) y
JSON Schema
.
* estimaci√≥n basada en pruebas con un equipo de desarrollo interno, construyendo aplicaciones de producci√≥n.
Sponsors
Otros sponsors
Opiniones
"
[...] Estoy usando
FastAPI
un mont√≥n estos d√≠as. [...] De hecho, estoy planeando usarlo para todos los servicios de
ML de mi equipo en Microsoft
. Algunos de ellos se est√°n integrando en el n√∫cleo del producto
Windows
y algunos productos de
Office
.
"
Kabir Khan -
Microsoft
(ref)
"
Adoptamos el paquete
FastAPI
para crear un servidor
REST
que pueda ser consultado para obtener
predicciones
. [para Ludwig]
"
Piero Molino, Yaroslav Dudin, y Sai Sumanth Miryala -
Uber
(ref)
"
Netflix
se complace en anunciar el lanzamiento de c√≥digo abierto de nuestro framework de orquestaci√≥n de
gesti√≥n de crisis
:
Dispatch
! [construido con
FastAPI
]
"
Kevin Glisson, Marc Vilanova, Forest Monsen -
Netflix
(ref)
"
Estoy s√∫per emocionado con
FastAPI
. ¬°Es tan divertido!
"
Brian Okken -
host del podcast Python Bytes
(ref)
"
Honestamente, lo que has construido parece s√∫per s√≥lido y pulido. En muchos aspectos, es lo que quer√≠a que
Hug
fuera; es realmente inspirador ver a alguien construir eso.
"
Timothy Crosley -
creador de Hug
(ref)
"
Si est√°s buscando aprender un
framework moderno
para construir APIs REST, √©chale un vistazo a
FastAPI
[...] Es r√°pido, f√°cil de usar y f√°cil de aprender [...]
"
"
Nos hemos cambiado a
FastAPI
para nuestras
APIs
[...] Creo que te gustar√° [...]
"
Ines Montani - Matthew Honnibal -
fundadores de Explosion AI
-
creadores de spaCy
(ref)
-
(ref)
"
Si alguien est√° buscando construir una API de Python para producci√≥n, altamente recomendar√≠a
FastAPI
. Est√°
hermosamente dise√±ado
, es
simple de usar
y
altamente escalable
, se ha convertido en un
componente clave
en nuestra estrategia de desarrollo API primero y est√° impulsando muchas automatizaciones y servicios como nuestro Ingeniero Virtual TAC.
"
Deon Pillsbury -
Cisco
(ref)
Typer
, el FastAPI de las CLIs
Si est√°s construyendo una aplicaci√≥n de
CLI
para ser usada en el terminal en lugar de una API web, revisa
Typer
.
Typer
es el hermano peque√±o de FastAPI. Y est√° destinado a ser el
FastAPI de las CLIs
. ‚å®Ô∏è üöÄ
Requisitos
FastAPI se apoya en hombros de gigantes:
Starlette
para las partes web.
Pydantic
para las partes de datos.
Instalaci√≥n
Crea y activa un
entorno virtual
y luego instala FastAPI:
fast ‚Üí
pip install "fastapi[standard]"
restart ‚Üª
Nota
: Aseg√∫rate de poner
"fastapi[standard]"
entre comillas para asegurar que funcione en todas las terminales.
Ejemplo
Cr√©alo
Crea un archivo
main.py
con:
from
typing
import
Union
from
fastapi
import
FastAPI
app
=
FastAPI
()
@app
.
get
(
"/"
)
def
read_root
():
return
{
"Hello"
:
"World"
}
@app
.
get
(
"/items/
{item_id}
"
)
def
read_item
(
item_id
:
int
,
q
:
Union
[
str
,
None
]
=
None
):
return
{
"item_id"
:
item_id
,
"q"
:
q
}
O usa
async def
...
Si tu c√≥digo usa
async
/
await
, usa
async def
:
from
typing
import
Union
from
fastapi
import
FastAPI
app
=
FastAPI
()
@app
.
get
(
"/"
)
async
def
read_root
():
return
{
"Hello"
:
"World"
}
@app
.
get
(
"/items/
{item_id}
"
)
async
def
read_item
(
item_id
:
int
,
q
:
Union
[
str
,
None
]
=
None
):
return
{
"item_id"
:
item_id
,
"q"
:
q
}
Nota
:
Si no lo sabes, revisa la secci√≥n
"¬øCon prisa?"
sobre
async
y
await
en la documentaci√≥n
.
C√≥rrelo
Corre el servidor con:
fast ‚Üí
fastapi dev main.py
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FastAPI CLI - Development mode ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ                                                     ‚îÇ
‚îÇ  Serving at: http://127.0.0.1:8000                  ‚îÇ
‚îÇ                                                     ‚îÇ
‚îÇ  API docs: http://127.0.0.1:8000/docs               ‚îÇ
‚îÇ                                                     ‚îÇ
‚îÇ  Running in development mode, for production use:   ‚îÇ
‚îÇ                                                     ‚îÇ
‚îÇ  fastapi run                                        ‚îÇ
‚îÇ                                                     ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [2248755] using WatchFiles
INFO:     Started server process [2248757]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
restart ‚Üª
Acerca del comando
fastapi dev main.py
...
El comando
fastapi dev
lee tu archivo
main.py
, detecta la app
FastAPI
en √©l y arranca un servidor usando
Uvicorn
.
Por defecto,
fastapi dev
comenzar√° con auto-recarga habilitada para el desarrollo local.
Puedes leer m√°s sobre esto en la
documentaci√≥n del CLI de FastAPI
.
Rev√≠salo
Abre tu navegador en
http://127.0.0.1:8000/items/5?q=somequery
.
Ver√°s el response JSON como:
{
"item_id"
:
5
,
"q"
:
"somequery"
}
Ya creaste una API que:
Recibe requests HTTP en los
paths
/
y
/items/{item_id}
.
Ambos
paths
toman
operaciones
GET
(tambi√©n conocidas como m√©todos HTTP).
El
path
/items/{item_id}
tiene un
par√°metro de path
item_id
que debe ser un
int
.
El
path
/items/{item_id}
tiene un
par√°metro de query
q
opcional que es un
str
.
Documentaci√≥n interactiva de la API
Ahora ve a
http://127.0.0.1:8000/docs
.
Ver√°s la documentaci√≥n interactiva autom√°tica de la API (proporcionada por
Swagger UI
):
Documentaci√≥n de API Alternativa
Y ahora, ve a
http://127.0.0.1:8000/redoc
.
Ver√°s la documentaci√≥n alternativa autom√°tica (proporcionada por
ReDoc
):
Actualizaci√≥n del Ejemplo
Ahora modifica el archivo
main.py
para recibir un body desde un request
PUT
.
Declara el body usando tipos est√°ndar de Python, gracias a Pydantic.
from
typing
import
Union
from
fastapi
import
FastAPI
from
pydantic
import
BaseModel
app
=
FastAPI
()
class
Item
(
BaseModel
):
name
:
str
price
:
float
is_offer
:
Union
[
bool
,
None
]
=
None
@app
.
get
(
"/"
)
def
read_root
():
return
{
"Hello"
:
"World"
}
@app
.
get
(
"/items/
{item_id}
"
)
def
read_item
(
item_id
:
int
,
q
:
Union
[
str
,
None
]
=
None
):
return
{
"item_id"
:
item_id
,
"q"
:
q
}
@app
.
put
(
"/items/
{item_id}
"
)
def
update_item
(
item_id
:
int
,
item
:
Item
):
return
{
"item_name"
:
item
.
name
,
"item_id"
:
item_id
}
El servidor
fastapi dev
deber√≠a recargarse autom√°ticamente.
Actualizaci√≥n de la Documentaci√≥n Interactiva de la API
Ahora ve a
http://127.0.0.1:8000/docs
.
La documentaci√≥n interactiva de la API se actualizar√° autom√°ticamente, incluyendo el nuevo body:
Haz clic en el bot√≥n "Try it out", te permite llenar los par√°metros e interactuar directamente con la API:
Luego haz clic en el bot√≥n "Execute", la interfaz de usuario se comunicar√° con tu API, enviar√° los par√°metros, obtendr√° los resultados y los mostrar√° en la pantalla:
Actualizaci√≥n de la Documentaci√≥n Alternativa de la API
Y ahora, ve a
http://127.0.0.1:8000/redoc
.
La documentaci√≥n alternativa tambi√©n reflejar√° el nuevo par√°metro de query y body:
Resumen
En resumen, declaras
una vez
los tipos de par√°metros, body, etc. como par√°metros de funci√≥n.
Lo haces con tipos est√°ndar modernos de Python.
No tienes que aprender una nueva sintaxis, los m√©todos o clases de un paquete espec√≠fico, etc.
Solo
Python
est√°ndar.
Por ejemplo, para un
int
:
item_id
:
int
o para un modelo
Item
m√°s complejo:
item
:
Item
...y con esa √∫nica declaraci√≥n obtienes:
Soporte para editores, incluyendo:
Autocompletado.
Chequeo de tipos.
Validaci√≥n de datos:
Errores autom√°ticos y claros cuando los datos son inv√°lidos.
Validaci√≥n incluso para objetos JSON profundamente anidados.
Conversi√≥n
de datos de entrada: de la red a los datos y tipos de Python. Leyendo desde:
JSON.
Par√°metros de path.
Par√°metros de query.
Cookies.
Headers.
Forms.
Archivos.
Conversi√≥n
de datos de salida: convirtiendo de datos y tipos de Python a datos de red (como JSON):
Convertir tipos de Python (
str
,
int
,
float
,
bool
,
list
, etc).
Objetos
datetime
.
Objetos
UUID
.
Modelos de base de datos.
...y muchos m√°s.
Documentaci√≥n interactiva autom√°tica de la API, incluyendo 2 interfaces de usuario alternativas:
Swagger UI.
ReDoc.
Volviendo al ejemplo de c√≥digo anterior,
FastAPI
:
Validar√° que haya un
item_id
en el path para requests
GET
y
PUT
.
Validar√° que el
item_id
sea del tipo
int
para requests
GET
y
PUT
.
Si no lo es, el cliente ver√° un error √∫til y claro.
Comprobar√° si hay un par√°metro de query opcional llamado
q
(como en
http://127.0.0.1:8000/items/foo?q=somequery
) para requests
GET
.
Como el par√°metro
q
est√° declarado con
= None
, es opcional.
Sin el
None
ser√≠a requerido (como lo es el body en el caso con
PUT
).
Para requests
PUT
a
/items/{item_id}
, leer√° el body como JSON:
Comprobar√° que tiene un atributo requerido
name
que debe ser un
str
.
Comprobar√° que tiene un atributo requerido
price
que debe ser un
float
.
Comprobar√° que tiene un atributo opcional
is_offer
, que debe ser un
bool
, si est√° presente.
Todo esto tambi√©n funcionar√≠a para objetos JSON profundamente anidados.
Convertir√° de y a JSON autom√°ticamente.
Documentar√° todo con OpenAPI, que puede ser usado por:
Sistemas de documentaci√≥n interactiva.
Sistemas de generaci√≥n autom√°tica de c√≥digo cliente, para muchos lenguajes.
Proporcionar√° 2 interfaces web de documentaci√≥n interactiva directamente.
Solo tocamos los conceptos b√°sicos, pero ya te haces una idea de c√≥mo funciona todo.
Intenta cambiar la l√≠nea con:
return
{
"item_name"
:
item
.
name
,
"item_id"
:
item_id
}
...desde:
...
"item_name"
:
item
.
name
...
...a:
...
"item_price"
:
item
.
price
...
...y observa c√≥mo tu editor autocompleta los atributos y conoce sus tipos:
Para un ejemplo m√°s completo incluyendo m√°s funcionalidades, ve al
Tutorial - Gu√≠a del Usuario
.
Alerta de spoilers
: el tutorial - gu√≠a del usuario incluye:
Declaraci√≥n de
par√°metros
desde otros lugares diferentes como:
headers
,
cookies
,
campos de formulario
y
archivos
.
C√≥mo establecer
restricciones de validaci√≥n
como
maximum_length
o
regex
.
Un sistema de
Inyecci√≥n de Dependencias
muy poderoso y f√°cil de usar.
Seguridad y autenticaci√≥n, incluyendo soporte para
OAuth2
con
tokens JWT
y autenticaci√≥n
HTTP Basic
.
T√©cnicas m√°s avanzadas (pero igualmente f√°ciles) para declarar
modelos JSON profundamente anidados
(gracias a Pydantic).
Integraci√≥n con
GraphQL
usando
Strawberry
y otros paquetes.
Muchas funcionalidades extra (gracias a Starlette) como:
WebSockets
pruebas extremadamente f√°ciles basadas en HTTPX y
pytest
CORS
Sesiones de Cookies
...y m√°s.
Rendimiento
Benchmarks independientes de TechEmpower muestran aplicaciones
FastAPI
ejecut√°ndose bajo Uvicorn como
uno de los frameworks Python m√°s r√°pidos disponibles
, solo por debajo de Starlette y Uvicorn (usados internamente por FastAPI). (*)
Para entender m√°s sobre esto, ve la secci√≥n
Benchmarks
.
Dependencias
FastAPI depende de Pydantic y Starlette.
Dependencias
standard
Cuando instalas FastAPI con
pip install "fastapi[standard]"
viene con el grupo
standard
de dependencias opcionales:
Usadas por Pydantic:
email-validator
- para validaci√≥n de correos electr√≥nicos.
Usadas por Starlette:
httpx
- Requerido si deseas usar el
TestClient
.
jinja2
- Requerido si deseas usar la configuraci√≥n de plantilla predeterminada.
python-multipart
- Requerido si deseas soportar
"parsing"
de forms, con
request.form()
.
Usadas por FastAPI / Starlette:
uvicorn
- para el servidor que carga y sirve tu aplicaci√≥n. Esto incluye
uvicorn[standard]
, que incluye algunas dependencias (por ejemplo,
uvloop
) necesarias para servir con alto rendimiento.
fastapi-cli
- para proporcionar el comando
fastapi
.
Sin Dependencias
standard
Si no deseas incluir las dependencias opcionales
standard
, puedes instalar con
pip install fastapi
en lugar de
pip install "fastapi[standard]"
.
Dependencias Opcionales Adicionales
Existen algunas dependencias adicionales que podr√≠as querer instalar.
Dependencias opcionales adicionales de Pydantic:
pydantic-settings
- para la gesti√≥n de configuraciones.
pydantic-extra-types
- para tipos extra para ser usados con Pydantic.
Dependencias opcionales adicionales de FastAPI:
orjson
- Requerido si deseas usar
ORJSONResponse
.
ujson
- Requerido si deseas usar
UJSONResponse
.
Licencia
Este proyecto tiene licencia bajo los t√©rminos de la licencia MIT.