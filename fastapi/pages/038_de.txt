URL: https://fastapi.tiangolo.com/de/
================================================================================

FastAPI¬∂
========

FastAPI
FastAPI Framework, hochperformant, leicht zu erlernen, schnell zu programmieren, einsatzbereit
Dokumentation
:
https://fastapi.tiangolo.com
Quellcode
:
https://github.com/fastapi/fastapi
FastAPI ist ein modernes, schnelles (hoch performantes) Webframework zur Erstellung von APIs mit Python auf Basis von Standard-Python-Typhinweisen.
Seine Schl√ºssel-Merkmale sind:
Schnell
: Sehr hohe Leistung, auf Augenh√∂he mit
NodeJS
und
Go
(Dank Starlette und Pydantic).
Eines der schnellsten verf√ºgbaren Python-Frameworks
.
Schnell zu programmieren
: Erh√∂hen Sie die Geschwindigkeit bei der Entwicklung von Funktionen um etwa 200 % bis 300 %. *
Weniger Bugs
: Verringern Sie die von Menschen (Entwicklern) verursachten Fehler um etwa 40 %. *
Intuitiv
: Exzellente Editor-Unterst√ºtzung.
Code-Vervollst√§ndigung
√ºberall. Weniger Debuggen.
Einfach
: So konzipiert, dass es einfach zu benutzen und zu erlernen ist. Weniger Zeit f√ºr das Lesen der Dokumentation.
Kurz
: Minimieren Sie die Verdoppelung von Code. Mehrere Funktionen aus jeder Parameterdeklaration. Weniger Bugs.
Robust
: Erhalten Sie produktionsreifen Code. Mit automatischer, interaktiver Dokumentation.
Standards-basiert
: Basierend auf (und vollst√§ndig kompatibel mit) den offenen Standards f√ºr APIs:
OpenAPI
(fr√ºher bekannt als Swagger) und
JSON Schema
.
* Sch√§tzung auf Basis von Tests in einem internen Entwicklungsteam, das Produktionsanwendungen erstellt.
Sponsoren
Andere Sponsoren
Meinungen
‚Äû
[...] Ich verwende
FastAPI
heutzutage sehr oft. [...] Ich habe tats√§chlich vor, es f√ºr alle
ML-Dienste meines Teams bei Microsoft
zu verwenden. Einige davon werden in das Kernprodukt
Windows
und einige
Office
-Produkte integriert.
‚Äú
Kabir Khan -
Microsoft
(Ref)
‚Äû
Wir haben die
FastAPI
-Bibliothek genommen, um einen
REST
-Server zu erstellen, der abgefragt werden kann, um
Vorhersagen
zu erhalten. [f√ºr Ludwig]
‚Äú
Piero Molino, Yaroslav Dudin, und Sai Sumanth Miryala -
Uber
(Ref)
‚Äû
Netflix
freut sich, die Open-Source-Ver√∂ffentlichung unseres
Krisenmanagement
-Orchestrierung-Frameworks bekannt zu geben:
Dispatch
! [erstellt mit
FastAPI
]
‚Äú
Kevin Glisson, Marc Vilanova, Forest Monsen -
Netflix
(Ref)
‚Äû
Ich bin √ºbergl√ºcklich mit
FastAPI
. Es macht so viel Spa√ü!
‚Äú
Brian Okken -
Host des
Python Bytes
Podcast
(Ref)
‚Äû
Ehrlich, was Du gebaut hast, sieht super solide und poliert aus. In vielerlei Hinsicht ist es so, wie ich
Hug
haben wollte ‚Äì es ist wirklich inspirierend, jemanden so etwas bauen zu sehen.
‚Äú
Timothy Crosley -
Autor von
Hug
(Ref)
‚Äû
Wenn Sie ein
modernes Framework
zum Erstellen von REST-APIs erlernen m√∂chten, schauen Sie sich
FastAPI
an. [...] Es ist schnell, einfach zu verwenden und leicht zu erlernen [...]
‚Äú
‚Äû
Wir haben zu
FastAPI
f√ºr unsere
APIs
gewechselt [...] Ich denke, es wird Ihnen gefallen [...]
‚Äú
Ines Montani - Matthew Honnibal -
Gr√ºnder von
Explosion AI
- Autoren von
spaCy
(Ref)
-
(Ref)
‚Äû
Falls irgendjemand eine Produktions-Python-API erstellen m√∂chte, kann ich
FastAPI
w√§rmstens empfehlen. Es ist
wundersch√∂n konzipiert
,
einfach zu verwenden
und
hoch skalierbar
; es ist zu einer
Schl√ºsselkomponente
in unserer API-First-Entwicklungsstrategie geworden und treibt viele Automatisierungen und Dienste an, wie etwa unseren virtuellen TAC-Ingenieur.
‚Äú
Deon Pillsbury -
Cisco
(Ref)
Typer
, das FastAPI der CLIs
Wenn Sie eine
CLI
-Anwendung f√ºr das Terminal erstellen, anstelle einer Web-API, schauen Sie sich
Typer
an.
Typer
ist die kleine Schwester von FastAPI. Und es soll das
FastAPI der CLIs
sein. ‚å®Ô∏è üöÄ
Anforderungen
FastAPI steht auf den Schultern von Giganten:
Starlette
f√ºr die Webanteile.
Pydantic
f√ºr die Datenanteile.
Installation
fast ‚Üí
pip install fastapi
restart ‚Üª
Sie ben√∂tigen au√üerdem einen
ASGI
-Server. F√ºr die Produktumgebung beispielsweise
Uvicorn
oder
Hypercorn
.
fast ‚Üí
pip install "uvicorn[standard]"
restart ‚Üª
Beispiel
Erstellung
Erstellen Sie eine Datei
main.py
mit:
from
typing
import
Union
from
fastapi
import
FastAPI
app
=
FastAPI
()
@app
.
get
(
"/"
)
def
read_root
():
return
{
"Hello"
:
"World"
}
@app
.
get
(
"/items/
{item_id}
"
)
def
read_item
(
item_id
:
int
,
q
:
Union
[
str
,
None
]
=
None
):
return
{
"item_id"
:
item_id
,
"q"
:
q
}
Oder verwenden Sie
async def
...
Wenn Ihr Code
async
/
await
verwendet, benutzen Sie
async def
:
from
typing
import
Union
from
fastapi
import
FastAPI
app
=
FastAPI
()
@app
.
get
(
"/"
)
async
def
read_root
():
return
{
"Hello"
:
"World"
}
@app
.
get
(
"/items/
{item_id}
"
)
async
def
read_item
(
item_id
:
int
,
q
:
Union
[
str
,
None
]
=
None
):
return
{
"item_id"
:
item_id
,
"q"
:
q
}
Anmerkung
:
Wenn Sie das nicht kennen, schauen Sie sich den Abschnitt
‚ÄûIn Eile?‚Äú
√ºber
async
und
await
in der Dokumentation
an.
Starten
F√ºhren Sie den Server aus:
fast ‚Üí
uvicorn main:app --reload
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
restart ‚Üª
Was macht der Befehl
uvicorn main:app --reload
...
Der Befehl
uvicorn main:app
bezieht sich auf:
main
: die Datei
main.py
(das Python-‚ÄûModul‚Äú).
app
: das Objekt, das innerhalb von
main.py
mit der Zeile
app = FastAPI()
erzeugt wurde.
--reload
: l√§sst den Server nach Code√§nderungen neu starten. Tun Sie das nur w√§hrend der Entwicklung.
Testen
√ñffnen Sie Ihren Browser unter
http://127.0.0.1:8000/items/5?q=somequery
.
Sie erhalten die JSON-Response:
{
"item_id"
:
5
,
"q"
:
"somequery"
}
Damit haben Sie bereits eine API erstellt, welche:
HTTP-Anfragen auf den
Pfaden
/
und
/items/{item_id}
entgegennimmt.
Beide
Pfade
erhalten
GET
Operationen
(auch bekannt als HTTP
Methoden
).
Der
Pfad
/items/{item_id}
hat einen
Pfadparameter
item_id
, der ein
int
sein sollte.
Der
Pfad
/items/{item_id}
hat einen optionalen
str
Query Parameter
q
.
Interaktive API-Dokumentation
Gehen Sie nun auf
http://127.0.0.1:8000/docs
.
Sie sehen die automatische interaktive API-Dokumentation (bereitgestellt von
Swagger UI
):
Alternative API-Dokumentation
Gehen Sie jetzt auf
http://127.0.0.1:8000/redoc
.
Sie sehen die alternative automatische Dokumentation (bereitgestellt von
ReDoc
):
Beispiel Aktualisierung
√Ñndern Sie jetzt die Datei
main.py
, um den
Body
einer
PUT
-Anfrage zu empfangen.
Deklarieren Sie den Body mithilfe von Standard-Python-Typen, dank Pydantic.
from
typing
import
Union
from
fastapi
import
FastAPI
from
pydantic
import
BaseModel
app
=
FastAPI
()
class
Item
(
BaseModel
):
name
:
str
price
:
float
is_offer
:
Union
[
bool
,
None
]
=
None
@app
.
get
(
"/"
)
def
read_root
():
return
{
"Hello"
:
"World"
}
@app
.
get
(
"/items/
{item_id}
"
)
def
read_item
(
item_id
:
int
,
q
:
Union
[
str
,
None
]
=
None
):
return
{
"item_id"
:
item_id
,
"q"
:
q
}
@app
.
put
(
"/items/
{item_id}
"
)
def
update_item
(
item_id
:
int
,
item
:
Item
):
return
{
"item_name"
:
item
.
name
,
"item_id"
:
item_id
}
Der Server sollte automatisch neu geladen werden (weil Sie oben
--reload
zum Befehl
uvicorn
hinzugef√ºgt haben).
Aktualisierung der interaktiven API-Dokumentation
Gehen Sie jetzt auf
http://127.0.0.1:8000/docs
.
Die interaktive API-Dokumentation wird automatisch aktualisiert, einschlie√ülich des neuen Bodys:
Klicken Sie auf die Taste ‚ÄûTry it out‚Äú, damit k√∂nnen Sie die Parameter ausf√ºllen und direkt mit der API interagieren:
Klicken Sie dann auf die Taste ‚ÄûExecute‚Äú, die Benutzeroberfl√§che wird mit Ihrer API kommunizieren, sendet die Parameter, holt die Ergebnisse und zeigt sie auf dem Bildschirm an:
Aktualisierung der alternativen API-Dokumentation
Und nun gehen Sie auf
http://127.0.0.1:8000/redoc
.
Die alternative Dokumentation wird ebenfalls den neuen Abfrageparameter und -inhalt widerspiegeln:
Zusammenfassung
Zusammengefasst deklarieren Sie
einmal
die Typen von Parametern, Body, etc. als Funktionsparameter.
Das machen Sie mit modernen Standard-Python-Typen.
Sie m√ºssen keine neue Syntax, Methoden oder Klassen einer bestimmten Bibliothek usw. lernen.
Nur Standard-
Python+
.
Zum Beispiel f√ºr ein
int
:
item_id
:
int
oder f√ºr ein komplexeres
Item
-Modell:
item
:
Item
... und mit dieser einen Deklaration erhalten Sie:
Editor-Unterst√ºtzung, einschlie√ülich:
Code-Vervollst√§ndigung.
Typpr√ºfungen.
Validierung von Daten:
Automatische und eindeutige Fehler, wenn die Daten ung√ºltig sind.
Validierung auch f√ºr tief verschachtelte JSON-Objekte.
Konvertierung
von Eingabedaten: Aus dem Netzwerk kommend, zu Python-Daten und -Typen. Lesen von:
JSON.
Pfad-Parametern.
Abfrage-Parametern.
Cookies.
Header-Feldern.
Formularen.
Dateien.
Konvertierung
von Ausgabedaten: Konvertierung von Python-Daten und -Typen zu Netzwerkdaten (als JSON):
Konvertieren von Python-Typen (
str
,
int
,
float
,
bool
,
list
, usw.).
Datetime
-Objekte.
UUID
-Objekte.
Datenbankmodelle.
... und viele mehr.
Automatische interaktive API-Dokumentation, einschlie√ülich 2 alternativer Benutzeroberfl√§chen:
Swagger UI.
ReDoc.
Um auf das vorherige Codebeispiel zur√ºckzukommen,
FastAPI
wird:
√úberpr√ºfen, dass es eine
item_id
im Pfad f√ºr
GET
- und
PUT
-Anfragen gibt.
√úberpr√ºfen, ob die
item_id
vom Typ
int
f√ºr
GET
- und
PUT
-Anfragen ist.
Falls nicht, wird dem Client ein n√ºtzlicher, eindeutiger Fehler angezeigt.
Pr√ºfen, ob es einen optionalen Abfrageparameter namens
q
(wie in
http://127.0.0.1:8000/items/foo?q=somequery
) f√ºr
GET
-Anfragen gibt.
Da der
q
-Parameter mit
= None
deklariert ist, ist er optional.
Ohne das
None
w√§re er erforderlich (wie der Body im Fall von
PUT
).
Bei
PUT
-Anfragen an
/items/{item_id}
den Body als JSON lesen:
Pr√ºfen, ob er ein erforderliches Attribut
name
hat, das ein
str
sein muss.
Pr√ºfen, ob er ein erforderliches Attribut
price
hat, das ein
float
sein muss.
Pr√ºfen, ob er ein optionales Attribut
is_offer
hat, das ein
bool
sein muss, falls vorhanden.
All dies w√ºrde auch f√ºr tief verschachtelte JSON-Objekte funktionieren.
Automatisch von und nach JSON konvertieren.
Alles mit OpenAPI dokumentieren, welches verwendet werden kann von:
Interaktiven Dokumentationssystemen.
Automatisch Client-Code generierenden Systemen f√ºr viele Sprachen.
Zwei interaktive Dokumentation-Webschnittstellen direkt zur Verf√ºgung stellen.
Wir haben nur an der Oberfl√§che gekratzt, aber Sie bekommen schon eine Vorstellung davon, wie das Ganze funktioniert.
Versuchen Sie, diese Zeile zu √§ndern:
return
{
"item_name"
:
item
.
name
,
"item_id"
:
item_id
}
... von:
...
"item_name"
:
item
.
name
...
... zu:
...
"item_price"
:
item
.
price
...
... und sehen Sie, wie Ihr Editor die Attribute automatisch ausf√ºllt und ihre Typen kennt:
F√ºr ein vollst√§ndigeres Beispiel, mit weiteren Funktionen, siehe das
Tutorial - Benutzerhandbuch
.
Spoiler-Alarm
: Das Tutorial - Benutzerhandbuch enth√§lt:
Deklaration von
Parametern
von anderen verschiedenen Stellen wie:
Header-Felder
,
Cookies
,
Formularfelder
und
Dateien
.
Wie man
Validierungseinschr√§nkungen
wie
maximum_length
oder
regex
setzt.
Ein sehr leistungsf√§higes und einfach zu bedienendes System f√ºr
Dependency Injection
.
Sicherheit und Authentifizierung, einschlie√ülich Unterst√ºtzung f√ºr
OAuth2
mit
JWT-Tokens
und
HTTP-Basic
-Authentifizierung.
Fortgeschrittenere (aber ebenso einfache) Techniken zur Deklaration
tief verschachtelter JSON-Modelle
(dank Pydantic).
GraphQL
Integration mit
Strawberry
und anderen Bibliotheken.
Viele zus√§tzliche Funktionen (dank Starlette) wie:
WebSockets
extrem einfache Tests auf Basis von
httpx
und
pytest
CORS
Cookie Sessions
... und mehr.
Performanz
Unabh√§ngige TechEmpower-Benchmarks zeigen
FastAPI
-Anwendungen, die unter Uvicorn laufen, als
eines der schnellsten verf√ºgbaren Python-Frameworks
, nur noch hinter Starlette und Uvicorn selbst (intern von FastAPI verwendet).
Um mehr dar√ºber zu erfahren, siehe den Abschnitt
Benchmarks
.
Optionale Abh√§ngigkeiten
Wird von Pydantic verwendet:
email-validator
- f√ºr E-Mail-Validierung.
pydantic-settings
- f√ºr die Verwaltung von Einstellungen.
pydantic-extra-types
- f√ºr zus√§tzliche Typen, mit Pydantic zu verwenden.
Wird von Starlette verwendet:
httpx
- erforderlich, wenn Sie den
TestClient
verwenden m√∂chten.
jinja2
- erforderlich, wenn Sie die Standardkonfiguration f√ºr Templates verwenden m√∂chten.
python-multipart
- erforderlich, wenn Sie Formulare mittels
request.form()
‚Äûparsen‚Äú
m√∂chten.
itsdangerous
- erforderlich f√ºr
SessionMiddleware
Unterst√ºtzung.
pyyaml
- erforderlich f√ºr Starlette's
SchemaGenerator
Unterst√ºtzung (Sie brauchen das wahrscheinlich nicht mit FastAPI).
ujson
- erforderlich, wenn Sie
UJSONResponse
verwenden m√∂chten.
Wird von FastAPI / Starlette verwendet:
uvicorn
- f√ºr den Server, der Ihre Anwendung l√§dt und serviert.
orjson
- erforderlich, wenn Sie
ORJSONResponse
verwenden m√∂chten.
Sie k√∂nnen diese alle mit
pip install "fastapi[all]"
installieren.
Lizenz
Dieses Projekt ist unter den Bedingungen der MIT-Lizenz lizenziert.