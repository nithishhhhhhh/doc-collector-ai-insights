URL: https://fastapi.tiangolo.com/fr/
================================================================================

FastAPI¬∂
========

FastAPI
Framework FastAPI, haute performance, facile √† apprendre, rapide √† coder, pr√™t pour la production
Documentation
:
https://fastapi.tiangolo.com
Code Source
:
https://github.com/fastapi/fastapi
FastAPI est un framework web moderne et rapide (haute performance) pour la cr√©ation d'API avec Python, bas√© sur les annotations de type standard de Python.
Les principales fonctionnalit√©s sont :
Rapidit√©
: De tr√®s hautes performances, au niveau de
NodeJS
et
Go
(gr√¢ce √† Starlette et Pydantic).
L'un des frameworks Python les plus rapides
.
Rapide √† coder
: Augmente la vitesse de d√©veloppement des fonctionnalit√©s d'environ 200 % √† 300 %. *
Moins de bugs
: R√©duit d'environ 40 % les erreurs induites par le d√©veloppeur. *
Intuitif
: Excellente compatibilit√© avec les IDE.
Compl√©tion
compl√®te. Moins de temps pass√© √† d√©boguer.
Facile
: Con√ßu pour √™tre facile √† utiliser et √† apprendre. Moins de temps pass√© √† lire la documentation.
Concis
: Diminue la duplication de code. De nombreuses fonctionnalit√©s li√©es √† la d√©claration de chaque param√®tre. Moins de bugs.
Robuste
: Obtenez un code pr√™t pour la production. Avec une documentation interactive automatique.
Bas√© sur des normes
: Bas√© sur (et enti√®rement compatible avec) les standards ouverts pour les APIs :
OpenAPI
(pr√©c√©demment connu sous le nom de Swagger) et
JSON Schema
.
* estimation bas√©e sur des tests d'une √©quipe de d√©veloppement interne, construisant des applications de production.
Sponsors
Other sponsors
Opinions
"
[...] J'utilise beaucoup
FastAPI
ces derniers temps. [...] Je pr√©vois de l'utiliser dans mon √©quipe pour tous les
services de ML chez Microsoft
. Certains d'entre eux seront int√©gr√©s dans le coeur de
Windows
et dans certains produits
Office
.
"
Kabir Khan -
Microsoft
(ref)
"
Nous avons adopt√© la biblioth√®que
FastAPI
pour cr√©er un serveur
REST
qui peut √™tre interrog√© pour obtenir des
pr√©dictions
. [pour Ludwig]
"
Piero Molino, Yaroslav Dudin et Sai Sumanth Miryala -
Uber
(ref)
"
Netflix
a le plaisir d'annoncer la sortie en open-source de notre framework d'orchestration de
gestion de crise
:
Dispatch
! [construit avec
FastAPI
]
"
Kevin Glisson, Marc Vilanova, Forest Monsen -
Netflix
(ref)
"
Je suis tr√®s enthousiaste √† propos de
FastAPI
. C'est un bonheur !
"
Brian Okken -
Auteur du podcast
Python Bytes
(ref)
"
Honn√™tement, ce que vous avez construit a l'air super solide et √©l√©gant. A bien des √©gards, c'est comme √ßa que je voulais que
Hug
soit - c'est vraiment inspirant de voir quelqu'un construire √ßa.
"
Timothy Crosley -
Cr√©ateur de
Hug
(ref)
"
Si vous cherchez √† apprendre un
framework moderne
pour cr√©er des APIs REST, regardez
FastAPI
[...] C'est rapide, facile √† utiliser et √† apprendre [...]
"
"
Nous sommes pass√©s √†
FastAPI
pour nos
APIs
[...] Je pense que vous l'aimerez [...]
"
Ines Montani - Matthew Honnibal -
Fondateurs de
Explosion AI
- Cr√©ateurs de
spaCy
(ref)
-
(ref)
"
Si quelqu'un cherche √† construire une API Python de production, je recommande vivement
FastAPI
. Il est
bien con√ßu
,
simple √† utiliser
et
tr√®s √©volutif
. Il est devenu un
composant cl√©
dans notre strat√©gie de d√©veloppement API first et il est √† l'origine de nombreux automatismes et services tels que notre ing√©nieur virtuel TAC.
"
Deon Pillsbury -
Cisco
(ref)
Typer
, le FastAPI des
CLI
Si vous souhaitez construire une application
CLI
utilisable dans un terminal au lieu d'une API web, regardez
Typer
.
Typer
est le petit fr√®re de FastAPI. Et il est destin√© √† √™tre le
FastAPI des
CLI
. ‚å®Ô∏è üöÄ
Pr√©requis
FastAPI repose sur les √©paules de g√©ants :
Starlette
pour les parties web.
Pydantic
pour les parties donn√©es.
Installation
fast ‚Üí
pip install fastapi
restart ‚Üª
Vous aurez √©galement besoin d'un serveur ASGI pour la production tel que
Uvicorn
ou
Hypercorn
.
fast ‚Üí
pip install "uvicorn[standard]"
restart ‚Üª
Exemple
Cr√©ez
Cr√©ez un fichier
main.py
avec :
from
typing
import
Union
from
fastapi
import
FastAPI
app
=
FastAPI
()
@app
.
get
(
"/"
)
def
read_root
():
return
{
"Hello"
:
"World"
}
@app
.
get
(
"/items/
{item_id}
"
)
def
read_item
(
item_id
:
int
,
q
:
Union
[
str
,
None
]
=
None
):
return
{
"item_id"
:
item_id
,
"q"
:
q
}
Ou utilisez
async def
...
Si votre code utilise
async
/
await
, utilisez
async def
:
from
typing
import
Union
from
fastapi
import
FastAPI
app
=
FastAPI
()
@app
.
get
(
"/"
)
async
def
read_root
():
return
{
"Hello"
:
"World"
}
@app
.
get
(
"/items/
{item_id}
"
)
async
def
read_item
(
item_id
:
int
,
q
:
Union
[
str
,
None
]
=
None
):
return
{
"item_id"
:
item_id
,
"q"
:
q
}
Note
Si vous n'√™tes pas familier avec cette notion, consultez la section
"Vous √™tes press√©s ?"
√† propos de
async
et
await
dans la documentation
.
Lancez
Lancez le serveur avec :
fast ‚Üí
uvicorn main:app --reload
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
restart ‚Üª
√Ä propos de la commande
uvicorn main:app --reload
...
La commande
uvicorn main:app
fait r√©f√©rence √† :
main
: le fichier
main.py
(le "module" Python).
app
: l'objet cr√©√© √† l'int√©rieur de
main.py
avec la ligne
app = FastAPI()
.
--reload
: fait red√©marrer le serveur apr√®s des changements de code. √Ä n'utiliser que pour le d√©veloppement.
V√©rifiez
Ouvrez votre navigateur √† l'adresse
http://127.0.0.1:8000/items/5?q=somequery
.
Vous obtenez alors cette r√©ponse
JSON
:
{
"item_id"
:
5
,
"q"
:
"somequery"
}
Vous venez de cr√©er une API qui :
Re√ßoit les requ√™tes HTTP pour les
chemins
/
et
/items/{item_id}
.
Les deux
chemins
acceptent des
op√©rations
GET
(√©galement connu sous le nom de
m√©thodes
HTTP).
Le
chemin
/items/{item_id}
a un
param√®tre
item_id
qui doit √™tre un
int
.
Le
chemin
/items/{item_id}
a un
param√®tre de requ√™te
optionnel
q
de type
str
.
Documentation API interactive
Maintenant, rendez-vous sur
http://127.0.0.1:8000/docs
.
Vous verrez la documentation interactive automatique de l'API (fournie par
Swagger UI
) :
Documentation API alternative
Et maintenant, rendez-vous sur
http://127.0.0.1:8000/redoc
.
Vous verrez la documentation interactive automatique de l'API (fournie par
ReDoc
) :
Exemple plus pouss√©
Maintenant, modifiez le fichier
main.py
pour recevoir
le corps
d'une requ√™te
PUT
.
D√©clarez ce corps en utilisant les types Python standards, gr√¢ce √† Pydantic.
from
typing
import
Union
from
fastapi
import
FastAPI
from
pydantic
import
BaseModel
app
=
FastAPI
()
class
Item
(
BaseModel
):
name
:
str
price
:
float
is_offer
:
Union
[
bool
,
None
]
=
None
@app
.
get
(
"/"
)
def
read_root
():
return
{
"Hello"
:
"World"
}
@app
.
get
(
"/items/
{item_id}
"
)
def
read_item
(
item_id
:
int
,
q
:
Union
[
str
,
None
]
=
None
):
return
{
"item_id"
:
item_id
,
"q"
:
q
}
@app
.
put
(
"/items/
{item_id}
"
)
def
update_item
(
item_id
:
int
,
item
:
Item
):
return
{
"item_name"
:
item
.
name
,
"item_id"
:
item_id
}
Le serveur se recharge normalement automatiquement (car vous avez pens√© √†
--reload
dans la commande
uvicorn
ci-dessus).
Plus loin avec la documentation API interactive
Maintenant, rendez-vous sur
http://127.0.0.1:8000/docs
.
La documentation interactive de l'API sera automatiquement mise √† jour, y compris le nouveau corps de la requ√™te :
Cliquez sur le bouton "Try it out", il vous permet de renseigner les param√®tres et d'interagir directement avec l'API :
Cliquez ensuite sur le bouton "Execute", l'interface utilisateur communiquera avec votre API, enverra les param√®tres, obtiendra les r√©sultats et les affichera √† l'√©cran :
Plus loin avec la documentation API alternative
Et maintenant, rendez-vous sur
http://127.0.0.1:8000/redoc
.
La documentation alternative refl√©tera √©galement le nouveau param√®tre de requ√™te et le nouveau corps :
En r√©sum√©
En r√©sum√©, vous d√©clarez
une fois
les types de param√®tres,
le corps
de la requ√™te, etc. en tant que param√®tres de fonction.
Vous faites cela avec les types Python standard modernes.
Vous n'avez pas √† apprendre une nouvelle syntaxe, les m√©thodes ou les classes d'une biblioth√®que sp√©cifique, etc.
Juste du
Python
standard.
Par exemple, pour un
int
:
item_id
:
int
ou pour un mod√®le
Item
plus complexe :
item
:
Item
... et avec cette d√©claration unique, vous obtenez :
Une assistance dans votre IDE, notamment :
la compl√©tion.
la v√©rification des types.
La validation des donn√©es :
des erreurs automatiques et claires lorsque les donn√©es ne sont pas valides.
une validation m√™me pour les objets
JSON
profond√©ment imbriqu√©s.
Une conversion
des donn√©es d'entr√©e : venant du r√©seau et allant vers les donn√©es et types de Python, permettant de lire :
le
JSON
.
les param√®tres du chemin
.
les param√®tres de la requ√™te
.
les cookies.
les en-t√™tes
.
les formulaires
.
les fichiers
.
La conversion
des donn√©es de sortie : conversion des donn√©es et types Python en donn√©es r√©seau (au format
JSON
), permettant de convertir :
les types Python (
str
,
int
,
float
,
bool
,
list
, etc).
les objets
datetime
.
les objets
UUID
.
les mod√®les de base de donn√©es.
... et beaucoup plus.
La documentation API interactive automatique, avec 2 interfaces utilisateur au choix :
Swagger UI.
ReDoc.
Pour revenir √† l'exemple de code pr√©c√©dent,
FastAPI
permet de :
Valider que
item_id
existe dans le chemin des requ√™tes
GET
et
PUT
.
Valider que
item_id
est de type
int
pour les requ√™tes
GET
et
PUT
.
Si ce n'est pas le cas, le client voit une erreur utile et claire.
V√©rifier qu'il existe un param√®tre de requ√™te facultatif nomm√©
q
(comme dans
http://127.0.0.1:8000/items/foo?q=somequery
) pour les requ√™tes
GET
.
Puisque le param√®tre
q
est d√©clar√© avec
= None
, il est facultatif.
Sans le
None
, il serait n√©cessaire (comme l'est
le corps
de la requ√™te dans le cas du
PUT
).
Pour les requ√™tes
PUT
vers
/items/{item_id}
, de lire
le corps
en
JSON
:
V√©rifier qu'il a un attribut obligatoire
name
qui devrait √™tre un
str
.
V√©rifier qu'il a un attribut obligatoire
prix
qui doit √™tre un
float
.
V√©rifier qu'il a un attribut facultatif
is_offer
, qui devrait √™tre un
bool
, s'il est pr√©sent.
Tout cela fonctionnerait √©galement pour les objets
JSON
profond√©ment imbriqu√©s.
Convertir de et vers
JSON
automatiquement.
Documenter tout avec OpenAPI, qui peut √™tre utilis√© par :
Les syst√®mes de documentation interactifs.
Les syst√®mes de g√©n√©ration automatique de code client, pour de nombreuses langues.
Fournir directement 2 interfaces web de documentation interactive.
Nous n'avons fait qu'effleurer la surface, mais vous avez d√©j√† une id√©e de la fa√ßon dont tout cela fonctionne.
Essayez de changer la ligne contenant :
return
{
"item_name"
:
item
.
name
,
"item_id"
:
item_id
}
... de :
...
"item_name"
:
item
.
name
...
... vers :
...
"item_price"
:
item
.
price
...
... et voyez comment votre √©diteur compl√©tera automatiquement les attributs et conna√Ætra leurs types :
Pour un exemple plus complet comprenant plus de fonctionnalit√©s, voir le
Tutoriel - Guide utilisateur
.
Spoiler alert
: le tutoriel - guide utilisateur inclut :
D√©claration de
param√®tres
provenant d'autres endroits diff√©rents comme :
en-t√™tes
.
,
cookies
,
champs de formulaire
et
fichiers
.
L'utilisation de
contraintes de validation
comme
maximum_length
ou
regex
.
Un
syst√®me d'injection de d√©pendance
tr√®s puissant et facile √† utiliser .
S√©curit√© et authentification, y compris la prise en charge de
OAuth2
avec les
jetons
JWT
et l'authentification
HTTP Basic
.
Des techniques plus avanc√©es (mais tout aussi faciles) pour d√©clarer les
mod√®les
JSON
profond√©ment imbriqu√©s
(gr√¢ce √† Pydantic).
Int√©gration de
GraphQL
avec
Strawberry
et d'autres biblioth√®ques.
D'obtenir de nombreuses fonctionnalit√©s suppl√©mentaires (gr√¢ce √†  Starlette) comme :
WebSockets
de tester le code tr√®s facilement avec
requests
et
pytest
CORS
Cookie Sessions
... et plus encore.
Performance
Les benchmarks TechEmpower ind√©pendants montrent que les applications
FastAPI
s'ex√©cutant sous Uvicorn sont
parmi les frameworks existants en Python les plus rapides
, juste derri√®re Starlette et Uvicorn (utilis√©s en interne par FastAPI). (*)
Pour en savoir plus, consultez la section
Benchmarks
.
D√©pendances facultatives
Utilis√©es par Pydantic:
email-validator
- pour la validation des adresses email.
Utilis√©es par Starlette :
requests
- Obligatoire si vous souhaitez utiliser
TestClient
.
jinja2
- Obligatoire si vous souhaitez utiliser la configuration de template par d√©faut.
python-multipart
- Obligatoire si vous souhaitez supporter le
"d√©codage"
de formulaire avec
request.form()
.
itsdangerous
- Obligatoire pour la prise en charge de
SessionMiddleware
.
pyyaml
- Obligatoire pour le support
SchemaGenerator
de Starlette (vous n'en avez probablement pas besoin avec FastAPI).
Utilis√©es par FastAPI / Starlette :
uvicorn
- Pour le serveur qui charge et sert votre application.
orjson
- Obligatoire si vous voulez utiliser
ORJSONResponse
.
ujson
- Obligatoire si vous souhaitez utiliser
UJSONResponse
.
Vous pouvez tout installer avec
pip install fastapi[all]
.
Licence
Ce projet est soumis aux termes de la licence MIT.