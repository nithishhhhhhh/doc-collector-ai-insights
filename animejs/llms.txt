ANIMEJS DOCUMENTATION
====================

--- ScrollObserver ---
ScrollObserver

Callbacks
Since 4.0.0
onEnter
Triggers a function every time the
enter
threshold
is met.
Accepts
A
Function
whose first argument returns the ScrollObserver instance
Default
noop
import
{ animate, onScroll, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
entered =
0
;
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
ease
:
'linear'
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
enter
:
'bottom-=50 top'
,
leave
:
'top+=60 bottom'
,
sync
:
true
,
debug
:
true
,
onEnter
:
() =>
$value.
textContent
= ++entered,
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded sticky"
>
<
div
class
=
"large row"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
entered
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section"
>
</
div
>
</
div
>
</
div
>
Previous
Next
ScrollObserver callbacks
onEnterForward

--- Animatable ---
Animatable
Since 4.0.0
Animatable methods
Triggers animations attached to the animatable properties.
Animation methods are available on an Animatable instance
Object
.
const
animatable =
createAnimatable
(target, parameters);
┌─────────────────────┐
animatable.│
x
(
100
) │
animatable.│
y
(
50
,
500
,
'out(2)'
) ├─
Methods
animatable.│
revert
() │
└─────────────────────┘
In this section
Getters
Setters
revert()
Previous
Next
Animatable settings
Getters

--- Utilities ---
Utilities
Since 4.0.0
padStart()
V4
Pads a
Number
from the start with a string until the result reaches a given length or creates a padding
Function
with pre-defined
totalLength
and
padString
parameters.
const
paddedValue = utils.
padStart
(value, totalLength, padString);
const
padderFunction = utils.
padStart
(totalLength, padString);
Parameters
Name
Accepts
value
(opt)
String
/
Number
totalLength
Number
padString
String
Returns
A
String
if a value is provided, otherwise a
chain-able utility
Function
to pad numbers from the start:
const
padTo5WithZeros = utils.
padStart
(
5
,
'0'
);
padTo5WithZeros
(
'123'
);
// '00123'
padTo5WithZeros
(
78
);
// '00078'
padTo5WithZeros
(
'1234'
);
// '01234'
const
roundAndPad = utils.
round
(
2
).
padStart
(
5
,
'0'
);
// Round to 2 decimal places then pad to 5 characters
roundAndPad
(
12.345
);
// '12.35'
roundAndPad
(
7.8
);
// '07.80'
import
{ animate, utils }
from
'animejs'
;
animate
(
'.value'
, {
innerHTML
:
10000
,
modifier
: utils.
round
(
0
).
padStart
(
6
,
'-'
),
duration
:
100000
,
ease
:
'linear'
,
});
<
div
class
=
"large row"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"value lcd"
>
0
</
span
>
</
pre
>
</
div
>
Previous
Next
roundPad()
padEnd()

--- Animatable ---
Animatable

Methods
Since 4.0.0
Setters
Every animatable properties defined in the animatable parameters are transformed into methods and accessible on the animatable object.
When calling a method with at least one argument, the method acts as a setter, and returns the animatable instance, allowing chaining methods calls.
animatable.
property
(value, duration, easing);
Parameters
Name
Type
Description
value
Number
|
Array
<
Number
>
Defines the new value of the animatable to animate to
duration
(opt)
Number
Optional new transition duration in ms
easing
(opt)
ease
Optional new easing function of the animation
Returns
The animatable object itself, allowing for chaining of multiple property setter calls:
animatable.
x
(
100
).
y
(
200
);
// Animate x to 100 and y to 200 in 500ms
import
{ createAnimatable, utils }
from
'animejs'
;
const
$demos =
document
.
querySelector
(
'#docs-demos'
);
const
$demo = $demos.
querySelector
(
'.docs-demo.is-active'
);
let
bounds = $demo.
getBoundingClientRect
();
const
refreshBounds
= (
) => bounds = $demo.
getBoundingClientRect
();
const
circle =
createAnimatable
(
'.circle'
, {
x
:
0
,
y
:
0
,
backgroundColor
:
0
,
ease
:
'outExpo'
,
});
const
rgb = [
164
,
255
,
79
];
// Sets new durations and easings
circle.
x
(
0
,
500
,
'out(2)'
);
circle.
y
(
0
,
500
,
'out(3)'
);
circle.
backgroundColor
(rgb,
250
);
const
onMouseMove
= e => {
const
{ width, height, left, top } = bounds;
const
hw = width /
2
;
const
hh = height /
2
;
const
x = utils.
clamp
(e.
clientX
- left - hw, -hw, hw);
const
y = utils.
clamp
(e.
clientY
- top - hh, -hh, hh);
rgb[
0
] = utils.
mapRange
(x, -hw, hw,
0
,
164
);
rgb[
2
] = utils.
mapRange
(x, -hw, hw,
79
,
255
);
circle.
x
(x).
y
(y).
backgroundColor
(rgb);
// Update values
}
window
.
addEventListener
(
'mousemove'
, onMouseMove);
$demos.
addEventListener
(
'scroll'
, refreshBounds);
<
div
class
=
"large centered row"
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
div
class
=
"medium centered row"
>
<
span
class
=
"label"
>
Move cursor around
</
span
>
</
div
>
Previous
Next
Getters
revert()

--- Timeline ---
Timeline

Playback settings
Since 4.0.0
playbackEase
V4
Applies and easing function to the entire playback of the timeline.
0
──────────playbackEase──────────›
1
A ──ease──› B ──ease──› C ──ease──› D
Accepts
ease
Default
null
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
playbackEase
=
'inOut'
;
import
{ createTimeline }
from
'animejs'
;
const
tl =
createTimeline
({
playbackEase
:
'inOut(3)'
,
// this ease is applied across all children
})
.
add
(
'.circle'
, {
x
:
'15rem'
,
ease
:
'out(1)'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
,
ease
:
'out(2)'
})
.
add
(
'.square'
, {
x
:
'15rem'
,
ease
:
'out(3)'
});
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
Previous
Next
playbackRate
Timeline callbacks

--- Animation ---
Animation

Tween value types
Since 4.0.0
Color function value
WAAPI
The CSS
color
()
function can be animated with the
WAAPI
animate
()
method.
Accepts
Any
valid CSS color space syntax
is supported
import
{ waapi }
from
'animejs'
;
waapi.
animate
(
'.circle'
, {
backgroundColor
:
'color(display-p3 1.0 0.267 0.267 / 1.0)'
,
});
<
div
class
=
"large justified row"
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
Previous
Next
Color value
CSS variable

--- Animation ---
Animation

Targets
Since 1.0.0
Array of targets
Targets multiple valid
Targets
simultaneously by grouping them inside an
Array
.
Any types of targets can be grouped together
Accepts
An
Array
of
Targets
import
{ animate, utils }
from
'animejs'
;
const
[ $log ] = utils.$(
'.demo code'
);
const
vector2D = {
x
:
0
,
y
:
0
};
animate
([vector2D,
'.square'
], {
x
:
'17rem'
,
modifier
: utils.
roundPad
(
2
).
padStart
(
5
,
'0'
),
onRender
:
() =>
$log.
textContent
=
JSON
.
stringify
(vector2D),
});
<
pre
class
=
"row large centered"
>
<
code
>
{"x":"0"}
</
code
>
</
pre
>
<
div
class
=
"row medium"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
JavaScript Objects
Animatable properties

--- Animation ---
Animation
Since 1.0.0
Animatable properties
Define which properties of the
Targets
can be animated.
Animatable properties are defined in the parameters
Object
of the
animate
()
function.
animate
(
'.square'
, {
┌──────────────────┐
│
translateX
:
100
, │
│
scale
:
2
, ├─
Animatable
Properties
│
opacity
:
.5
, │
└──────────────────┘
duration
:
400
,
delay
:
250
,
ease
:
'out(3)'
,
loop
:
3
,
alternate
:
true
,
autoplay
:
false
,
onBegin
:
() =>
{},
onLoop
:
() =>
{},
onUpdate
:
() =>
{},
});
In this section
CSS Properties
CSS transforms
CSS Variables
JS Object properties
HTML Attributes
SVG Attributes
Previous
Next
Targets
CSS Properties

--- Utilities ---
Utilities
Since 4.0.0
wrap()
V4
Wraps a
Number
between a range defined with
min
and
max
values or creates a wrapping
Function
with pre-defined
min
and
max
parameters.
const
wrappedValue = utils.
wrap
(value, min, max);
const
wrapperFunction = utils.
wrap
(min, max);
Parameters
Name
Accepts
value
(opt)
Number
min
Number
max
Number
Returns
A
Number
if a value is provided, otherwise a
chain-able utility
Function
to wrap numbers between the specified
min
and
max
values:
const
wrapBetween0and100 = utils.
wrap
(
0
,
100
);
wrapBetween0and100
(
105
);
// 5
wrapBetween0and100
(
220
);
// 20
wrapBetween0and100
(-
15
);
// 85
const
wrapAndRound = utils.
wrap
(
0
,
100
).
round
(
2
);
// Wrap then round to 2 decimal places
wrapAndRound
(
105.7523
);
// 5.75
wrapAndRound
(
220.2514
);
// 20.25
import
{ animate, utils }
from
'animejs'
;
animate
(
'.normal'
, {
rotate
:
'1turn'
,
duration
:
3000
,
loop
:
true
,
ease
:
'inOut'
,
});
animate
(
'.wrapped'
, {
rotate
:
'1turn'
,
modifier
: utils.
wrap
(-
.25
,
.25
),
// Used as a modifier
duration
:
3000
,
loop
:
true
,
ease
:
'inOut'
,
});
<
div
class
=
"x-large spaced-evenly row"
>
<
div
class
=
"col"
>
<
div
class
=
"clock normal"
>
</
div
>
<
div
class
=
"label"
>
normal
</
div
>
</
div
>
<
div
class
=
"col"
>
<
div
class
=
"clock wrapped"
>
</
div
>
<
div
class
=
"label"
>
wrapped [-.25,.25]
</
div
>
</
div
>
</
div
>
Previous
Next
snap()
mapRange()

--- Draggable ---
Draggable

Methods
Since 4.0.0
animateInView()
Animate the draggable inside the viewport if positioned outside of the container.
Parameters
Name
Type
Description
duration
(opt)
Number
The duration of the animation (default
350
)
gap
(opt)
Boolean
How much extra distance from the edges of the container the draggable should be animated to
ease
(opt)
ease
The easing function applied to the animation (default
InOutQuad
Returns
The draggable itself
import
{ createDraggable }
from
'animejs'
;
const
[ $animateInView ] = utils.$(
'.animate-button'
);
const
draggable =
createDraggable
(
'.square'
, {
container
:
'.grid'
,
});
const
animateInView
= (
) => {
draggable.
animateInView
(
400
,
16
);
}
// Set the draggable position outside the container
draggable.
x
= -
24
;
draggable.
y
=
72
;
$animateInView.
addEventListener
(
'click'
, animateInView);
<
div
class
=
"medium padded show-bounds grid square-grid animate-in-view"
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
<
div
class
=
"large row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button animate-button"
>
Animate in view
</
button
>
</
fieldset
>
</
div
>
Previous
Next
setY()
scrollInView()

--- Scope ---
Scope

Methods
Since 4.0.0
revert()
Reverts all Anime.js objects that have been declared inside a Scope and call the constructors cleanup functions if needed.
Returns
The Scope itself
import
{ utils, stagger, createScope, createTimeline }
from
'animejs'
;
const
[ $button1, $button2 ] = utils.$(
'.revert'
);
function
onMouseEnter
(
) {
animate
(
this
, {
scale
:
2
,
duration
:
250
}) }
function
onMouseLeave
(
) {
animate
(
this
, {
scale
:
1
,
duration
:
750
}) }
const
scopeConstructor
= scope => {
const
circles = utils.$(
'.circle'
);
circles.
forEach
(
(
$circle, i
) =>
{
animate
($circle, {
opacity
:
.25
,
loop
:
true
,
alternate
:
true
,
duration
:
500
,
delay
: i *
100
,
ease
:
'inOut(3)'
,
});
$circle.
addEventListener
(
'mouseenter'
, onMouseEnter);
$circle.
addEventListener
(
'mouseleave'
, onMouseLeave);
});
// Cleanup function to take care of removing event listeners on revert
return
() =>
{
circles.
forEach
($circle => {
// Anime.js instances are automatically reverted by the Scope
$circle.
removeEventListener
(
'mouseenter'
, onMouseEnter);
$circle.
removeEventListener
(
'mouseleave'
, onMouseLeave);
});
}
}
const
scope1 =
createScope
({
root
:
'.row-1'
}).
add
(scopeConstructor);
const
scope2 =
createScope
({
root
:
'.row-2'
}).
add
(scopeConstructor);
const
revertScope1
= (
) => scope1.
revert
();
const
revertScope2
= (
) => scope2.
revert
();
$button1.
addEventListener
(
'click'
, revertScope1);
$button2.
addEventListener
(
'click'
, revertScope2);
<
div
class
=
"medium justified row row-1"
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
div
class
=
"medium justified row row-2"
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button revert"
>
Revert row 1
</
button
>
<
button
class
=
"button revert"
>
Revert row 2
</
button
>
</
fieldset
>
</
div
>
Previous
Next
add()
refresh()

--- Web Animation API ---
Web Animation API
Since 4.0.0
API differences with native WAAPI
This chapter covers all major differences between the native Web Animation API
element.
animate
()
syntax and Anime.js
waapi.
animate
(element)
syntax.
Anime.js
waapi.
animate
(
┌────────────┐
│
'.square'
, ├─
Targets
└────────────┘
{
┌──────────────────┐
│
x
:
100
, │
│
y
:
50
, ├─
Keyframes
Values
│
opacity
:
.5
, │
└──────────────────┘
┌──────────────────┐
│
loop
:
3
, │
│
alternate
:
true
, ├─
Playback
Settings
│
ease
:
'out'
, │
└──────────────────┘
});
WAAPI
const
$square =
document
.
querySelector
(
'.square'
);
┌────────────┐
│ $square ├─
Targets
└────────────┘
.
animate
({
┌──────────────────────────┐
│
translate
:
'100px 50px'
, ├─
Keyframes
Values
│
opacity
:
.5
, │
└──────────────────────────┘
}, {
┌──────────────────────────┐
│
ieterations
:
4
, │
│
direction
:
'alternate'
, ├─
Playback
Settings
│
easing
:
'ease-out'
, │
└──────────────────────────┘
});
In this section
iterations
direction
easing
finished
Previous
Next
Improvements to the Web Animation API
iterations

--- Draggable ---
Draggable

Axes parameters
Since 4.0.0
mapTo
Maps the axis value to a different property of the element.
Accepts
String
Default
null
import
{ createDraggable, utils }
from
'animejs'
;
utils.
set
(
'.square'
, {
z
:
100
});
createDraggable
(
'.square'
, {
x
: {
mapTo
:
'rotateY'
},
y
: {
mapTo
:
'z'
},
});
<
div
class
=
"large grid centered perspective square-grid"
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
Previous
Next
modifier
Draggable settings

--- Timeline ---
Timeline
Since 2.0.0
Timeline playback settings
Specify the timings and behaviours of a timeline.
Timeline playback settings are defined directly in the
createTimeline
()
parameters
Object
.
createTimeline
({
┌───────────────────┐
│
defaults
: { │
│
ease
:
'out(3)'
, │
│
duration
:
500
, │
│ }, ├─
Playback
Settings
│
loop
:
3
, │
│
alternate
:
true
, │
│
autoplay
:
false
, │
└───────────────────┘
onBegin
:
() =>
{},
onLoop
:
() =>
{},
onUpdate
:
() =>
{},
});
In this section
defaults
delay
loop
loopDelay
alternate
reversed
autoplay
frameRate
playbackRate
playbackEase
Previous
Next
Time position
defaults

--- Scope ---
Scope
Since 4.0.0
Scope properties
const
scope =
createScope
();
┌────────┐
scope.│methods │
scope.│root ├─
Properties
scope.│matches │
└────────┘
Name
Description
data
An object used to store variables associated with the scope. Every properties added to it are cleared when the scope is reverted (
Object
)
defaults
Gets the default parameters for this scope (
Object
)
root
Gets the root element for DOM operations in this scope (
Document
|
HTMLElement
)
constructors
Gets the array of constructor functions added to this scope (
Array
<
Function
>
)
revertConstructors
Gets the array of revert constructor functions (
Array
<
Function
>
)
revertibles
Gets the array of revertible objects created within this scope (
Array
<
Tickable
|
Animatable
|
Draggable
|
ScrollObserver
|
Scope
>
)
methods
Gets the object containing methods added to this scope (
Object
)
matches
Gets the object containing current media query match results (
Object
)
mediaQueryLists
Gets the object containing MediaQueryList objects for this scope (
Object
)
Previous
Next
Scope methods
Stagger

--- Timer ---
Timer

Playback settings
Since 4.0.0
duration
Defines the duration in milliseconds of the timer.
Setting
0
to a duration completes the timer instantly upon play.
Accepts
A
Number
equal to or greater than
0
Duration values higher than
1e12
are clamped internally to
1e12
(Or approximatively 32 years).
Default
Infinity
import
{ createTimer, utils }
from
'animejs'
;
const
[ $time ] = utils.$(
'.time'
);
createTimer
({
duration
:
2000
,
onUpdate
:
self
=>
$time.
innerHTML
= self.
currentTime
});
<
div
class
=
"large centered row"
>
<
div
class
=
"half col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
Previous
Next
delay
loop

--- Engine ---
Engine

Methods
Since 4.0.0
update()
Manually ticks the engine when
engine.
useDefaultMainLoop
is set to false.
engine.
useDefaultMainLoop
=
false
;
engine.
update
();
// Manual update call
Useful for integrating Anime.js in projects with existing animation loops, such as
Three.js
or game engines.
Returns
Engine
import
{ engine, createTimeline, utils }
from
'animejs'
;
// Prevents Anime.js from using its own loop
engine.
useDefaultMainLoop
=
false
;
const
[ $container ] = utils.$(
'.container'
);
const
color = utils.
get
($container,
'color'
);
const
{ width, height } = $container.
getBoundingClientRect
();
// Three.js setup, note that the global THREE object is defined globally
const
renderer =
new
THREE
.
WebGLRenderer
({
alpha
:
true
});
const
scene =
new
THREE
.
Scene
();
const
camera =
new
THREE
.
PerspectiveCamera
(
65
, width / height,
0.1
,
20
);
const
geometry =
new
THREE
.
BoxGeometry
(
1
,
1
,
1
);
const
material =
new
THREE
.
MeshBasicMaterial
({ color,
wireframe
:
true
});
renderer.
setSize
(width, height);
renderer.
setPixelRatio
(
window
.
devicePixelRatio
);
$container.
appendChild
(renderer.
domElement
);
camera.
position
.
z
=
5
;
function
createAnimatedCube
(
) {
const
cube =
new
THREE
.
Mesh
(geometry, material);
const
x = utils.
random
(-
10
,
10
,
2
);
const
y = utils.
random
(-
5
,
5
,
2
);
const
z = [-
10
,
7
];
const
r
= (
) => utils.
random
(-
Math
.
PI
*
2
,
Math
.
PI
*
2
,
3
);
const
duration =
4000
;
createTimeline
({
delay
: utils.
random
(
0
, duration),
defaults
: {
loop
:
true
, duration,
ease
:
'inSine'
, },
})
.
add
(cube.
position
, { x, y, z },
0
)
.
add
(cube.
rotation
, {
x
: r,
y
: r,
z
: r },
0
)
.
init
();
scene.
add
(cube);
}
for
(
let
i =
0
; i <
40
; i++) {
createAnimatedCube
();
}
function
render
(
) {
engine.
update
();
// Manually update Anime.js engine
renderer.
render
(scene, camera);
// Render Three.js scene
}
// Calls the builtin Three.js animation loop
renderer.
setAnimationLoop
(render);
<
div
class
=
"container large grid square-grid"
>
</
div
>
Previous
Next
Engine methods
pause()

--- Scope ---
Scope
Since 4.0.0
Add constructor function
A constructor function is called inside the Scope's context immediately after being passed as a callback of the Scope's
add
()
method.
The Scope registers and keeps track of all animations, timers, timelines, animatables, draggables, onScrolls, and even other scopes declared inside the constructor function.
scope.
add
(constructorFunction);
Constructor function argument
Name
Type
self
The current Scope instance
Returns
(optional)
A cleanup
Function
called when the Scope is reverted or when a media query changes.
import
{ utils, animate, createScope, createDraggable }
from
'animejs'
;
createScope
({
mediaQueries
: {
isSmall
:
'(max-width: 200px)'
},
defaults
: {
ease
:
'linear'
},
})
.
add
(
self
=>
{
/* Media queries state are accessible on the matches property */
const
{ isSmall } = self.
matches
;
/* The $() utility method is also scoped */
const
[ $square ] = utils.$(
'.square'
);
if
(self.
matches
.
isSmall
) {
/* Only animate the square when the iframe is small */
animate
($square, {
rotate
:
360
,
loop
:
true
,
});
}
else
{
/* Only create the draggable when the iframe is large enough */
$square.
classList
.
add
(
'draggable'
);
createDraggable
($square, {
container
:
document
.
body
,
});
}
return
() =>
{
/* Removes the class 'draggable' when the scope reverts itself */
$square.
classList
.
remove
(
'draggable'
);
}
});
<
div
class
=
"iframe-content resizable"
>
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
</
div
>
Previous
Next
Scope
Register method function

--- Animation ---
Animation

Playback settings
Since 4.0.0
alternate
V4
Defines if the direction of the animation alternates on each iteration when the
loop
parameter is set to
true
or superior to
1
.
Accepts
Boolean
Default
false
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
alternate
=
true
;
import
{ animate }
from
'animejs'
;
animate
(
'.dir-normal'
, {
x
:
'17rem'
,
alternate
:
false
,
// Default
loop
:
1
,
});
animate
(
'.dir-alternate'
, {
x
:
'17rem'
,
alternate
:
true
,
loop
:
1
,
// Required to see the second iteration
});
animate
(
'.dir-alternate-reverse'
, {
x
:
'17rem'
,
alternate
:
true
,
reversed
:
true
,
loop
:
1
,
});
<
div
class
=
"medium row"
>
<
div
class
=
"circle dir-normal"
>
</
div
>
<
div
class
=
"padded label"
>
alternate: false
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"circle dir-alternate"
>
</
div
>
<
div
class
=
"padded label"
>
alternate: true
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"circle dir-alternate-reverse"
>
</
div
>
<
div
class
=
"padded label"
>
alternate: true, reversed: true
</
div
>
</
div
>
Previous
Next
loopDelay
reversed

--- ScrollObserver ---
ScrollObserver

Callbacks
Since 4.0.0
onLeaveBackward
Triggers a function every time the
leave
threshold
is met by scrolling backward.
Accepts
A
Function
whose first argument returns the ScrollObserver instance
Default
noop
import
{ animate, onScroll, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
exits =
0
;
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
ease
:
'linear'
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
enter
:
'bottom-=50 top'
,
leave
:
'top+=60 bottom'
,
sync
:
true
,
debug
:
true
,
onLeaveBackward
:
() =>
$value.
textContent
= ++exits,
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded sticky"
>
<
div
class
=
"large row"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
exits
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section"
>
</
div
>
</
div
>
</
div
>
Previous
Next
onLeaveForward
onUpdate

--- Timer ---
Timer
Since 4.0.0
Timer methods
Provide control over the timing, behaviour and progression of a timer.
Timer methods are available on a Timer instance
Object
.
const
timer =
createTimer
(parameters);
┌──────────┐
timer.│
pause
() │
timer.│
play
() ├─
Methods
timer.│
restart
() │
└──────────┘
In this section
play()
reverse()
pause()
restart()
alternate()
resume()
complete()
cancel()
revert()
seek()
stretch()
Previous
Next
Timer callbacks
play()

--- Draggable ---
Draggable

Callbacks
Since 4.0.0
onGrab
Executes a function when the element is grabbed.
Accepts
A
Function
whose first argument returns the draggable itself
Default
noop
import
{ createDraggable, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
grabs =
0
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
onGrab
:
() =>
$value.
textContent
= ++grabs
});
<
div
class
=
"large padded grid square-grid"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
grabs
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
Previous
Next
Draggable callbacks
onDrag

--- Stagger ---
Stagger
Since 4.0.0
Timeline positions staggering
V4
The timeline
add
()
position argument accepts function-based values, enabling the use of the stagger function returned by the
stagger
()
method when positioning a multi-target animation.
This results in each target having creating its own animation to a staggered position, increasing by a set number of milliseconds for each subsequent target.
Callbacks defined on the staggered animation are also staggered and are called for every target.
The
start
property of the
stagger
()
parameter object allows to define the starting value of the stagger, and accepts the same values as the timeline
add
()
position argument.
import
{ createTimeline, stagger, utils }
from
'animejs'
;
const
tl =
createTimeline
();
const
onComplete
= (
{ targets }
) => {
utils.
set
(targets, {
color
:
'var(--hex-red)'
});
}
tl
.
add
(
'.circle'
, {
x
:
'15rem'
, onComplete })
.
label
(
'circle completes'
)
.
add
([
'.triangle'
,
'.square'
], {
x
:
'15rem'
,
onComplete,
// Callbacks are aslo staggered
},
stagger
(
500
, {
start
:
'circle completes-=500'
}));
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
Previous
Next
Values staggering
Stagger value types

--- Timeline ---
Timeline
Since 2.0.0
Time position
Specifies the time at which a timeline child is inserted into a timeline.
If no position is defined, the child will be positioned at the end of the timeline.
The time position is defined as the last parameter of the following methods:
timeline.
add
(target, animationParameters, position);
timeline.
add
(timerParameters, position);
timeline.
call
(callbackFunction, position);
timeline.
sync
(labelName, position);
timeline.
label
(labelName, position);
Time position types
Type
Example
Description
Absolute
500
Position the element at exactly 100ms in the timeline
Addition
'+=100'
Position the element 100ms after the last element
Subtraction
'-=100'
Position the element 100ms before the last element end
Multiplier
'*=.5'
Position the element at half of the total element duration
Previous end
position
'<'
Position the element at the end position of the previous element
Previous start
position
'<<'
Position the element at the start position of the previous element
Combined
'<<+=250'
Position the element 250ms after the beginning position of the previous element
Label
'My Label'
Position the element at the
'My Label'
element
Stagger
stagger
(
10
)
Stagger the elements position by
10
import
{ createTimeline }
from
'animejs'
;
const
tl =
createTimeline
()
.
label
(
'start'
,
0
)
.
add
(
'.square'
, {
x
:
'15rem'
,
duration
:
500
,
},
500
)
.
add
(
'.circle'
, {
x
:
'15rem'
,
duration
:
500
,
},
'start'
)
.
add
(
'.triangle'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
duration
:
500
,
},
'<-=250'
);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
Previous
Next
Call functions
Timeline playback settings

--- Timer ---
Timer

Methods
Since 4.0.0
revert()
Cancels the timer, sets its
currentTime
to
0
and reverts the linked
onScroll
()
instance if necessary.
Use
.
revert
()
when you want to completely stop and destroy an timer.
Returns
The timer itself
Can be chained with other timer methods.
import
{ createTimer, utils }
from
'animejs'
;
const
[ $playButton ] = utils.$(
'.play'
);
const
[ $revertButton ] = utils.$(
'.revert'
);
const
[ $time ] = utils.$(
'.time'
);
const
timer =
createTimer
({
onUpdate
:
self
=>
$time.
innerHTML
= self.
currentTime
});
const
playTimer
= (
) => timer.
play
();
const
revertTimer
= (
) => {
timer.
revert
();
$time.
innerHTML
= timer.
currentTime
}
$playButton.
addEventListener
(
'click'
, playTimer);
$revertButton.
addEventListener
(
'click'
, revertTimer);
<
div
class
=
"large centered row"
>
<
div
class
=
"half col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button play"
>
Play
</
button
>
<
button
class
=
"button revert"
>
Revert
</
button
>
</
fieldset
>
</
div
>
Previous
Next
cancel()
seek()

--- Utilities ---
Utilities
Since 4.0.0
lerp()
V4
Performs a linear interpolation between two values.
The closer the amount is to
1
, the closer the result is to the
end
value.
The
utils.
lerp
()
function is
frame rate independent
.
const
lerped = utils.
lerp
(start, end, amount);
Parameters
Name
Accepts
start
Number
end
Number
amount
Number
[
0
-
1
]
Returns
Number
utils.
lerp
(
0
,
100
,
0
);
// 0
utils.
lerp
(
0
,
100
,
0.5
);
// 50
utils.
lerp
(
0
,
100
,
1
);
// 100
import
{ animate, createTimer, utils }
from
'animejs'
;
const
[ $input ] = utils.$(
'.input'
);
const
[ $lerped ] = utils.$(
'.lerped'
);
const
[ $lerped15fps ] = utils.$(
'.lerped-15'
);
animate
($input, {
rotate
:
'1000turn'
,
modifier
: utils.
snap
(
.25
),
duration
:
4000000
,
loop
:
true
,
ease
:
'linear'
,
});
const
loop =
createTimer
({
onUpdate
:
clock
=>
{
const
sourceRotate = utils.
get
($input,
'rotate'
,
false
);
const
lerpedRotate = utils.
get
($lerped,
'rotate'
,
false
);
utils.
set
($lerped, {
rotate
: utils.
lerp
(lerpedRotate, sourceRotate,
.075
) +
'turn'
});
}
});
const
loop15fps =
createTimer
({
frameRate
:
15
,
onUpdate
:
clock
=>
{
const
sourceRotate = utils.
get
($input,
'rotate'
,
false
);
const
lerpedRotate = utils.
get
($lerped15fps,
'rotate'
,
false
);
utils.
set
($lerped15fps, {
rotate
: utils.
lerp
(lerpedRotate, sourceRotate,
.0725
, clock) +
'turn'
});
}
});
<
div
class
=
"x-large spaced-evenly row"
>
<
div
class
=
"col"
>
<
div
class
=
"clock input"
>
</
div
>
<
div
class
=
"label"
>
input
</
div
>
</
div
>
<
div
class
=
"col"
>
<
div
class
=
"clock lerped"
>
</
div
>
<
div
class
=
"label"
>
lerped
</
div
>
</
div
>
<
div
class
=
"col"
>
<
div
class
=
"clock lerped-15"
>
</
div
>
<
div
class
=
"label"
>
lerped 15fps
</
div
>
</
div
>
</
div
>
Previous
Next
sync()
round()

--- Animatable ---
Animatable

Methods
Since 4.0.0
revert()
Reverts all the animatable properties to their original values and cleanup the CSS inline styles.
Use
revert
()
when you want to completely stop and destroy an animatable.
Returns
The animatable itself
Can be chained with other animatable methods.
const
$demos =
document
.
querySelector
(
'#docs-demos'
);
const
$demo = $demos.
querySelector
(
'.docs-demo.is-active'
);
const
[ $revertButton ] = utils.$(
'.revert'
);
let
bounds = $demo.
getBoundingClientRect
();
const
refreshBounds
= (
) => bounds = $demo.
getBoundingClientRect
();
const
circles =
createAnimatable
(
'.circle'
, {
x
:
stagger
(
50
, {
from
:
'center'
,
start
:
100
}),
y
:
stagger
(
200
, {
from
:
'center'
,
start
:
200
}),
ease
:
'out(4)'
,
});
const
onMouseMove
= e => {
const
{ width, height, left, top } = bounds;
const
hw = width /
2
;
const
hh = height /
2
;
const
x = utils.
clamp
(e.
clientX
- left - hw, -hw, hw);
const
y = utils.
clamp
(e.
clientY
- top - hh, -hh, hh);
circles.
x
(x).
y
(y);
}
const
revertAnimatable
= (
) => {
window
.
removeEventListener
(
'mousemove'
, onMouseMove);
circles.
revert
();
}
$revertButton.
addEventListener
(
'click'
, revertAnimatable);
window
.
addEventListener
(
'mousemove'
, onMouseMove);
$demos.
addEventListener
(
'scroll'
, refreshBounds);
<
div
class
=
"large centered row"
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button revert"
>
Revert
</
button
>
</
fieldset
>
</
div
>
Previous
Next
Setters
Animatable properties

--- Engine ---
Engine
Since 4.0.0
Engine properties
import
{ engine }
from
'animejs'
;
┌───────────────────────┐
engine.│deltaTime │
engine.│useDefaultMainLoop ├─
Properties
engine.│pauseOnDocumentHidden │
└───────────────────────┘
Name
Description
timeUnit
Gets and sets the unit of time to use for time-related values like
duration
and
delay
(
'ms'
|
's'
)
currentTime
Gets the current time of the engine (
Number
)
deltaTime
Gets the time elapsed since the last frame (
Number
)
precision
Gets and sets how many decimal places to round string values to during an animation (
Number
)
speed
Gets or sets the global playback rate for all animations (
Number
)
fps
Gets or sets the global frame rate for all animations (
Number
)
useDefaultMainLoop
Gets or sets whether the engine uses its default main loop (
Boolean
)
pauseOnDocumentHidden
Gets or sets whether the engine pauses when the tab is hidden (
Boolean
)
Previous
Next
Engine methods
Engine defaults

--- Timer ---
Timer

Playback settings
Since 4.0.0
loopDelay
Defines the delay in milliseconds between loops.
Accepts
A
Number
equal to or greater than
0
Default
0
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
loopDelay
=
500
;
import
{ createTimer, utils }
from
'animejs'
;
const
[ $loops ] = utils.$(
'.loops'
);
const
[ $time ] = utils.$(
'.time'
);
let
loops =
0
;
createTimer
({
loop
:
true
,
loopDelay
:
750
,
duration
:
250
,
onLoop
:
() =>
$loops.
innerHTML
= ++loops,
onUpdate
:
self
=>
$time.
innerHTML
= utils.
clamp
(self.
iterationCurrentTime
,
0
,
250
)
});
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
loops count
</
span
>
<
span
class
=
"loops value"
>
0
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
iteration time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
Previous
Next
loop
alternate

--- Animatable ---
Animatable

Settings
Since 4.0.0
duration
Specifies the duration in milliseconds for the transition to the animated value of the property.
Accepts
A
Number
equal to or greater than
0
A
Function based value
that returns a
Number
equal to or greater than
0
Default
1000
import
{ createAnimatable, utils, stagger }
from
'animejs'
;
const
$demos =
document
.
querySelector
(
'#docs-demos'
);
const
$demo = $demos.
querySelector
(
'.docs-demo.is-active'
);
let
bounds = $demo.
getBoundingClientRect
();
const
refreshBounds
= (
) => bounds = $demo.
getBoundingClientRect
();
const
circles =
createAnimatable
(
'.circle'
, {
x
:
0
,
// Imediatly set the value without animation
y
:
stagger
(
200
, {
from
:
'center'
,
start
:
200
}),
ease
:
'out(4)'
,
});
const
onMouseMove
= e => {
const
{ width, height, left, top } = bounds;
const
hw = width /
2
;
const
hh = height /
2
;
const
x = utils.
clamp
(e.
clientX
- left - hw, -hw, hw);
const
y = utils.
clamp
(e.
clientY
- top - hh, -hh, hh);
circles.
x
(x).
y
(y);
}
window
.
addEventListener
(
'mousemove'
, onMouseMove);
$demos.
addEventListener
(
'scroll'
, refreshBounds);
<
div
class
=
"medium centered row"
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
div
class
=
"small centered row"
>
<
span
class
=
"label"
>
<
br
>
<
br
>
<
br
>
Move cursor around
</
span
>
</
div
>
Previous
Next
unit
ease

--- Scope ---
Scope
V4
Anime.js instances declared inside a Scope can react to media queries, use custom root elements, share default parameters, and be reverted in batch, streamlining work in responsive and component-based environments.
Scopes are created using the
createScope
()
function.
import
{ createScope }
from
'animejs'
;
const
scope =
createScope
(parameters);
Parameters
Name
Accepts
parameters
(opt)
Scope parameters
Returns
Scope
import
{ animate, utils, createScope }
from
'animejs'
;
createScope
({
mediaQueries
: {
isSmall
:
'(max-width: 200px)'
,
reduceMotion
:
'(prefers-reduced-motion)'
,
}
})
.
add
(
self
=>
{
const
{ isSmall, reduceMotion } = self.
matches
;
if
(isSmall) {
utils.
set
(
'.square'
, {
scale
:
.5
});
}
animate
(
'.square'
, {
x
: isSmall ?
0
: [
'-35vw'
,
'35vw'
],
y
: isSmall ? [
'-40vh'
,
'40vh'
] :
0
,
loop
:
true
,
alternate
:
true
,
duration
: reduceMotion ?
0
: isSmall ?
750
:
1250
});
});
<
div
class
=
"iframe-content resizable"
>
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
</
div
>
In this section
Add constructor function
Register method function
Parameters
Methods
Properties
Previous
Next
ScrollObserver
Add constructor function

--- Utilities ---
Utilities
Since 2.0.0
get()
Returns the current value of a target's property, with optional unit conversion or removal.
const
value = utils.
get
(target, property, unit);
Parameters
Name
Accepts
Description
target
Targets
The targeted element
property
String
A valid property name of the target
unit
(opt)
String
|
Boolean
Strip the unit if set to
false
or convert the unit if a valid unit
String
is passed
Returns
The returned property value type or the following types if the conditions are met:
Type
Condition
String
The target is an
HTMLElement
or
SVGElement
and the
unit
parameter is not set to
false
or set to a valid unit
String
Number
The target is an
HTMLElement
or
SVGElement
and the
unit
parameter set to
false
import
{ animate, utils }
from
'animejs'
;
const
[ $raw, $rem, $num ] = utils.$(
'.value'
);
const
[ $sq1, $sq2, $sq3 ] = utils.$(
'.square'
);
const
getValues
= (
) => {
// Return the raw parsed value (string with px)
$raw.
textContent
= utils.
get
($sq1,
'x'
);
// Return the converted value with unit (string with rem)
$rem.
textContent
= utils.
get
($sq2,
'x'
,
'rem'
);
// Return the raw value with its unit removed (number)
$num.
textContent
= utils.
get
($sq3,
'x'
,
false
);
}
animate
(
'.square'
, {
x
:
270
,
loop
:
true
,
alternate
:
true
,
onUpdate
: getValues
});
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
<
span
class
=
"raw value"
>
</
span
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
<
span
class
=
"rem value"
>
</
span
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
<
span
class
=
"num value"
>
</
span
>
</
div
>
</
div
>
Previous
Next
$()
set()

--- Timeline ---
Timeline

Methods
Since 4.0.0
remove()
V4
Removes animations, timers, timelines, targets or specific tween properties from the timeline.
The timeline will pauses automatically if all targets, animations, timers and timelines are removed.
Removing items from a timeline doesn't affect its duration. If you need to change the shape and duration of the timeline, you should create a new timeline instead.
Removing animations, timers or timelines
timeline.
remove
([animation, timer, timeline]);
Parameter
Accepts
object
Animation
|
Timer
|
Timeline
position
(opt)
Time position
Removing targets
timeline.
remove
(targets);
Parameter
Accepts
targets
Targets
Removing targets properties
timeline.
remove
(targets, propertyName);
Parameter
Accepts
targets
Targets
propertyName
A valid
Animatable properties
String
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $removeA, $removeB, $removeC ] = utils.$(
'.button'
);
const
animation =
animate
(
'.circle'
, {
x
:
'15rem'
,
scale
: [
1
,
.5
,
1
] });
const
tl =
createTimeline
({
loop
:
true
,
alternate
:
true
})
.
sync
(animation)
.
add
(
'.triangle'
, {
x
:
'15rem'
,
rotate
:
360
},
100
)
.
add
(
'.square'
, {
x
:
'15rem'
},
200
);
const
removeAnimation
= (
) => tl.
remove
(animation);
const
removeTarget
= (
) => tl.
remove
(
'.square'
);
const
removeRotate
= (
) => tl.
remove
(
'.triangle'
,
'rotate'
);
$removeA.
addEventListener
(
'click'
, removeAnimation);
$removeB.
addEventListener
(
'click'
, removeTarget);
$removeC.
addEventListener
(
'click'
, removeRotate);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button"
>
Remove anim
</
button
>
<
button
class
=
"button"
>
Remove target
</
button
>
<
button
class
=
"button"
>
remove tween
</
button
>
</
fieldset
>
</
div
>
Previous
Next
label()
call()

--- Web Animation API ---
Web Animation API

API differences
Since 4.0.0
easing
The
easing
parameter is replaced by the
ease
parameter and accepts any easing
Function
.
The default easing is
'out(2)'
instead of
'linear'
.
On top of all the built-in WAAPI easing values, Anime.js offers a shorter syntax, and allow configuring the power of the
'out'
,
'in'
and
'inOut'
eases.
easing
ease
'ease-out'
'out'
|
'out(power)'
'ease-in'
'in'
|
'in(power)'
'ease-in-out'
'inOut'
|
'inOut(power)'
'cubic-bezier(x1, y1, x2, y2)'
'cubicBezier(x1, y1, x2, y2)'
Syntax comparison
Anime.js
waapi.
animate
(
'.square'
, {
x
:
100
,
ease
: eases.
outElastic
(
1.25
,
.1
)
});
WAAPI equivalent
const
targets =
document
.
querySelectorAll
(
'.square'
);
targets.
forEach
(
(
$el, i
) =>
{
$el.
animate
({
translate
:
'100px'
,
}, {
fill
:
'forwards'
,
duration
:
1000
,
easing
:
'linear(0, 0.0874, 0.2047, 0.3429, 0.4929, 0.6464, 0.7961, 0.9357, 1.06, 1.1656, 1.25, 1.3122, 1.3521, 1.371, 1.3706, 1.3536, 1.3227, 1.2812, 1.2323, 1.1793, 1.125, 1.0721, 1.0227, 0.9788, 0.9415, 0.9116, 0.8896, 0.8755, 0.8688, 0.869, 0.875, 0.8859, 0.9006, 0.9179, 0.9366, 0.9558, 0.9745, 0.992, 1.0075, 1.0207, 1.0313, 1.039, 1.044, 1.0464, 1.0463, 1.0442, 1.0403, 1.0351, 1.029, 1.0224, 1.0156, 1.009, 1.0028, 0.9973, 0.9927, 0.989, 0.9862, 0.9844, 0.9836, 0.9844, 0.9857, 0.9876, 0.9897, 0.9921, 0.9945, 0.9968, 0.999, 1.0009, 1.0026, 1.0039, 1.0049, 1.0055, 1.0058, 1.0055, 1.005, 1.0044, 1.0036, 1.0028, 1.002, 1.0011, 1.0004, 0.9997, 0.9991, 0.9986, 0.9983, 0.9981, 0.998, 0.9982, 0.9984, 0.9987, 0.999, 0.9993, 0.9996, 0.9999, 1.0001, 1.0003, 1)'
})
});
Accepts
Any valid
easing
String
name or
Function
import
{ waapi, stagger }
from
'animejs'
;
waapi.
animate
(
'.square'
, {
translate
:
'17rem'
,
ease
:
'inOut(6)'
,
delay
:
stagger
(
100
)
});
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
direction
finished

--- ScrollObserver ---
ScrollObserver
Since 4.0.0
ScrollObserver thresholds
Determines the points at which actions are triggered based on the scrolling position of a target element within a container.
Thresholds are defined with the
enter
and
leave
properties of the
onScroll
()
parameters
Object
.
animate
(
'.square'
, {
x
:
100
,
autoplay
:
onScroll
({
container
:
'.container'
,
target
:
'.section'
,
axis
:
'y'
,
┌──────────────────────────┐
│
enter
:
'bottom top'
, ├─
Thresholds
│
leave
:
'top bottom'
, │
└──────────────────────────┘
sync
:
true
,
onEnter
:
() =>
{},
onLeave
:
() =>
{},
onUpdate
:
() =>
{},
})
});
The conditions that determine when an element enters or leaves the viewport are specified by comparing two pairs of values: the target and container
start
and
end
values.
┌────────────────────────────────┐-
Container
Start
│ │
│
Container
│
│ │
│ ┌──────────┐----------│-
Target
Start
│ │ │ │
│ │
Target
│ │
└────────────────────────────────┘-
Container
End
│ │
└──────────┘------------
Target
End
Different syntaxes
Conditions can be written with the following syntaxes:
Object
onScroll
({
// Enters when the top of the target meets the bottom of the container
enter
: {
target
:
'top'
,
container
:
'bottom'
},
// Leaves when the bottom of the target meets the top of the container
leave
: {
target
:
'bottom'
,
container
:
'top'
}
});
Container value String
The container value can be passed directly and the target value defaults to
'start'
for enter and
'end'
for leave.
onScroll
({
// Enters when the top of the target meets the bottom of the container
enter
:
'bottom'
,
// Leaves when the bottom of the target meets the top of the container
leave
:
'top'
});
Container and target value shorthand String
onScroll
({
// Enters when the bottom of the container meets the top of the target
enter
:
'bottom top'
,
// Leaves when the top of the container meets the bottom of the target
leave
:
'top bottom'
,
});
Default enter
'end start'
Default leave
'start end'
In this section
Numeric values
Positions shorthands
Relative position values
Min max
Previous
Next
ScrollObserver settings
Numeric values

--- SVG ---
SVG
Since 4.0.0
morphTo()
Creates a morphing animation from one SVG shape to another by passing the
morphTo
()
function to the
d
property of a
SVGPathElement
or to the
points
property of a
SVGPolylineElement
or a
SVGPolygonElement
.
An optional
precision
parameter can be set to configure the amount of points generated to morph the two shapes.
If the precision parameter is set
0
, now points extrapolation is generated.
svg.
morphTo
(shapeTarget, precision);
Parameters
Name
Accepts
shapeTarget
CSS selector
|
SVGPathElement
|
SVGPolylineElement
|
SVGPolygonElement
precision=.33
(opt)
A
Number
between
0
and
1
Returns
An
Array
containing the shape's starting and final
String
values
import
{ animate, svg, utils }
from
'animejs'
;
const
[ $path1, $path2 ] = utils.$(
'polygon'
);
function
animateRandomPoints
(
) {
// Update the points attribute on #path-2
utils.
set
($path2, {
points
:
generatePoints
() });
// Morph the points of #path-1 into #path-2
animate
($path1, {
points
: svg.
morphTo
($path2),
ease
:
'inOutCirc'
,
duration
:
500
,
onComplete
: animateRandomPoints
});
}
// Start the animation
animateRandomPoints
();
// A function to generate random points on #path-2 on each iteration
// For demo purpose only
function
generatePoints
(
) {
const
total = utils.
random
(
4
,
64
);
const
r1 = utils.
random
(
4
,
56
);
const
r2 =
56
;
const
isOdd
= n => n %
2
;
let
points =
''
;
for
(
let
i =
0
, l =
isOdd
(total) ? total +
1
: total; i < l; i++) {
const
r =
isOdd
(i) ? r1 : r2;
const
a = (
2
*
Math
.
PI
* i / l) -
Math
.
PI
/
2
;
const
x =
152
+ utils.
round
(r *
Math
.
cos
(a),
0
);
const
y =
56
+ utils.
round
(r *
Math
.
sin
(a),
0
);
points +=
`
${x}
,
${y}
`
;
}
return
points;
}
<
svg
viewBox
=
"0 0 304 112"
>
<
g
stroke-width
=
"2"
stroke
=
"currentColor"
stroke-linejoin
=
"round"
fill
=
"none"
fill-rule
=
"evenodd"
>
<
polygon
id
=
"path-1"
points
=
"152,4 170,38 204,56 170,74 152,108 134,74 100,56 134,38"
>
</
polygon
>
<
polygon
style
=
"opacity: 0"
id
=
"path-2"
points
=
"152,4 170,38 204,56 170,74 152,108 134,74 100,56 134,38"
>
</
polygon
>
</
g
>
</
svg
>
Previous
Next
SVG
createDrawable()

--- Utilities ---
Utilities
Since 4.0.0
degToRad()
V4
Converts degrees into radians.
const
radians = utils.
degToRad
(degrees);
Parameters
Name
Accepts
degrees
(opt)
Number
Returns
A
Number
if degrees are provided, otherwise a
chain-able utility
Function
to convert degrees to radians:
const
degToRad = utils.
degToRad
();
degToRad
(
360
);
// 6.283185307179586
const
roundDegToRad = utils.
degToRad
().
round
(
2
);
// Convert degrees to radians then round to 2 decimal places
roundDegToRad
(
180
);
// 3.14
roundDegToRad
(
90
);
// 1.57
import
{ animate, createAnimatable, utils }
from
'animejs'
;
const
radAnimatable =
createAnimatable
(
'.rad'
, {
rotate
: {
unit
:
'rad'
,
duration
:
0
},
});
const
[ $deg ] = utils.$(
'.deg'
);
const
degAnimation =
animate
($deg, {
rotate
:
'360deg'
,
ease
:
'linear'
,
loop
:
true
,
onUpdate
:
() =>
{
const
degrees = utils.
get
($deg,
'rotate'
,
false
);
radAnimatable.
rotate
(utils.
degToRad
(degrees));
}
});
<
div
class
=
"x-large spaced-evenly row"
>
<
div
class
=
"col"
>
<
div
class
=
"clock deg"
>
</
div
>
<
div
class
=
"label"
>
degrees
</
div
>
</
div
>
<
div
class
=
"col"
>
<
div
class
=
"clock rad"
>
</
div
>
<
div
class
=
"label"
>
radians
</
div
>
</
div
>
</
div
>
Previous
Next
padEnd()
radToDeg()

--- Engine ---
Engine
Since 4.0.0
Engine defaults
Defines the global defaults properties used by all
Timer
,
Animation
and
Timeline
instances.
All default properties are available on the
defaults
Object
of
engine
.
import
{ engine }
from
'animejs'
;
engine.
engine
.
defaults
.
duration
=
500
;
Name
Accepts
playbackEase
Easing name
String
| Easing
Function
playbackRate
Number
frameRate
Number
loop
Number
|
Boolean
reversed
Boolean
alternate
Boolean
autoplay
Boolean
duration
Number
|
Function
delay
Number
|
Function
composition
Composition types
String
|
Function
ease
Easing name
String
| Easing
Function
loopDelay
Number
modifier
Modifier
Function
onBegin
Callback
Function
onUpdate
Callback
Function
onRender
Callback
Function
onLoop
Callback
Function
onComplete
Callback
Function
onPause
Callback
Function
Previous
Engine properties

--- ScrollObserver ---
ScrollObserver

Synchronisation modes
Since 4.0.0
Eased scroll
Applies an easing function to the synchronised playback progress of the linked object relative to the scroll position.
Accepts
ease
import
{ animate, stagger, onScroll }
from
'animejs'
;
animate
(
'.square'
, {
x
:
'12rem'
,
rotate
:
'1turn'
,
ease
:
'linear'
,
delay
:
stagger
(
100
, {
from
:
'last'
}),
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
enter
:
'bottom-=50 top'
,
leave
:
'top+=60 bottom'
,
sync
:
'inOutCirc'
,
debug
:
true
,
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"label"
>
scroll down
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section"
>
</
div
>
</
div
>
</
div
>
Previous
Next
Smooth scroll
ScrollObserver callbacks

--- Timer ---
Timer

Callbacks
Since 4.0.0
onUpdate
Executes a function on every frames of a running timer at the specified
frameRate
.
Accepts
A
Function
whose first argument returns the timer itself
Default
noop
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
onUpdate
=
self
=>
console
.
log
(self.
id
);
import
{ createTimer, utils }
from
'animejs'
;
const
[ $updates ] = utils.$(
'.updates'
);
const
[ $time ] = utils.$(
'.time'
);
let
updates =
0
;
createTimer
({
onUpdate
:
self
=>
{
$updates.
innerHTML
= ++updates;
$time.
innerHTML
= self.
currentTime
;
}
});
<
div
class
=
"large row"
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
updates
</
span
>
<
span
class
=
"updates value"
>
0
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
Previous
Next
onComplete
onLoop

--- Utilities ---
Utilities
Since 4.0.0
sync()
V4
Execute a callback function in sync with the engine loop.
utils.
sync
(
function
);
Parameters
Name
Accepts
callback
Function
Returns
Timer
import
{ animate, utils }
from
'animejs'
;
const
[ $range ] = utils.$(
'.range'
);
const
[ $speed ] = utils.$(
'.speed'
);
const
animation =
animate
(
'.circle'
, {
x
:
'16rem'
,
loop
:
true
,
alternate
:
true
,
playbackRate
:
1
,
});
const
updateSpeed
= (
) => {
const
{ value } = $range;
$speed.
innerHTML
= utils.
roundPad
(+value,
2
);
utils.
sync
(
() =>
animation.
speed
= value);
}
$range.
addEventListener
(
'input'
, updateSpeed);
<
div
class
=
"large row"
>
<
div
class
=
"circle"
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
speed
</
span
>
<
span
class
=
"speed value"
>
1.00
</
span
>
</
pre
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
input
type
=
"range"
min
=
0
max
=
5
value
=
1
step
=
.01
class
=
"range"
/>
</
fieldset
>
</
div
>
Previous
Next
shuffle()
lerp()

--- Animation ---
Animation
Since 1.0.0
Tween parameters
Configure values, timings, and behaviors of animated properties.
Tween parameters can be specified
globally
for all properties directly with the other animation parameters, or
locally
for a specific property using an
Object
.
All animatable properties inherit the
global
parameters, which can be overridden
locally
for a specific tween.
animate
(
'.square'
, {
x
: {
┌───────────────────┐
│
to
:
100
, │
│
delay
:
0
, ├─
Local
Tween
Parameters
│
ease
:
'inOut(4)'
│
└───────────────────┘
},
scale
:
1
,
opacity
:
.5
,
┌───────────────────┐
│
duration
:
400
, │
│
delay
:
250
, ├─
Global
Tween
Parameters
│
ease
:
'out(3)'
, │
└───────────────────┘
loop
:
3
,
alternate
:
true
,
});
In this section
to
from
delay
duration
ease
composition
modifier
Previous
Next
Tween value types
to

--- Timeline ---
Timeline
Since 4.0.0
Add timers
V4
Timers can be added to a timeline using the
add
()
method or the
sync
()
method.
Timer creation
Creates and adds a timer directly to the timeline using the
add
()
method.
timeline.
add
(parameters, position);
Parameters
Name
Accepts
parameters
An
Object
of
Timer playback settings
and
Timer callbacks
position
(opt)
Time position
Timer synchronisation
Synchronises an existing timer with the
sync
()
method.
timeline.
sync
(timer, position);
Parameters
Name
Accepts
timer
Timer
position
(opt)
Time position
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline, createTimer, utils }
from
'animejs'
;
const
[ $timer01, $timer02, $timer03 ] = utils.$(
'.timer'
);
const
timer1 =
createTimer
({
duration
:
1500
,
onUpdate
:
self
=>
$timer01.
innerHTML
= self.
currentTime
,
});
const
tl =
createTimeline
()
.
sync
(timer1)
.
add
({
duration
:
500
,
onUpdate
:
self
=>
$timer02.
innerHTML
= self.
currentTime
,
})
.
add
({
onUpdate
:
self
=>
$timer03.
innerHTML
= self.
currentTime
,
duration
:
1000
});
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
timer 01
</
span
>
<
span
class
=
"timer value lcd"
>
0
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
timer 02
</
span
>
<
span
class
=
"timer value lcd"
>
0
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
timer 03
</
span
>
<
span
class
=
"timer value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
Previous
Next
Timeline
Add animations

--- Web Animation API ---
Web Animation API

API differences
Since 4.0.0
direction
The
direction
parameter is replaced by two separate parameters:
reversed
and
alternate
.
direction
reversed
alternate
Effect
'forward'
false
false
Play forward
'reverse'
true
false
Play backward
'alternate'
false
true
Alternate on loop
'alternate-reverse'
true
true
Start in reverse and alternate on loop
Syntax comparison
Anime.js
waapi.
animate
(
'.square'
, {
x
:
100
,
reversed
:
true
,
alternate
:
true
,
loop
:
3
});
WAAPI equivalent
const
targets =
document
.
querySelectorAll
(
'.square'
);
targets.
forEach
(
(
$el, i
) =>
{
$el.
animate
({
translate
:
'100px'
,
}, {
fill
:
'forwards'
,
duration
:
1000
,
direction
:
'alternate-reverse'
,
iterations
:
4
})
});
Accepts
Boolean
import
{ waapi, stagger }
from
'animejs'
;
waapi.
animate
(
'.square'
, {
translate
:
'17rem'
,
reversed
:
true
,
delay
:
stagger
(
100
)
});
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
iterations
easing

--- Draggable ---
Draggable

Settings
Since 4.0.0
dragSpeed
Specifies a value that affects the dragging speed of the element. The higher the value, the faster the element moves.
0
prevents the element from being dragged, and values less than
0
invert the drag movement.
Accepts
A
Number
A
Function
that returns a
Number
When defined using a
Function
, the value will be automatically refreshed every time the container or target element is resized.
It can also be refreshed manually using the
refresh
()
method.
Default
1
import
{ createDraggable }
from
'animejs'
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
dragSpeed
:
2
,
});
createDraggable
(
'.circle'
, {
container
:
'.grid'
,
dragSpeed
:
.5
,
});
<
div
class
=
"large centered grid square-grid"
>
<
div
class
=
"square draggable"
>
</
div
>
<
div
class
=
"circle draggable"
>
</
div
>
</
div
>
Previous
Next
releaseEase
scrollThreshold

--- Animation ---
Animation

Targets
Since 1.0.0
JavaScript Objects
JS
Targets one or multiple JavaScript
Object
.
Accepts
Object
Instance of
Class
import
{ animate, utils }
from
'animejs'
;
const
[ $log ] = utils.$(
'code'
);
const
vector2D = {
x
:
0
,
y
:
0
};
animate
(vector2D, {
x
:
100
,
y
:
150
,
modifier
: utils.
round
(
0
),
onUpdate
:
() =>
$log.
textContent
=
JSON
.
stringify
(vector2D),
});
<
pre
class
=
"row large centered"
>
<
code
>
{"x":0,"y":0}
</
code
>
</
pre
>
Previous
Next
DOM Elements
Array of targets

--- Stagger ---
Stagger
Since 2.0.0
Time staggering
Tween's time related properties like
delay
and
duration
accepts Function-based values, enabling the use of the stagger function returned by the
stagger
()
method in multi-target animations.
This results in each target tween having different timings, increasing by a set number of milliseconds for each subsequent target.
import
{ animate, stagger }
from
'animejs'
;
animate
(
'.square'
, {
x
:
'17rem'
,
delay
:
stagger
(
100
),
duration
:
stagger
(
200
, {
start
:
500
}),
loop
:
true
,
alternate
:
true
});
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
delay: 0ms;
&nbsp;
&nbsp;
&nbsp;
duration: 500ms
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
delay: 100ms; duration: 700ms
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
delay: 200ms; duration: 900ms
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
delay: 300ms; duration: 1100ms
</
div
>
</
div
>
Previous
Next
Stagger
Values staggering

--- Draggable ---
Draggable

Callbacks
Since 4.0.0
onAfterResize
Executes a function after either the container or the dragged target sizes change and the draggable values have been updated.
This can be used to update the position of the dragged element if the container size has changed.
Accepts
A
Function
whose first argument returns the draggable itself
Default
noop
import
{ createDraggable, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
resizes =
0
;
const
draggable =
createDraggable
(
'.square'
, {
container
:
'.grid'
,
onAfterResize
:
self
=>
{
$value.
textContent
= ++resizes;
self.
animateInView
(
1000
,
30
);
}
});
<
div
class
=
"iframe-content resizable"
>
<
div
class
=
"large padded grid square-grid"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
resizes
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
</
div
>
Previous
Next
onResize
Draggable methods

--- Engine ---
Engine
V4
Drives and synchronises all
Animation
,
Timer
, and
Timeline
instances.
import
{ engine }
from
'animejs'
;
In this section
Parameters
Methods
Properties
Engine defaults
Previous
Next
Web Animation API
Engine parameters

--- Animation ---
Animation

Tween value types
Since 1.0.0
Color value
Color values in the following formats can be parsed and used as values for animatable color properties.
Accepts
Format
Syntax
HEX
'#F44'
|
'#FF4444'
HEXA
'#F443'
|
'#FF444433'
RGB
'rgb(255, 168, 40)'
RGBA
'rgba(255, 168, 40, .2)'
HSL
'hsl(255, 168, 40)'
HSLA
'hsla(255, 168, 40, .2)'
String name
WAAPI
'red'
|
'aqua'
import
{ animate }
from
'animejs'
;
animate
(
'.hex'
, {
background
:
'#FF4B4B'
,
});
animate
(
'.rgb'
, {
background
:
'rgb(255, 168, 40)'
,
});
animate
(
'.hsl'
, {
background
:
'hsl(44, 100%, 59%)'
,
});
animate
(
'.hexa'
, {
background
:
'#FF4B4B33'
,
});
animate
(
'.rgba'
, {
background
:
'rgba(255, 168, 40, .2)'
,
});
animate
(
'.hsla'
, {
background
:
'hsla(44, 100%, 59%, .2)'
,
});
<
div
class
=
"large justified row"
>
<
div
class
=
"circle hex"
>
</
div
>
<
div
class
=
"circle rgb"
>
</
div
>
<
div
class
=
"circle hsl"
>
</
div
>
<
div
class
=
"circle hexa"
>
</
div
>
<
div
class
=
"circle rgba"
>
</
div
>
<
div
class
=
"circle hsla"
>
</
div
>
</
div
>
Previous
Next
Relative value
Color function value

--- Scope ---
Scope

Parameters
Since 4.0.0
defaults
Defines the Scope defaults properties which are then used for all
Timer
,
Animation
and
Timeline
created within that scope.
Accepts
An
Object
with the following optional properties:
Name
Accepts
playbackEase
Easing name
String
| Easing
Function
playbackRate
Number
frameRate
Number
loop
Number
|
Boolean
reversed
Boolean
alternate
Boolean
autoplay
Boolean
duration
Number
|
Function
delay
Number
|
Function
composition
Composition types
String
|
Function
ease
Easing name
String
| Easing
Function
loopDelay
Number
modifier
Modifier
Function
onBegin
Callback
Function
onUpdate
Callback
Function
onRender
Callback
Function
onLoop
Callback
Function
onComplete
Callback
Function
import
{ createScope, animate }
from
'animejs'
;
const
rows = utils.$(
'.row'
);
rows.
forEach
(
(
$row, i
) =>
{
createScope
({
root
: $row,
defaults
: {
ease
:
`out(
${
1
+ i}
)`
}
})
.
add
(
() =>
{
animate
(
'.square'
, {
x
:
'17rem'
,
loop
:
true
,
alternate
:
true
});
});
});
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
scope 1
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
scope 2
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
scope 3
</
div
>
</
div
>
Previous
Next
root
mediaQueries

--- Web Animation API ---
Web Animation API

Improvements to WAAPI
Since 4.0.0
Default units
If no unit is specified for properties that expect a unit, like
width
for example, the resulting animation will use the default browser unit for a set of commonly used properties:
Syntax comparison
Anime.js
waapi.
animate
(
'.circle'
, {
x
:
100
,
y
:
50
,
width
:
150
,
height
:
80
,
});
WAAPI equivalent
const
$el =
document
.
querySelector
(
'.circle'
);
$el.
animate
({
translate
:
'100px 50px'
,
width
:
'150px'
,
height
:
'80px'
,
}, {
duration
:
1000
,
easing
:
'ease-out'
,
}).
finished
.
then
(
() =>
{
$el.
style
.
translate
=
'100px'
;
});
Properties that automatically adds default units
Name
Default Unit
x
'px'
y
'px'
z
'px'
translateX
'px'
translateY
'px'
translateZ
'px'
rotate
'deg'
rotateX
'deg'
rotateY
'deg'
rotateZ
'deg'
skew
'deg'
skewX
'deg'
skewY
'deg'
perspective
'px'
width
'px'
height
'px'
margin
'px'
padding
'px'
top
'px'
right
'px'
bottom
'px'
left
'px'
borderWidth
'px'
fontSize
'px'
borderRadius
'px'
import
{ waapi }
from
'animejs'
;
waapi.
animate
(
'.square'
, {
opacity
:
.5
,
x
:
250
,
rotate
:
45
,
width
:
40
,
height
:
40
,
});
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Multi-targets animation
Function based values

--- Engine ---
Engine

Parameters
Since 4.0.0
timeUnit (seconds / milliseconds)
Configures the unit of time to use for time-related values like
duration
and
delay
.
The currently defined default duration is automatically adjusted to the newly specified time unit.
engine.
timeUnit
=
's'
;
// Change the time unit globally to seconds
console
.
log
(engine.
engine
.
defaults
.
duration
);
// -> Returns 1
Accepts
's'
to use seconds
'ms'
to use milliseconds
Default
'ms'
import
{ engine, animate, utils }
from
'animejs'
;
const
[ $timeS ] = utils.$(
'.time-s'
);
const
[ $timeMs ] = utils.$(
'.time-ms'
);
const
[ $ms, $s ] = utils.$(
'.toggle'
);
const
secondsTimer =
createTimer
({
duration
:
1
,
loop
:
true
,
onUpdate
:
self
=>
$timeS.
innerHTML
= utils.
roundPad
(self.
iterationCurrentTime
,
2
)
});
const
millisecondsTimer =
createTimer
({
duration
:
1000
,
loop
:
true
,
onUpdate
:
self
=>
$timeMs.
innerHTML
= utils.
roundPad
(self.
iterationCurrentTime
,
2
)
});
const
toggleSetting
= (
) => {
const
isUsingSeconds = engine.
timeUnit
===
's'
;
engine.
timeUnit
= isUsingSeconds ?
'ms'
:
's'
;
$ms.
disabled
= isUsingSeconds;
$s.
disabled
= !isUsingSeconds;
}
$ms.
addEventListener
(
'click'
, toggleSetting);
$s.
addEventListener
(
'click'
, toggleSetting);
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
duration: 1
</
span
>
<
span
class
=
"time-s value lcd"
>
0
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
duration: 1000
</
span
>
<
span
class
=
"time-ms value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button toggle"
disabled
>
milliseconds
</
button
>
<
button
class
=
"button toggle"
>
seconds
</
button
>
</
fieldset
>
</
div
>
Previous
Next
Engine parameters
speed

--- Stagger ---
Stagger

Parameters
Since 2.0.0
Stagger modifier
Defines a function that modify the returned staggered value.
Accepts
A
Function
with the following parameters:
Parameters
Names
Description
value
The current animated numerical value
Must returns
Number
|
String
import
{ animate, stagger }
from
'animejs'
;
animate
(
'.square'
, {
boxShadow
: [
{
to
:
stagger
([
1
,
.25
], {
modifier
:
v
=>
`0 0
${v *
30
}
px
${v *
20
}
px currentColor`
,
from
:
'center'
})
},
{
to
:
0
},
],
delay
:
stagger
(
100
, {
from
:
'center'
}),
loop
:
true
});
<
div
class
=
"small justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Stagger grid axis

--- Draggable ---
Draggable

Methods
Since 4.0.0
refresh()
Re-compute every parameter defined using a function and re-calculate all internal values.
Refreshable parameters
snap
container
containerPadding
containerFriction
dragSpeed
scrollSpeed
scrollThreshold
minVelocity
maxVelocity
velocityMultiplier
Returns
The draggable itself
import
{ createDraggable, utils }
from
'animejs'
;
const
[ $refreshButton ] = utils.$(
'.refresh'
);
const
draggable =
createDraggable
(
'.square'
, {
snap
:
() =>
utils.
random
(
0
,
32
,
0
),
dragSpeed
:
() =>
utils.
random
(
.5
,
1.5
,
1
),
});
const
refreshDraggable
= (
) => draggable.
refresh
();
$refreshButton.
addEventListener
(
'click'
, refreshDraggable);
<
div
class
=
"large centered row"
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
<
div
class
=
"large row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button refresh"
>
Refresh
</
button
>
</
fieldset
>
</
div
>
Previous
Next
revert()
Draggable properties

--- Draggable ---
Draggable

Axes parameters
Since 4.0.0
snap
Rounds the final value of either both axes or one specific axis to the nearest specified increment.
If an
Array
is provided as the increment, it selects the closest value from the array.
Accepts
Number
Array
<
Number
>
A
Function
that returns any if the above
When defined using a
Function
, the value will be automatically refreshed every time the container or target element is resized.
It can also be refreshed manually using the
refresh
()
method.
Default
0
import
{ createDraggable }
from
'animejs'
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
snap
:
56
,
// Global to both x and y
x
: {
snap
: [
0
,
200
] },
// Specific to x
});
<
div
class
=
"large grid square-grid"
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
Previous
Next
y
modifier

--- ScrollObserver ---
ScrollObserver

Callbacks
Since 4.0.0
onUpdate
Triggers a function every time the linked object progress updates during scroll synchronisation.
Accepts
A
Function
whose first argument returns the ScrollObserver instance
Default
noop
import
{ animate, onScroll, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
updates =
0
;
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
ease
:
'linear'
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
enter
:
'bottom-=50 top'
,
leave
:
'top+=60 bottom'
,
sync
:
.5
,
debug
:
true
,
onUpdate
:
() =>
$value.
textContent
= ++updates,
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded sticky"
>
<
div
class
=
"large row"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
updates
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section"
>
</
div
>
</
div
>
</
div
>
Previous
Next
onLeaveBackward
onSyncComplete

--- Draggable ---
Draggable

Settings
Since 4.0.0
releaseMass
Specifies the mass applied to the dragged element after release. Affects the speed, movement distance and bounciness of the dragged element. Lower values result in faster movement.
releaseMass
has no effect if a spring is passed to the
releaseEase
parameter and is overridden by the spring
mass
value.
Accepts
A
Number
between
0
and
1000
Default
1
import
{ createDraggable }
from
'animejs'
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
releaseMass
:
.1
,
});
createDraggable
(
'.circle'
, {
container
:
'.grid'
,
releaseMass
:
10
,
});
<
div
class
=
"large centered grid square-grid"
>
<
div
class
=
"square draggable"
>
</
div
>
<
div
class
=
"circle draggable"
>
</
div
>
</
div
>
Previous
Next
releaseContainerFriction
releaseStiffness

--- ScrollObserver ---
ScrollObserver

Methods
Since 4.0.0
link()
Connects an
Animation
,
Timer
or
Timeline
to a
ScrollObserver
instance.
This is equivalent to defining an
onScroll
()
instance on the
autoplay
parameter.
Only one object can be linked at a time, every call to
link
()
overrides the previously linked object.
Accepts
Animation
|
Timer
|
Timeline
Returns
The ScrollObserver itself
import
{ animate, onScroll }
from
'animejs'
;
const
animation =
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
ease
:
'linear'
,
});
const
scrollObserver =
onScroll
({
container
:
'.scroll-container'
,
enter
:
'bottom-=50 top'
,
leave
:
'top+=60 bottom'
,
sync
:
true
,
debug
:
true
,
});
scrollObserver.
link
(animation);
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"label"
>
scroll down
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section"
>
</
div
>
</
div
>
</
div
>
Previous
Next
ScrollObserver methods
refresh()

--- Animatable ---
Animatable
Since 4.0.0
Animatable settings
Animatables properties settings are specified globally to all properties on the parameters object, or specifically to a property by passing an object.
createAnimatable
(targets, {
x
: {
┌──────────────────┐
│
unit
:
'rem'
, │
│
duration
:
400
, ├─
Specific
Property
Settings
│
ease
:
'out(4)'
│
└──────────────────┘
},
y
:
200
,
rotate
:
1000
,
┌──────────────────┐
│
ease
:
'out(2)'
, ├─
Global
Properties
Settings
└──────────────────┘
});
In this section
unit
duration
ease
modifier
Previous
Next
Animatable
unit

--- Stagger ---
Stagger

Parameters
Since 2.0.0
Stagger reversed
Defines if the stagger should operate in reverse.
Accepts
Boolean
Default
false
import
{ animate, stagger }
from
'animejs'
;
animate
(
'.square'
, {
translateX
:
'17rem'
,
delay
:
stagger
(
100
, {
reversed
:
true
}),
});
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"label padded"
>
delay: 300ms
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"label padded"
>
delay: 200ms
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"label padded"
>
delay: 100ms
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"label padded"
>
delay: 0ms
</
div
>
</
div
>
Previous
Next
Stagger from
Stagger ease

--- Utilities ---
Utilities
Since 4.0.0
radToDeg()
V4
Converts radians into degrees.
const
degrees = utils.
radToDeg
(radians);
Parameters
Name
Accepts
radians
(opt)
Number
Returns
A
Number
if radians are provided, otherwise a
chain-able utility
Function
to convert radians to degrees:
const
radToDeg = utils.
radToDeg
();
radToDeg
(
1.7453292519943295
);
// 100
radToDeg
(
Math
.
PI
);
// 180
const
roundRadToDeg = utils.
radToDeg
().
round
(
2
);
// Convert radians to degrees then round to 2 decimal places
roundRadToDeg
(
Math
.
PI
/
7
);
// 25.71
import
{ animate, createAnimatable, utils }
from
'animejs'
;
const
degAnimatable =
createAnimatable
(
'.deg'
, {
rotate
: {
unit
:
'deg'
,
duration
:
0
}
});
const
[ $rad ] = utils.$(
'.rad'
);
const
degAnimation =
animate
($rad, {
rotate
: (
Math
.
PI
*
2
) +
'rad'
,
ease
:
'linear'
,
loop
:
true
,
onUpdate
:
() =>
{
const
radians = utils.
get
($rad,
'rotate'
,
false
);
degAnimatable.
rotate
(utils.
radToDeg
(radians));
}
});
<
div
class
=
"x-large spaced-evenly row"
>
<
div
class
=
"col"
>
<
div
class
=
"clock rad"
>
</
div
>
<
div
class
=
"label"
>
radians
</
div
>
</
div
>
<
div
class
=
"col"
>
<
div
class
=
"clock deg"
>
</
div
>
<
div
class
=
"label"
>
degrees
</
div
>
</
div
>
</
div
>
Previous
Next
degToRad()
Chain-able utility functions

--- Animation ---
Animation

Callbacks
Since 4.0.0
then()
V4
Returns a
Promise
that resolves and execute a callback when the animation completes.
The
then
()
method can be directly inlined like this:
animate
(target, {
x
:
100
,
duration
:
500
}).
then
(callback);
Or used in an
async
/
await
context:
async
function
waitForAnimationToComplete
(
) {
return
animate
(target, {
x
:
100
,
duration
:
500
,
});
}
const
asyncAnimation =
await
waitForAnimationToComplete
();
Parameters
Name
Type
callback
A
Function
whose first argument returns the animation itself
Returns
Promise
import
{ animate }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
const
animation =
animate
(
'.circle'
, {
x
:
'16rem'
,
delay
:
500
,
});
animation.
then
(
() =>
$value.
textContent
=
'fulfilled'
);
<
div
class
=
"large row"
>
<
div
class
=
"circle"
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
promise status
</
span
>
<
span
class
=
"value"
>
pending
</
span
>
</
pre
>
</
div
>
Previous
Next
onPause
Animation methods

--- Draggable ---
Draggable

Settings
Since 4.0.0
container
Specifies the container of the draggable element, preventing it from being dragged outside of the defined boundaries.
Accepts
CSS Selector
String
to target an
HTMLElement
HTMLElement
Array
<
Number
>
(
[top, right, bottom, left]
)
A
Function
that returns
Array
<
Number
>
(
[top, right, bottom, left]
)
When defined using a
Function
, the value will be automatically refreshed every time the window or target element is resized.
It can also be refreshed manually using the
refresh
()
method.
Default
null
import
{ createDraggable }
from
'animejs'
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
});
createDraggable
(
'.circle'
, {
container
: [-
16
,
80
,
16
,
0
],
});
<
div
class
=
"large centered grid square-grid array-container"
>
<
div
class
=
"square draggable"
>
</
div
>
<
div
class
=
"circle draggable"
>
</
div
>
</
div
>
Previous
Next
trigger
containerPadding

--- Getting started ---
Getting started
Installation
Anime.js can be installed in multiple ways depending of your environment or workflow.
This section covers differents methods of installation.
Installation via NPM and a bundler
If you're using a bundler like
Vite
or
esbuild
, simply install the package via
NPM
.
npm install animejs
Then import
Anime.js
methods as
ES6 Modules
like this:
import
{ animate }
from
'animejs'
;
Linking from a CDN
CDN Name
URL
JsDelivr
jsdelivr.com
ES6 Modules
<
script
type
=
"module"
>
import
{ animate }
from
'https://cdn.jsdelivr.net/npm/animejs/+esm'
;
</
script
>
Global object
<
script
src
=
"https://cdn.jsdelivr.net/npm/animejs/lib/anime.iife.min.js"
>
</
script
>
<
script
>
const
{ animate } = anime;
</
script
>
Direct download from GitHub
If you prefer to download the Anime.js library manually, you can also simply grab the code from the official
GitHub repository
.
The following versions are available in the
/lib
directory:
File name
Type
anime.
esm
.
js
ES6 Module
anime.
umd
.
js
Universal Module
anime.
iife
.
js
Global Object
Once downloaded inside your project folder, link the library in your code like this:
ES6 Modules
<
script
type
=
"module"
>
import
{ animate }
from
'./path/to/anime.esm.min.js'
;
</
script
>
Global object
<
script
src
=
"path/to/anime.iife.min.js"
>
</
script
>
<
script
>
const
{ animate } = anime;
</
script
>
Previous
Next
Getting started
Imports

--- Stagger ---
Stagger
Since 2.0.0
Stagger value types
stagger
(
┌───────────────────┐
│
'1rem'
, ├─
Stagger
Value
└───────────────────┘
{
start
:
100
,
from
:
2
,
reversed
:
false
,
ease
:
'outQuad'
,
grid
: [
8
,
8
],
}
);
In this section
Numerical
Range
Previous
Next
Timeline positions staggering
Numerical value

--- Timer ---
Timer

Playback settings
Since 4.0.0
autoplay
Defines the play mode of a timer.
The autoplay parameter has no effect when the timer is added to a timeline, and will be overridden to
false
.
Accepts
Boolean
|
onScroll
()
If set to
true
the timer plays automatically
If set to
false
the timer has to be manually played
If set to
onScroll
()
the timer will starts when the
scroll thresholds
conditions are met
Default
true
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
autoplay
=
false
;
const
[ $time ] = utils.$(
'.time'
);
const
[ $playButton ] = utils.$(
'.play'
);
const
timer =
createTimer
({
autoplay
:
false
,
onUpdate
:
self
=>
$time.
innerHTML
= self.
currentTime
});
const
playTimer
= (
) => timer.
play
();
$playButton.
addEventListener
(
'click'
, playTimer);
<
div
class
=
"large centered row"
>
<
div
class
=
"half col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"play"
>
Play
</
button
>
</
fieldset
>
</
div
>
Previous
Next
reversed
frameRate

--- Animation ---
Animation

Playback settings
Since 1.0.0
autoplay
Defines the play mode of an animation.
The autoplay parameter has no effect when the animation is added to a timeline, and will be overridden to
false
.
Accepts
Boolean
|
onScroll
()
If set to
true
the animation plays automatically
If set to
false
the animation has to be manually played
If set to
onScroll
()
the animation will starts when the
scroll thresholds
conditions are met
Default
true
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
autoplay
=
false
;
animate
(
'.autoplay-true'
, {
x
:
'17rem'
,
autoplay
:
true
,
// Default
});
animate
(
'.autoplay-false'
, {
x
:
'17rem'
,
autoplay
:
false
,
});
<
div
class
=
"medium row"
>
<
div
class
=
"circle autoplay-true"
>
</
div
>
<
div
class
=
"padded label"
>
autoplay: true
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"circle autoplay-false"
>
</
div
>
<
div
class
=
"padded label"
>
autoplay: false
</
div
>
</
div
>
Previous
Next
reversed
frameRate

--- Engine ---
Engine

Parameters
Since 4.0.0
precision
Defines how many decimal places to round string values to during an animation.
The more decimals you add, the more precise the animations will be. Setting
0
will essentially remove all decimals during an animation.
Only string values of CSS properties, SVG and DOM Attributes are rounded (e.g.,
'120.725px'
,
'1.523'
) and the rounding is only applied during the animation, the first and last frames of the animation use the full value.
In 99% of cases, you won't need to increase the precision beyond 4, as the visual difference won't be noticeable.
Lowering the precision can help in cases where you are animating many elements simultaneously, but can drastically reduce the visual quality and smoothness of your animations.
engine.
precision
=
1
;
// values will be rounded to 1 decimal place ('120.7px')
Accepts
A
Number
greater than or equal to
0
to define the number of decimal places
A
Number
lower than
0
to skip the rounding process
Default
4
import
{ engine, animate, utils }
from
'animejs'
;
const
[ $container ] = utils.$(
'.container'
);
const
[ $range ] = utils.$(
'.range'
);
for
(
let
i =
0
; i <
150
; i++) {
const
$particle =
document
.
createElement
(
'div'
);
$particle.
classList
.
add
(
'particle'
);
$container.
appendChild
($particle);
animate
($particle, {
x
: utils.
random
(-
10
,
10
,
2
) +
'rem'
,
y
: utils.
random
(-
3
,
3
,
2
) +
'rem'
,
scale
: [{
from
:
0
,
to
:
1
}, {
to
:
0
}],
delay
: utils.
random
(
0
,
1000
),
loop
:
true
,
});
}
function
onInput
(
) {
engine.
precision
=
this
.
value
;
}
$range.
addEventListener
(
'input'
, onInput);
<
div
class
=
"large row container"
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
input
type
=
"range"
min
=
0
max
=
5
value
=
4
step
=
1
class
=
"range"
/>
</
fieldset
>
</
div
>
Previous
Next
fps
pauseOnDocumentHidden

--- Animation ---
Animation

Callbacks
Since 4.0.0
onComplete
Executes a function when all the iterations (
loops
) of an animation have finished playing.
Accepts
A
Function
whose first argument returns the animation itself
Default
noop
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
onComplete
=
self
=>
console
.
log
(self.
id
);
import
{ animate, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
const
animation =
animate
(
'.circle'
, {
x
:
'16rem'
,
delay
:
500
,
loop
:
2
,
alternate
:
true
,
onComplete
:
self
=>
$value.
textContent
= self.
completed
});
<
div
class
=
"large row"
>
<
div
class
=
"circle"
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
completed
</
span
>
<
span
class
=
"value"
>
false
</
span
>
</
pre
>
</
div
>
Previous
Next
onBegin
onBeforeUpdate

--- ScrollObserver ---
ScrollObserver

Settings
Since 4.0.0
repeat
Specifies if the scroll synchronisation should repeat after the linked object completes.
If the repeat property is set to
false
, the scrollContainer instance will be reverted.
Accepts
Boolean
Defaults
true
import
{ createTimer, onScroll, utils }
from
'animejs'
;
const
[ $repeat ] = utils.$(
'.repeat .value'
);
const
[ $noRepeat ] = utils.$(
'.no-repeat .value'
);
let
repeatUpdates =
0
;
let
noRepeatUpdates =
0
;
createTimer
({
duration
:
1000
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
target
:
'.repeat'
,
enter
:
'bottom-=40 top'
,
leave
:
'top+=60 bottom'
,
onUpdate
:
() =>
$repeat.
innerHTML
= repeatUpdates++,
repeat
:
true
,
debug
:
true
,
})
});
createTimer
({
duration
:
1000
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
target
:
'.no-repeat'
,
enter
:
'bottom-=40 top'
,
leave
:
'top+=60 bottom'
,
onUpdate
:
() =>
$noRepeat.
innerHTML
= noRepeatUpdates++,
repeat
:
false
,
debug
:
true
,
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"label"
>
scroll down
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
pre
class
=
"repeat large log row"
>
<
span
class
=
"label"
>
repeat upddates
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
pre
class
=
"no-repeat large log row"
>
<
span
class
=
"label"
>
no repeat updates
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large centered row"
>
<
div
class
=
"label"
>
scroll up
</
div
>
</
div
>
</
div
>
</
div
>
</
div
>
Previous
Next
axis
ScrollObserver thresholds

--- Getting started ---
Getting started
Since 4.0.0
Using with React
Anime.js can be used with React by combining React's
useEffect
()
and Anime.js
createScope
()
methods.
The following example showcase how to uses Anime.js methods straight into React code.
import
{ animate, createScope, createSpring, createDraggable }
from
'animejs'
;
import
{ useEffect, useRef, useState }
from
'react'
;
import
reactLogo
from
'./assets/react.svg'
;
import
'./App.css'
;
function
App
(
) {
const
root =
useRef
(
null
);
const
scope =
useRef
(
null
);
const
[ rotations, setRotations ] =
useState
(
0
);
useEffect
(
() =>
{
scope.
current
=
createScope
({ root }).
add
(
self
=>
{
// Every anime.js instances declared here are now scopped to <div ref={root}>
// Created a bounce animation loop
animate
(
'.logo'
, {
scale
: [
{
to
:
1.25
,
ease
:
'inOut(3)'
,
duration
:
200
},
{
to
:
1
,
ease
:
createSpring
({
stiffness
:
300
}) }
],
loop
:
true
,
loopDelay
:
250
,
});
// Make the logo draggable around its center
createDraggable
(
'.logo'
, {
container
: [
0
,
0
,
0
,
0
],
releaseEase
:
createSpring
({
stiffness
:
200
})
});
// Register function methods to be used outside the useEffect
self.
add
(
'rotateLogo'
,
(
i
) =>
{
animate
(
'.logo'
, {
rotate
: i *
360
,
ease
:
'out(4)'
,
duration
:
1500
,
});
});
});
// Properly cleanup all anime.js instances declared inside the scope
return
() =>
scope.
current
.
revert
()
}, []);
const
handleClick
= (
) => {
setRotations
(
prev
=>
{
const
newRotations = prev +
1
;
// Animate logo rotation on click using the method declared inside the scope
scope.
current
.
methods
.
rotateLogo
(newRotations);
return
newRotations;
});
};
return
(
<
div
ref
=
{root}
>
<
div
className
=
"large centered row"
>
<
img
src
=
{reactLogo}
className
=
"logo react"
alt
=
"React logo"
/>
</
div
>
<
div
className
=
"medium row"
>
<
fieldset
className
=
"controls"
>
<
button
onClick
=
{handleClick}
>
rotations: {rotations}
</
button
>
</
fieldset
>
</
div
>
</
div
>
)
}
export
default
App
;
Previous
Next
Using with vanilla JS
Timer

--- Animation ---
Animation

Playback settings
Since 4.0.0
frameRate
V4
JS
Determines the number of frames per second (fps) an animation is played at.
This value can be modified later with
animation.
fps
=
30
.
Accepts
A
Number
greater than
0
The frame rate is capped to the monitor refresh rate or in some cases by the browser itself.
Default
120
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
frameRate
=
30
;
import
{ animate }
from
'animejs'
;
const
[ $range ] = utils.$(
'.range'
);
const
[ $fps ] = utils.$(
'.fps'
);
const
animation =
animate
(
'.circle'
, {
x
:
'16rem'
,
loop
:
true
,
alternate
:
true
,
frameRate
:
60
,
});
const
updateFps
= (
) => {
const
{ value } = $range;
$fps.
innerHTML
= value;
animation.
fps
= value;
}
$range.
addEventListener
(
'input'
, updateFps);
<
div
class
=
"large row"
>
<
div
class
=
"circle"
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
fps
</
span
>
<
span
class
=
"fps value"
>
60
</
span
>
</
pre
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
input
type
=
"range"
min
=
0
max
=
120
value
=
60
step
=
1
class
=
"range"
/>
</
fieldset
>
</
div
>
Previous
Next
autoplay
playbackRate

--- SVG ---
SVG
Since 4.0.0
createDrawable()
Creates a
Proxy
of an
SVGElement
exposing an extra
draw
property that defines how much of the line is visible / drawn.
const
[ drawable ] = svg.
createDrawable
(target);
Parameters
Name
Accepts
target
CSS selector
|
SVGLineElement
|
SVGPathElement
|
SVGPolylineElement
|
SVGPolylineElement
|
SVGRectElement
Returns
An
Array
of
Proxy
SVGElement
The added
draw
property accepts a
String
containing a
start
and
end
values separated by an empty space to define how much of the line is drawn.
const
[ drawable ] = svg.
createDrawable
(target);
0
1
drawable.
draw
=
'0 1'
; |[———————————————————]|
0
.5
drawable.
draw
=
'0 .5'
; |[—————————] |
.25
.75
drawable.
draw
=
'.25 .75'
; | [—————————] |
.5
1
drawable.
draw
=
'.5 1'
; | [—————————]|
1
1
drawable.
draw
=
'1 1'
; | []|
Animating an element with the
vector-effect
attribute/styles set to
non-scaling-stroke
can be slow since the scale factor value for the path must be recalculated on every tick in order to handle changes in the size of the SVG.
import
{ animate, svg, stagger }
from
'animejs'
;
animate
(svg.
createDrawable
(
'.line'
), {
draw
: [
'0 0'
,
'0 1'
,
'1 1'
],
ease
:
'inOutQuad'
,
duration
:
2000
,
delay
:
stagger
(
100
),
loop
:
true
});
<
svg
viewBox
=
"0 0 304 112"
>
<
g
stroke
=
"currentColor"
fill
=
"none"
fill-rule
=
"evenodd"
stroke-linecap
=
"round"
stroke-linejoin
=
"round"
stroke-width
=
"2"
>
<
path
class
=
"line"
d
=
"M59 90V56.136C58.66 46.48 51.225 39 42 39c-9.389 0-17 7.611-17 17s7.611 17 17 17h8.5v17H42C23.222 90 8 74.778 8 56s15.222-34 34-34c18.61 0 33.433 14.994 34 33.875V90H59z"
/>
<
polyline
class
=
"line"
points
=
"59 22.035 59 90 76 90 76 22 59 22"
/>
<
path
class
=
"line"
d
=
"M59 90V55.74C59.567 36.993 74.39 22 93 22c18.778 0 34 15.222 34 34v34h-17V56c0-9.389-7.611-17-17-17-9.225 0-16.66 7.48-17 17.136V90H59z"
/>
<
polyline
class
=
"line"
points
=
"127 22.055 127 90 144 90 144 22 127 22"
/>
<
path
class
=
"line"
d
=
"M127 90V55.74C127.567 36.993 142.39 22 161 22c18.778 0 34 15.222 34 34v34h-17V56c0-9.389-7.611-17-17-17-9.225 0-16.66 7.48-17 17.136V90h-17z"
/>
<
path
class
=
"line"
d
=
"M118.5 22a8.5 8.5 0 1 1-8.477 9.067v-1.134c.283-4.42 3.966-7.933 8.477-7.933z"
/>
<
path
class
=
"line"
d
=
"M144 73c-9.389 0-17-7.611-17-17v-8.5h-17V56c0 18.778 15.222 34 34 34V73z"
/>
<
path
class
=
"line"
d
=
"M178 90V55.74C178.567 36.993 193.39 22 212 22c18.778 0 34 15.222 34 34v34h-17V56c0-9.389-7.611-17-17-17-9.225 0-16.66 7.48-17 17.136V90h-17z"
/>
<
path
class
=
"line"
d
=
"M263 73c-9.389 0-17-7.611-17-17s7.611-17 17-17c9.18 0 16.58 7.4 17 17h-17v17h34V55.875C296.433 36.994 281.61 22 263 22c-18.778 0-34 15.222-34 34s15.222 34 34 34V73z"
/>
<
path
class
=
"line"
d
=
"M288.477 73A8.5 8.5 0 1 1 280 82.067v-1.134c.295-4.42 3.967-7.933 8.477-7.933z"
/>
</
g
>
</
svg
>
Previous
Next
morphTo()
createMotionPath()

--- Web Animation API ---
Web Animation API

Improvements to WAAPI
Since 4.0.0
Function based values
Adds
Function based value
support to WAAPI animations, allowing passing different values pert targets.
Syntax comparison
Anime.js
waapi.
animate
(
'.square'
, {
translate
:
() =>
`
${utils.random(
10
,
17
)}
rem`
,
rotate
:
() =>
utils.
random
(-
180
,
180
),
scale
:
(
_, i
) =>
.25
+ (i *
.25
),
delay
:
stagger
(
100
)
});
WAAPI equivalent
document
.
querySelectorAll
(
'.square'
).
forEach
(
(
$el, i
) =>
{
$el.
animate
({
translate
:
`
${utils.random(
10
,
17
)}
rem`
,
rotate
: utils.
random
(-
180
,
180
),
scale
:
.25
+ (i *
.25
),
}, {
duration
:
1000
,
delay
: i *
100
,
easing
:
'ease-out'
,
}).
finished
.
then
(
() =>
{
$el.
style
.
translate
=
'100px'
;
})
});
import
{ waapi, utils, stagger }
from
'animejs'
;
waapi.
animate
(
'.square'
, {
translate
:
() =>
`
${utils.random(
10
,
17
)}
rem`
,
rotate
:
() =>
utils.
random
(-
180
,
180
),
scale
:
(
_, i
) =>
.25
+ (i *
.25
),
duration
: $el => $el.
dataset
.
duration
,
delay
:
stagger
(
100
)
});
<
div
class
=
"small row"
>
<
div
data-duration
=
"400"
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
data-duration
=
"600"
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
data-duration
=
"800"
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
data-duration
=
"1000"
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Default units
Individual CSS transforms

--- Draggable ---
Draggable

Callbacks
Since 4.0.0
onDrag
Executes a function when the element is being dragged.
Accepts
A
Function
whose first argument returns the draggable itself
Default
noop
import
{ createDraggable, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
drags =
0
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
onDrag
:
() =>
$value.
textContent
= ++drags
});
<
div
class
=
"large padded grid square-grid"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
drags
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
Previous
Next
onGrab
onUpdate

--- Stagger ---
Stagger

Parameters
Since 2.0.0
Stagger from
Defines the starting position of the stagger effect.
Accepts
Value
Description
Number
The starting index of the effect
'first'
Equivalent to index
0
'center'
Starts the effect from the center
'last'
Starts the effect from the last element
Default
0
import
{ createtimeline, stagger }
from
'animejs'
;
const
tl =
createTimeline
({
loop
:
true
,
alternate
:
true
,
})
.
add
(
'.row:nth-child(1) .square'
, {
scale
:
0
,
delay
:
stagger
(
50
, {
from
:
8
}),
})
.
add
(
'.row:nth-child(2) .square'
, {
scale
:
0
,
delay
:
stagger
(
50
, {
from
:
'first'
}),
})
.
add
(
'.row:nth-child(3) .square'
, {
scale
:
0
,
delay
:
stagger
(
50
, {
from
:
'center'
}),
})
.
add
(
'.row:nth-child(4) .square'
, {
scale
:
0
,
delay
:
stagger
(
50
, {
from
:
'last'
}),
});
<
div
class
=
"small justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Stagger start
Stagger reversed

--- Animation ---
Animation

Methods
Since 4.0.0
complete()
V4
Completes the animation instantly.
Returns
The animation itself
Can be chained with other animation methods.
import
{ animate, utils, stagger }
from
'animejs'
;
const
[ $completeButton ] = utils.$(
'.complete'
);
const
animation =
animate
(
'.square'
, {
x
:
'17rem'
,
alternate
:
true
,
ease
:
'inOutSine'
,
loop
:
true
,
delay
:
stagger
(
100
),
});
const
completeAnimation
= (
) => animation.
complete
();
$completeButton.
addEventListener
(
'click'
, completeAnimation);
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button complete"
>
Complete
</
button
>
</
fieldset
>
</
div
>
Previous
Next
resume()
cancel()

--- Scope ---
Scope
Since 4.0.0
Scope parameters
import
{ createScope, animate }
from
'animejs'
;
createScope
({
┌─────────────────────────────────────────────────┐
│
root
:
'.section'
, │
│
defaults
: { │
│
duration
:
250
, │
│
ease
:
'out(4)'
, │
│ }, ├─
Parameters
│
mediaQueries
: { │
│
mobile
:
'(max-width: 640px)'
, │
│
reducedMotion
:
'(prefers-reduced-motion)'
, │
│ } │
└─────────────────────────────────────────────────┘
})
.
add
(
ctx
=>
{
const
isMobile = ctx.
matches
.
mobile
;
const
reduceMotion = ctx.
matches
.
reducedMotion
;
animate
(targets, {
x
: isMobile ?
0
:
'100vw'
,
y
: isMobile ?
'100vh'
:
0
,
duration
: reduceMotion ?
0
:
750
});
});
In this section
root
defaults
mediaQueries
Previous
Next
Register method function
root

--- Animation ---
Animation

Playback settings
Since 1.0.0
duration
Defines the default duration in milliseconds of all animation tweens.
Setting
0
to a duration completes the animation instantly upon play.
Accepts
A
Number
equal or greater than
0
A
Function based value
that returns a
Number
equal to or greater than
0
Duration values higher than
1e12
are clamped internally to
1e12
(Or approximatively 32 years).
Default
1000
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
duration
=
500
;
import
{ animate }
from
'animejs'
;
animate
(
'.dur-0'
, {
x
:
'17rem'
,
duration
:
0
,
});
animate
(
'.dur-500'
, {
x
:
'17rem'
,
duration
:
500
,
});
animate
(
'.dur-2000'
, {
x
:
'17rem'
,
duration
:
2000
});
<
div
class
=
"medium row"
>
<
div
class
=
"circle dur-0"
>
</
div
>
<
div
class
=
"padded label"
>
duration: 0
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"circle dur-500"
>
</
div
>
<
div
class
=
"padded label"
>
duration: 500
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"circle dur-2000"
>
</
div
>
<
div
class
=
"padded label"
>
duration: 2000
</
div
>
</
div
>
Previous
Next
delay
loop

--- Animatable ---
Animatable

Settings
Since 4.0.0
modifier
Defines a
Modifier function
to modify or alter the behaviour of the animated numerical value.
Accepts
Modifier function
Default
noop
import
{ createAnimatable, utils, stagger }
from
'animejs'
;
const
PI
=
Math
.
PI
;
const
clock1 =
createAnimatable
(
'.clock-1'
, {
rotate
: {
unit
:
'rad'
},
modifier
: utils.
snap
(
PI
/
10
),
duration
:
0
,
});
const
clock2 =
createAnimatable
(
'.clock-2'
, {
rotate
: {
unit
:
'rad'
},
modifier
:
v
=>
-v,
duration
:
0
,
});
const
rotateClock
= (
animatable
) => {
return
e
=>
{
const
[ $clock ] = animatable.
targets
;
const
{ width, height, left, top } = $clock.
getBoundingClientRect
();
const
x = e.
clientX
- left - width /
2
;
const
y = e.
clientY
- top - height /
2
;
animatable.
rotate
(
Math
.
atan2
(y, x) +
PI
/
2
);
}
}
const
rotateClock1 =
rotateClock
(clock1);
const
rotateClock2 =
rotateClock
(clock2);
const
onMouseMove
= e => {
rotateClock1
(e);
rotateClock2
(e);
}
window
.
addEventListener
(
'mousemove'
, onMouseMove);
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
div
class
=
"clock clock-1"
>
</
div
>
<
div
class
=
"label"
>
snapped
</
div
>
</
div
>
<
div
class
=
"col"
>
<
div
class
=
"clock clock-2"
>
</
div
>
<
div
class
=
"label"
>
inverted
</
div
>
</
div
>
</
div
>
Previous
Next
ease
Animatable methods

--- Timer ---
Timer

Methods
Since 4.0.0
reverse()
V4
Forces the timer to play backward.
Returns
The timer itself
Can be chained with other timer methods.
import
{ createTimer, utils }
from
'animejs'
;
const
[ $reverseButton ] = utils.$(
'.reverse'
);
const
[ $time ] = utils.$(
'.time'
);
const
timer =
createTimer
({
duration
:
2000
,
onUpdate
:
self
=>
$time.
innerHTML
= self.
iterationCurrentTime
,
});
const
reverseTimer
= (
) => timer.
reverse
();
$reverseButton.
addEventListener
(
'click'
, reverseTimer);
<
div
class
=
"large centered row"
>
<
div
class
=
"half col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
iteration time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button reverse"
>
Reverse
</
button
>
</
fieldset
>
</
div
>
Previous
Next
play()
pause()

--- Timer ---
Timer

Methods
Since 4.0.0
restart()
Resets all properties and set the
currentTime
of a timer to
0
.
If the
autoplay
is set to
true
, the timer plays automatically.
Returns
The timer itself
Can be chained with other timer methods.
import
{ createTimer, utils }
from
'animejs'
;
const
[ $restartButton ] = utils.$(
'.restart'
);
const
[ $time ] = utils.$(
'.time'
);
const
timer =
createTimer
({
onUpdate
:
self
=>
$time.
innerHTML
= self.
currentTime
});
const
restartTimer
= (
) => timer.
restart
();
$restartButton.
addEventListener
(
'click'
, restartTimer);
<
div
class
=
"large centered row"
>
<
div
class
=
"half col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button restart"
>
Restart
</
button
>
</
fieldset
>
</
div
>
Previous
Next
pause()
alternate()

--- Stagger ---
Stagger

Parameters
Since 2.0.0
Stagger ease
Defines an easing applied to the staggered values distribution.
Accept
ease
Default
'linear'
import
{ animate, stagger }
from
'animejs'
;
animate
(
'.square'
, {
y
:
stagger
([
'2.75rem'
,
'-2.75rem'
], {
ease
:
'inOut(3)'
}),
delay
:
stagger
(
100
, {
ease
:
'inOut(3)'
}),
});
<
div
class
=
"small justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Stagger reversed
Stagger grid

--- Draggable ---
Draggable

Callbacks
Since 4.0.0
onSnap
Executes a function every time a snap occurs when the element is being dragged.
Accepts
A
Function
whose first argument returns the draggable itself
Default
noop
import
{ createDraggable, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
snaps =
0
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
snap
:
16
,
modifier
: utils.
snap
(
16
),
// also snap the element while draggin
onSnap
:
() =>
$value.
textContent
= ++snaps
});
<
div
class
=
"large padded grid square-grid"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
snaps
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
Previous
Next
onRelease
onSettle

--- Animation ---
Animation
Since 1.0.0
Tween value types
Specify the
start
and
end
values that define the animation of animatable properties.
Animation values are assigned to
Animatable properties
and accept a wide range of syntaxes.
animate
(
'.square'
, {
x
:
'6rem'
, ─────────────────┐
y
: $el => $el.
dataset
.
y
, ───┤
scale
:
'+=.25'
, ────────────┼─
Tween
Values
opacity
: { │
from
:
.4
, ────────────────┘
},
});
In this section
Numerical
Unit conversion
Relative
Color
Color function
CSS variable
Function based
Previous
Next
Animatable properties
Numerical value

--- Animation ---
Animation

Tween parameters
Since 1.0.0
delay
Defines the delay in milliseconds at the beginning of all animated properties, or locally to a specific property.
Accepts
Number
equal to or greater than
0
Function based value
that returns a
Number
equal to or greater than
0
Default
The animation delay value (default
0
).
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
delay
=
500
;
import
{ animate }
from
'animejs'
;
const
animation =
animate
(
'.square'
, {
x
:
'17rem'
,
rotate
: {
to
:
360
,
delay
:
1000
,
// Local delay applied only to rotate property
},
delay
:
500
,
// Global delay applied to all properties
loop
:
true
,
alternate
:
true
});
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
from
duration

--- Animation ---
Animation

Methods
Since 1.0.0
alternate()
V4
Toggles the playback direction while adjusting the
currentTime
position to reflect the new time progress.
Returns
The animation itself
Can be chained with other animation methods.
import
{ animate, utils, stagger }
from
'animejs'
;
const
[ $alternateButton ] = utils.$(
'.button'
);
const
animation =
animate
(
'.square'
, {
x
:
'17rem'
,
ease
:
'inOutSine'
,
loop
:
true
,
delay
:
stagger
(
100
),
});
const
alternateAnimation
= (
) => animation.
alternate
();
$alternateButton.
addEventListener
(
'click'
, alternateAnimation);
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button"
>
Alternate
</
button
>
</
fieldset
>
</
div
>
Previous
Next
restart()
resume()

--- Animation ---
Animation

Animatable properties
Since 1.0.0
CSS transforms
The CSS
transform
property can be animated by specifying individual properties directly in the parameter object with both
JS
and
WAAPI
animate
()
versions.
This allows a greater level of control over how to animate individual transform properties, giving you more flexibility than CSS animations or native WAAPI.
The
JS
animate
()
method doesn't parse transforms declared from a CSS style declaration and transforms properties must be set directly in the inline styles of the element. You can use the built-in
utils.
set
()
function to independently set your transform values before animating an element and define in which order they must be set.
In order to animate the
transform
property directly, it's recommended to use the
WAAPI
powered
waapi.
animate
()
method.
Individual transforms with
WAAPI
only works for browsers that support
CSS
.
registerProperty
(propertyDefinition)
, and fallback to no animations.
Valid individual CSS transforms properties
Name
Shorthand
Default Value
Default Unit
translateX
x
'0px'
'px'
translateY
y
'0px'
'px'
translateZ
z
'0px'
'px'
rotate
—
'0deg'
'deg'
rotateX
—
'0deg'
'deg'
rotateY
—
'0deg'
'deg'
rotateZ
—
'0deg'
'deg'
scale
—
'1'
—
scaleX
—
'1'
—
scaleY
—
'1'
—
scaleZ
—
'1'
—
skew
—
'0deg'
'deg'
skewX
—
'0deg'
'deg'
skewY
—
'0deg'
'deg'
perspective
—
'0px'
'px'
import
{ animate, waapi }
from
'animejs'
;
animate
(
'.square'
, {
x
:
'15rem'
,
// TranslateX shorthand
scale
:
1.25
,
skew
: -
45
,
rotate
:
'1turn'
,
});
// the WAAPI version is recommanded if you want to animate the transform property directly
waapi.
animate
(
'.square'
, {
transform
:
'translateX(15rem) scale(1.25) skew(-45deg) rotate(1turn)'
,
});
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
span
class
=
"padded label"
>
JS / WAAPI
</
span
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
span
class
=
"padded label"
>
WAAPI
</
span
>
</
div
>
Previous
Next
CSS Properties
CSS Variables

--- Timer ---
Timer

Methods
Since 4.0.0
resume()
Resumes the playback of a paused timer in its current direction.
Returns
The timer itself
Can be chained with other timer methods.
import
{ createTimer, utils }
from
'animejs'
;
const
[ $resumeButton, $pauseButton, $alternateButton ] = utils.$(
'.button'
);
const
[ $time ] = utils.$(
'.time'
);
const
timer =
createTimer
({
duration
:
2000
,
onUpdate
:
self
=>
$time.
innerHTML
= self.
iterationCurrentTime
,
loop
:
true
,
});
const
resumeTimer
= (
) => timer.
resume
();
const
pauseTimer
= (
) => timer.
pause
();
const
alternateTimer
= (
) => timer.
alternate
();
$resumeButton.
addEventListener
(
'click'
, resumeTimer);
$pauseButton.
addEventListener
(
'click'
, pauseTimer);
$alternateButton.
addEventListener
(
'click'
, alternateTimer);
<
div
class
=
"large centered row"
>
<
div
class
=
"half col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
iteration time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button"
>
Resume
</
button
>
<
button
class
=
"button"
>
Pause
</
button
>
<
button
class
=
"button"
>
Alternate
</
button
>
</
fieldset
>
</
div
>
Previous
Next
alternate()
complete()

--- Draggable ---
Draggable

Settings
Since 4.0.0
releaseDamping
Specifies the damping applied to the dragged element after release. Affects the speed, movement distance and bounciness of the dragged element. Lower values increases the bounciness when reaching the bounds of the container.
releaseDamping
has no effect if a spring is passed to the
releaseDamping
parameter and is overridden by the spring
damping
value.
Accepts
A
Number
between
0
and
1000
Default
10
import
{ createDraggable }
from
'animejs'
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
releaseDamping
:
5
,
});
createDraggable
(
'.circle'
, {
container
:
'.grid'
,
releaseStiffness
:
30
,
});
<
div
class
=
"large centered grid square-grid"
>
<
div
class
=
"square draggable"
>
</
div
>
<
div
class
=
"circle draggable"
>
</
div
>
</
div
>
Previous
Next
releaseStiffness
velocityMultiplier

--- Animation ---
Animation

Playback settings
Since 4.0.0
reversed
V4
Defines the initial direction of the animation.
Accepts
Boolean
If set to
true
the animation plays backwards
If set to
false
the animation plays forwards
Default
false
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
reversed
=
true
;
import
{ animate }
from
'animejs'
;
animate
(
'.dir-normal'
, {
x
:
'17rem'
,
reversed
:
false
,
// Default behaviour
loop
:
true
});
animate
(
'.dir-reverse'
, {
x
:
'17rem'
,
reversed
:
true
,
loop
:
true
});
<
div
class
=
"medium row"
>
<
div
class
=
"circle dir-normal"
>
</
div
>
<
div
class
=
"padded label"
>
reversed: false
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"circle dir-reverse"
>
</
div
>
<
div
class
=
"padded label"
>
reversed: true
</
div
>
</
div
>
Previous
Next
alternate
autoplay

--- Draggable ---
Draggable
Since 4.0.0
Draggable settings
Draggable settings are defined directly in the
createDraggable
()
parameters
Object
.
createDraggable
(
'.square'
, {
x
: {
snap
:
100
},
y
: {
snap
:
50
},
modifier
: utils.
wrap
(-
200
,
0
),
┌───────────────────────┐
│
containerPadding
:
10
, │
│
releaseStiffness
:
40
, ├─
Settings
│
releaseEase
:
'out(3)'
,│
└───────────────────────┘
onGrab
:
() =>
{},
onDrag
:
() =>
{},
onRelease
:
() =>
{},
});
In this section
trigger
container
containerPadding
containerFriction
releaseContainerFriction
releaseMass
releaseStiffness
releaseDamping
velocityMultiplier
minVelocity
maxVelocity
releaseEase
dragSpeed
scrollThreshold
scrollSpeed
cursor
Previous
Next
Draggable axes parameters
trigger

--- Getting started ---
Getting started
Since 4.0.0
Using with vanilla JS
Using Anime.js in vanilla JavaScript is pretty straightforward, simply import the modules you need and start animating.
The following example showcase how to uses Anime.js methods with a vanilla JS code base.
import
{ animate, utils, createDraggable, createSpring }
from
'animejs'
;
const
[ $logo ] = utils.$(
'.logo.js'
);
const
[ $button ] = utils.$(
'button'
);
let
rotations =
0
;
// Created a bounce animation loop
animate
(
'.logo.js'
, {
scale
: [
{
to
:
1.25
,
ease
:
'inOut(3)'
,
duration
:
200
},
{
to
:
1
,
ease
:
createSpring
({
stiffness
:
300
}) }
],
loop
:
true
,
loopDelay
:
250
,
});
// Make the logo draggable around its center
createDraggable
(
'.logo.js'
, {
container
: [
0
,
0
,
0
,
0
],
releaseEase
:
createSpring
({
stiffness
:
200
})
});
// Animate logo rotation on click
const
rotateLogo
= (
) => {
rotations++;
$button.
innerText
=
`rotations:
${rotations}
`
;
animate
($logo, {
rotate
: rotations *
360
,
ease
:
'out(4)'
,
duration
:
1500
,
});
}
$button.
addEventListener
(
'click'
, rotateLogo);
<
div
class
=
"large centered row"
>
<
svg
class
=
"logo js"
preserveAspectRatio
=
"xMidYMid meet"
viewBox
=
"0 0 630 630"
>
<
path
fill
=
"currentColor"
d
=
"M577,0 C606.271092,0 630,23.7289083 630,53 L630,577 C630,606.271092 606.271092,630 577,630 L53,630 C23.7289083,630 0,606.271092 0,577 L0,53 C0,23.7289083 23.7289083,0 53,0 L577,0 Z M479.5,285.89 C426.63,285.89 392.8,319.69 392.8,364.09 C392.8,411.808 420.615238,434.63146 462.622716,452.742599 L478.7,459.64 L483.441157,461.719734 C507.57404,472.359996 521.8,479.858 521.8,498.94 C521.8,515.88 506.13,528.14 481.6,528.14 C452.4,528.14 435.89,512.91 423.2,492.19 L375.09,520.14 C392.47,554.48 427.99,580.68 482.97,580.68 C539.2,580.68 581.07,551.48 581.07,498.18 C581.07,448.74 552.67,426.75 502.37,405.18 L487.57,398.84 L485.322788,397.859899 C461.5199,387.399087 451.17,380.1172 451.17,362.89 C451.17,348.52 462.16,337.52 479.5,337.52 C496.5,337.52 507.45,344.69 517.6,362.89 L563.7,333.29 C544.2,298.99 517.14,285.89 479.5,285.89 Z M343.09,289.27 L283.89,289.27 L283.89,490.57 C283.89,520.16 271.62,527.77 252.17,527.77 C231.83,527.77 223.37,513.82 214.07,497.32 L165.88,526.495 C179.84,556.04 207.29,580.57 254.69,580.57 C307.15,580.57 343.09,552.67 343.09,491.37 L343.09,289.27 Z"
/>
</
svg
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
>
rotations: 0
</
button
>
</
fieldset
>
</
div
>
Previous
Next
Imports
Using with React

--- Timer ---
Timer

Methods
Since 4.0.0
alternate()
Toggles the playback direction while adjusting the
currentTime
position to reflect the new time progress.
Only the
iterationTime
is actually played in reverse since the
currentTime
always starts at
0
and ends at
duration
.
Returns
The timer itself
Can be chained with other timer methods.
import
{ createTimer, utils }
from
'animejs'
;
const
[ $alternateButton ] = utils.$(
'.button'
);
const
[ $iterationTime ] = utils.$(
'.iteration-time'
);
const
timer =
createTimer
({
duration
:
10000
,
loop
:
true
,
onUpdate
:
self
=>
{
$iterationTime.
innerHTML
= self.
iterationCurrentTime
;
}
});
const
alternateTimer
= (
) => timer.
alternate
();
$alternateButton.
addEventListener
(
'click'
, alternateTimer);
<
div
class
=
"large centered row"
>
<
div
class
=
"half col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
iteration time
</
span
>
<
span
class
=
"iteration-time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button"
>
Alternate
</
button
>
</
fieldset
>
</
div
>
Previous
Next
restart()
resume()

--- Draggable ---
Draggable

Axes parameters
Since 4.0.0
x
Defines the behaviour of the x-axis by either passing an object of parameters or disabling it by setting the value to
false
.
Accepts
Boolean
Draggable axes parameters
Object
Default
true
import
{ createDraggable }
from
'animejs'
;
createDraggable
(
'.square.enabled'
, {
x
:
true
});
createDraggable
(
'.square.disabled'
, {
x
:
false
});
<
div
class
=
"large spaced-evenly row"
>
<
div
class
=
"square enabled draggable"
>
</
div
>
<
div
class
=
"square disabled draggable"
>
</
div
>
</
div
>
<
div
class
=
"large spaced-evenly row"
>
<
div
class
=
"label"
>
x enabled
</
div
>
<
div
class
=
"label"
>
x disabled
</
div
>
</
div
>
Previous
Next
Draggable axes parameters
y

--- ScrollObserver ---
ScrollObserver

Callbacks
Since 4.0.0
onEnterForward
Triggers a function every time the
enter
threshold
is met by scrolling forward.
Accepts
A
Function
whose first argument returns the ScrollObserver instance
Default
noop
import
{ animate, onScroll, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
entered =
0
;
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
ease
:
'linear'
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
enter
:
'bottom-=50 top'
,
leave
:
'top+=60 bottom'
,
sync
:
true
,
debug
:
true
,
onEnterForward
:
() =>
$value.
textContent
= ++entered,
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded sticky"
>
<
div
class
=
"large row"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
entered
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section"
>
</
div
>
</
div
>
</
div
>
Previous
Next
onEnter
onEnterBackward

--- Engine ---
Engine

Methods
Since 4.0.0
pause()
Pauses the engine's main loop, pausing all active
Timer
,
Animation
, and
Timeline
instances. Use
engine.
resume
()
to restart the animations from where they paused.
engine.
pause
();
// Stops all animations
engine.
resume
();
// Resumes all animations
Timer
,
Animation
, or
Timeline
can still be added when the engine is paused, but won't play until the engine is started again.
Returns
Engine
import
{ engine, animate, utils }
from
'animejs'
;
const
[ $container ] = utils.$(
'.container'
);
const
[ $add, $pause ] = utils.$(
'button'
);
function
addAnimation
(
) {
const
$particle =
document
.
createElement
(
'div'
);
$particle.
classList
.
add
(
'particle'
);
$container.
appendChild
($particle);
animate
($particle, {
x
: utils.
random
(-
10
,
10
,
2
) +
'rem'
,
y
: utils.
random
(-
3
,
3
,
2
) +
'rem'
,
scale
: [{
from
:
0
,
to
:
1
}, {
to
:
0
}],
loop
:
true
,
});
}
let
timeout =
3
;
let
interval;
function
pauseEngine
(
) {
engine.
pause
();
$pause.
setAttribute
(
'disabled'
,
'true'
);
$pause.
innerHTML
=
`Resume in
${timeout--}
seconds`
;
interval =
setInterval
(
() =>
{
if
(timeout <=
0
) {
clearInterval
(interval);
engine.
resume
();
$pause.
removeAttribute
(
'disabled'
);
$pause.
innerHTML
=
'Pause for 3 seconds'
;
timeout =
3
;
}
else
{
$pause.
innerHTML
=
`Resume in
${timeout--}
seconds`
;
}
},
1000
);
}
$add.
addEventListener
(
'click'
, addAnimation);
$pause.
addEventListener
(
'click'
, pauseEngine);
<
div
class
=
"large row container"
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
>
Add animation
</
button
>
<
button
>
Pause for 3 seconds
</
button
>
</
fieldset
>
</
div
>
Previous
Next
update()
resume()

--- Timeline ---
Timeline

Callbacks
Since 4.0.0
onPause
V4
Executes a function when a running timeline is paused, either manually or automatically.
A timeline pauses when any of the following occurs during playback:
The
.
pause
()
method is called
The
.
cancel
()
method is called
The
.
revert
()
method is called
All child animations tweens are overlapped by another timeline or animation with
composition
:
'replace'
All child animations targets have been removed and no other timers are active
Accepts
A
Function
whose first argument returns the animation itself
Default
noop
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
onPause
=
self
=>
console
.
log
(self.
id
);
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $animateButton, $pauseButton, $removeButton ] = utils.$(
'.button'
);
const
[ $value ] = utils.$(
'.value'
);
const
shapes = utils.$(
'.shape'
);
const
[ $triangle, $square, $circle ] = shapes;
let
paused =
0
;
let
alternate =
0
;
let
tl;
const
animateShapes
= (
) => {
alternate = !alternate;
const
x = (alternate ?
15
:
0
) +
'rem'
;
const
rotate = (alternate ?
360
: -
360
);
tl =
createTimeline
({
defaults
: {
duration
:
2000
},
onPause
:
() =>
$value.
textContent
= ++paused
})
.
add
($circle, { x },
0
)
.
add
($triangle, { x },
0
)
.
add
($square, { x },
0
)
.
add
(shapes, { rotate },
0
);
}
const
pauseTL
= (
) => {
if
(tl) tl.
pause
();
}
const
removeTargets
= (
) => {
utils.
remove
(shapes);
}
animateShapes
();
$animateButton.
addEventListener
(
'click'
, animateShapes);
$pauseButton.
addEventListener
(
'click'
, pauseTL);
$removeButton.
addEventListener
(
'click'
, removeTargets);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"shape triangle"
>
</
div
>
<
div
class
=
"shape square"
>
</
div
>
<
div
class
=
"shape circle"
>
</
div
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
paused
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button"
>
Create TL
</
button
>
<
button
class
=
"button"
>
Pause TL
</
button
>
<
button
class
=
"button"
>
Remove shapes
</
button
>
</
fieldset
>
</
div
>
Previous
Next
onLoop
then()

--- ScrollObserver ---
ScrollObserver

Methods
Since 4.0.0
revert()
Disables the ScrollObserver, removes all
EventListener
and removes the
debug
HTMLElement
if necessary.
Returns
The ScrollObserver itself
import
{ animate, onScroll }
from
'animejs'
;
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
ease
:
'linear'
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
enter
:
'bottom-=50 top'
,
leave
:
'top+=60 bottom'
,
sync
:
1
,
debug
:
true
,
onSyncComplete
:
self
=>
self.
revert
()
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"label"
>
scroll down
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section"
>
</
div
>
</
div
>
</
div
>
Previous
Next
refresh()
scrollObserver properties

--- Timeline ---
Timeline

Methods
Since 2.0.0
restart()
Sets the
currentTime
of a timeline to
0
and reset all properties of the elements to their initial state.
If the
autoplay
parameter is set to
true
, the timeline plays automatically.
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $restartButton ] = utils.$(
'.restart'
);
const
tl =
createTimeline
({
loop
:
true
,
alternate
:
true
,
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
500
)
.
add
(
'.square'
, {
x
:
'15rem'
},
1000
);
const
restartTimeline
= (
) => tl.
restart
();
$restartButton.
addEventListener
(
'click'
, restartTimeline);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button restart"
>
Restart
</
button
>
</
fieldset
>
</
div
>
Previous
Next
pause()
alternate()

--- Timeline ---
Timeline

Methods
Since 4.0.0
reverse()
V4
Forces the timeline to play backward.
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $reverseButton ] = utils.$(
'.reverse'
);
const
tl =
createTimeline
()
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
500
)
.
add
(
'.square'
, {
x
:
'15rem'
},
1000
);
const
reverseTimeline
= (
) => tl.
reverse
();
$reverseButton.
addEventListener
(
'click'
, reverseTimeline);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button reverse"
>
Reverse
</
button
>
</
fieldset
>
</
div
>
Previous
Next
play()
pause()

--- Timer ---
Timer

Callbacks
Since 4.0.0
onBegin
Executes a function when a timer starts.
Accepts
A
Function
whose first argument returns the timer itself
Default
noop
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
onBegin
=
self
=>
console
.
log
(self.
id
);
import
{ createTimer, utils }
from
'animejs'
;
const
[ $status ] = utils.$(
'.status'
);
const
[ $time ] = utils.$(
'.time'
);
const
timer =
createTimer
({
delay
:
2000
,
duration
:
2000
,
onBegin
:
self
=>
$status.
innerHTML
=
'true'
});
const
logTimer =
createTimer
({
duration
:
4000
,
onUpdate
:
self
=>
$time.
innerHTML
= timer.
currentTime
});
<
div
class
=
"large row"
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
began
</
span
>
<
span
class
=
"status value"
>
false
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
Previous
Next
Timer callbacks
onComplete

--- Documentation ---
Documentation
This documentation is only made possible with the help of my sponsors
Anime.js is developed and maintained with the generous support of my sponsors. If you're using Anime.js, a monthly contribution would be highly valuable.
Funding goal
31%
Jordan
Sebastian
Ivan Zarea
Rhemery
satoshionoda
bparrillo
Dikshith
Richard Davey
Mase Graye
Aaron Wade
entrepeneur4lyf
Matvey Levinson
Nicolaj Andersen
lilchocobo
Artisann
Daniel Cruz
Mike
Scott Ashton
Njordr
Huly® Platform™
Mr White
Ismail Magomedov
David Lapointe Gilbert
Stefan
Carmen Ansio
jamesd256
Kaze Wong
Frank Frick
Ado Kukic
bandit.camp
Osande de Jesus
talli
EvGreen
willmcinnis
Luke Jackson
Calvin Ducharme
Donovan Dikaio
Zaid Al Kazemi
Daniela Aviles
Arjun Samir Patel
lucasskywalker
Gokul Js
Micky Cormier
Umut Ozan Yıldırım
michelducker
Joshua T.
ash-ftdx
InTheScript
Sam Denty
RickEvry
Help the project via
GitHub Sponsors
.
Platinum sponsors
Huly
Ice Open Network
Your logo here
In this section
Getting started
Timer
Animation
Timeline
Animatable
Draggable
ScrollObserver
Scope
Stagger
SVG
Utilities
WAAPI
Engine
Next
Getting started

--- Web Animation API ---
Web Animation API
Since 4.0.0
Hardware-accelerated animations
One of the biggest advantages of WAAPI over
requestAnimationFrame
powered animations is the ability to run animations off the main thread, leading to smoother animations when the CPU is busy while consuming less power, which can improve battery life.
The catch is that not all properties can be hardware-accelerated, there are currently only a few that can create a new compositor layer and run off the main thread on every browser.
Hardware-accelerated properties in every major browsers:
opacity
transform
translate
scale
rotate
Hardware-accelerated properties in some browsers:
clip-path
filter
Safari (desktop and mobile) currently won't trigger hardware acceleration if the animation is using a custom
'linear()'
easing. This mean that custom power eases like:
'out(3)'
,
'in(3)'
,
'inOut(3)'
, and every JavaScript easing passed to
waapi.
animate
()
prevents the animation to be hardware accelerated, even if the property supports it.
import
{ animate, waapi, createTimer, utils }
from
'animejs'
;
const
[ $block ] = utils.$(
'.button'
);
const
waapiAnim = waapi.
animate
(
'.waapi.square'
, {
translate
:
270
,
rotate
:
180
,
alternate
:
true
,
loop
:
true
,
ease
:
'cubicBezier(0, 0, .58, 1)'
,
});
const
jsAnim =
animate
(
'.js.square'
, {
x
:
270
,
rotate
:
180
,
ease
:
'cubicBezier(0, 0, .58, 1)'
,
alternate
:
true
,
loop
:
true
,
});
const
blockCPUTimer =
createTimer
({
onUpdate
:
() =>
{
const
end =
Date
.
now
() +
100
;
while
(
Date
.
now
() < end) {
Math
.
random
() *
Math
.
random
();
}
},
autoplay
:
false
});
let
isBusy =
false
;
const
toggleCPU
= (
) => {
blockCPUTimer[isBusy ?
'pause'
:
'play'
]();
$block.
innerText
= (isBusy ?
'block'
:
'free'
) +
' CPU'
;
isBusy = !isBusy;
}
$block.
addEventListener
(
'click'
, toggleCPU);
<
div
class
=
"medium row"
>
<
div
class
=
"waapi square"
>
</
div
>
<
span
class
=
"padded label"
>
WAAPI
</
span
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"js square"
>
</
div
>
<
span
class
=
"padded label"
>
JS
</
span
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button"
>
Block CPU
</
button
>
</
fieldset
>
</
div
>
Previous
Next
When to use WAAPI
Improvements to the Web Animation API

--- ScrollObserver ---
ScrollObserver

Callbacks
Since 4.0.0
onLeaveForward
Triggers a function every time the
leave
threshold
is met by scrolling forward.
Accepts
A
Function
whose first argument returns the ScrollObserver instance
Default
noop
import
{ animate, onScroll, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
exits =
0
;
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
ease
:
'linear'
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
enter
:
'bottom-=50 top'
,
leave
:
'top+=60 bottom'
,
sync
:
true
,
debug
:
true
,
onLeaveForward
:
() =>
$value.
textContent
= ++exits,
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded sticky"
>
<
div
class
=
"large row"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
exits
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section"
>
</
div
>
</
div
>
</
div
>
Previous
Next
onLeave
onLeaveBackward

--- Utilities ---
Utilities
Since 2.0.0
remove()
Removes one or multiple targets from all active animations, a specific instance or a specific property, cancelling any
Animation
or
Timeline
referencing these targets if needed.
const
removed = utils.
remove
(targets, instance, propertyName);
Parameters
Name
Accepts
targets
Targets
instance
(opt)
Animation
|
Timeline
propertyName
(opt)
Animatable Properties
name
String
Returns
An
Array
of the removed targeted elements
import
{ animate, utils }
from
'animejs'
;
let
updates =
0
;
const
[ $removeFirstButton ] = utils.$(
'.remove-1'
);
const
[ $removeSecondButton ] = utils.$(
'.remove-2'
);
const
[ $updates ] = utils.$(
'.value'
);
const
animation =
animate
(
'.square'
, {
x
:
'17rem'
,
rotate
:
360
,
alternate
:
true
,
loop
:
true
,
onUpdate
:
() =>
{
$updates.
textContent
= updates++;
}
});
$removeFirstButton.
onclick
=
() =>
{
utils.
remove
(
'.row:nth-child(1) .square'
);
}
$removeSecondButton.
onclick
=
() =>
{
utils.
remove
(
'.row:nth-child(2) .square'
, animation,
'x'
);
}
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
updates
</
span
>
<
span
class
=
"value"
>
--
</
span
>
</
pre
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button remove-1"
>
Remove all first
</
button
>
<
button
class
=
"button remove-2"
>
Remove x second
</
button
>
</
fieldset
>
</
div
>
Previous
Next
set()
cleanInlineStyles()

--- Animation ---
Animation
Since 4.0.0
Targets
Specify the elements to which property value changes are applied.
Animation targets are defined in the first argument of the
animate
()
function.
animate
(
┌────────────┐
│
'.square'
, ├─
Targets
└────────────┘
{
translateX
:
100
,
scale
:
2
,
opacity
:
.5
,
duration
:
400
,
delay
:
250
,
ease
:
'out(3)'
,
loop
:
3
,
alternate
:
true
,
autoplay
:
false
,
onBegin
:
() =>
{},
onLoop
:
() =>
{},
onUpdate
:
() =>
{},
});
In this section
CSS Selector
DOM Elements
JavaScript Objects
Array of targets
Previous
Next
Animation
CSS Selector

--- Timer ---
Timer

Playback settings
Since 4.0.0
delay
Defines the time in milliseconds before the timer starts.
Accepts
A
Number
equal to or greater than
0
Default
0
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
delay
=
500
;
import
{ createTimer, utils }
from
'animejs'
;
const
[ $time ] = utils.$(
'.time'
);
createTimer
({
delay
:
2000
,
onUpdate
:
self
=>
$time.
innerHTML
= self.
currentTime
});
<
div
class
=
"large centered row"
>
<
div
class
=
"half col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
Previous
Next
Timer playback settings
duration

--- Draggable ---
Draggable

Methods
Since 4.0.0
setY()
Manually set the
y
position of the draggable target.
Is equivalent updating
draggable.
y
directly when no
muteCallback
parameter is defined.
Parameters
Name
Type
Description
y
Number
The new y value
muteCallback
(opt)
Boolean
If
true
, prevents the
onUpdate
callback to fire (default
false
)
Returns
The draggable itself
import
{ createDraggable, utils }
from
'animejs'
;
const
[ $setButton ] = utils.$(
'.set'
);
const
draggable =
createDraggable
(
'.square'
);
const
setRandomY
= (
) => draggable.
setY
(utils.
random
(-
40
,
40
));
$setButton.
addEventListener
(
'click'
, setRandomY);
<
div
class
=
"large centered row"
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
<
div
class
=
"large row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button set"
>
Set random y
</
button
>
</
fieldset
>
</
div
>
Previous
Next
setX()
animateInView()

--- Animatable ---
Animatable

Settings
Since 4.0.0
unit
Defines the unit for the animated value of the property.
Accepts
A
String
containing a valid CSS unit
import
{ createAnimatable, utils }
from
'animejs'
;
const
$demos =
document
.
querySelector
(
'#docs-demos'
);
const
[ $clock ] = utils.$(
'.clock'
);
let
bounds = $clock.
getBoundingClientRect
();
const
refreshBounds
= (
) => bounds = $clock.
getBoundingClientRect
();
const
clock =
createAnimatable
($clock, {
rotate
: {
unit
:
'rad'
},
// Set the unit to 'rad'
duration
:
400
,
});
const
{
PI
} =
Math
;
let
lastAngle =
0
let
angle =
PI
/
2
;
const
onMouseMove
= e => {
const
{ width, height, left, top } = bounds;
const
x = e.
clientX
- left - width /
2
;
const
y = e.
clientY
- top - height /
2
;
const
currentAngle =
Math
.
atan2
(y, x);
const
diff = currentAngle - lastAngle;
angle += diff >
PI
? diff -
2
*
PI
: diff < -
PI
? diff +
2
*
PI
: diff;
lastAngle = currentAngle;
clock.
rotate
(angle);
// Pass the new angle value in rad
}
window
.
addEventListener
(
'mousemove'
, onMouseMove);
$demos.
addEventListener
(
'scroll'
, refreshBounds);
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
div
class
=
"clock"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"small centered row"
>
<
span
class
=
"label"
>
Move cursor around
</
span
>
</
div
>
Previous
Next
Animatable settings
duration

--- Web Animation API ---
Web Animation API
Since 4.0.0
waapi.convertEase()
Converts any JavaScript easing functions into a compatible WAAPI
linear easing
.
import
{ waapi, createSpring }
from
'animejs'
;
const
spring =
createSpring
({
stiffness
:
12
});
const
linearEasing = waapi.
convertEase
(spring.
ease
);
import
{ waapi, createSpring }
from
'animejs'
;
const
springs = [
createSpring
({
stiffness
:
100
}),
createSpring
({
stiffness
:
150
}),
createSpring
({
stiffness
:
200
})
]
document
.
querySelectorAll
(
'#web-animation-api-waapi-convertease .demo .square'
).
forEach
(
(
$el, i
) =>
{
$el.
animate
({
translate
:
'17rem'
,
rotate
:
'1turn'
,
}, {
easing
: waapi.
convertEase
(springs[i].
ease
),
delay
: i *
250
,
duration
: springs[i].
duration
,
fill
:
'forwards'
});
});
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
stiffness: 100
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
stiffness: 150
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
stiffness: 200
</
div
>
</
div
>
Previous
Next
API differences with native WAAPI
Engine

--- Draggable ---
Draggable
V4
Adds draggable capabilities to DOM Elements.
Draggables are created using the
createDraggable
()
function.
import
{ createDraggable }
from
'animejs'
;
const
draggable =
createDraggable
(target, parameters);
Parameters
Name
Accepts
target
CSS Selector
|
DOM Element
parameters
(opt)
An
Object
of
Draggable axes parameters
,
Draggable settings
and
Draggable callbacks
Returns
Draggable
import
{ createDraggable }
from
'animejs'
;
createDraggable
(
'.square'
);
<
div
class
=
"large row centered"
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
In this section
Axes parameters
Settings
Callbacks
Methods
Properties
Previous
Next
Animatable
Draggable axes parameters

--- Timeline ---
Timeline

Playback settings
Since 4.0.0
frameRate
V4
Determines the number of frames per second (fps) a timeline is played at.
This value can be modified later with
timeline.
fps
=
30
.
Accepts
A
Number
greater than
0
The frame rate is capped to the monitor refresh rate or in some cases by the browser itself
Default
120
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
frameRate
=
30
;
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $range ] = utils.$(
'.range'
);
const
[ $fps ] = utils.$(
'.fps'
);
const
tl =
createTimeline
({
frameRate
:
60
,
loop
:
true
,
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
'-=500'
)
.
add
(
'.square'
, {
x
:
'15rem'
},
'-=500'
);
const
updateFps
= (
) => {
const
{ value } = $range;
$fps.
innerHTML
= value;
tl.
fps
= value;
}
$range.
addEventListener
(
'input'
, updateFps);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
fps
</
span
>
<
span
class
=
"fps value"
>
60
</
span
>
</
pre
>
</
div
>
<
div
class
=
"large row"
>
<
fieldset
class
=
"controls"
>
<
input
type
=
"range"
min
=
0
max
=
120
value
=
60
step
=
1
class
=
"range"
/>
</
fieldset
>
</
div
>
Previous
Next
autoplay
playbackRate

--- Timer ---
Timer
V4
Schedules and controls timed function callbacks that can be used as a replacement to
setTimeout
()
or
setInterval
()
, keeping animations and callbacks in sync.
Timers are created using the
createTimer
()
function.
import
{ createTimer }
from
'animejs'
;
const
timer =
createTimer
(parameters);
Parameters
Name
Accepts
parameters
(opt)
An
Object
of
Timer playback settings
and
Timer callbacks
Returns
Timer
import
{ animate }
from
'animejs'
;
const
[ $time, $count ] = utils.$(
'.value'
);
createTimer
({
duration
:
1000
,
loop
:
true
,
frameRate
:
30
,
onUpdate
:
self
=>
$time.
innerHTML
= self.
currentTime
,
onLoop
:
self
=>
$count.
innerHTML
= self.
_currentIteration
});
<
div
class
=
"large centered row"
>
<
div
class
=
"half col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"value lcd"
>
0
</
span
>
</
pre
>
</
div
>
<
div
class
=
"half col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
callback fired
</
span
>
<
span
class
=
"value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
In this section
Playback settings
Callbacks
Methods
Properties
Previous
Next
Getting started
Timer playback settings

--- Animation ---
Animation

Animatable properties
Since 4.0.0
CSS Variables
V4
JS
CSS variables with numerical or color values can be animated by directly passing the variable name as a string to the animation parameters.
This approach also enables animation of properties defined on pseudo-elements like
::after
and
::before
, which are otherwise inaccessible via JavaScript.
In order to animate CSS variables properties with the
WAAPI
powered
waapi.
animate
()
method, you need to use
CSS
.
registerProperty
(propertyDefinition)
, otherwise it falls back to no animations.
import
{ animate, utils }
from
'animejs'
;
// Set the CSS variables as properties on the animated elements
utils.
set
(
'.square'
, {
'--radius'
:
'4px'
,
'--x'
:
'0rem'
,
'--pseudo-el-after-scale'
:
'1'
,
// applied to the pseudo element "::after"
borderRadius
:
'var(--radius)'
,
translateX
:
'var(--x)'
,
});
// Animate the values of the CSS variables
animate
(
'.square'
, {
'--radius'
:
'20px'
,
'--x'
:
'16.5rem'
,
'--pseudo-el-after-scale'
:
'1.55'
// Animates the ":after" pseudo element of the element
});
<
div
class
=
"medium row"
>
<
div
class
=
"css-variables square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"css-variables square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"css-variables square"
>
</
div
>
</
div
>
Previous
Next
CSS transforms
JavaScript Object properties

--- Animation ---
Animation

Methods
Since 4.0.0
stretch()
V4
JS
Changes the total duration of an animation and its tweens duration to fit a specific time.
The total duration is equal to the duration of an iteration multiplied with the total number of iterations. So if an animation is 1000ms and loops twice (3 iterations in total), the total duration will be 3000ms (1000 * 3).
animation.
stretch
(duration);
Parameters
Name
Type
Description
duration
Number
The new total duration in ms of the animation
Stretching an animation to
0
will also set all its tweens' durations to
0
, which will make them all the same length on subsequent calls to
stretch
()
.
Returns
The animation itself
Can be chained with other animation methods.
import
{ animate, utils, stagger }
from
'animejs'
;
const
[ $range ] = utils.$(
'.range'
);
const
[ $totalDuration ] = utils.$(
'.value'
);
const
animation =
animate
(
'.square'
, {
x
:
'17rem'
,
ease
:
'inOutSine'
,
delay
:
stagger
(
200
),
});
const
stretchAnimation
= (
) => {
const
newDuration = +$range.
value
;
$totalDuration.
textContent
= newDuration;
animation.
stretch
(newDuration).
restart
();
}
stretchAnimation
();
$range.
addEventListener
(
'input'
, stretchAnimation);
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
total duration
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium centered row"
>
<
fieldset
class
=
"controls"
>
<
input
type
=
"range"
min
=
100
max
=
2000
value
=
1000
step
=
100
class
=
"seek range"
/>
</
fieldset
>
</
div
>
Previous
Next
seek()
refresh()

--- Draggable ---
Draggable

Settings
Since 4.0.0
velocityMultiplier
Specifies a multiplier to modify the velocity applied to the dragged element after release, where
0
means no velocity at all,
1
is normal velocity and
2
double the velocity.
Accepts
A
Number
greater than or equal to
0
A
Function
that returns a
Number
greater than or equal to
0
When defined using a
Function
, the value will be automatically refreshed every time the container or target element is resized.
It can also be refreshed manually using the
refresh
()
method.
Default
1
import
{ createDraggable }
from
'animejs'
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
velocityMultiplier
:
0
,
});
createDraggable
(
'.circle'
, {
container
:
'.grid'
,
velocityMultiplier
:
5
,
});
<
div
class
=
"large centered grid square-grid"
>
<
div
class
=
"square draggable"
>
</
div
>
<
div
class
=
"circle draggable"
>
</
div
>
</
div
>
Previous
Next
releaseDamping
minVelocity

--- Timeline ---
Timeline

Methods
Since 4.0.0
sync()
V4
Synchronises a JS animation, WAAPI Animation, timer, timeline or even a native
WAAPI Animation
to a timeline.
const
tlChild =
createTimeline
().
add
(target, {
x
:
100
}).
add
(target, {
y
:
100
});
createTimeline
().
sync
(tlChild);
Tween value composition is handled when the timeline is created, and won't affect the timeline's existing children when added.
Parameters
Name
Accepts
synced
JSAnimation
|
Timer
|
Timeline
|
Anime.js WAAPIAnimation
|
WAAPIAnimation
position
(opt)
Time position
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline, animate, waapi }
from
'animejs'
;
const
circleAnimation = waapi.
animate
(
'.circle'
, {
x
:
'15rem'
});
const
tlA =
createTimeline
()
.
sync
(circleAnimation)
.
add
(
'.triangle'
, {
x
:
'15rem'
,
duration
:
2000
,
})
.
add
(
'.square'
, {
x
:
'15rem'
,
});
const
tlB =
createTimeline
({
defaults
: {
duration
:
2000
} })
.
add
([
'.triangle'
,
'.square'
], {
rotate
:
360
,
},
0
)
.
add
(
'.circle'
, {
scale
: [
1
,
1.5
,
1
],
},
0
);
const
tlMain =
createTimeline
()
.
sync
(tlA)
.
sync
(tlB,
'-=2000'
);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
Previous
Next
set()
label()

--- Draggable ---
Draggable
Since 4.0.0
Draggable axes parameters
Axes parameters are specified globally to all axes on the parameters object, or specifically to an axis by passing it an object.
createDraggable
(
'.square'
, {
┌───────────────────────────────┐
│
x
: {
snap
:
100
}, │
│
y
: {
snap
:
50
}, ├─
Axes
Parameters
│
modifier
: utils.
wrap
(-
200
,
0
),│
└───────────────────────────────┘
containerPadding
:
10
,
releaseStiffness
:
40
,
releaseEase
:
'out(3)'
,
onGrab
:
() =>
{},
onDrag
:
() =>
{},
onRelease
:
() =>
{},
});
In this section
x
y
snap
modifier
mapTo
Previous
Next
Draggable
x

--- Timeline ---
Timeline
Since 4.0.0
Sync WAAPI animations
V4
WAAPI animations can be synchronised to a timeline using the
sync
()
method.
timeline.
sync
(animation, position);
Parameters
Name
Accepts
synced
Animation
|
Timer
|
Timeline
position
(opt)
Time position
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline, waapi }
from
'animejs'
;
const
circle = waapi.
animate
(
'.circle'
, {
x
:
'15rem'
,
});
const
triangle = waapi.
animate
(
'.triangle'
, {
x
:
'15rem'
,
y
: [
0
,
'-1.5rem'
,
0
],
ease
:
'out(4)'
,
duration
:
750
,
});
const
square = waapi.
animate
(
'.square'
, {
x
:
'15rem'
,
rotateZ
:
360
,
});
const
tl =
createTimeline
()
.
sync
(circle,
0
)
.
sync
(triangle,
350
)
.
sync
(square,
250
);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
Previous
Next
Add animations
Sync timelines

--- Timer ---
Timer

Methods
Since 4.0.0
pause()
Pauses a running timer.
Returns
The timer itself
Can be chained with other timer methods.
import
{ createTimer, utils }
from
'animejs'
;
const
[ $pauseButton ] = utils.$(
'.pause'
);
const
[ $time ] = utils.$(
'.time'
);
const
timer =
createTimer
({
onUpdate
:
self
=>
$time.
innerHTML
= self.
currentTime
});
const
pauseTimer
= (
) => timer.
pause
();
$pauseButton.
addEventListener
(
'click'
, pauseTimer);
<
div
class
=
"large centered row"
>
<
div
class
=
"half col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button pause"
>
Pause
</
button
>
</
fieldset
>
</
div
>
Previous
Next
reverse()
restart()

--- Draggable ---
Draggable

Settings
Since 4.0.0
releaseStiffness
Specifies the stiffness applied to the dragged element after release. Affects the speed, movement distance and bounciness of the dragged element. Lower values result in slower movement.
releaseStiffness
has no effect if a spring is passed to the
releaseEase
parameter and is overridden by the spring
stiffness
value.
Accepts
A
Number
between
0
and
1000
Default
80
import
{ createDraggable }
from
'animejs'
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
releaseStiffness
:
20
,
});
createDraggable
(
'.circle'
, {
container
:
'.grid'
,
releaseStiffness
:
300
,
});
<
div
class
=
"large centered grid square-grid"
>
<
div
class
=
"square draggable"
>
</
div
>
<
div
class
=
"circle draggable"
>
</
div
>
</
div
>
Previous
Next
releaseMass
releaseDamping

--- Timeline ---
Timeline

Callbacks
Since 4.0.0
then()
V4
Returns a
Promise
that resolves and execute a callback when the timeline completes.
The
then
()
method can be directly inlined like this:
createTimeline
(parameters).
add
(targets, parameters).
then
(callback);
Or used in an
async
/
await
context:
async
function
waitForTimelineToComplete
(
) {
return
createTimeline
()
.
add
(
'.square'
, {
x
:
100
})
.
add
(
'.square'
, {
y
:
100
});
}
const
asyncTimeline =
await
waitForTimelineToComplete
();
Parameters
Name
Type
callback
A
Function
whose first argument returns the timeline itself
Returns
Promise
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
const
tl =
createTimeline
({
defaults
: {
duration
:
500
},
loop
:
1
,
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
})
.
add
(
'.square'
, {
x
:
'15rem'
});
tl.
then
(
() =>
$value.
textContent
=
'fulfilled'
);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
promise status
</
span
>
<
span
class
=
"value"
>
pending
</
span
>
</
pre
>
</
div
>
Previous
Next
onPause
Timeline methods

--- Draggable ---
Draggable

Methods
Since 4.0.0
stop()
Stop all currently running animations targeting the draggable, the container scroll animation and the draggable release animation.
Returns
The draggable itself
import
{ createDraggable, animate, utils }
from
'animejs'
;
const
[ $stopButton ] = utils.$(
'.stop'
);
const
draggable =
createDraggable
(
'.square'
);
animate
(draggable, {
x
: [-
100
,
100
],
alternate
:
true
,
loop
:
true
});
const
stopDraggable
= (
) => draggable.
stop
();
$stopButton.
addEventListener
(
'click'
, stopDraggable);
<
div
class
=
"large centered row"
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
<
div
class
=
"large row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button stop"
>
Stop
</
button
>
</
fieldset
>
</
div
>
Previous
Next
scrollInView()
reset()

--- Animatable ---
Animatable
Since 4.0.0
Animatable properties
const
animatable =
createAnimatable
(targets, parameters);
┌───────────┐
animatable.│targets ├─
Properties
animatable.│animations │
└───────────┘
Name
Description
targets
Gets the animatable
Targets
(
Array
)
animations
Gets all animatable
Animations
(
Object
)
Previous
Next
Animatable methods
Draggable

--- ScrollObserver ---
ScrollObserver

Callbacks
Since 4.0.0
onEnterBackward
Triggers a function every time the
enter
threshold
is met by scrolling backward.
Accepts
A
Function
whose first argument returns the ScrollObserver instance
Default
noop
import
{ animate, onScroll, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
entered =
0
;
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
ease
:
'linear'
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
enter
:
'bottom-=50 top'
,
leave
:
'top+=60 bottom'
,
sync
:
true
,
debug
:
true
,
onEnterBackward
:
() =>
$value.
textContent
= ++entered,
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded sticky"
>
<
div
class
=
"large row"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
entered
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section"
>
</
div
>
</
div
>
</
div
>
Previous
Next
onEnterForward
onLeave

--- Animation ---
Animation

Methods
Since 1.0.0
pause()
Pauses a running animation.
Returns
The animation itself
Can be chained with other animation methods.
import
{ animate, utils, stagger }
from
'animejs'
;
const
[ $pauseButton ] = utils.$(
'.pause'
);
const
animation =
animate
(
'.square'
, {
x
:
'17rem'
,
alternate
:
true
,
ease
:
'inOutSine'
,
loop
:
true
,
delay
:
stagger
(
100
),
});
const
pauseAnimation
= (
) => animation.
pause
();
$pauseButton.
addEventListener
(
'click'
, pauseAnimation);
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button pause"
>
Pause
</
button
>
</
fieldset
>
</
div
>
Previous
Next
reverse()
restart()

--- Timeline ---
Timeline

Methods
Since 4.0.0
label()
V4
Associate specific time positions with label names for easy reference within the timeline.
Once added to a timeline, a label can be used as a
Time position
.
timeline.
label
(labelName, position);
Parameters
Name
Accepts
labelName
String
position
(opt)
Time position
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline }
from
'animejs'
;
const
tl =
createTimeline
()
.
label
(
'circle'
,
0
)
.
label
(
'square'
,
500
)
.
label
(
'triangle'
,
1000
)
.
add
(
'.square'
, {
x
:
'17rem'
,
duration
:
500
,
},
'square'
)
.
add
(
'.circle'
, {
x
:
'13rem'
,
duration
:
1000
,
},
'circle'
)
.
add
(
'.triangle'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
duration
:
500
,
},
'triangle'
);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
Previous
Next
sync()
remove()

--- Scope ---
Scope

Parameters
Since 4.0.0
root
Defines a root element limiting all DOM queries within that Scope to descendants of the specified
HTMLElement
. This is particularly useful for creating self-contained animation environments in component-based architectures like React applications.
Accepts
CSS Selector
DOM Element
import
{ createScope, animate }
from
'animejs'
;
createScope
({
root
:
'.row:nth-child(2)'
})
.
add
(
() =>
{
animate
(
'.square'
, {
x
:
'17rem'
,
loop
:
true
,
alternate
:
true
});
});
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
outside scope
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
inside scope
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
outside scope
</
div
>
</
div
>
Previous
Next
Scope parameters
defaults

--- Draggable ---
Draggable

Settings
Since 4.0.0
maxVelocity
Specifies the maximum velocity to apply to the dragged element after release.
Accepts
A
Number
greater than or equal to
0
A
Function
that returns a
Number
greater than or equal to
0
When defined using a
Function
, the value will be automatically refreshed every time the container or target element is resized.
It can also be refreshed manually using the
refresh
()
method.
Default
50
import
{ createDraggable }
from
'animejs'
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
maxVelocity
:
0
,
});
createDraggable
(
'.circle'
, {
container
:
'.grid'
,
maxVelocity
:
100
,
});
<
div
class
=
"large centered grid square-grid"
>
<
div
class
=
"square draggable"
>
</
div
>
<
div
class
=
"circle draggable"
>
</
div
>
</
div
>
Previous
Next
minVelocity
releaseEase

--- ScrollObserver ---
ScrollObserver

Thresholds
Since 4.0.0
Relative position values
Defines position values relative to the target and container top coordinate using a a
Relative value
syntax.
Accepts
Prefix
Effect
Example
'+='
Add
'+=45'
'-='
Subtracts
'-=50%'
'*='
Multiply
'*=.5'
import
{ animate, onScroll }
from
'animejs'
;
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
duration
:
2000
,
alternate
:
true
,
loop
:
true
,
ease
:
'inOutQuad'
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
enter
:
'center+=1em top-=100%'
,
leave
:
'center-=1em bottom+=100%'
,
debug
:
true
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large centered row"
>
<
div
class
=
"label"
>
scroll down
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section"
>
</
div
>
</
div
>
</
div
>
Previous
Next
Positions shorthands
Min max

--- ScrollObserver ---
ScrollObserver

Synchronisation modes
Since 4.0.0
Playback progress
Perfectly synchronises the playback progress of the linked object to the scroll position by passing a value of either
true
or
1
.
Accepts
1
true
import
{ animate, onScroll }
from
'animejs'
;
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
ease
:
'linear'
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
enter
:
'bottom-=50 top'
,
leave
:
'top+=60 bottom'
,
sync
:
true
,
debug
:
true
,
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"label"
>
scroll down
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section"
>
</
div
>
</
div
>
</
div
>
Previous
Next
Method names
Smooth scroll

--- Animatable ---
Animatable
V4
Efficiently animates target properties, making it an ideal replacement for
animate
()
and
utils.
set
()
in situations where values change frequently, such as cursor events or animation loops.
Animatables are created using the
createAnimatable
()
function.
import
{ createAnimatable }
from
'animejs'
;
const
animatable =
createAnimatable
(targets, parameters);
Parameters
Name
Accepts
targets
Targets
parameters
An
Object
of
Animatable settings
Returns
An Animatable instance with animatable property functions used to
get
and
set
values:
animatable.
propertyName
(value, duration, ease);
// Triggers an animation
animatable.
propertyName
();
// Returns the current value
For performance reasons, only
Number
or
Array
<
Number
>
can be passed to an animatable property function.
import
{ createAnimatable, utils }
from
'animejs'
;
const
$demos =
document
.
querySelector
(
'#docs-demos'
);
const
$demo = $demos.
querySelector
(
'.docs-demo.is-active'
);
let
bounds = $demo.
getBoundingClientRect
();
const
refreshBounds
= (
) => bounds = $demo.
getBoundingClientRect
();
const
animatableSquare =
createAnimatable
(
'.square'
, {
x
:
500
,
// Define the x duration to be 500ms
y
:
500
,
// Define the y duration to be 500ms
ease
:
'out(3)'
,
});
const
onMouseMove
= e => {
const
{ width, height, left, top } = bounds;
const
hw = width /
2
;
const
hh = height /
2
;
const
x = utils.
clamp
(e.
clientX
- left - hw, -hw, hw);
const
y = utils.
clamp
(e.
clientY
- top - hh, -hh, hh);
animatableSquare.
x
(x);
// Animate the x value in 500ms
animatableSquare.
y
(y);
// Animate the y value in 500ms
}
window
.
addEventListener
(
'mousemove'
, onMouseMove);
$demos.
addEventListener
(
'scroll'
, refreshBounds);
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"small centered row"
>
<
span
class
=
"label"
>
Move cursor around
</
span
>
</
div
>
In this section
Settings
Methods
Properties
Previous
Next
Timeline
Animatable settings

--- Timeline ---
Timeline

Callbacks
Since 4.0.0
onLoop
V4
Executes a function every time a timeline iteration completes.
Accepts
A
Function
whose first argument returns the timeline itself
Default
noop
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
onLoop
=
self
=>
console
.
log
(self.
id
);
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
loops =
0
;
const
tl =
createTimeline
({
defaults
: {
duration
:
500
},
loopDelay
:
500
,
loop
:
true
,
onLoop
:
self
=>
$value.
textContent
= ++loops
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
})
.
add
(
'.square'
, {
x
:
'15rem'
});
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
loops
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
Previous
Next
onRender
onPause

--- ScrollObserver ---
ScrollObserver

Callbacks
Since 4.0.0
onLeave
Triggers a function every time the
leave
threshold
is met.
Accepts
A
Function
whose first argument returns the ScrollObserver instance
Default
noop
import
{ animate, onScroll, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
exits =
0
;
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
ease
:
'linear'
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
enter
:
'bottom-=50 top'
,
leave
:
'top+=60 bottom'
,
sync
:
true
,
debug
:
true
,
onLeave
:
() =>
$value.
textContent
= ++exits,
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded sticky"
>
<
div
class
=
"large row"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
exits
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section"
>
</
div
>
</
div
>
</
div
>
Previous
Next
onEnterBackward
onLeaveForward

--- Animation ---
Animation

Methods
Since 1.0.0
seek()
Updates the
currentTime
of the animation and advances it to a specific time.
animation.
seek
(time, muteCallbacks);
Parameters
Name
Type
Description
time
Number
The new
currentTime
in ms of the animation
muteCallbacks=false
(opt)
Boolean
If
true
, prevent the callbacks from being fired
Returns
The animation itself
Can be chained with other animation methods.
import
{ animate, utils, stagger }
from
'animejs'
;
const
[ $range ] = utils.$(
'.range'
);
const
[ $playPauseButton ] = utils.$(
'.play-pause'
);
const
updateButtonLabel
= animation => {
$playPauseButton.
textContent
= animation.
paused
?
'Play'
:
'Pause'
;
}
const
animation =
animate
(
'.square'
, {
x
:
'17rem'
,
ease
:
'inOutSine'
,
duration
:
1750
,
delay
:
stagger
(
250
),
autoplay
:
false
,
onUpdate
:
self
=>
{
$range.
value
= self.
currentTime
;
updateButtonLabel
(self);
},
onComplete
: updateButtonLabel,
});
const
seekAnimation
= (
) => animation.
seek
(+$range.
value
);
const
playPauseAnimation
= (
) => {
if
(animation.
paused
) {
animation.
play
();
}
else
{
animation.
pause
();
updateButtonLabel
(animation);
}
}
$range.
addEventListener
(
'input'
, seekAnimation);
$playPauseButton.
addEventListener
(
'click'
, playPauseAnimation);
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium centered row"
>
<
fieldset
class
=
"controls"
>
<
input
type
=
"range"
min
=
0
max
=
2000
value
=
0
class
=
"range"
/>
<
button
style
=
"flex: 0.25;"
class
=
"button play-pause"
>
Play
</
button
>
</
fieldset
>
</
div
>
Previous
Next
revert()
stretch()

--- ScrollObserver ---
ScrollObserver

Thresholds
Since 4.0.0
Min max
Defines a threshold in the minimum or maximum scrollable space available. This is particularly useful in cases where some of the targeted elements initial position are either too small or too big to triggers
enter
and
leave
conditions.
Accepts
Value
Description
'min'
The minimum value possible to meet the enter or leave condition
'max'
The maximum value possible to meet the enter or leave condition
import
{ animate, onScroll, utils }
from
'animejs'
;
utils.$(
'.square'
).
forEach
($square => {
animate
($square, {
x
:
'15rem'
,
rotate
:
'1turn'
,
duration
:
2000
,
alternate
:
true
,
ease
:
'inOutQuad'
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
sync
:
1
,
enter
:
'max bottom'
,
leave
:
'min top'
,
debug
:
true
})
});
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
</
div
>
</
div
>
Previous
Next
Relative position values
ScrollObserver synchronisation modes

--- Animation ---
Animation

Methods
Since 1.0.0
resume()
V4
Resumes the playback of a paused animation in its current direction.
Returns
The animation itself
Can be chained with other animation methods.
import
{ animate, utils, stagger }
from
'animejs'
;
const
[ $pauseButton, $alternateButton, $resumeButton ] = utils.$(
'.button'
);
const
animation =
animate
(
'.square'
, {
x
:
'17rem'
,
ease
:
'inOutSine'
,
loop
:
true
,
delay
:
stagger
(
100
),
});
const
pauseAnimation
= (
) => animation.
pause
();
const
alternateAnimation
= (
) => animation.
alternate
();
const
resumeAnimation
= (
) => animation.
resume
();
$pauseButton.
addEventListener
(
'click'
, pauseAnimation);
$alternateButton.
addEventListener
(
'click'
, alternateAnimation);
$resumeButton.
addEventListener
(
'click'
, resumeAnimation);
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button"
>
Pause
</
button
>
<
button
class
=
"button"
>
Alternate
</
button
>
<
button
class
=
"button"
>
Resume
</
button
>
</
fieldset
>
</
div
>
Previous
Next
alternate()
complete()

--- Animatable ---
Animatable

Methods
Since 4.0.0
Getters
Every animatable properties defined in the animatable parameters are transformed into methods and accessible on the animatable object.
When calling a method without any argument, the method acts as a getter, and returns the current value of the animatable property.
Returns
A
Number
if the current animatable property has a single value
An
Array
of
Number
if the current animatable property has multiple values (like an RGB color value)
import
{ createAnimatable, utils }
from
'animejs'
;
const
$demos =
document
.
querySelector
(
'#docs-demos'
);
const
$demo = $demos.
querySelector
(
'.docs-demo.is-active'
);
const
[ $x, $y ] = utils.$(
'.coords'
);
let
bounds = $demo.
getBoundingClientRect
();
const
refreshBounds
= (
) => bounds = $demo.
getBoundingClientRect
();
const
circle =
createAnimatable
(
'.circle'
, {
x
:
500
,
y
:
500
,
ease
:
'out(2)'
,
});
// Gets and log the current x and y values
circle.
animations
.
x
.
onRender
=
() =>
{
$x.
innerHTML
= utils.
roundPad
(circle.
x
(),
2
);
$y.
innerHTML
= utils.
roundPad
(circle.
y
(),
2
);
}
const
onMouseMove
= e => {
const
{ width, height, left, top } = bounds;
const
hw = width /
2
;
const
hh = height /
2
;
const
x = utils.
clamp
(e.
clientX
- left - hw, -hw, hw);
const
y = utils.
clamp
(e.
clientY
- top - hh, -hh, hh);
// Sets x and y values
circle.
x
(x);
circle.
y
(y);
}
window
.
addEventListener
(
'mousemove'
, onMouseMove);
$demos.
addEventListener
(
'scroll'
, refreshBounds);
<
div
class
=
"large row"
>
<
div
class
=
"col"
>
<
div
class
=
"large row"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
x
</
span
>
<
span
class
=
"coords x value"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"col"
style
=
"flex: .25; z-index: 3;"
>
<
div
class
=
"large centered row"
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"col"
>
<
div
class
=
"large row"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
y
</
span
>
<
span
class
=
"coords y value"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"medium centered row"
>
<
span
class
=
"label"
>
Move cursor around
</
span
>
</
div
>
Previous
Next
Animatable methods
Setters

--- Animation ---
Animation
Since 1.0.0
Animation callbacks
Execute functions at specific points during an animation playback.
Callbacks
Function
are specified directly in the
animate
()
parameters
Object
.
animate
(
'.square'
, {
translateX
:
100
,
scale
:
2
,
opacity
:
.5
,
duration
:
400
,
delay
:
250
,
ease
:
'out(3)'
,
loop
:
3
,
alternate
:
true
,
autoplay
:
false
,
┌─────────────────────┐
│
onBegin
:
() =>
{}, │
│
onLoop
:
() =>
{}, ├─
Callbacks
│
onUpdate
:
() =>
{}, │
└─────────────────────┘
});
In this section
onBegin
onComplete
onBeforeUpdate
onUpdate
onRender
onLoop
onPause
then()
Previous
Next
Animation playback settings
onBegin

--- Utilities ---
Utilities
Since 4.0.0
$()
V4
Converts the provided targets parameter into an
Array
of elements, serving as an alternative to
document
.
querySelectorAll
()
.
When used within a
Scope
, it uses the Scope's
root
element instead of
document
, effectively calling
root.
querySelectorAll
()
.
const
targetsArray = utils.$(targets);
Parameters
Name
Accepts
targets
CSS selector
|
DOM Elements
Returns
An
Array
of
HTMLElement
or
SVGElement
or
SVGGeometryElement
import
{ utils, createScope }
from
'animejs'
;
// Targets all the '.square' elements
utils.$(
'.square'
).
forEach
($square => {
utils.
set
($square, {
scale
:
.5
});
});
createScope
({
root
:
'.row:nth-child(2)'
}).
add
(
() =>
{
// Limits the selection to '.row:nth-child(2) .square'
utils.$(
'.square'
).
forEach
($square => {
utils.
set
($square, {
rotate
:
45
});
});
});
<
div
class
=
"medium justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Utilities
get()

--- Utilities ---
Utilities
Since 4.0.0
interpolate()
V4
Interpolates a value between two numbers based on a given
progress
or creates an interpolation
Function
with pre-defined
start
and
end
parameters.
const
interpolatedValue = utils.
interpolate
(start, end, progress);
const
interpolatorFunction = utils.
interpolate
(start, end);
Parameters
Name
Accepts
start
Number
end
Number
progress
(opt)
Number
(
[
0
-
1
]
)
Returns
A
Number
if a progress value is provided, otherwise a
chain-able utility
Function
to interpolate between the specified
start
and
end
values:
const
interpolateBetween0and100 = utils.
interpolate
(
0
,
100
);
interpolateBetween0and100
(
0.5
);
// 50
interpolateBetween0and100
(
0.75
);
// 75
interpolateBetween0and100
(
0.25
);
// 25
const
interpolateAndRound = utils.
interpolate
(
0
,
100
).
round
(
2
);
// Interpolate then round to 2 decimal places
interpolateAndRound
(
0.677523
);
// 67.75
interpolateAndRound
(
1.202514
);
// 100
import
{ animate, utils }
from
'animejs'
;
animate
(
'.normal'
, {
rotate
:
'1turn'
,
duration
:
3000
,
loop
:
true
,
ease
:
'inOut'
,
});
animate
(
'.interpolated'
, {
rotate
:
'1turn'
,
modifier
: utils.
interpolate
(
0
,
12
),
// Interpolates 0 to 12 by passing the rotate progress value 0 to 1
duration
:
3000
,
loop
:
true
,
ease
:
'inOut'
,
});
<
div
class
=
"x-large spaced-evenly row"
>
<
div
class
=
"col"
>
<
div
class
=
"clock normal"
>
</
div
>
<
div
class
=
"label"
>
normal
</
div
>
</
div
>
<
div
class
=
"col"
>
<
div
class
=
"clock interpolated"
>
</
div
>
<
div
class
=
"label"
>
interpolated [0,12]
</
div
>
</
div
>
</
div
>
Previous
Next
mapRange()
roundPad()

--- Utilities ---
Utilities
A collection of utility functions for common animation tasks and for use as
Animation modifier functions
.
All SVG utility functions are available on the
utils
object.
import
{ utils }
from
'animejs'
;
In this section
$()
get()
set()
remove()
cleanInlineStyles()
random()
randomPick()
shuffle()
sync()
lerp()
round()
clamp()
snap()
wrap()
mapRange()
interpolate()
roundPad()
padStart()
padEnd()
degToRad()
radToDeg()
Chain-able utilities
Previous
Next
SVG
$()

--- Animation ---
Animation

Playback settings
Since 4.0.0
loopDelay
V4
JS
Defines the delay in milliseconds between loops.
Accepts
A
Number
that is equal to or greater than
0
Default
0
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
loopDelay
=
500
;
import
{ animate }
from
'animejs'
;
const
loopDelayAnimation =
animate
(
'.circle'
, {
x
:
'16rem'
,
scale
: {
to
:
1.8
,
delay
:
500
,
duration
:
500
,
},
loopDelay
:
1000
,
loop
:
true
,
alternate
:
true
,
});
<
div
class
=
"medium row"
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
Previous
Next
loop
alternate

--- Web Animation API ---
Web Animation API
Since 4.0.0
When to use WAAPI
The Web Animations API (WAAPI) offers a lot of advantages over JavaScript
requestAnimationFrame
(RAF) powered animations, but both have their strengths and downsides, and depending on the type of animation or the context in which an animation is created, it's not always possible or even recommended to use WAAPI over RAF.
Prioritize
waapi.
animate
()
when:
Animating during CPU/network load (see the
hardware-accelerated animations
section)
Initial page load time is critical and every KB counts (3KB gzip vs 10KB for the JavaScript version)
Animating complex CSS values not correctly handled by the JavaScript version, like CSS transform matrixes or CSS color functions.
Use
animate
()
when:
Animating a large amount of targets (> 500)
Animating JS/canvas/WebGL/WebGPU
Animating SVG, DOM attributes or CSS properties not handled by the Web Animation API
Animating complex timelines and keyframes
You need more
control methods
You need more advanced
callback functions
import
{ animate, waapi, utils }
from
'animejs'
;
// WAAPI Animation
waapi.
animate
(
'.waapi.square'
, {
x
:
'17rem'
,
rotate
:
180
,
loop
:
3
,
alternate
:
true
,
});
// JS Animation
const
data = {
x
:
'0rem'
,
rotate
:
'0deg'
}
const
[ $log ] = utils.$(
'code'
);
animate
(data, {
x
:
17
,
rotate
:
180
,
modifier
: utils.
round
(
0
),
loop
:
3
,
alternate
:
true
,
onRender
:
() =>
$log.
innerHTML
=
JSON
.
stringify
(data)
});
<
div
class
=
"medium row"
>
<
div
class
=
"square waapi"
>
</
div
>
</
div
>
<
div
class
=
"small row"
>
</
div
>
<
pre
class
=
"medium centered row"
>
<
code
>
{"x": '0rem',"rotate":"0deg"}
</
code
>
</
pre
>
Previous
Next
Web Animation API
Hardware-accelerated animations

--- Scope ---
Scope

Methods
Since 4.0.0
add()
Adds
constructor
or registers
method
functions to a Scope.
Parameters for adding a constructor
scope.
add
(callback);
Name
Accepts
callback
A
constructor
Function
Parameters for registering a method
scope.
add
(name, callback);
Name
Accepts
name
A
String
used to store and access the method
callback
A
method
Function
Returns
The Scope itself
import
{ createScope, createAnimatable, createDraggable }
from
'animejs'
;
const
scope =
createScope
({
mediaQueries
: {
isSmall
:
'(max-width: 200px)'
,
}
})
.
add
(
self
=>
{
const
[ $circle ] = utils.$(
'.circle'
);
if
(self.
matches
.
isSmall
) {
$circle.
classList
.
add
(
'draggable'
);
self.
circle
=
createDraggable
($circle, {
container
:
document
.
body
,
});
}
else
{
$circle.
classList
.
remove
(
'draggable'
);
self.
circle
=
createAnimatable
($circle, {
x
:
500
,
y
:
500
,
ease
:
'out(3)'
});
}
let
win = {
w
:
window
.
innerWidth
,
h
:
window
.
innerHeight
};
self.
add
(
'refreshBounds'
,
() =>
{
win.
w
=
window
.
innerWidth
;
win.
h
=
window
.
innerHeight
;
});
self.
add
(
'onMouseMove'
,
e
=>
{
if
(self.
matches
.
isSmall
)
return
;
const
{ w, h } = win;
const
hw = w /
2
;
const
hh = h /
2
;
const
x = utils.
clamp
(e.
clientX
- hw, -hw, hw);
const
y = utils.
clamp
(e.
clientY
- hh, -hh, hh);
if
(self.
circle
.
x
) {
self.
circle
.
x
(x);
self.
circle
.
y
(y);
}
});
self.
add
(
'onPointerDown'
,
e
=>
{
const
{ isSmall } = self.
matches
;
animate
($circle, {
scale
: [
{
to
: isSmall ?
1.25
:
.25
,
duration
: isSmall ?
50
:
150
},
{
to
:
1
,
duration
: isSmall ?
250
:
500
},
]
});
});
});
window
.
addEventListener
(
'resize'
, scope.
methods
.
refreshBounds
);
window
.
addEventListener
(
'mousemove'
, scope.
methods
.
onMouseMove
);
document
.
addEventListener
(
'pointerdown'
, scope.
methods
.
onPointerDown
);
<
div
class
=
"iframe-content resizable"
>
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
</
div
>
Previous
Next
Scope methods
revert()

--- Timeline ---
Timeline

Playback settings
Since 4.0.0
playbackRate
V4
Defines a speed multiplier to speed up or slow down a timeline.
This value can be modified later with
timeline.
speed
=
.5
.
Accepts
A
Number
greater than or equal to
0
If set to
0
the timeline won't play.
Default
1
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
playbackRate
=
.75
;
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $range ] = utils.$(
'.range'
);
const
[ $speed ] = utils.$(
'.speed'
);
const
tl =
createTimeline
({
playbackRate
:
2
,
loop
:
true
,
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
'-=500'
)
.
add
(
'.square'
, {
x
:
'15rem'
},
'-=500'
);
const
updateSpeed
= (
) => {
const
speed = utils.
roundPad
(+$range.
value
,
1
);
$speed.
innerHTML
= speed;
utils.
sync
(
() =>
tl.
speed
= speed);
}
$range.
addEventListener
(
'input'
, updateSpeed);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
speed
</
span
>
<
span
class
=
"speed value"
>
2.0
</
span
>
</
pre
>
</
div
>
<
div
class
=
"large row"
>
<
fieldset
class
=
"controls"
>
<
input
type
=
"range"
min
=
0
max
=
10
value
=
2
step
=
.1
class
=
"range"
/>
</
fieldset
>
</
div
>
Previous
Next
frameRate
playbackEase

--- Stagger ---
Stagger

Value types
Since 2.0.0
Range value
Distributes values evenly between two numerical values.
Accepts
[
Number
|
String
,
Number
|
String
]
import
{ animate, stagger }
from
'animejs'
;
animate
(
'.square'
, {
y
:
stagger
([
'2.75rem'
,
'-2.75rem'
]),
delay
:
stagger
([
0
,
500
]),
});
<
div
class
=
"small justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Numerical value
Stagger parameters

--- Timer ---
Timer

Callbacks
Since 4.0.0
then()
Returns a
Promise
that resolves and execute a callback when the timer completes.
The
then
()
method can be directly inlined like this:
createTimer
({
duration
:
500
}).
then
(callback);
Or used in an
async
/
await
context:
async
function
waitForTimerToComplete
(
) {
return
createTimer
({
duration
:
250
})
}
const
asyncTimer =
await
waitForTimerToComplete
();
Parameters
Name
Type
callback
A
Function
whose first argument returns the timer itself
Returns
Promise
import
{ createTimer, utils }
from
'animejs'
;
const
[ $status ] = utils.$(
'.status'
);
const
[ $time ] = utils.$(
'.time'
);
createTimer
({
duration
:
2000
,
onUpdate
:
self
=>
$time.
innerHTML
= self.
currentTime
,
})
.
then
(
() =>
$status.
innerHTML
=
'fulfilled'
);
<
div
class
=
"large row"
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
promise status
</
span
>
<
span
class
=
"status value"
>
pending
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
Previous
Next
onPause
Timer methods

--- Animatable ---
Animatable

Settings
Since 4.0.0
ease
Determines the easing function for the transition to the animated value of the property.
Accepts
ease
Default
'outQuad'
It is recommended to use an
out
type easing function to achieve interesting results.
in
type easing functions start with changes that are too subtle to be noticeable.
import
{ createAnimatable, utils, stagger }
from
'animejs'
;
const
clock1 =
createAnimatable
(
'.clock-1'
, {
rotate
: {
unit
:
'rad'
},
ease
:
'linear'
,
});
const
clock2 =
createAnimatable
(
'.clock-2'
, {
rotate
: {
unit
:
'rad'
},
ease
:
'outElastic'
,
});
const
rotateClock
= (
animatable
) => {
const
PI
=
Math
.
PI
;
let
angle =
PI
/
2
;
let
lastAngle =
0
;
return
e
=>
{
const
[ $clock ] = animatable.
targets
;
const
{ width, height, left, top } = $clock.
getBoundingClientRect
();
const
x = e.
clientX
- left - width /
2
;
const
y = e.
clientY
- top - height /
2
;
const
currentAngle =
Math
.
atan2
(y, x);
const
diff = currentAngle - lastAngle;
angle += diff >
PI
? diff -
2
*
PI
: diff < -
PI
? diff +
2
*
PI
: diff;
lastAngle = currentAngle;
animatable.
rotate
(angle);
}
}
const
rotateClock1 =
rotateClock
(clock1);
const
rotateClock2 =
rotateClock
(clock2);
const
onMouseMove
= e => {
rotateClock1
(e);
rotateClock2
(e);
}
window
.
addEventListener
(
'mousemove'
, onMouseMove);
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
div
class
=
"clock clock-1"
>
</
div
>
<
div
class
=
"label"
>
linear
</
div
>
</
div
>
<
div
class
=
"col"
>
<
div
class
=
"clock clock-2"
>
</
div
>
<
div
class
=
"label"
>
outElastic
</
div
>
</
div
>
</
div
>
Previous
Next
duration
modifier

--- Draggable ---
Draggable

Callbacks
Since 4.0.0
onResize
Executes a function when either the container or the dragged target sizes change.
Accepts
A
Function
whose first argument returns the draggable itself
Default
noop
import
{ createDraggable, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
resizes =
0
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
onResize
:
self
=>
{
$value.
textContent
= ++resizes;
}
});
<
div
class
=
"iframe-content resizable"
>
<
div
class
=
"large padded grid square-grid"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
resizes
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
</
div
>
Previous
Next
onSettle
onAfterResize

--- Draggable ---
Draggable

Settings
Since 4.0.0
minVelocity
Specifies the minimum velocity to apply to the dragged element after release.
Accepts
A
Number
greater than or equal to
0
A
Function
that returns a
Number
greater than or equal to
0
When defined using a
Function
, the value will be automatically refreshed every time the container or target element is resized.
It can also be refreshed manually using the
refresh
()
method.
Default
0
import
{ createDraggable }
from
'animejs'
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
minVelocity
:
0
,
});
createDraggable
(
'.circle'
, {
container
:
'.grid'
,
minVelocity
:
10
,
});
<
div
class
=
"large centered grid square-grid"
>
<
div
class
=
"square draggable"
>
</
div
>
<
div
class
=
"circle draggable"
>
</
div
>
</
div
>
Previous
Next
velocityMultiplier
maxVelocity

--- Timeline ---
Timeline

Methods
Since 2.0.0
play()
Forces the timeline to play forward.
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $playButton ] = utils.$(
'.play'
);
const
tl =
createTimeline
({
autoplay
:
false
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
500
)
.
add
(
'.square'
, {
x
:
'15rem'
},
1000
);
const
playTimeline
= (
) => tl.
play
();
$playButton.
addEventListener
(
'click'
, playTimeline);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button play"
>
Play
</
button
>
</
fieldset
>
</
div
>
Previous
Next
init()
reverse()

--- Draggable ---
Draggable

Settings
Since 4.0.0
releaseContainerFriction
Overrides the
containerFriction
applied to the dragged element when threw out of bounds on release, where
0
means no friction at all and
1
prevents the element from going past the container bounds.
Accepts
A
Number
greater than or equal to
0
and lower than or equal to
1
A
Function
that returns a
Number
greater than or equal to
0
and lower than or equal to
1
When defined using a
Function
, the value will be automatically refreshed every time the container or target element is resized.
It can also be refreshed manually using the
refresh
()
method.
Default
The
containerFriction
value
import
{ createDraggable }
from
'animejs'
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
releaseContainerFriction
:
0
,
});
createDraggable
(
'.circle'
, {
container
:
'.grid'
,
releaseContainerFriction
:
1
,
});
<
div
class
=
"large centered grid square-grid"
>
<
div
class
=
"square draggable"
>
</
div
>
<
div
class
=
"circle draggable"
>
</
div
>
</
div
>
Previous
Next
containerFriction
releaseMass

--- Utilities ---
Utilities
Since 4.0.0
shuffle()
V4
Mutates an array by randomizing the order of its elements.
const
shuffledArray = utils.
shuffle
(array);
Parameters
Name
Accepts
array
Array
Returns
The mutated
Array
import
{ utils }
from
'animejs'
;
const
[ $shuffle ] = utils.$(
'button'
);
const
squares = utils.$(
'.square'
);
const
x =
stagger
(
'3.2rem'
);
// Initial squares x position
utils.
set
(squares, { x });
const
shuffle
= (
) =>
animate
(utils.
shuffle
(squares), { x });
$shuffle.
addEventListener
(
'click'
, shuffle);
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
A
</
div
>
<
div
class
=
"square"
>
B
</
div
>
<
div
class
=
"square"
>
C
</
div
>
<
div
class
=
"square"
>
D
</
div
>
<
div
class
=
"square"
>
E
</
div
>
<
div
class
=
"square"
>
F
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
>
Shuffle
</
button
>
</
fieldset
>
</
div
>
Previous
Next
randomPick()
sync()

--- Timeline ---
Timeline

Playback settings
Since 4.0.0
reversed
Defines the initial direction of the timeline.
Accepts
Boolean
If set to
true
the animation plays backwards
If set to
false
the animation plays forwards
Default
false
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
reversed
=
true
;
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $time ] = utils.$(
'.time'
);
const
tl =
createTimeline
({
reversed
:
true
,
onUpdate
:
self
=>
$time.
innerHTML
= self.
currentTime
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
'-=500'
)
.
add
(
'.square'
, {
x
:
'15rem'
},
'-=500'
);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"time value"
>
0
</
span
>
</
pre
>
</
div
>
Previous
Next
alternate
autoplay

--- Timer ---
Timer

Playback settings
Since 4.0.0
frameRate
Determines the frames per second (fps) at which a timer runs.
This value can be modified later with
timer.
fps
=
30
.
Accepts
A
Number
greater than
0
The frame rate is capped to the monitor refresh rate or in some cases by the browser itself.
Default
120
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
frameRate
=
30
;
import
{ createTimer, utils }
from
'animejs'
;
const
[ $range ] = utils.$(
'.range'
);
const
[ $fps ] = utils.$(
'.fps'
);
const
[ $time ] = utils.$(
'.time'
);
const
timer =
createTimer
({
frameRate
:
60
,
onUpdate
:
self
=>
$time.
innerHTML
= self.
currentTime
,
});
const
updateFps
= (
) => {
const
{ value } = $range;
$fps.
innerHTML
= value;
timer.
fps
= value;
}
$range.
addEventListener
(
'input'
, updateFps);
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
fps
</
span
>
<
span
class
=
"fps value"
>
60
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
input
type
=
"range"
min
=
0
max
=
120
value
=
60
step
=
1
class
=
"range"
/>
</
fieldset
>
</
div
>
Previous
Next
autoplay
playbackRate

--- Utilities ---
Utilities
Since 4.0.0
Chain-able utility functions
V4
Chain-able utility functions allow for the creation of complex operations by combining multiple functions in a single expression.
const
clampRoundPad = utils.
clamp
(
0
,
100
).
round
(
2
).
padStart
(
6
,
'0'
);
clampRoundPad
(
125
)
// '000100'
clampRoundPad
(
75.25
)
// '075.25'
The following utility functions support chaining:
round
()
clamp
()
snap
()
wrap
()
mapRange
()
interpolate
()
roundPad
()
padStart
()
padEnd
()
degToRad
()
radToDeg
()
Chain-able functions works great in combinaison with the
modifier
tween parameter.
Usage
Chain-able functions are created when calling a utility function without its optional value parameter:
const
chainableClamp = utils.
clamp
(
0
,
100
);
// Returns a chain-able function
const
result =
chainableClamp
(
150
);
// 100
Chaining
Chain-able functions are combined like this:
const
normalizeAndRound = utils.
mapRange
(
0
,
255
,
0
,
1
).
round
(
1
);
normalizeAndRound
(
128
);
// '0.5'
normalizeAndRound
(
64
);
// '0.3'
import
{ animate, utils }
from
'animejs'
;
animate
(
'.value'
, {
innerHTML
:
1000
,
modifier
: utils.
wrap
(
0
,
10
).
roundPad
(
3
).
padStart
(
6
,
'0'
),
duration
:
100000
,
alternate
:
true
,
loop
:
true
,
ease
:
'linear'
,
});
<
div
class
=
"large row"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"value lcd"
>
0
</
span
>
</
pre
>
</
div
>
Previous
Next
radToDeg()
Web Animation API

--- Timeline ---
Timeline

Playback settings
Since 2.0.0
defaults
V4
Defines defaults parameters for the timeline children.
Accepts
An
Object
of
Tween parameters
(except
from
and
to
),
Playback settings
and
Callbacks
import
{ createTimeline }
from
'animejs'
;
const
tl =
createTimeline
({
defaults
: {
ease
:
'inOutExpo'
,
duration
:
500
,
loop
:
2
,
reversed
:
true
,
alternate
:
true
,
}
})
.
add
(
'.square'
, {
x
:
'15rem'
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
});
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
Previous
Next
Timeline playback settings
delay

--- Utilities ---
Utilities
Since 4.0.0
clamp()
V4
Restricts a
Number
between the specified
min
and
max
values or creates a clamping
Function
with pre-defined
min
and
max
parameters.
const
clampedValue = utils.
clamp
(value, min, max);
const
clamperFunction = utils.
clamp
(min, max);
Parameters
Name
Accepts
value
(opt)
Number
min
Number
max
Number
Returns
A
Number
if a value is provided, otherwise a
chain-able utility
Function
to clamp numbers between the specified
min
and
max
values:
const
clampBetween0and100 = utils.
clamp
(
0
,
100
);
clampBetween0and100
(
90
);
// 90
clampBetween0and100
(
120
);
// 100
clampBetween0and100
(-
15
);
// 0
const
clampAndRound = utils.
clamp
(
0
,
100
).
round
(
2
);
// Clamp then round to 2 decimal places
clampAndRound
(
72.7523
);
// 72.75
clampAndRound
(
120.2514
);
// 100
import
{ animate, utils }
from
'animejs'
;
animate
(
'.normal'
, {
rotate
:
'1turn'
,
duration
:
3000
,
loop
:
true
,
ease
:
'inOut'
,
});
animate
(
'.clamped'
, {
rotate
:
'1turn'
,
modifier
: utils.
clamp
(
.25
,
.75
),
// Used as a function
duration
:
3000
,
loop
:
true
,
ease
:
'inOut'
,
});
<
div
class
=
"x-large spaced-evenly row"
>
<
div
class
=
"col"
>
<
div
class
=
"clock normal"
>
</
div
>
<
div
class
=
"label"
>
normal
</
div
>
</
div
>
<
div
class
=
"col"
>
<
div
class
=
"clock clamped"
>
</
div
>
<
div
class
=
"label"
>
clamped [.25,.75]
</
div
>
</
div
>
</
div
>
Previous
Next
round()
snap()

--- Getting started ---
Getting started
Imports
V4
Anime.js v4 API exposes the following modules:
Import methods
ES Modules
To import
Anime.js
using the ES Modules syntax, you can use the
import
statement as shown below:
import
{
animate,
createTimeline,
createTimer,
// ...other methods
}
from
'animejs'
;
Global object
You can define
Anime.js
globally using a script tag like this:
<
script
src
=
"path/to/anime.iife.min.js"
>
</
script
>
Then access all the modules directly from
anime
object:
anime.
animate
();
anime.
createTimeline
();
anime.
createTimer
();
// ...other methods
Or you can mimic the ESM import syntax by using the
object destructuring
syntax like this:
const
{
animate,
createTimeline,
createTimer,
// ...other methods
} = anime;
Previous
Next
Installation
Using with vanilla JS

--- Animation ---
Animation
Animates the properties values of targeted elements, with a wide range of parameters, callbacks and methods.
Animations are created using the
animate
()
method.
import
{ animate }
from
'animejs'
;
const
animation =
animate
(targets, parameters);
Parameters
Name
Accepts
targets
Targets
parameters
An
Object
of
Animatable properties
,
Tween parameters
,
Playback settings
and
Animation callbacks
Returns
JSAnimation
WAAPI powered animations
Anime.js provides a more lightweight (3KB) version of the
animate
()
method (10KB) powered by the
Web Animation API
.
import
{ waapi }
from
'animejs'
;
const
animation = waapi.
animate
(targets, parameters);
The WAAPI version has less features overall, but covers most of the basic API.
Features only available in the JavaScript version are indicated with a (
JS
) badge and WAAPI specific features are indicated with a (
WAAPI
) badge
To know more about when to use the WAAPI version and its potential pitfalls, please refer to the
Web Animations API Guide
.
import
{ animate }
from
'animejs'
;
animate
(
'span'
, {
// Property keyframes
y
: [
{
to
:
'-2.75rem'
,
ease
:
'outExpo'
,
duration
:
600
},
{
to
:
0
,
ease
:
'outBounce'
,
duration
:
800
,
delay
:
100
}
],
// Property specific parameters
rotate
: {
from
:
'-1turn'
,
delay
:
0
},
delay
:
(
_, i
) =>
i *
50
,
// Function based value
ease
:
'inOutCirc'
,
loopDelay
:
1000
,
loop
:
true
});
<
h2
class
=
"large grid centered square-grid text-xl"
>
<
span
>
H
</
span
>
<
span
>
E
</
span
>
<
span
>
L
</
span
>
<
span
>
L
</
span
>
<
span
>
O
</
span
>
<
span
>
&nbsp;
</
span
>
<
span
>
W
</
span
>
<
span
>
O
</
span
>
<
span
>
R
</
span
>
<
span
>
L
</
span
>
<
span
>
D
</
span
>
</
h2
>
In this section
Targets
Animatable properties
Tween value types
Tween parameters
Keyframes
Playback settings
Callbacks
Methods
Properties
Previous
Next
Timer
Targets

--- Timeline ---
Timeline

Callbacks
Since 4.0.0
onUpdate
Executes a function on every frames of a running timeline at the specified
frameRate
.
Accepts
A
Function
whose first argument returns the timeline itself
Default
noop
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
onUpdate
=
self
=>
console
.
log
(self.
id
);
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
updates =
0
;
const
tl =
createTimeline
({
defaults
: {
duration
:
500
},
loopDelay
:
250
,
loop
:
true
,
onUpdate
:
self
=>
$value.
textContent
= ++updates
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
'+=250'
)
.
add
(
'.square'
, {
x
:
'15rem'
},
'+=250'
);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
updates
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
Previous
Next
onBeforeUpdate
onRender

--- Draggable ---
Draggable

Settings
Since 4.0.0
containerFriction
Specifies the friction applied to the dragged element when going out of bounds, where
0
means no friction at all and
1
prevents the element from going past the container bounds.
Accepts
A
Number
greater than or equal to
0
and lower than or equal to
1
A
Function
that returns a
Number
greater than or equal to
0
and lower than or equal to
1
When defined using a
Function
, the value will be automatically refreshed every time the container or target element is resized.
It can also be refreshed manually using the
refresh
()
method.
Default
0.8
import
{ createDraggable }
from
'animejs'
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
containerFriction
:
0
,
});
createDraggable
(
'.circle'
, {
container
:
'.grid'
,
containerFriction
:
1
,
});
<
div
class
=
"large centered grid square-grid"
>
<
div
class
=
"square draggable"
>
</
div
>
<
div
class
=
"circle draggable"
>
</
div
>
</
div
>
Previous
Next
containerPadding
releaseContainerFriction

--- Engine ---
Engine
Since 4.0.0
Engine methods
import
{ engine }
from
'animejs'
;
┌──────────┐
engine.│
update
() │
engine.│
pause
() ├─
Methods
engine.│
resume
() │
└──────────┘
In this section
update()
pause()
resume()
Previous
Next
Engine parameters
update()

--- Timeline ---
Timeline

Methods
Since 4.0.0
stretch()
V4
Changes the total duration of a timeline and its children to fit a specific time.
The total duration is equal to the duration of an iteration multiplied with the total number of iterations. So if the timeline is 1000ms and loops twice (3 iterations in total), the total duration will be 3000ms (1000 * 3).
timeline.
stretch
(duration);
Parameters
Name
Type
Description
duration
Number
The new total duration in ms of the timeline
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $range ] = utils.$(
'.range'
);
const
[ $totalDuration ] = utils.$(
'.value'
);
const
tl =
createTimeline
({
loop
:
1
,
alternate
:
true
,
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
500
)
.
add
(
'.square'
, {
x
:
'15rem'
},
1000
);
const
stretchTimeline
= (
) => {
const
newDuration = +$range.
value
;
$totalDuration.
textContent
= newDuration;
tl.
stretch
(newDuration).
restart
();
}
stretchTimeline
();
$range.
addEventListener
(
'input'
, stretchTimeline);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
total duration
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
<
div
class
=
"medium centered row"
>
<
fieldset
class
=
"controls"
>
<
input
type
=
"range"
min
=
100
max
=
2000
value
=
1000
step
=
100
class
=
"seek range"
/>
</
fieldset
>
</
div
>
Previous
Next
seek()
refresh()

--- Utilities ---
Utilities
Since 4.0.0
cleanInlineStyles()
V4
Removes all CSS inline styles added by the specified instance.
Can be used as a Animation or Timeline
onComplete
()
callback.
const
cleanedInstance = utils.
cleanInlineStyles
(instance);
Parameters
Name
Accepts
instance
Animation
|
Timeline
Returns
The passed
Animation
or
Timeline
instance.
import
{ animate, utils }
from
'animejs'
;
utils.
set
(
'.square'
, {
scale
:
.75
});
animate
(
'.keep-styles'
, {
x
:
'23rem'
,
borderRadius
:
'50%'
,
});
animate
(
'.clean-styles'
, {
x
:
'23rem'
,
borderRadius
:
'50%'
,
// This removes the translateX and borderRadius inline styles
// But keeps the scale previously added outside of this animation
onComplete
: utils.
cleanInlineStyles
});
<
div
class
=
"medium row"
>
<
div
class
=
"square keep-styles"
>
</
div
>
<
div
class
=
"padded label"
>
Keep styles (default)
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square clean-styles"
>
</
div
>
<
div
class
=
"padded label"
>
Clean translateX and borderRadius
</
div
>
</
div
>
Previous
Next
remove()
random()

--- Animation ---
Animation

Tween parameters
Since 4.0.0
modifier
V4
JS
A
Function
that modifies or alters the behavior of the animated numerical value. Modifiers can be set globally for all animation properties or locally for a specific property. If the final animated value contains strings, like units (
'100px'
), the string part is automatically added to the final value before being applied to the element.
Most
Utilities
functions can be used as modifiers.
Accepts
A
Function
with the following parameters:
Parameters
Name
Description
value
The current animated numerical value
Must returns
Number
Default
null
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
modifier
=
v
=>
-v;
// Don't do this :D
import
{ animate, utils }
from
'animejs'
;
animate
(
'.row:nth-child(1) .square'
, {
x
:
'17rem'
,
modifier
: utils.
round
(
0
),
// Round to 0 decimals
duration
:
4000
,
});
animate
(
'.row:nth-child(2) .square'
, {
x
:
'85rem'
,
modifier
:
v
=>
v %
17
,
duration
:
4000
,
});
animate
(
'.row:nth-child(3) .square'
, {
x
:
'17rem'
,
y
: {
to
:
'70rem'
,
modifier
:
v
=>
Math
.
cos
(v) /
2
,
// Specific modifier to y property
},
duration
:
4000
,
});
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
utils.round(0)
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
v => v % 17
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
v => Math.cos(v) / 2
</
div
>
</
div
>
Previous
Next
composition
Keyframes

--- Draggable ---
Draggable

Settings
Since 4.0.0
containerPadding
Specifies the container's padding in pixels.
Accepts
Number
Array
<
Number
>
(
[top, right, bottom, left]
)
A
Function
that returns
Array
<
Number
>
(
[top, right, bottom, left]
)
When defined using a
Function
, the value will be automatically refreshed every time the container or target element is resized.
It can also be refreshed manually using the
refresh
()
method.
Default
0
import
{ createDraggable }
from
'animejs'
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
containerPadding
: [
16
,
32
, -
16
,
64
],
// top, right, bottom, left
scrollThreshold
:
0
,
});
<
div
class
=
"large centered padded show-bounds grid square-grid"
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
Previous
Next
container
containerFriction

--- Animation ---
Animation

Callbacks
Since 4.0.0
onRender
V4
JS
Executes a function every time an animation renders something on the screen, this means that no rendering is happening when the
currentTime
is inside the
delay
or
loopDelay
time frames.
Accepts
A
Function
whose first argument returns the animation itself
Default
noop
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
onRender
=
self
=>
console
.
log
(self.
id
);
import
{ animate, utils }
from
'animejs'
;
const
[ $rendersLog ] = utils.$(
'.value'
);
let
renders =
0
;
const
animation =
animate
(
'.circle'
, {
x
:
'16rem'
,
loopDelay
:
1500
,
loop
:
true
,
alternate
:
true
,
onRender
:
self
=>
$rendersLog.
textContent
= ++renders
});
<
div
class
=
"large row"
>
<
div
class
=
"circle"
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
renders
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
Previous
Next
onUpdate
onLoop

--- Timer ---
Timer

Methods
Since 4.0.0
seek()
Updates the
currentTime
of the timer and advances it to a specific time.
timer.
seek
(time, muteCallbacks);
Parameters
Name
Type
Description
time
Number
The new
currentTime
in ms of the timer
muteCallbacks=false
(opt)
Boolean
If
true
, prevent the callbacks from being fired
Returns
The timer itself
Can be chained with other timer methods.
import
{ createTimer, utils }
from
'animejs'
;
const
[ $range ] = utils.$(
'.range'
);
const
[ $playPauseButton ] = utils.$(
'.play-pause'
);
const
[ $time ] = utils.$(
'.time'
);
const
updateButtonLabel
= timer => {
$playPauseButton.
textContent
= timer.
paused
?
'Play'
:
'Pause'
;
}
const
timer =
createTimer
({
duration
:
2000
,
autoplay
:
false
,
onUpdate
:
self
=>
{
$range.
value
= self.
currentTime
;
$time.
innerHTML
= self.
currentTime
;
updateButtonLabel
(self);
},
onComplete
: updateButtonLabel,
});
const
seekTimer
= (
) => timer.
seek
(+$range.
value
);
const
playPauseTimer
= (
) => {
if
(timer.
paused
) {
timer.
play
();
}
else
{
timer.
pause
();
updateButtonLabel
(timer);
}
}
$range.
addEventListener
(
'input'
, seekTimer);
$playPauseButton.
addEventListener
(
'click'
, playPauseTimer);
<
div
class
=
"large centered row"
>
<
div
class
=
"half col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"medium centered row"
>
<
fieldset
class
=
"controls"
>
<
input
type
=
"range"
min
=
0
max
=
2000
value
=
0
class
=
"range"
/>
<
button
style
=
"flex: 0.25;"
class
=
"button play-pause"
>
Play
</
button
>
</
fieldset
>
</
div
>
Previous
Next
revert()
stretch()

--- Timer ---
Timer

Callbacks
Since 4.0.0
onComplete
Executes a function when all the iterations (
loop
) of a timer have finished playing.
Accepts
A
Function
whose first argument returns the timer itself
Default
noop
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
onComplete
=
self
=>
console
.
log
(self.
id
);
import
{ createTimer, utils }
from
'animejs'
;
const
[ $status ] = utils.$(
'.status'
);
const
[ $time ] = utils.$(
'.time'
);
createTimer
({
duration
:
2000
,
onComplete
:
self
=>
$status.
innerHTML
=
'true'
,
onUpdate
:
self
=>
$time.
innerHTML
= self.
currentTime
});
<
div
class
=
"large row"
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
completed
</
span
>
<
span
class
=
"status value"
>
false
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
Previous
Next
onBegin
onUpdate

--- Animation ---
Animation
Since 2.0.0
Keyframes
Create a sequence of animations on the same animatable property.
Property value keyframes
Specific to an animated property, these keyframes are passed to the property value directly:
animate
(
'.square'
, {
┌───────────────────┐
│
x
: [
0
,
100
,
200
], ├─
Tween
Values
Array
│
y
: [
0
,
100
,
200
], │
└───────────────────┘
duration
:
3000
,
}
animate
(
'.square'
, {
┌────────────────────────────┐
│
x
: [{
to
:
100
}, {
to
:
200
}], ├─
Tween
Parameters
Array
│
y
: [{
to
:
100
}, {
to
:
200
}], │
└────────────────────────────┘
duration
:
3000
,
}
Animation keyframes
Defined at the animation level, these keyframes can animate multiple properties per keyframe:
animate
(
'.square'
, {
┌───────────────────────┐
│
keyframes
: [ │
│ {
x
:
100
,
y
:
100
}, ├─
Duration
Based
│ {
x
:
200
,
y
:
200
}, │
│ ], │
└───────────────────────┘
duration
:
3000
,
}
animate
(
'.square'
, {
┌───────────────────────────────┐
│
keyframes
: { │
│
'0%'
: {
x
:
0
,
y
:
0
}, │
│
'50%'
: {
x
:
100
,
y
:
100
}, ├─
Percentage
Based
│
'100%'
: {
x
:
200
,
y
:
200
}, │
│ }, │
└───────────────────────────────┘
duration
:
3000
,
}
In this section
Tween values
Tween parameters
Duration based
Percentage based
Previous
Next
Tween parameters
Tween values keyframes

--- Scope ---
Scope

Parameters
Since 4.0.0
mediaQueries
Defines the media queries to match for conditionally refreshing the
Scope
when one of their matches state changes.
Media queries matching states are accessible via the scope
matches
property.
Accepts
An
Object
where
key
is an arbitrary name
String
for the media query.
Value
is the media query definition
String
.
import
{ createScope, animate }
from
'animejs'
;
createScope
({
mediaQueries
: {
isSmall
:
'(max-width: 100px)'
,
isMedium
:
'(min-width: 101px) and (max-width: 200px)'
,
isLarge
:
'(min-width: 201px)'
,
reduceMotion
:
'(prefers-reduced-motion)'
,
}
})
.
add
(
self
=>
{
const
{ isSmall, isMedium, isLarge, reduceMotion } = self.
matches
;
utils.
set
(
'.square'
, {
scale
: isMedium ?
.75
: isLarge ?
1
:
.5
});
animate
(
'.square'
, {
x
: isSmall ?
0
: [
'-35vw'
,
'35vw'
],
y
: isSmall ? [
'-40vh'
,
'40vh'
] :
0
,
rotate
:
360
,
loop
:
true
,
alternate
:
true
,
duration
: reduceMotion ?
0
: isSmall ?
750
:
1250
});
});
<
div
class
=
"iframe-content resizable"
>
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
</
div
>
Previous
Next
defaults
Scope methods

--- ScrollObserver ---
ScrollObserver
Since 4.0.0
scrollObserver properties
const
scrollObserver =
onScroll
(parameters);
┌───────┐
scrollObserver.│target │
scrollObserver.│linked ├─
Properties
scrollObserver.│repeat │
└───────┘
Name
Description
id
Gets the unique identifier for the ScrollObserver instance (
Number
)
container
Gets the scroll container associated with this observer (
ScrollContainer
)
target
Gets the target element being observed (
HTMLElement
)
linked
Gets the linked object (
Animation
|
Timer
|
Timeline
)
repeat
Gets whether the observer should repeat (
Boolean
)
horizontal
Gets whether the scroll direction is horizontal (
Boolean
)
enter
Gets the enter threshold (
String
|
Number
)
leave
Gets and sets the leave threshold (
String
|
Number
)
sync
Gets whether synchronisation is enabled (
Boolean
)
velocity
Gets the current scroll velocity (
Number
)
backward
Gets whether the scroll direction is backward (
Boolean
)
scroll
Gets the current scroll position (
Number
)
progress
Gets the current progress of the observed element (0 to 1) (
Number
)
completed
Gets whether the observation has completed (
Boolean
)
began
Gets whether the observation has begun (
Boolean
)
isInView
Gets whether the observed element is currently in view (
Boolean
)
offset
Gets the offset of the observed element (
Number
)
offsetStart
Gets the start offset of the observed element (
Number
)
offsetEnd
Gets the end offset of the observed element (
Number
)
distance
Gets the scroll distance for the observed element (
Number
)
Previous
Next
ScrollObserver methods
Scope

--- Utilities ---
Utilities
Since 4.0.0
round()
Rounds a
Number
to a specified number of decimal places or creates a rounding
Function
with a pre-defined
decimalLength
parameter.
const
roundedValue = utils.
round
(value, decimalLength);
const
roundingFunction = utils.
round
(decimalLength);
Parameters
Name
Accepts
value
(opt)
Number
decimalLength
Number
Returns
A
Number
if a value is provided, otherwise a
chain-able utility
Function
to round numbers with the specified decimal length:
const
clampAndRound = utils.
clamp
(
0
,
100
).
round
(
2
);
// Clamp then round to 2 decimal places
clampAndRound
(
72.7523
);
// 72.75
clampAndRound
(
120.2514
);
// 100
import
{ animate, utils }
from
'animejs'
;
animate
(
'.normal'
, {
rotate
:
'1turn'
,
duration
:
3000
,
loop
:
true
,
});
animate
(
'.rounded'
, {
rotate
:
'1turn'
,
modifier
: utils.
round
(
1
),
// Used as a function
duration
:
3000
,
loop
:
true
,
});
<
div
class
=
"x-large spaced-evenly row"
>
<
div
class
=
"col"
>
<
div
class
=
"clock normal"
>
</
div
>
<
div
class
=
"label"
>
normal
</
div
>
</
div
>
<
div
class
=
"col"
>
<
div
class
=
"clock rounded"
>
</
div
>
<
div
class
=
"label"
>
rounded (.1)
</
div
>
</
div
>
</
div
>
Previous
Next
lerp()
clamp()

--- Timer ---
Timer
Since 4.0.0
Timer playback settings
Specify the timings and behaviours of a timer.
Playback settings properties are defined directly in the
createTimer
()
parameters
Object
.
createTimer
({
┌───────────────────┐
│
duration
:
1000
, │
│
frameRate
:
true
, ├─
Playback
Settings
│
loop
:
true
, │
└───────────────────┘
onBegin
:
() =>
{},
onLoop
:
() =>
{},
onUpdate
:
() =>
{},
});
In this section
delay
duration
loop
loopDelay
alternate
reversed
autoplay
frameRate
playbackRate
Previous
Next
Timer
delay

--- Stagger ---
Stagger
Creates sequential effects by distributing values progressively across multiple targets.
Stagger
Function based values
are created using
stagger
()
function.
import
{ stagger }
from
'animejs'
;
const
functionValue =
stagger
(value, parameters);
Parameters
Name
Accepts
value
Stagger value
parameters
(opt)
Stagger parameters
Returns
Function based value
import
{ animate, stagger }
from
'animejs'
;
animate
(
'.square'
, {
x
:
'17rem'
,
scale
:
stagger
([
1
,
.1
]),
delay
:
stagger
(
100
),
});
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
In this section
Time staggering
Values staggering
Timeline staggering
Value types
Parameters
Previous
Next
Scope
Time staggering

--- Web Animation API ---
Web Animation API

Improvements to WAAPI
Since 4.0.0
Multi-targets animation
Targets one or multiple DOM Elements using a CSS selector, allowing animating multiple targets in one single
animate
()
call and support of the
stagger
()
method.
Syntax comparison
Anime.js
waapi.
animate
(
'.circle'
, {
translate
:
'100px'
,
delay
:
stagger
(
100
),
});
WAAPI equivalent
document
.
querySelectorAll
(
'.circle'
).
forEach
(
(
$el, i
) =>
{
$el.
animate
({
translate
:
'100px'
,
}, {
duration
:
1000
,
delay
: i *
100
,
easing
:
'ease-out'
,
}).
finished
.
then
(
() =>
{
$el.
style
.
translate
=
'100px'
;
})
});
Accepts
Any
String
accepted by
document
.
querySelectorAll
()
import
{ waapi, stagger }
from
'animejs'
;
waapi.
animate
(
'.circle'
, {
translate
:
'17rem'
,
delay
:
stagger
(
100
),
loop
:
true
,
alternate
:
true
,
});
<
div
class
=
"medium row"
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
Previous
Next
Sensible defaults
Default units

--- Timeline ---
Timeline
Synchronises animations, timers, and functions together.
Timelines are created using the
createTimeline
()
function.
import
{ createTimeline }
from
'animejs'
;
const
timeline =
createTimeline
(parameters);
Parameters
Name
Accepts
parameters
(opt)
An
Object
of
Timeline playback settings
and
Timeline callbacks
Returns
A Timeline instance with various
methods
used to add animations, timers, callback functions and labels to it:
timeline.
add
(target, animationParameters, position);
timeline.
add
(timerParameters, position);
timeline.
sync
(timelineB, position);
timeline.
call
(callbackFunction, position);
timeline.
label
(labelName, position);
import
{ createTimeline }
from
'animejs'
;
const
tl =
createTimeline
({
defaults
: {
duration
:
750
} });
tl.
label
(
'start'
)
.
add
(
'.square'
, {
x
:
'15rem'
},
500
)
.
add
(
'.circle'
, {
x
:
'15rem'
},
'start'
)
.
add
(
'.triangle'
, {
x
:
'15rem'
,
rotate
:
'1turn'
},
'<-=500'
);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
In this section
Add timers
Add animations
Sync WAAPI animations
Sync timelines
Call functions
Time position
Playback settings
Callbacks
Methods
Properties
Previous
Next
Animation
Add timers

--- Draggable ---
Draggable

Methods
Since 4.0.0
setX()
Manually set the
x
position of the draggable target.
Is equivalent updating
draggable.
x
directly when no
muteCallback
parameter is defined.
Parameters
Name
Type
Description
x
Number
The new x value
muteCallback
(opt)
Boolean
If
true
, prevents the
onUpdate
callback to fire (default
false
)
Returns
The draggable itself
import
{ createDraggable, utils }
from
'animejs'
;
const
[ $setButton ] = utils.$(
'.set'
);
const
draggable =
createDraggable
(
'.square'
);
const
setRandomX
= (
) => draggable.
setX
(utils.
random
(-
100
,
100
));
$setButton.
addEventListener
(
'click'
, setRandomX);
<
div
class
=
"large centered row"
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
<
div
class
=
"large row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button set"
>
Set random x
</
button
>
</
fieldset
>
</
div
>
Previous
Next
enable()
setY()

--- Scope ---
Scope

Methods
Since 4.0.0
refresh()
Reverts
the Scope and rebuild it by calling every
constructor functions
.
Internally,
refresh
()
is called every time a media query state changes.
Returns
The Scope itself
import
{ utils, stagger, createScope, createTimeline }
from
'animejs'
;
const
[ $button1, $button2 ] = utils.$(
'.refresh'
);
const
scopeConstructor
= scope => {
const
circles = utils.$(
'.circle'
);
if
(scope.
i
===
undefined
|| scope.
i
> circles.
length
-
1
) scope.
i
=
0
;
const
i = scope.
i
++;
utils.
set
(circles, {
opacity
:
stagger
([
1
,
.25
], {
from
: i,
ease
:
'out(3)'
}),
});
createTimeline
()
.
add
(circles, {
scale
: [{
to
: [
.5
,
1
],
duration
:
250
}, {
to
:
.5
,
duration
:
750
}],
duration
:
750
,
loop
:
true
,
},
stagger
(
50
, {
from
: i }))
.
seek
(
750
)
}
const
scope1 =
createScope
({
root
:
'.row-1'
}).
add
(scopeConstructor);
const
scope2 =
createScope
({
root
:
'.row-2'
}).
add
(scopeConstructor);
const
refreshScope1
= (
) => scope1.
refresh
();
const
refreshScope2
= (
) => scope2.
refresh
();
$button1.
addEventListener
(
'click'
, refreshScope1);
$button2.
addEventListener
(
'click'
, refreshScope2);
<
div
class
=
"medium justified row row-1"
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
div
class
=
"medium justified row row-2"
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button refresh"
>
Refresh row 1
</
button
>
<
button
class
=
"button refresh"
>
Refresh row 2
</
button
>
</
fieldset
>
</
div
>
Previous
Next
revert()
Scope properties

--- Timer ---
Timer

Methods
Since 4.0.0
cancel()
Pauses the timer, removes it from the engine's main loop, and frees up memory.
Returns
The timer itself
Can be chained with other timer methods.
import
{ createTimer, utils }
from
'animejs'
;
const
[ $playButton ] = utils.$(
'.play'
);
const
[ $cancelButton ] = utils.$(
'.cancel'
);
const
[ $time ] = utils.$(
'.time'
);
const
timer =
createTimer
({
onUpdate
:
self
=>
$time.
innerHTML
= self.
currentTime
});
const
playTimer
= (
) => timer.
play
();
const
cancelTimer
= (
) => timer.
cancel
();
$playButton.
addEventListener
(
'click'
, playTimer);
$cancelButton.
addEventListener
(
'click'
, cancelTimer);
<
div
class
=
"large centered row"
>
<
div
class
=
"half col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button play"
>
Play
</
button
>
<
button
class
=
"button cancel"
>
Cancel
</
button
>
</
fieldset
>
</
div
>
Previous
Next
complete()
revert()

--- Timeline ---
Timeline

Playback settings
Since 2.0.0
autoplay
Defines the play mode of a timeline.
Accepts
Boolean
|
onScroll
()
If set to
true
the timeline plays automatically
If set to
false
the timeline has to be manually played
If set to
onScroll
()
the timeline will starts when the
scroll thresholds
conditions are met
Default
true
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
autoplay
=
false
;
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $paused ] = utils.$(
'.paused'
);
const
[ $play ] = utils.$(
'.play'
);
const
tl =
createTimeline
({
autoplay
:
false
,
onUpdate
:
self
=>
$paused.
innerHTML
= !!self.
paused
,
onComplete
:
self
=>
$paused.
innerHTML
= !!self.
paused
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
'-=500'
)
.
add
(
'.square'
, {
x
:
'15rem'
},
'-=500'
);
const
playTl
= (
) => tl.
paused
? tl.
restart
() : tl.
play
();
$play.
addEventListener
(
'click'
, playTl);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
paused
</
span
>
<
span
class
=
"paused value"
>
true
</
span
>
</
pre
>
</
div
>
<
div
class
=
"large row controls"
>
<
button
class
=
"play"
>
Play
</
button
>
</
div
>
Previous
Next
reversed
frameRate

--- Draggable ---
Draggable

Callbacks
Since 4.0.0
onRelease
Executes a function when the element is released after a grab.
Accepts
A
Function
whose first argument returns the draggable itself
Default
noop
import
{ createDraggable, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
releases =
0
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
onRelease
:
() =>
$value.
textContent
= ++releases
});
<
div
class
=
"large padded grid square-grid"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
releases
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
Previous
Next
onUpdate
onSnap

--- Animation ---
Animation

Targets
Since 1.0.0
DOM Elements
Targets one or multiple DOM Elements.
Accepts
HTMLElement
SVGElement
SVGGeometryElement
NodeList
import
{ animate }
from
'animejs'
;
const
$demo =
document
.
querySelector
(
'#selector-demo'
);
const
$squares = $demo.
querySelectorAll
(
'.square'
);
animate
($demo, {
scale
:
.75
});
animate
($squares, {
x
:
'23rem'
});
<
div
id
=
"selector-demo"
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
Previous
Next
CSS Selector
JavaScript Objects

--- Draggable ---
Draggable

Callbacks
Since 4.0.0
onUpdate
Executes a function every time the position of the dragged element changes.
Accepts
A
Function
whose first argument returns the draggable itself
Default
noop
import
{ createDraggable, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
updates =
0
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
onUpdate
:
() =>
$value.
textContent
= ++updates
});
<
div
class
=
"large padded grid square-grid"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
updates
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
Previous
Next
onDrag
onRelease

--- Animation ---
Animation

Keyframes
Since 4.0.0
Percentage based keyframes
V4
JS
Sequences multiple
Animatable properties
with positions defined from a percentage of the animation total duration.
This syntax is very similar to the CSS
@keyframes
syntax and only exposes control over the
ease
parameter for each individual keyframes.
The first keyframe defines the
from value
of the tween.
keyframes
: {
'25%'
: {
x
:
100
,
y
:
50
,
ease
:
'out'
},
'50%'
: {
x
:
200
,
y
:
75
, },
}
Accepts
An
Object
where
keys
are
String
representing the percentages
values
are an
Object
containing at least one
Animatable properties
and an optional
ease
parameter.
import
{ animate }
from
'animejs'
;
animate
(
'.square'
, {
keyframes
: {
'0%'
: {
x
:
'0rem'
,
y
:
'0rem'
,
ease
:
'out'
},
'13%'
: {
x
:
'0rem'
,
y
:
'-2.5rem'
, },
'37%'
: {
x
:
'17rem'
,
y
:
'-2.5rem'
,
scale
:
.5
},
'63%'
: {
x
:
'17rem'
,
y
:
'2.5rem'
,
scale
:
.5
},
'87%'
: {
x
:
'0rem'
,
y
:
'2.5rem'
,
scale
:
1
},
'100%'
: {
y
:
'0rem'
,
ease
:
'in'
}
},
rotate
: {
to
:
360
,
ease
:
'linear'
},
duration
:
3000
,
ease
:
'inOut'
,
// ease applied between each keyframes if no ease defined
playbackEase
:
'ouIn(5)'
,
// ease applied accross all keyframes
loop
:
true
,
});
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Duration based keyframes
Animation playback settings

--- Timeline ---
Timeline

Methods
Since 4.0.0
refresh()
V4
Re-computes the timeline children animated values defined with a
Function based value
by updating their
from
values to their current target values, and their
to
values to their newly computed values.
Only the animatable properties values are re-calculated,
duration
and
delay
cannot be refreshed.
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $refreshButton ] = utils.$(
'.refresh'
);
const
tl =
createTimeline
({
loop
:
true
,
onLoop
:
self
=>
self.
refresh
()
})
.
add
(
'.circle'
, {
x
:
() =>
utils.
random
(
0
,
15
) +
'rem'
},
0
)
.
add
(
'.triangle'
, {
x
:
() =>
utils.
random
(
0
,
15
) +
'rem'
},
0
)
.
add
(
'.square'
, {
x
:
() =>
utils.
random
(
0
,
15
) +
'rem'
},
0
);
const
refreshTimeline
= (
) => tl.
refresh
().
restart
();
$refreshButton.
addEventListener
(
'click'
, refreshTimeline);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button refresh"
>
Refresh & Restart
</
button
>
</
fieldset
>
</
div
>
Previous
Next
stretch()
Timeline properties

--- Timeline ---
Timeline

Methods
Since 2.0.0
pause()
Pauses a running timeline.
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $pauseButton ] = utils.$(
'.pause'
);
const
tl =
createTimeline
({
loop
:
true
,
alternate
:
true
,
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
500
)
.
add
(
'.square'
, {
x
:
'15rem'
},
1000
);
const
pauseTimeline
= (
) => tl.
pause
();
$pauseButton.
addEventListener
(
'click'
, pauseTimeline);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button pause"
>
Pause
</
button
>
</
fieldset
>
</
div
>
Previous
Next
reverse()
restart()

--- Web Animation API ---
Web Animation API
V4
Create WAAPI powered animations with the simplicity of Anime.js
Anime.js offers a even more lightweight alternative (3KB versus 10KB) to the
animate
()
method that uses the Web Animation
Element
.
animate
()
API under the hood.
WAAPI powered animations are created using the
waapi.
animate
()
method.
import
{ waapi }
from
'animejs'
;
const
animation = waapi.
animate
(targets, parameters);
Parameters
Name
Accepts
targets
Targets
parameters
An
Object
of
Animatable properties
,
Tween parameters
,
Playback settings
and
Animation callbacks
Returns
WAAPIAnimation
import
{ waapi, stagger }
from
'animejs'
;
waapi.
animate
(
'span'
, {
translate
:
`0 -2rem`
,
delay
:
stagger
(
100
),
duration
:
600
,
loop
:
true
,
alternate
:
true
,
ease
:
'inOut(2)'
,
});
<
h2
class
=
"large grid centered square-grid text-xl"
>
<
span
>
H
</
span
>
<
span
>
E
</
span
>
<
span
>
L
</
span
>
<
span
>
L
</
span
>
<
span
>
O
</
span
>
<
span
>
&nbsp;
</
span
>
<
span
>
W
</
span
>
<
span
>
A
</
span
>
<
span
>
A
</
span
>
<
span
>
P
</
span
>
<
span
>
I
</
span
>
</
h2
>
In this section
When to use
Hardware-acceleration
Improvements to WAAPI
API differences
convertEase()
Previous
Next
Utilities
When to use WAAPI

--- Draggable ---
Draggable

Methods
Since 4.0.0
reset()
Restores the draggable element to its initial position.
Returns
The draggable itself
import
{ createDraggable, utils }
from
'animejs'
;
const
[ $resetButton ] = utils.$(
'.reset'
);
const
draggable =
createDraggable
(
'.square'
);
const
resetDraggable
= (
) => draggable.
reset
();
$resetButton.
addEventListener
(
'click'
, resetDraggable);
<
div
class
=
"large centered row"
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
<
div
class
=
"large row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button reset"
>
Reset
</
button
>
</
fieldset
>
</
div
>
Previous
Next
stop()
revert()

--- Timeline ---
Timeline
Timeline properties
const
timeline =
createTimeline
(parameters);
┌────────────┐
timeline.│labels │
timeline.│currentTime ├─
Properties
timeline.│duration │
└────────────┘
Name
Description
id
Gets and sets the ID of the timeline (
String
|
Number
)
labels
Gets and sets the map of time position labels of the timeline (
Object
)
currentTime
Gets and sets the global current time in ms of the timeline (
Number
)
iterationCurrentTime
Gets and sets the current iteration time in ms (
Number
)
deltaTime
Gets the time in ms elapsed between the current and previous frame (
Number
)
progress
Gets and sets the overall progress of the timeline from
0
to
1
(
Number
)
iterationProgress
Gets and sets the progress of the current iteration from
0
to
1
(
Number
)
currentIteration
Gets and sets the current iteration count (
Number
)
duration
Gets the total duration in ms of the timeline (
Number
)
speed
Gets and sets the speed multiplier of the timeline (
Number
)
fps
Gets and sets the fps of the timeline (
Number
)
paused
Gets and sets whether the timeline is paused (
Boolean
)
began
Gets and sets whether the timeline has started (
Boolean
)
completed
Gets and sets whether the timeline has completed (
Boolean
)
reversed
Gets and sets whether the timeline is reversed (
Boolean
)
Previous
Next
Timeline methods
Animatable

--- Web Animation API ---
Web Animation API

Improvements to WAAPI
Since 4.0.0
Individual CSS transforms
Unlike CSS animations or native WAAPI, the CSS
transform
property can be animated by specifying individual properties.
This allows a greater level of control over how to animate individual transform properties.
Individual transforms with
WAAPI
only works for browsers that support
CSS
.
registerProperty
(propertyDefinition)
, and fallback to no animations.
Individual transforms cannot be
hardware-accelerated
.
Valid individual CSS transforms properties
Name
Shorthand
Default Value
Default Unit
translateX
x
'0px'
'px'
translateY
y
'0px'
'px'
translateZ
z
'0px'
'px'
rotate
—
'0deg'
'deg'
rotateX
—
'0deg'
'deg'
rotateY
—
'0deg'
'deg'
rotateZ
—
'0deg'
'deg'
scale
—
'1'
—
scaleX
—
'1'
—
scaleY
—
'1'
—
scaleZ
—
'1'
—
skew
—
'0deg'
'deg'
skewX
—
'0deg'
'deg'
skewY
—
'0deg'
'deg'
import
{ waapi, utils }
from
'animejs'
;
const
$squares = utils.$(
'.square'
);
const
animateSquares
= (
) => {
waapi.
animate
($squares, {
x
:
() =>
utils.
random
(
0
,
17
) +
'rem'
,
y
:
() =>
utils.
random
(-
1
,
1
) +
'rem'
,
rotateX
:
() =>
utils.
random
(-
90
,
90
),
rotateY
:
() =>
utils.
random
(-
90
,
90
),
onComplete
:
() =>
animateSquares
()
});
}
animateSquares
();
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Function based values
Individual property parameters

--- Draggable ---
Draggable

Settings
Since 4.0.0
scrollSpeed
Specifies a value that affects the automatic scrolling speed of the container. The higher the value, the faster the scroll goes and
0
prevents the container from scrolling.
Accepts
A
Number
A
Function
that returns a
Number
When defined using a
Function
, the value will be automatically refreshed every time the container or target element is resized.
It can also be refreshed manually using the
refresh
()
method.
Default
1.5
import
{ createDraggable }
from
'animejs'
;
createDraggable
(
'.square'
, {
container
:
'.scroll-container'
,
scrollSpeed
:
2
,
});
<
div
class
=
"scroll-container scroll-x scroll-y"
>
<
div
class
=
"scroll-content"
>
<
div
class
=
"large padded grid square-grid"
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
</
div
>
</
div
>
Previous
Next
scrollThreshold
cursor

--- Stagger ---
Stagger

Value types
Since 2.0.0
Numerical value
Represents by how much each staggered value is incremented by.
Accepts
Number
String
containing at least one
Number
import
{ animate, stagger }
from
'animejs'
;
animate
(
'.square'
, {
// Increase translateX by 5.75rem for each elements
x
:
stagger
(
'5.75rem'
),
// Increase delay by 100ms for each elements
delay
:
stagger
(
100
)
});
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
x: 0rem delay: 0ms
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
x: 5.75rem delay: 100ms
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
x: 11.5rem delay: 200ms
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
x: 17.25rem delay: 300ms
</
div
>
</
div
>
Previous
Next
Stagger value types
Range value

--- Web Animation API ---
Web Animation API

API differences
Since 4.0.0
iterations
The
iterations
parameter is replaced by the
loop
parameter and determines how many times the animation will repeat instead of the total number of iterations.
iterations
loop
Effect
1
0
No repeat
3
2
Repeat twice
Infinity
Infinity
|
true
| -1
Repeat indefinitely
Syntax comparison
Anime.js
waapi.
animate
(
'.square'
, {
x
:
100
,
loop
:
3
});
WAAPI equivalent
const
targets =
document
.
querySelectorAll
(
'.square'
);
targets.
forEach
(
(
$el, i
) =>
{
$el.
animate
({
translate
:
'100px'
,
}, {
fill
:
'forwards'
,
duration
:
1000
,
iterations
:
4
})
});
Accepts
A
Number
[
0
,
Infinity
]
A
Boolean
where
true
is equivalent to
Infinity
and
false
doesn't loop
import
{ waapi, stagger }
from
'animejs'
;
waapi.
animate
(
'.square'
, {
translate
:
'17rem'
,
loop
:
3
,
alternate
:
true
,
delay
:
stagger
(
100
)
});
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
API differences with native WAAPI
direction

--- Utilities ---
Utilities
Since 4.0.0
snap()
V4
Rounds a
Number
to the nearest specified
increment
or creates a snapping
Function
with a pre-defined
increment
parameter.
If an
Array
is provided as the increment, it selects the closest value from the array.
const
snappedValue = utils.
snap
(value, increment);
const
snapperFunction = utils.
snap
(increment);
Parameters
Name
Accepts
value
(opt)
Number
increment
Number
|
Array
<
Number
>
Returns
A
Number
if a value is provided, otherwise a
chain-able utility
Function
to snap numbers to the nearest
increment
or array value:
const
snapTo10 = utils.
snap
(
10
);
snapTo10
(
94
);
// 90
snapTo10
(-
17
);
// -20
const
snapToArray = utils.
snap
([
0
,
50
,
100
]);
snapToArray
(
30
);
// 50
snapToArray
(
75
);
// 100
snapToArray
(-
10
);
// 0
const
clampAndSnap = utils.
clamp
(
0
,
100
).
snap
(
30
);
clampAndSnap
(
72.7523
);
// 60
clampAndSnap
(
120.2514
);
// 90
import
{ animate, utils }
from
'animejs'
;
animate
(
'.normal'
, {
rotate
:
'1turn'
,
duration
:
3000
,
loop
:
true
,
ease
:
'inOut'
,
});
animate
(
'.snapped'
, {
rotate
:
'1turn'
,
modifier
: utils.
snap
(
.25
),
// Used as a modifier
duration
:
3000
,
loop
:
true
,
ease
:
'inOut'
,
});
<
div
class
=
"x-large spaced-evenly row"
>
<
div
class
=
"col"
>
<
div
class
=
"clock normal"
>
</
div
>
<
div
class
=
"label"
>
normal
</
div
>
</
div
>
<
div
class
=
"col"
>
<
div
class
=
"clock snapped"
>
</
div
>
<
div
class
=
"label"
>
snapped (.25)
</
div
>
</
div
>
</
div
>
Previous
Next
clamp()
wrap()

--- Draggable ---
Draggable

Settings
Since 4.0.0
scrollThreshold
Specifies the number of pixels the draggable element must cross beyond the area bounds before the container starts scrolling automatically.
Accepts
A
Number
A
Function
that returns a
Number
When defined using a
Function
, the value will be automatically refreshed every time the container or target element is resized.
It can also be refreshed manually using the
refresh
()
method.
Default
20
import
{ createDraggable }
from
'animejs'
;
createDraggable
(
'.square'
, {
container
:
'.scroll-container'
,
scrollThreshold
:
12
,
});
<
div
class
=
"scroll-container scroll-x scroll-y"
>
<
div
class
=
"scroll-content"
>
<
div
class
=
"large padded grid square-grid"
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
</
div
>
</
div
>
Previous
Next
dragSpeed
scrollSpeed

--- Animation ---
Animation

Playback settings
Since 1.0.0
delay
Defines the default delay in milliseconds of the animation tweens.
Accepts
A
Number
equal or greater than
0
A
Function based value
that returns a
Number
equal to or greater than
0
Default
0
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
delay
=
500
;
import
{ animate }
from
'animejs'
;
const
playbackDelay =
animate
(
'.delay'
, {
x
:
'16rem'
,
scale
:
1.8
,
delay
:
500
,
// Global delay applied to all properties
loop
:
true
,
alternate
:
true
});
<
div
class
=
"medium row"
>
<
div
class
=
"circle delay"
>
</
div
>
</
div
>
Previous
Next
Animation playback settings
duration

--- Animation ---
Animation

Methods
Since 4.0.0
revert()
V4
Cancels the animation, reverts all its animated values to their original state, cleanup the CSS inline styles, and reverts the linked
onScroll
()
instance if necessary.
Use
revert
()
when you want to completely stop and destroy an animation.
Returns
The animation itself
Can be chained with other animation methods.
import
{ animate, utils, stagger }
from
'animejs'
;
const
[ $revertButton ] = utils.$(
'.revert'
);
const
[ $restartButton ] = utils.$(
'.restart'
);
// Set an initial translateX value
utils.
set
(
'.square'
, {
x
:
'17rem'
});
const
animation =
animate
(
'.square'
, {
x
:
0
,
alternate
:
true
,
ease
:
'inOutSine'
,
loop
:
true
,
delay
:
stagger
(
100
),
});
const
revertAnimation
= (
) => animation.
revert
();
const
restartAnimation
= (
) => animation.
restart
();
$revertButton.
addEventListener
(
'click'
, revertAnimation);
$restartButton.
addEventListener
(
'click'
, restartAnimation);
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button revert"
>
Revert
</
button
>
<
button
class
=
"button restart"
>
Restart
</
button
>
</
fieldset
>
</
div
>
Previous
Next
cancel()
seek()

--- Animation ---
Animation

Playback settings
Since 1.0.0
loop
V4
Defines how many times an animation repeats.
Accepts
Value
Effect
Number
The number of loops in the range
[
0
,
Infinity
]
Infinity
Loop indefinitely
true
Equivalent to
Infinity
-
1
Equivalent to
Infinity
Default
0
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
loop
=
true
;
import
{ animate }
from
'animejs'
;
animate
(
'.loop'
, {
x
:
'17.5rem'
,
loop
:
3
,
});
animate
(
'.loop-alternate'
, {
x
:
'17.5rem'
,
loop
:
3
,
alternate
:
true
,
});
animate
(
'.loop-reverse'
, {
x
:
'17.5rem'
,
loop
:
3
,
reversed
:
true
,
});
animate
(
'.loop-infinity'
, {
x
:
'17.5rem'
,
loop
:
true
,
// Or Infinity
});
<
div
class
=
"small row"
>
<
div
class
=
"circle loop"
>
</
div
>
<
div
class
=
"padded label"
>
loop: 3
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"circle loop-alternate"
>
</
div
>
<
div
class
=
"padded label"
>
loop: 3, alternate: true
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"circle loop-reverse"
>
</
div
>
<
div
class
=
"padded label"
>
loop: 3, reversed: true
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"circle loop-infinity"
>
</
div
>
<
div
class
=
"padded label"
>
loop: true
</
div
>
</
div
>
Previous
Next
duration
loopDelay

--- Animation ---
Animation

Callbacks
Since 4.0.0
onLoop
V4
JS
Executes a function every time an animation iteration (
loop
) completes.
Accepts
A
Function
whose first argument returns the animation itself
Default
noop
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
onLoop
=
self
=>
console
.
log
(self.
id
);
import
{ animate, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
loops =
0
;
const
animation =
animate
(
'.circle'
, {
x
:
'16rem'
,
loopDelay
:
1500
,
loop
:
true
,
alternate
:
true
,
onLoop
:
self
=>
$value.
textContent
= ++loops
});
<
div
class
=
"large row"
>
<
div
class
=
"circle"
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
loops
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
Previous
Next
onRender
onPause

--- Timer ---
Timer

Methods
Since 4.0.0
play()
Forces the timer to play forward.
Returns
The timer itself
Can be chained with other timer methods.
import
{ createTimer, utils }
from
'animejs'
;
const
[ $playButton ] = utils.$(
'.play'
);
const
[ $time ] = utils.$(
'.time'
);
const
timer =
createTimer
({
duration
:
2000
,
autoplay
:
false
,
onUpdate
:
self
=>
$time.
innerHTML
= self.
iterationCurrentTime
,
});
const
playTimer
= (
) => timer.
play
();
$playButton.
addEventListener
(
'click'
, playTimer);
<
div
class
=
"large centered row"
>
<
div
class
=
"half col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
iteration time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button play"
>
Play
</
button
>
</
fieldset
>
</
div
>
Previous
Next
Timer methods
reverse()

--- Getting started ---
Getting started
This section covers how to download, install and import Anime.js in your project.
If you're migrating from v3, please check out the
migration guide
on GitHub.
In this section
Installation
Imports
Using with vanilla JS
Using with React
Previous
Next
Documentation
Installation

--- ScrollObserver ---
ScrollObserver
Since 4.0.0
ScrollObserver settings
ScrollObserver settings properties are defined directly in the
onScroll
()
parameters
Object
.
animate
(
'.square'
, {
x
:
100
,
autoplay
:
onScroll
({
┌──────────────────────────┐
│
container
:
'.container'
, │
│
target
:
'.section'
, ├─
Settings
│
axis
:
'y'
, │
└──────────────────────────┘
enter
:
'bottom top'
,
leave
:
'top bottom'
,
sync
:
true
,
onEnter
:
() =>
{},
onLeave
:
() =>
{},
onUpdate
:
() =>
{},
})
});
In this section
container
target
debug
axis
repeat
Previous
Next
ScrollObserver
container

--- Animation ---
Animation

Methods
Since 1.0.0
restart()
Resets all properties and set the
currentTime
of an animation to
0
.
If the
autoplay
is set to
true
, the animation plays automatically.
Returns
The animation itself
Can be chained with other animation methods.
import
{ animate, utils, stagger }
from
'animejs'
;
const
[ $restartButton ] = utils.$(
'.restart'
);
const
animation =
animate
(
'.square'
, {
x
:
'17rem'
,
direction
:
'alternate'
,
ease
:
'inOutSine'
,
loop
:
true
,
delay
:
stagger
(
100
)
});
const
restartAnimation
= (
) => animation.
restart
();
$restartButton.
addEventListener
(
'click'
, restartAnimation);
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button restart"
>
Restart
</
button
>
</
fieldset
>
</
div
>
Previous
Next
pause()
alternate()

--- Animation ---
Animation

Methods
Since 4.0.0
cancel()
V4
Pauses the animation, removes it from the engine's main loop, and frees up memory.
Returns
The animation itself
Can be chained with other animation methods.
import
{ animate, utils, stagger }
from
'animejs'
;
const
[ $cancelButton ] = utils.$(
'.cancel'
);
const
[ $playButton ] = utils.$(
'.play'
);
const
animation =
animate
(
'.square'
, {
x
:
'17rem'
,
alternate
:
true
,
ease
:
'inOutSine'
,
loop
:
true
,
delay
:
stagger
(
100
),
});
const
cancelAnimation
= (
) => animation.
cancel
();
const
playAnimation
= (
) => animation.
play
();
$cancelButton.
addEventListener
(
'click'
, cancelAnimation);
$playButton.
addEventListener
(
'click'
, playAnimation);
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button cancel"
>
Cancel
</
button
>
<
button
class
=
"button play"
>
Play
</
button
>
</
fieldset
>
</
div
>
Previous
Next
complete()
revert()

--- Animation ---
Animation

Callbacks
Since 4.0.0
onBeforeUpdate
V4
JS
Executes a function before updating the tween values, on every frames of a running animation at the specified
frameRate
.
Accepts
A
Function
whose first argument returns the animation itself
Default
noop
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
onBeforeUpdate
=
self
=>
console
.
log
(self.
id
);
import
{ animate, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
mult =
1
;
let
updates =
0
;
const
animation =
animate
(
'.circle'
, {
x
:
'16rem'
,
loopDelay
:
1500
,
modifier
:
v
=>
mult * v,
loop
:
true
,
alternate
:
true
,
onBeforeUpdate
:
self
=>
{
$value.
textContent
= ++updates;
// Update the mult value just before updating the tweens
mult =
1
- self.
iterationProgress
;
}
});
<
div
class
=
"large row"
>
<
div
class
=
"circle"
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
updates
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
Previous
Next
onComplete
onUpdate

--- Animation ---
Animation

Animatable properties
Since 1.0.0
HTML Attributes
JS
Numerical and color HTML attributes can be passed directly to the animation parameters.
import
{ animate, utils }
from
'animejs'
;
animate
(
'input'
, {
value
:
1000
,
// animate the input "value" attribute
alternate
:
true
,
loop
:
true
,
modifier
: utils.
round
(
0
),
});
<
pre
class
=
"row large centered"
>
<
input
type
=
"range"
value
=
"0"
min
=
"0"
max
=
"1000"
/>
<
input
type
=
"text"
value
=
"0"
size
=
"5"
/>
</
pre
>
Previous
Next
JavaScript Object properties
SVG Attributes

--- Stagger ---
Stagger
Since 2.0.0
Stagger parameters
stagger
(
'1rem'
,
{
┌───────────────────┐
│
start
:
100
, │
│
from
:
2
, │
│
reversed
:
false
, ├─
Stagger
Parameters
│
ease
:
'outQuad'
, │
│
grid
: [
8
,
8
], │
└───────────────────┘
}
);
In this section
start value
from
reversed
ease
grid
axis
modifier
Previous
Next
Stagger value types
Stagger start

--- Animation ---
Animation

Targets
Since 1.0.0
CSS Selector
Targets one or multiple DOM Elements using a CSS selector.
Accepts
Any
String
accepted by
document
.
querySelectorAll
()
import
{ animate }
from
'animejs'
;
animate
(
'.square'
, {
x
:
'17rem'
});
animate
(
'#css-selector-id'
, {
rotate
:
'1turn'
});
animate
(
'.row:nth-child(3) .square'
, {
scale
: [
1
,
.5
,
1
] });
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
id
=
"css-selector-id"
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Targets
DOM Elements

--- Animation ---
Animation

Methods
Since 1.0.0
play()
Forces the animation to play forward.
Returns
The animation itself
Can be chained with other animation methods.
import
{ animate, utils, stagger }
from
'animejs'
;
const
[ $playButton ] = utils.$(
'.play'
);
const
animation =
animate
(
'.square'
, {
x
:
'17rem'
,
ease
:
'inOutSine'
,
delay
:
stagger
(
100
),
autoplay
:
false
,
// The animation is paused by default
});
const
playAnimation
= (
) => animation.
play
();
$playButton.
addEventListener
(
'click'
, playAnimation);
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button play"
>
Play
</
button
>
</
fieldset
>
</
div
>
Previous
Next
Animation methods
reverse()

--- Timer ---
Timer

Playback settings
Since 4.0.0
reversed
Sets the initial direction of the timer.
The timer
currentTime
always progresses from
0
to
duration
.
Only the
iterationTime
property is actually reversed.
Accepts
Boolean
If set to
true
the timer's first iteration runs in reverse
If set to
false
the timer's first iteration runs normally
Default
false
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
reversed
=
true
;
import
{ animate }
from
'animejs'
;
const
[ $iterationTime ] = utils.$(
'.iteration-time'
);
const
[ $currentTime ] = utils.$(
'.current-time'
);
createTimer
({
duration
:
10000
,
reversed
:
true
,
onUpdate
:
self
=>
{
$iterationTime.
innerHTML
= self.
iterationCurrentTime
;
$currentTime.
innerHTML
= self.
currentTime
;
}
});
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
iteration time
</
span
>
<
span
class
=
"iteration-time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"current-time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
Previous
Next
alternate
autoplay

--- ScrollObserver ---
ScrollObserver

Methods
Since 4.0.0
refresh()
Updates the bounding values, and re-compute the
Function based value
of a ScrollObserver instance.
The following parameters can be refreshed when set with a
Function based value
:
repeat
axis
enter
leave
No need to call
.
refresh
()
when the container size changes, this is already handled internally.
Returns
The ScrollObserver itself
import
{ animate, onScroll }
from
'animejs'
;
const
scrollSettings = {
enter
:
20
,
leave
:
60
,
}
const
animation =
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
ease
:
'linear'
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
enter
:
() =>
`bottom-=
${scrollSettings.enter}
top`
,
leave
:
() =>
`top+=
${scrollSettings.leave}
bottom`
,
sync
:
.5
,
debug
:
true
,
})
});
animate
(scrollSettings, {
enter
:
90
,
leave
:
100
,
loop
:
true
,
alternate
:
true
,
modifier
: utils.
round
(
0
),
onUpdate
:
() =>
animation.
_autoplay
.
refresh
()
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"label"
>
scroll down
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section"
>
</
div
>
</
div
>
</
div
>
Previous
Next
link()
revert()

--- Draggable ---
Draggable
Since 4.0.0
Draggable properties
const
draggable =
createDraggable
(target, parameters);
┌──────────┐
draggable.│progressX │
draggable.│progressY ├─
Properties
draggable.│velocity │
└──────────┘
Name
Description
snapX
Gets and sets the snap value of the x axis (
Number
|
Array
<
Number
>
)
snapY
Gets and sets the snap value of the y axis (
Number
|
Array
<
Number
>
)
scrollSpeed
Gets and sets the speed value at which the draggable container auto scrolls (
Number
)
scrollThreshold
Gets and sets the threshold distance from container edges before auto-scrolling begins (
Number
)
dragSpeed
Gets and sets the speed value at which the draggable element gets dragged (
Number
)
maxVelocity
Gets and sets the maximum velocity limit for the draggable element (
Number
)
minVelocity
Gets and sets the minimum velocity limit for the draggable element (
Number
)
velocityMultiplier
Gets and sets the multiplier applied to velocity calculations (
Number
)
releaseEase
Gets and sets the easing function applied to the draggable element animations (
Function
)
releaseSpring
Gets the internal spring used to move the draggable element after release (
Spring
)
containerPadding
Gets and sets padding values for the container [top, right, bottom, left] (
Array
<
Number
>
)
containerFriction
Gets and sets the friction value applied within the container (
Number
)
containerBounds
Gets the bounds of the container [top, right, bottom, left] (
Array
<
Number
>
)
containerArray
Gets array of container elements if multiple containers were provided (
Array
<
HTMLElement
>|
null
)
$container
Gets and sets the container element (
HTMLElement
)
$target
Gets and sets the target element (
HTMLElement
)
$trigger
Gets the trigger element (
HTMLElement
)
$scrollContainer
Gets the scroll container (window or container element) (
Window
|
HTMLElement
)
x
Gets and sets the x position (
Number
)
y
Gets and sets the y position of the dragged element (
Number
)
progressX
Gets and sets the progress (0-1) of the x position relative to the container (
Number
)
progressY
Gets and sets the progress (0-1) of the y position relative to the container (
Number
)
velocity
Gets the current velocity of the draggable element (
Number
)
angle
Gets the current angle in radians of the draggable element (
Number
)
xProp
Gets the mapped x property name (
String
)
yProp
Gets the mapped y property name (
String
)
destX
Gets the currently defined destination of the x axis (
Number
)
destY
Gets the currently defined destination of the y axis (
Number
)
deltaX
Gets the current delta of the x axis (
Number
)
deltaY
Gets the current delta of the y axis (
Number
)
enabled
Returns
true
if the draggable is enabled (
Boolean
)
grabbed
Returns
true
if the element is currently being grabbed (
Boolean
)
dragged
Returns
true
if the element is currently being dragged (
Boolean
)
cursor
Gets and sets cursor behavior (
Boolean
|
DraggableCursorParams
)
disabled
Gets the disabled state for [x, y] axes (
Array
<
Number
>
)
fixed
Returns
true
if the target element has position:fixed (
Boolean
)
useWin
Returns
true
if using window as container (
Boolean
)
isFinePointer
Gets and sets whether fine pointer (e.g. mouse) is being used (
Boolean
)
initialized
Returns
true
if the draggable has been initialized (
Boolean
)
canScroll
Returns
true
if auto-scrolling is possible (
Boolean
)
contained
Returns
true
if draggable is contained within bounds (
Boolean
)
manual
Returns
true
if in manual control mode (
Boolean
)
released
Returns
true
if element was just released (
Boolean
)
updated
Returns
true
if position was just updated (
Boolean
)
scroll
Gets the current scroll position {x, y} (
Object
)
coords
Gets the current and previous coordinates [x, y, prevX, prevY] (
Array
<
Number
>
)
snapped
Gets the snap state for [x, y] axes (
Array
<
Number
>
)
pointer
Gets current and previous pointer positions [x, y, prevX, prevY] (
Array
<
Number
>
)
scrollView
Gets the scroll view dimensions [width, height] (
Array
<
Number
>
)
dragArea
Gets the drag area bounds [x, y, width, height] (
Array
<
Number
>
)
scrollBounds
Gets the scroll container bounds [top, right, bottom, left] (
Array
<
Number
>
)
targetBounds
Gets the target element bounds [top, right, bottom, left] (
Array
<
Number
>
)
window
Gets the window dimensions [width, height] (
Array
<
Number
>
)
pointerVelocity
Gets the current pointer velocity (
Number
)
pointerAngle
Gets the current pointer angle in radians (
Number
)
activeProp
Gets the active property being animated (
String
)
onGrab
Gets and sets the callback fired when element is grabbed (
Function
)
onDrag
Gets and sets the callback fired while dragging (
Function
)
onRelease
Gets and sets the callback fired on release (
Function
)
onUpdate
Gets and sets the callback fired on any position update (
Function
)
onSettle
Gets and sets the callback fired when movement settles (
Function
)
onSnap
Gets and sets the callback fired when element snaps (
Function
)
onResize
Gets and sets the callback fired when container/element resizes (
Function
)
onAfterResize
Gets and sets the callback fired after resize handling completes (
Function
)
Previous
Next
Draggable methods
ScrollObserver

--- Timeline ---
Timeline

Methods
Since 4.0.0
cancel()
V4
Pauses the timeline, removes it from the engine's main loop, and frees up memory.
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $cancelButton ] = utils.$(
'.cancel'
);
const
[ $playButton ] = utils.$(
'.play'
);
const
tl =
createTimeline
({
loop
:
true
,
alternate
:
true
,
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
500
)
.
add
(
'.square'
, {
x
:
'15rem'
},
1000
);
const
cancelTimeline
= (
) => tl.
cancel
();
const
playTimeline
= (
) => tl.
play
();
$cancelButton.
addEventListener
(
'click'
, cancelTimeline);
$playButton.
addEventListener
(
'click'
, playTimeline);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button cancel"
>
Cancel
</
button
>
<
button
class
=
"button play"
>
Play
</
button
>
</
fieldset
>
</
div
>
Previous
Next
complete()
revert()

--- Timeline ---
Timeline
Since 4.0.0
Call functions
V4
Functions are added to a timeline with the
call
()
method.
timeline.
call
(callback, position);
Parameters
Name
Accepts
callback
Function
position
(opt)
Time position
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $functionA ] = utils.$(
'.function-A'
);
const
[ $functionB ] = utils.$(
'.function-B'
);
const
[ $functionC ] = utils.$(
'.function-C'
);
const
tl =
createTimeline
()
.
call
(
() =>
$functionA.
innerHTML
=
'A'
,
0
)
.
call
(
() =>
$functionB.
innerHTML
=
'B'
,
800
)
.
call
(
() =>
$functionC.
innerHTML
=
'C'
,
1200
);
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
function A
</
span
>
<
span
class
=
"function-A value lcd"
>
--
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
function B
</
span
>
<
span
class
=
"function-B value lcd"
>
--
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
function C
</
span
>
<
span
class
=
"function-C value lcd"
>
--
</
span
>
</
pre
>
</
div
>
</
div
>
Previous
Next
Sync timelines
Time position

--- Timeline ---
Timeline

Callbacks
Since 4.0.0
onComplete
Executes a function when all the iterations (loops) of a timeline have finished playing.
Accepts
A
Function
whose first argument returns the timeline itself
Default
noop
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
onComplete
=
self
=>
console
.
log
(self.
id
);
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
const
tl =
createTimeline
({
defaults
: {
duration
:
500
},
loop
:
1
,
onComplete
:
self
=>
$value.
textContent
= self.
completed
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
})
.
add
(
'.square'
, {
x
:
'15rem'
});
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
completed
</
span
>
<
span
class
=
"value"
>
false
</
span
>
</
pre
>
</
div
>
Previous
Next
onBegin
onBeforeUpdate

--- Animation ---
Animation

Keyframes
Since 2.0.0
Tween parameters keyframes
JS
Sequences multiple
Tween parameters
specific to an
Animatable property
.
This syntax allows very fine control over an animation by giving access to
ease
,
delay
,
duration
and
modifier
parameters for each individual keyframes.
The default
duration
of a keyframe equals the total animation duration divided by the total number of keyframes.
Accepts
An
Array
of
Tween parameters
import
{ animate }
from
'animejs'
;
animate
(
'.square'
, {
x
: [
{
to
:
'17rem'
,
duration
:
700
,
delay
:
400
},
{
to
:
0
,
duration
:
700
,
delay
:
800
},
],
y
: [
{
to
:
'-2.5rem'
,
ease
:
'out'
,
duration
:
400
},
{
to
:
'2.5rem'
,
duration
:
800
,
delay
:
700
},
{
to
:
0
,
ease
:
'in'
,
duration
:
400
,
delay
:
700
},
],
scale
: [
{
to
:
.5
,
duration
:
700
,
delay
:
400
},
{
to
:
1
,
duration
:
700
,
delay
:
800
},
],
rotate
: {
to
:
360
,
ease
:
'linear'
},
duration
:
3000
,
ease
:
'inOut'
,
// ease applied between each keyframes if no ease defined
playbackEase
:
'ouIn(5)'
,
// ease applied accross all keyframes
loop
:
true
,
});
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Tween values keyframes
Duration based keyframes

--- Utilities ---
Utilities
Since 4.0.0
mapRange()
V4
Maps a
Number
from one range to another or creates a mapping
Function
with pre-defined ranges parameters.
const
mappedValue = utils.
mapRange
(value, fromLow, fromHigh, toLow, toHigh);
const
mapperFunction = utils.
mapRange
(fromLow, fromHigh, toLow, toHigh);
Parameters
Name
Accepts
value
(opt)
Number
fromLow
Number
fromHigh
Number
toLow
Number
toHigh
Number
Returns
A
Number
if a value is provided, otherwise a
chain-able utility
Function
to map numbers from one range to another:
const
mapFrom0and100to0and200 = utils.
mapRange
(
0
,
100
,
0
,
200
);
mapFrom0and100to0and200
(
45
);
// 90
mapFrom0and100to0and200
(
120
);
// 240
mapFrom0and100to0and200
(-
15
);
// -30
const
normalizeAndClamp = utils.
mapRange
(-
100
,
100
,
0
,
1
).
clamp
(
0
,
1
);
// Normalize then clamp between 0 and 1
normalizeAndClamp
(
50
);
// 0.75
normalizeAndClamp
(
120
);
// 1
import
{ animate, utils }
from
'animejs'
;
animate
(
'.normal'
, {
rotate
:
'12turn'
,
duration
:
12000
,
loop
:
true
,
ease
:
'inOut'
,
});
animate
(
'.mapped'
, {
rotate
:
'12turn'
,
modifier
: utils.
mapRange
(
0
,
12
,
0
,
1
),
// Used as a modifier
duration
:
12000
,
loop
:
true
,
ease
:
'inOut'
,
});
<
div
class
=
"x-large spaced-evenly row"
>
<
div
class
=
"col"
>
<
div
class
=
"clock normal"
>
</
div
>
<
div
class
=
"label"
>
normal
</
div
>
</
div
>
<
div
class
=
"col"
>
<
div
class
=
"clock mapped"
>
</
div
>
<
div
class
=
"label"
>
mapped [0,12] [0,1]
</
div
>
</
div
>
</
div
>
Previous
Next
wrap()
interpolate()

--- Animation ---
Animation

Playback settings
Since 4.0.0
playbackRate
V4
Defines a speed multiplier to speed up or slow down an animation.
This value can be modified later with
animation.
speed
=
.5
.
Accepts
A
Number
greater than or equal to
0
If set to
0
the animation won't play.
Default
1
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
playbackRate
=
.75
;
import
{ animate, utils }
from
'animejs'
;
const
[ $range ] = utils.$(
'.range'
);
const
[ $speed ] = utils.$(
'.speed'
);
const
animation =
animate
(
'.circle'
, {
x
:
'16rem'
,
loop
:
true
,
alternate
:
true
,
playbackRate
:
1
,
});
const
updateSpeed
= (
) => {
const
{ value } = $range;
$speed.
innerHTML
= utils.
roundPad
(+value,
2
);
utils.
sync
(
() =>
animation.
speed
= value);
}
$range.
addEventListener
(
'input'
, updateSpeed);
<
div
class
=
"large row"
>
<
div
class
=
"circle"
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
speed
</
span
>
<
span
class
=
"speed value"
>
1.00
</
span
>
</
pre
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
input
type
=
"range"
min
=
0
max
=
5
value
=
1
step
=
.01
class
=
"range"
/>
</
fieldset
>
</
div
>
Previous
Next
frameRate
playbackEase

--- Draggable ---
Draggable

Settings
Since 4.0.0
releaseEase
Specifies a custom easing applied to the dragged element after release, a snap event, or repositioning when dragged out of bounds.
Accepts
ease
Passing
createSpring
()
overrides the draggable
releaseMass
,
releaseStiffness
and
releaseDamping
parameters. The
velocity
parameter of
createSpring
()
has no effect and is replaced with the actual velocity of the dragged element.
Default
eases.
outQuint
import
{ createDraggable, createSpring }
from
'animejs'
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
releaseEase
:
'outElastic'
,
});
createDraggable
(
'.circle'
, {
container
:
'.grid'
,
releaseEase
:
createSpring
({
stiffness
:
150
,
damping
:
15
,
})
});
<
div
class
=
"large centered grid square-grid"
>
<
div
class
=
"square draggable"
>
</
div
>
<
div
class
=
"circle draggable"
>
</
div
>
</
div
>
Previous
Next
maxVelocity
dragSpeed

--- Timeline ---
Timeline

Callbacks
Since 4.0.0
onBeforeUpdate
Executes a function before updating the child animations values, on every frames of a running timeline at the specified
frameRate
.
Accepts
A
Function
whose first argument returns the timeline itself
Default
noop
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
onUpdate
=
self
=>
console
.
log
(self.
id
);
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
updates =
0
;
const
tl =
createTimeline
({
defaults
: {
duration
:
500
},
loopDelay
:
250
,
loop
:
true
,
onBeforeUpdate
:
self
=>
$value.
textContent
= ++updates
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
'+=250'
)
.
add
(
'.square'
, {
x
:
'15rem'
},
'+=250'
);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
updates
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
Previous
Next
onComplete
onUpdate

--- Draggable ---
Draggable

Methods
Since 4.0.0
revert()
Restores the draggable element to its initial state and deactivates it.
Returns
The draggable itself
import
{ createDraggable, utils }
from
'animejs'
;
const
[ $revertButton ] = utils.$(
'.revert'
);
const
draggable =
createDraggable
(
'.square'
);
function
revertDraggable
(
) {
draggable.
revert
();
$revertButton.
disabled
=
true
;
}
$revertButton.
addEventListener
(
'click'
, revertDraggable);
<
div
class
=
"large centered row"
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
<
div
class
=
"large row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button revert"
>
Revert
</
button
>
</
fieldset
>
</
div
>
Previous
Next
reset()
refresh()

--- ScrollObserver ---
ScrollObserver
Since 4.0.0
ScrollObserver synchronisation modes
Determines the behaviour of the animation and how it is synchronised relative to the scroll progress or by meeting certain thresholds.
The different synchronisation modes are defined on the
sync
property of the
onScroll
()
parameters
Object
.
animate
(
'.square'
, {
x
:
100
,
autoplay
:
onScroll
({
container
:
'.container'
,
target
:
'.section'
,
axis
:
'y'
,
enter
:
'bottom top'
,
leave
:
'top bottom'
,
┌──────────────────────────┐
│
sync
:
true
, ├─
Synchronisation
Mode
└──────────────────────────┘
onEnter
:
() =>
{},
onLeave
:
() =>
{},
onUpdate
:
() =>
{},
})
});
In this section
Method names
Playback progress
Smooth scroll
Eased scroll
Previous
Next
ScrollObserver thresholds
Method names

--- Timer ---
Timer

Playback settings
Since 4.0.0
playbackRate
Defines a speed multiplier to speed up or slow down a timer playback (
1.0
is normal speed).
This value can be modified later with
timer.
speed
=
.5
.
Accepts
A
Number
greater than or equal to
0
If set to
0
the timer won't play.
Default
1
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
playbackRate
=
.75
;
import
{ createTimer, utils }
from
'animejs'
;
const
[ $range ] = utils.$(
'.range'
);
const
[ $speed ] = utils.$(
'.speed'
);
const
[ $time ] = utils.$(
'.time'
);
const
timer =
createTimer
({
playbackRate
:
2
,
onUpdate
:
self
=>
$time.
innerHTML
= utils.
round
(self.
currentTime
,
0
),
});
const
updateSpeed
= (
) => {
const
speed = utils.
roundPad
(+$range.
value
,
1
);
$speed.
innerHTML
= speed;
utils.
sync
(
() =>
timer.
speed
= speed);
}
$range.
addEventListener
(
'input'
, updateSpeed);
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
speed
</
span
>
<
span
class
=
"speed value"
>
2.0
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
input
type
=
"range"
min
=
0
max
=
10
value
=
2
step
=
.1
class
=
"range"
/>
</
fieldset
>
</
div
>
Previous
Next
frameRate
Timer callbacks

--- Animation ---
Animation
Animation properties
const
animation =
animate
(targets, parameters);
┌────────────┐
animation.│targets │
animation.│currentTime ├─
Properties
animation.│duration │
└────────────┘
Name
Description
id
JS
Gets and sets the ID of the animation (
String
|
Number
)
targets
Gets the current animation targets (
Array
)
currentTime
Gets and sets the global current time in ms of the animation (
Number
)
iterationCurrentTime
JS
Gets and sets the current iteration time in ms (
Number
)
deltaTime
JS
Gets the time in ms elapsed between the current and previous frame (
Number
)
progress
Gets and sets the overall progress of the animation from
0
to
1
(
Number
)
iterationProgress
JS
Gets and sets the progress of the current iteration from
0
to
1
(
Number
)
currentIteration
JS
Gets and sets the current iteration count (
Number
)
duration
Gets the total duration in ms of the animation (
Number
)
speed
Gets and sets the speed multiplier of the animation (
Number
)
fps
JS
Gets and sets the fps of the animation (
Number
)
paused
Gets and sets whether the animation is paused (
Boolean
)
began
JS
Gets and sets whether the animation has started (
Boolean
)
completed
Gets and sets whether the animation has completed (
Boolean
)
reversed
JS
Gets and sets whether the animation is reversed (
Boolean
)
Previous
Next
Animation methods
Timeline

--- Timeline ---
Timeline

Callbacks
Since 4.0.0
onRender
V4
Executes a function every time a timeline renders something on the screen, this means that no rendering is happening when the
currentTime
is inside the
delay
or
loopDelay
time frames, or if neither of its children are rendering.
Accepts
A
Function
whose first argument returns the timeline itself
Default
noop
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
onRender
=
self
=>
console
.
log
(self.
id
);
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
renders =
0
;
const
tl =
createTimeline
({
defaults
: {
duration
:
500
},
loopDelay
:
250
,
loop
:
true
,
onRender
:
self
=>
$value.
textContent
= ++renders
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
'+=250'
)
.
add
(
'.square'
, {
x
:
'15rem'
},
'+=250'
);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
renders
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
Previous
Next
onUpdate
onLoop

--- Draggable ---
Draggable

Callbacks
Since 4.0.0
onSettle
Executes a function when the dragged target has completely stopped moving when released after a grab.
Accepts
A
Function
whose first argument returns the draggable itself
Default
noop
import
{ createDraggable, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
stops =
0
;
createDraggable
(
'.square'
, {
container
:
'.grid'
,
onSettle
:
() =>
$value.
textContent
= ++stops
});
<
div
class
=
"large padded grid square-grid"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
stops
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
Previous
Next
onSnap
onResize

--- Timeline ---
Timeline

Playback settings
Since 2.0.0
loop
Defines how many times a timeline repeats.
Accepts
Value
Effect
Number
The number of loops in the range
[
0
,
Infinity
]
Infinity
Loop indefinitely
true
Equivalent to
Infinity
-
1
Equivalent to
Infinity
Default
0
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
loop
=
true
;
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $loops ] = utils.$(
'.loops'
);
let
loops =
0
;
const
tl =
createTimeline
({
loop
:
true
,
onLoop
:
self
=>
$loops.
innerHTML
= ++loops,
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
'-=500'
)
.
add
(
'.square'
, {
x
:
'15rem'
},
'-=500'
);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
loops
</
span
>
<
span
class
=
"loops value"
>
0
</
span
>
</
pre
>
</
div
>
Previous
Next
delay
loopDelay

--- Timer ---
Timer

Callbacks
Since 4.0.0
onPause
Executes a function when a running timer is paused.
Accepts
A
Function
whose first argument returns the timer itself
Default
noop
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
onPause
=
self
=>
console
.
log
(self.
id
);
import
{ createTimer, utils }
from
'animejs'
;
const
[ $resumeButton, $pauseButton ] = utils.$(
'.button'
);
const
[ $paused ] = utils.$(
'.paused'
);
const
[ $time ] = utils.$(
'.time'
);
let
paused =
0
;
const
timer =
createTimer
({
onPause
:
() =>
$paused.
innerHTML
= ++paused,
onUpdate
:
self
=>
$time.
innerHTML
= self.
currentTime
});
const
pauseTimer
= (
) => timer.
pause
();
const
resumeTimer
= (
) => timer.
resume
();
$resumeButton.
addEventListener
(
'click'
, resumeTimer);
$pauseButton.
addEventListener
(
'click'
, pauseTimer);
<
div
class
=
"large row"
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
paused
</
span
>
<
span
class
=
"value paused"
>
0
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
elapsed time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button"
>
Resume
</
button
>
<
button
class
=
"button"
>
Pause
</
button
>
</
fieldset
>
</
div
>
Previous
Next
onLoop
then()

--- Web Animation API ---
Web Animation API
Since 4.0.0
Improvements to the Web Animation API
The
waapi.
animate
()
method adds lots of quality of life improvements and greatly improves the overall experience of using WAAPI.
On top of all the improvements to the API listed in this chapter, it is also possible to link WAAPI animations to Anime.js built-in
ScrollObserver
waapi.
animate
(
'.square'
, {
translate
:
'100px'
,
autoplay
:
onScroll
()
});
And use a
Scope
for easy media queries handling and component cleanup:
createScope
({
mediaQueries
: {
reduceMotion
:
'(prefers-reduced-motion)'
}
})
.
add
(
(
{ matches }
) =>
{
const
{ reduceMotion } = matches;
waapi.
animate
(
'.square'
, {
transform
: reduceMotion ? [
'100px'
,
'100px'
] :
'100px'
,
opacity
: [
0
,
1
],
});
});
In this section
Sensible defaults
Multi-targets animation
Default units
Function based values
Individual transforms
Individual property params
Spring and custom easings
Previous
Next
Hardware-accelerated animations
Sensible defaults

--- Animation ---
Animation

Callbacks
Since 4.0.0
onPause
V4
JS
Executes a function when a running animation is paused, either manually or automatically.
An animation pauses when any of the following occurs during playback:
The
.
pause
()
method is called
The
.
cancel
()
method is called
The
.
revert
()
method is called
All animation tweens are overlapped by another animation with
composition
:
'replace'
All animation targets have been removed
Accepts
A
Function
whose first argument returns the animation itself
Default
noop
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
onPause
=
self
=>
console
.
log
(self.
id
);
import
{ animate, utils }
from
'animejs'
;
const
[ $animateButton, $pauseButton, $removeButton ] = utils.$(
'.button'
);
const
[ $value ] = utils.$(
'.value'
);
const
[ $circle ] = utils.$(
'.circle'
);
let
paused =
0
;
let
alternate =
0
;
let
animation;
const
animateX
= (
) => {
alternate = !alternate;
animation =
animate
($circle, {
x
:
() =>
(alternate ?
16
:
0
) +
'rem'
,
duration
:
2000
,
onPause
:
() =>
$value.
innerHTML
= ++paused,
});
}
const
pauseAnimation
= (
) => {
if
(animation) animation.
pause
();
}
const
removeTarget
= (
) => {
utils.
remove
($circle);
}
animateX
();
$animateButton.
addEventListener
(
'click'
, animateX);
$pauseButton.
addEventListener
(
'click'
, pauseAnimation);
$removeButton.
addEventListener
(
'click'
, removeTarget);
<
div
class
=
"large row"
>
<
div
class
=
"circle"
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
paused
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button"
>
Animate x
</
button
>
<
button
class
=
"button"
>
Pause anim
</
button
>
<
button
class
=
"button"
>
Remove target
</
button
>
</
fieldset
>
</
div
>
Previous
Next
onLoop
then()

--- Animation ---
Animation

Callbacks
Since 4.0.0
onBegin
JS
Executes a function when an animation begins to play.
Accepts
A
Function
whose first argument returns the animation itself
Default
noop
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
onBegin
=
self
=>
console
.
log
(self.
id
);
import
{ animate, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
const
animation =
animate
(
'.circle'
, {
x
:
'16rem'
,
delay
:
1000
,
// Delays the onBegin() callback by 1000ms
onBegin
:
self
=>
$value.
textContent
= self.
began
});
<
div
class
=
"large row"
>
<
div
class
=
"circle"
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
began
</
span
>
<
span
class
=
"value"
>
false
</
span
>
</
pre
>
</
div
>
Previous
Next
Animation callbacks
onComplete

--- Animation ---
Animation

Tween parameters
Since 1.0.0
duration
Defines the duration in milliseconds of all animated properties, or of a specific property.
Accepts
Number
equal to or greater than
0
Function based value
that returns a
Number
equal to or greater than
0
Duration values higher than
1e12
or equal to
Infinity
are clamped internally to
1e12
(approximately 32 years).
Default
The animation duration value (default
1000
).
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
duration
=
500
;
import
{ animate }
from
'animejs'
;
const
animation =
animate
(
'.square'
, {
x
:
'17rem'
,
rotate
: {
to
:
360
,
duration
:
1500
,
// Local duration only applied to rotate property
},
duration
:
3000
,
// Global duration applied to all properties
loop
:
true
,
alternate
:
true
});
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
delay
ease

--- Engine ---
Engine

Parameters
Since 4.0.0
pauseOnDocumentHidden
Controls whether the engine pauses animations when the browser tab is hidden.
When
true
, animations pause automatically when the tab loses focus. When
false
, animations will adjust their
currentTime
to catch up how long they have been idle in the background, making it looks like they never paused.
engine.
pauseOnDocumentHidden
=
true
;
Accepts
Boolean
Default
true
import
{ engine, utils, createTimer }
from
'animejs'
;
const
[ $globalTime ] = utils.$(
'.global-time'
);
const
[ $engineTime ] = utils.$(
'.engine-time'
);
const
[ $toggle ] = utils.$(
'.toggle'
);
const
startTime =
Date
.
now
();
const
globalTimer =
setInterval
(
() =>
{
$globalTime.
innerHTML
=
Date
.
now
() - startTime;
},
16
);
const
engineTimer =
createTimer
({
onUpdate
:
self
=>
$engineTime.
innerHTML
= self.
currentTime
});
const
toggleSetting
= (
) => {
const
isPauseWhenHidden = engine.
pauseOnDocumentHidden
;
if
(isPauseWhenHidden) {
engine.
pauseOnDocumentHidden
=
false
;
$toggle.
innerHTML
=
'○ Disabled (Switch tab to see the effect)'
;
}
else
{
engine.
pauseOnDocumentHidden
=
true
;
$toggle.
innerHTML
=
'● Enabled (Switch tab to see the effect)'
;
}
}
// Switch tab to see the effect
$toggle.
addEventListener
(
'click'
, toggleSetting);
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
global time
</
span
>
<
span
class
=
"global-time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
engine time
</
span
>
<
span
class
=
"engine-time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button toggle"
>
● Enabled (Switch tab to see the effect)
</
button
>
</
fieldset
>
</
div
>
Previous
Next
precision
Engine methods

--- ScrollObserver ---
ScrollObserver

Settings
Since 4.0.0
target
Specifies which
HTMLElement
triggers the scroll event.
Accepts
CSS Selector
DOM Element
Defaults
If defined on an animation, the first targeted
HTMLElement
of the animation.
null
if defined outside of an animation
import
{ createTimer, utils, onScroll }
from
'animejs'
;
const
[ $timer ] = utils.$(
'.timer'
);
createTimer
({
duration
:
2000
,
alternate
:
true
,
loop
:
true
,
onUpdate
:
self
=>
{
$timer.
innerHTML
= self.
iterationCurrentTime
},
autoplay
:
onScroll
({
target
: $timer,
container
:
'.scroll-container'
,
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large centered row"
>
<
div
class
=
"label"
>
scroll down
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large centered row"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
timer
</
span
>
<
span
class
=
"timer value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
</
div
>
</
div
>
Previous
Next
container
debug

--- Engine ---
Engine
Since 4.0.0
Engine parameters
import
{ engine }
from
'animejs'
;
┌────────────┐
engine.│speed │
engine.│fps ├─
Parameters
engine.│precision │
└────────────┘
In this section
timeUnit
speed
fps
precision
pauseOnDocumentHidden
Previous
Next
Engine
timeUnit (seconds / milliseconds)

--- ScrollObserver ---
ScrollObserver

Synchronisation modes
Since 4.0.0
Method names
Defines a list of method names of the linked
Object
to be called when specific
callbacks
are triggered.
Accepts
A
String
containing a list of
Animation methods
,
Timer methods
or
Timeline methods
names separated by an empty space
Callbacks definition order
'enter'
Defines a method to be triggered when the enter threshold is crossed or when the element re-enters the viewport.
{
sync
:
'play'
,
}
'enter leave'
Defines methods to be triggered when the enter and leave thresholds are crossed.
{
sync
:
'play pause'
,
}
'enterForward leaveForward enterBackward leaveBackward'
Defines methods to be triggered when the enter and leave thresholds are crossed when scrolling forward and when the enter and leave thresholds are crossed when scrolling backward.
{
sync
:
'play pause reverse reset'
,
}
Default
'play pause'
import
{ animate, onScroll }
from
'animejs'
;
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
duration
:
2000
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
enter
:
'bottom-=50 top'
,
leave
:
'top+=60 bottom'
,
sync
:
'resume pause reverse reset'
,
debug
:
true
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"label"
>
scroll down
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section"
>
</
div
>
</
div
>
</
div
>
Previous
Next
ScrollObserver synchronisation modes
Playback progress

--- Animation ---
Animation

Tween value types
Since 2.0.0
Unit conversion value
Converts and animates to a value with a different unit than the default or currently used one.
When using the
JS
animate
()
method, unit conversions may sometimes produce unexpected results depending on the unit type and animated properties used.
For more predictable results, it's recommended to define the unit outside of the animation using
utils.
set
()
, and then animate to the current unit.
Or simply use the
WAAPI
animate
()
method.
Accepts
String
import
{ animate, utils }
from
'animejs'
;
animate
(
'.square'
, {
width
:
'25%'
,
// from '48px' to '25%',
x
:
'15rem'
,
// from '0px' to '15rem',
rotate
:
'.75turn'
,
// from `0deg` to '.75turn',
});
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Numerical value
Relative value

--- Animation ---
Animation

Methods
Since 1.0.0
reverse()
V4
Forces the animation to play backward.
Returns
The animation itself
Can be chained with other animation methods.
import
{ animate, utils, stagger }
from
'animejs'
;
const
[ $reverseButton ] = utils.$(
'.reverse'
);
const
animation =
animate
(
'.square'
, {
x
:
'17rem'
,
ease
:
'inOutSine'
,
delay
:
stagger
(
100
),
});
const
reverseAnimation
= (
) => animation.
reverse
();
$reverseButton.
addEventListener
(
'click'
, reverseAnimation);
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button reverse"
>
Reverse
</
button
>
</
fieldset
>
</
div
>
Previous
Next
play()
pause()

--- Timeline ---
Timeline
Since 2.0.0
Timeline methods
Provide control over the timing, behaviour and progression of a timeline.
Timeline methods are available on a Timeline instance
Object
.
const
timeline =
createTimeline
(parameters);
┌──────────┐
timeline.│
pause
() │
timeline.│
play
() ├─
Methods
timeline.│
restart
() │
└──────────┘
In this section
add()
set()
sync()
label()
remove()
call()
init()
play()
reverse()
pause()
restart()
alternate()
resume()
complete()
cancel()
revert()
seek()
stretch()
refresh()
Previous
Next
Timeline callbacks
add()

--- Timeline ---
Timeline

Methods
Since 4.0.0
call()
V4
Calls the passed function callback at the specified time position.
timeline.
call
(callback, position);
Parameters
Name
Accepts
callback
Function
position
(opt)
Time position
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $functionA ] = utils.$(
'.function-A'
);
const
[ $functionB ] = utils.$(
'.function-B'
);
const
[ $functionC ] = utils.$(
'.function-C'
);
const
tl =
createTimeline
()
.
call
(
() =>
$functionA.
innerHTML
=
'A'
,
0
)
.
call
(
() =>
$functionB.
innerHTML
=
'B'
,
800
)
.
call
(
() =>
$functionC.
innerHTML
=
'C'
,
1200
);
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
function A
</
span
>
<
span
class
=
"function-A value lcd"
>
--
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
function B
</
span
>
<
span
class
=
"function-B value lcd"
>
--
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
function C
</
span
>
<
span
class
=
"function-C value lcd"
>
--
</
span
>
</
pre
>
</
div
>
</
div
>
Previous
Next
remove()
init()

--- ScrollObserver ---
ScrollObserver
Since 4.0.0
ScrollObserver methods
Controls the state and behaviour of a
ScrollObserver
.
ScrollObserver methods are available on the
ScrollObserver
instance returned by a
onScroll
()
function.
const
scrollObserver =
onScroll
(parameters);
┌──────────┐
scrollObserver.│
link
() │
scrollObserver.│
refresh
() ├─
Methods
scrollObserver.│
revert
() │
└──────────┘
In this section
link()
refresh()
revert()
Previous
Next
ScrollObserver callbacks
link()

--- Web Animation API ---
Web Animation API

Improvements to WAAPI
Since 4.0.0
Sensible defaults
By default, a native WAAPI animation requires a duration to be set, won't have any easing applied, and more annoyingly, won't persist its final value, letting the user to take care of setting the final styles manually after the animation completes.
Anime.js simplifies all that by making sure the animation state is preserved after the animation completes, and uses the same default duration and delay as the JS
animate
()
method.
Syntax comparison
Anime.js
waapi.
animate
(
'.circle'
, {
translate
:
'100px'
});
WAAPI equivalent
const
$el =
document
.
querySelector
(
'.circle'
);
$el.
animate
({
translate
:
'100px'
}, {
duration
:
1000
,
easing
:
'ease-out'
,
}).
finished
.
then
(
() =>
{
$el.
style
.
translate
=
'100px'
;
});
import
{ waapi }
from
'animejs'
;
waapi.
animate
(
'.circle'
, {
translate
:
'16rem'
});
<
div
class
=
"large row"
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
Previous
Next
Improvements to the Web Animation API
Multi-targets animation

--- Utilities ---
Utilities
Since 4.0.0
padEnd()
V4
Pads a
Number
from the end with a string until the result reaches a given length or creates a padding
Function
with pre-defined
totalLength
and
padString
parameters.
const
paddedValue = utils.
padEnd
(value, totalLength, padString);
const
padderFunction = utils.
padEnd
(totalLength, padString);
Parameters
Name
Accepts
value
(opt)
String
/
Number
totalLength
Number
padString
String
Returns
A
String
if a value is provided, otherwise a
chain-able utility
Function
to pad numbers from the end:
const
padTo5WithZeros = utils.
padEnd
(
5
,
'0'
);
padTo5WithZeros
(
'123'
);
// '12300'
padTo5WithZeros
(
78
);
// '78000'
padTo5WithZeros
(
'1234'
);
// '12340'
const
roundAndPadEnd = utils.
round
(
0
).
padEnd
(
5
,
'0'
);
// Round to nearest integer then pad to 5 characters
roundAndPadEnd
(
123.456
);
// '12300'
roundAndPadEnd
(
7.8
);
// '80000'
import
{ animate, utils }
from
'animejs'
;
animate
(
'.value'
, {
innerHTML
:
1
,
modifier
: utils.
round
(
3
).
padEnd
(
6
,
'-'
),
duration
:
100000
,
ease
:
'linear'
,
});
<
div
class
=
"large row"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"value lcd"
>
0
</
span
>
</
pre
>
</
div
>
Previous
Next
padStart()
degToRad()

--- Timer ---
Timer

Callbacks
Since 4.0.0
onLoop
Executes a function every time a timer iteration completes.
Accepts
A
Function
whose first argument returns the timer itself
Default
noop
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
onLoop
=
self
=>
console
.
log
(self.
id
);
import
{ createTimer, utils }
from
'animejs'
;
const
[ $loops ] = utils.$(
'.loops'
);
const
[ $time ] = utils.$(
'.time'
);
let
loops =
0
;
createTimer
({
loop
:
true
,
duration
:
1000
,
onLoop
:
self
=>
$loops.
innerHTML
= ++loops,
onUpdate
:
self
=>
$time.
innerHTML
= self.
iterationCurrentTime
,
});
<
div
class
=
"large row"
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
loops
</
span
>
<
span
class
=
"loops value"
>
0
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
iteration time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
Previous
Next
onUpdate
onPause

--- Timeline ---
Timeline

Methods
Since 4.0.0
set()
V4
Instantly sets targets property values at a specific time of the timeline.
timeline.
set
(targets, parameters, position);
Parameters
Name
Accepts
targets
Targets
parameters
Animatable properties
position
(opt)
Time position
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline }
from
'animejs'
;
const
tl =
createTimeline
()
.
set
(
'.circle'
, {
x
:
'15rem'
})
.
set
(
'.triangle'
, {
x
:
'15rem'
},
500
)
.
set
(
'.square'
, {
x
:
'15rem'
},
1000
);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
Previous
Next
add()
sync()

--- Animation ---
Animation

Animatable properties
Since 1.0.0
SVG Attributes
JS
Numerical and color SVG attributes can be animated by passing them directly to the animation parameters.
For more convenient SVG animations, check out the built-in
SVG utility methods
.
import
{ animate }
from
'animejs'
;
animate
([
'feTurbulence'
,
'feDisplacementMap'
], {
baseFrequency
:
.05
,
scale
:
15
,
alternate
:
true
,
loop
:
true
});
animate
(
'polygon'
, {
points
:
'64 68.64 8.574 100 63.446 67.68 64 4 64.554 67.68 119.426 100'
,
alternate
:
true
,
loop
:
true
});
<
div
class
=
"large centered row"
>
<
svg
width
=
"128"
height
=
"128"
viewBox
=
"0 0 128 128"
>
<
filter
id
=
"displacementFilter"
>
<
feTurbulence
type
=
"turbulence"
numOctaves
=
"2"
baseFrequency
=
"0"
result
=
"turbulence"
/>
<
feDisplacementMap
in2
=
"turbulence"
in
=
"SourceGraphic"
scale
=
"1"
xChannelSelector
=
"R"
yChannelSelector
=
"G"
/>
</
filter
>
<
polygon
points
=
"64 128 8.574 96 8.574 32 64 0 119.426 32 119.426 96"
fill
=
"currentColor"
/>
</
svg
>
</
div
>
Previous
Next
HTML Attributes
Tween value types

--- Timeline ---
Timeline

Methods
Since 2.0.0
resume()
V4
Resumes the playback of a paused timeline in its current direction.
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ creatTimeline, utils }
from
'animejs'
;
const
[ $pauseButton, $alternateButton, $resumeButton ] = utils.$(
'.button'
);
const
tl =
createTimeline
({
loop
:
true
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
500
)
.
add
(
'.square'
, {
x
:
'15rem'
},
1000
);
const
pauseTimeline
= (
) => tl.
pause
();
const
alternateTimeline
= (
) => tl.
alternate
();
const
resumeTimeline
= (
) => tl.
resume
();
$pauseButton.
addEventListener
(
'click'
, pauseTimeline);
$alternateButton.
addEventListener
(
'click'
, alternateTimeline);
$resumeButton.
addEventListener
(
'click'
, resumeTimeline);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button"
>
Pause
</
button
>
<
button
class
=
"button"
>
Alternate
</
button
>
<
button
class
=
"button"
>
Resume
</
button
>
</
fieldset
>
</
div
>
Previous
Next
alternate()
complete()

--- Timeline ---
Timeline

Playback settings
Since 4.0.0
loopDelay
V4
Defines the delay in milliseconds between each loops.
Accepts
A
Number
equal to or greater than
0
Default
0
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
loopDelay
=
500
;
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $loops ] = utils.$(
'.loops'
);
const
tl =
createTimeline
({
loopDelay
:
500
,
loop
:
true
,
onLoop
:
self
=>
$loops.
innerHTML
= self.
_currentIteration
,
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
'-=500'
)
.
add
(
'.square'
, {
x
:
'15rem'
},
'-=500'
);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
loops
</
span
>
<
span
class
=
"loops value"
>
0
</
span
>
</
pre
>
</
div
>
Previous
Next
loop
alternate

--- Animation ---
Animation

Tween parameters
Since 4.0.0
to
Animates
to
a specified value from the current target value.
Must be defined inside a local tween parameter
Object
.
Required
Only if no
from
property is defined
Accepts
Any valid
Tween value types
An
Array
of two
Tween value keyframes
(
[fromValue, toValue]
)
Default
The current target value is used if only a
from
property is defined
import
{ animate }
from
'animejs'
;
animate
(
'.square'
, {
x
: {
to
:
'16rem'
,
// From 0px to 16rem
ease
:
'outCubic'
,
},
rotate
: {
to
:
'.75turn'
,
// From 0turn to .75turn
ease
:
'inOutQuad'
},
});
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Tween parameters
from

--- Animation ---
Animation
Since 1.0.0
Animation methods
Provide control over the timing, behaviour and progression of an animation.
Animation methods are available on an Animation instance
Object
.
const
animation =
animate
(target, parameters);
┌──────────┐
animation.│
pause
() │
animation.│
play
() ├─
Methods
animation.│
restart
() │
└──────────┘
In this section
play()
reverse()
pause()
restart()
alternate()
resume()
complete()
cancel()
revert()
seek()
stretch()
refresh()
Previous
Next
Animation callbacks
play()

--- Engine ---
Engine

Parameters
Since 4.0.0
speed
Controls the global playback rate of all animations managed by the engine.
Values greater than
1
speed up animations, while values between
0
and
1
slow them down.
Adjusting the global playback rate is useful for creating slow-motion or fast-forward effects across all animations simultaneously.
engine.
speed
=
0.5
;
// Run all animations at half speed
Accepts
A
Number
greater than or equal to
0
Default
1
import
{ engine, animate, utils }
from
'animejs'
;
const
[ $container ] = utils.$(
'.container'
);
const
[ $range ] = utils.$(
'.range'
);
for
(
let
i =
0
; i <
150
; i++) {
const
$particle =
document
.
createElement
(
'div'
);
$particle.
classList
.
add
(
'particle'
);
$container.
appendChild
($particle);
animate
($particle, {
x
: utils.
random
(-
10
,
10
,
2
) +
'rem'
,
y
: utils.
random
(-
3
,
3
,
2
) +
'rem'
,
scale
: [{
from
:
0
,
to
:
1
}, {
to
:
0
}],
delay
: utils.
random
(
0
,
1000
),
loop
:
true
,
});
}
function
onInput
(
) {
utils.
sync
(
() =>
engine.
speed
=
this
.
value
);
}
$range.
addEventListener
(
'input'
, onInput);
<
div
class
=
"large row container"
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
input
type
=
"range"
min
=
0.1
max
=
2
value
=
1
step
=
.01
class
=
"range"
/>
</
fieldset
>
</
div
>
Previous
Next
timeUnit (seconds / milliseconds)
fps

--- Web Animation API ---
Web Animation API

Improvements to WAAPI
Since 4.0.0
Spring and custom easings
Uses any spring and custom JavaScript easing function.
All Anime.js built-in easing functions can be used by passing the function accessible on the
eases
object.
import
{ eases }
from
'animejs'
;
const
{ linear, outExpo, cubicBezier } = eases;
The
createSpring
()
easing function must be imported separately.
import
{ createSpring }
from
'animejs'
;
Built-in eases
Built-in string
Function
Parameters
'linear'
'linear(0, .5 75%, 1)'
linear
()
coords (
0
,
'.5 75%'
,
1
)
'steps'
'steps(10)'
steps
()
steps =
10
'cubicBezier'
'cubicBezier(.5,0,.5,1)'
cubicBezier
()
x1 =
.5
, y1 =
0
, x2 =
.5
, y2 =
1
'in'
'in(1.675)'
in
()
power =
1.675
'out'
'out(1.675)'
out
()
power =
1.675
'inOut'
'inOut(1.675)'
inOut
()
power =
1.675
Default
'out(2)'
import
{ waapi, utils, stagger, createSpring, eases }
from
'animejs'
;
waapi.
animate
(
'.circle'
, {
y
: [
0
, -
30
,
0
],
ease
:
createSpring
({
stiffness
:
150
,
damping
:
5
}),
delay
:
stagger
(
75
),
loop
:
true
,
});
<
div
class
=
"large row"
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
Previous
Next
Individual property parameters
API differences with native WAAPI

--- ScrollObserver ---
ScrollObserver

Settings
Since 4.0.0
container
Specifies the container
HTMLElement
to which the scroll event is applied.
Accepts
CSS Selector
DOM Element
Default
null
import
{ animate, onScroll }
from
'animejs'
;
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
duration
:
2000
,
alternate
:
true
,
loop
:
true
,
ease
:
'inOutQuad'
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large centered row"
>
<
div
class
=
"label"
>
scroll down
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
</
div
>
</
div
>
Previous
Next
ScrollObserver settings
target

--- Utilities ---
Utilities
Since 4.0.0
roundPad()
V4
Rounds a value to a specified decimal length, pads with zeros if needed, and returns the result as a string, or creates a rounding and padding
Function
with a pre-defined
decimalLength
parameter.
const
roundedPaddedValue = utils.
roundPad
(value, decimalLength);
const
roundPadderFunction = utils.
roundPad
(decimalLength);
Parameters
Name
Accepts
value
(opt)
Number
/
String
decimalLength
Number
Returns
A
String
if a value is provided, otherwise a
chain-able utility
Function
to round and pad numbers to the specified decimal length:
const
roundPadTo2Decimals = utils.
roundPad
(
2
);
roundPadTo2Decimals
(
90.12345
);
// '90.12'
roundPadTo2Decimals
(
120
);
// '120.00'
roundPadTo2Decimals
(
15.9
);
// '15.90'
const
snapAndRoundPad = utils.
snap
(
50
).
roundPad
(
2
);
// Snap to nearest 50 then roundPad to 2 decimal places
snapAndRoundPad
(
123.456
);
// '100.00'
snapAndRoundPad
(
175.789
);
// '200.00'
import
{ animate, utils }
from
'animejs'
;
animate
(
'.value'
, {
innerHTML
:
'8.1'
,
modifier
: utils.
roundPad
(
3
),
duration
:
10000
,
ease
:
'linear'
,
});
<
div
class
=
"large row"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"value lcd"
>
0.000
</
span
>
</
pre
>
</
div
>
Previous
Next
interpolate()
padStart()

--- Animation ---
Animation

Animatable properties
Since 1.0.0
CSS Properties
Any CSS numerical and color properties can be animated.
Properties containing a dash in their name, like
background-color
, must be converted to camel case (
backgroundColor
), or written as a
String
(
'background-color'
).
Most CSS properties can cause layout changes or repaint leading to choppy animations. To achieve smoother animations, always prioritise opacity and
CSS transforms
as much as possible.
import
{ animate }
from
'animejs'
;
animate
(
'.square'
, {
left
:
'calc(7.75rem * 2)'
,
borderRadius
:
64
,
'background-color'
:
'#F9F640'
,
filter
:
'blur(5px)'
,
});
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Animatable properties
CSS transforms

--- Scope ---
Scope
Since 4.0.0
Scope methods
const
scope =
createScope
(parameters);
┌──────────┐
scope.│
add
() │
scope.│
refresh
() ├─
Methods
scope.│
revert
() │
└──────────┘
In this section
add()
revert()
refresh()
Previous
Next
Scope parameters
add()

--- Draggable ---
Draggable

Settings
Since 4.0.0
trigger
Specifies a different element than the defined target to trigger the drag animation.
Accepts
CSS Selector
DOM Element
import
{ createDraggable }
from
'animejs'
;
createDraggable
(
'.row'
, {
trigger
:
'.circle'
,
});
<
div
class
=
"large centered row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle draggable"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Draggable settings
container

--- Stagger ---
Stagger

Parameters
Since 2.0.0
Stagger start
Defines the starting value of the stagger.
Accepts
Number
|
Timeline time position
(Only when used as a timeline position argument)
Default
0
import
{ animate, stagger }
from
'animejs'
;
animate
(
'.square'
, {
x
:
stagger
(
'1rem'
, {
start
:
14
}),
// adds 14 to the staggered value
delay
:
stagger
(
100
, {
start
:
500
}),
// adds 500 to the staggered value
});
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
x: 14rem, delay: 500ms
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
x: 15rem, delay: 600ms
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
x: 16rem, delay: 700ms
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
x: 17rem, delay: 700ms
</
div
>
</
div
>
Previous
Next
Stagger parameters
Stagger from

--- Utilities ---
Utilities
Since 2.0.0
set()
Immediately sets one or multiple properties values to one or multiple targets.
const
setter = utils.
set
(targets, properties);
Parameters
Name
Accepts
Description
targets
Targets
The targeted element(s)
properties
Object
An object of valid properties and values of the target
Returns
Animation
utils.
set
()
is useful for setting complex values, but for repeatedly updating the same properties on the same targets, using an
Animatable
is recommended for better performances.
utils.
set
()
won't work if you try to set an attribute on a DOM or SVG element not already defined on the element.
import
{ utils, stagger }
from
'animejs'
;
const
[ $set, $revert ] = utils.$(
'button'
);
const
squares = utils.$(
'.square'
);
const
colors = [
'red'
,
'orange'
,
'yellow'
];
let
setter;
const
setStyles
= (
) => {
setter = utils.
set
(squares, {
borderRadius
:
'50%'
,
y
:
() =>
utils.
random
(-
1
,
1
) +
'rem'
,
scale
:
stagger
(
.1
, {
start
:
.25
,
ease
:
'out'
}),
color
:
() =>
`var(--hex-
${utils.randomPick(colors)}
)`
});
$set.
setAttribute
(
'disabled'
,
'true'
);
$revert.
removeAttribute
(
'disabled'
);
}
const
revertStyles
= (
) => {
setter.
revert
();
$set.
removeAttribute
(
'disabled'
);
$revert.
setAttribute
(
'disabled'
,
'true'
);
}
$set.
addEventListener
(
'click'
, setStyles);
$revert.
addEventListener
(
'click'
, revertStyles);
<
div
class
=
"large justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
>
Set styles
</
button
>
<
button
disabled
>
Revert styles
</
button
>
</
fieldset
>
</
div
>
Previous
Next
get()
remove()

--- Timeline ---
Timeline

Methods
Since 2.0.0
alternate()
V4
Toggles the playback direction while adjusting the
currentTime
position to reflect the new time progress.
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ creatTimeline, utils }
from
'animejs'
;
const
[ $alternateButton ] = utils.$(
'.button'
);
const
tl =
createTimeline
({
loop
:
true
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
500
)
.
add
(
'.square'
, {
x
:
'15rem'
},
1000
);
const
pauseTimeline
= (
) => tl.
pause
();
const
playTimeline
= (
) => tl.
play
();
const
alternateTimeline
= (
) => tl.
alternate
();
$alternateButton.
addEventListener
(
'click'
, alternateTimeline);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button"
>
Alternate
</
button
>
</
fieldset
>
</
div
>
Previous
Next
restart()
resume()

--- Draggable ---
Draggable

Methods
Since 4.0.0
enable()
Reactivates a previously disabled draggable, making it interactive again.
Returns
The draggable itself
import
{ createDraggable, utils }
from
'animejs'
;
const
[ $enableButton ] = utils.$(
'.enable'
);
const
draggable =
createDraggable
(
'.square'
);
draggable.
disable
();
const
enableDraggable
= (
) => draggable.
enable
();
$enableButton.
addEventListener
(
'click'
, enableDraggable);
<
div
class
=
"large centered row"
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
<
div
class
=
"large row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button enable"
>
Enable
</
button
>
</
fieldset
>
</
div
>
Previous
Next
disable()
setX()

--- Utilities ---
Utilities
Since 4.0.0
randomPick()
V4
Returns a random element from a collection.
const
ramdomElement = utils.
randomPick
(collection);
Parameters
Name
Accepts
collection
Array
|
NodeList
|
String
Returns
An random element from the collection
import
{ utils }
from
'animejs'
;
utils.
set
(
'.letter'
, {
x
:
() =>
utils.
randomPick
([
5
,
9
,
13
,
17
]) +
'rem'
,
scale
:
() =>
utils.
randomPick
([
1
,
1.25
,
1.5
,
1.75
]),
color
:
() =>
`var(--hex-
${utils.randomPick([
'red'
,
'orange'
,
'yellow'
])}
)`
,
innerHTML
:
() =>
utils.
randomPick
(
'ABCD'
),
});
<
div
class
=
"small row"
>
<
div
class
=
"letter"
>
A
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"letter"
>
B
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"letter"
>
C
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"letter"
>
D
</
div
>
</
div
>
Previous
Next
random()
shuffle()

--- Web Animation API ---
Web Animation API

Improvements to WAAPI
Since 4.0.0
Individual property parameters
Each property can have specific
delay
,
duration
and
ease
parameters by passing an
Object
with at least one
to
or
from
properties as value.
import
{ waapi, utils, stagger }
from
'animejs'
;
waapi.
animate
(
'.square'
, {
y
: {
to
: [
0
, -
30
,
0
],
ease
:
'out(4)'
,
duration
:
1000
,
},
rotate
: {
from
: -
180
,
to
:
0
,
ease
:
'out(3)'
},
scale
: {
to
: [
.65
,
1
,
.65
],
ease
:
'inOut(3)'
},
duration
:
500
,
delay
:
stagger
(
75
),
loop
:
true
,
});
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Individual CSS transforms
Spring and custom easings

--- Timeline ---
Timeline

Methods
Since 2.0.0
seek()
Updates the
currentTime
of the timeline to a specific time.
timeline.
seek
(time, muteCallbacks);
Parameters
Name
Type
Description
time
Number
The new
currentTime
in ms of the timeline
muteCallbacks=false
(opt)
Boolean
If
true
, prevent the callbacks from being fired
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $range ] = utils.$(
'.range'
);
const
[ $playPauseButton ] = utils.$(
'.play-pause'
);
const
updateButtonLabel
= tl => {
$playPauseButton.
textContent
= tl.
paused
?
'Play'
:
'Pause'
;
}
const
tl =
createTimeline
({
autoplay
:
false
,
onUpdate
:
self
=>
{
$range.
value
= self.
currentTime
;
updateButtonLabel
(self);
},
onComplete
: updateButtonLabel,
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
500
)
.
add
(
'.square'
, {
x
:
'15rem'
},
1000
);
const
seekTimeline
= (
) => tl.
seek
(+$range.
value
);
const
playPauseTimeline
= (
) => {
if
(tl.
paused
) {
tl.
play
();
}
else
{
tl.
pause
();
updateButtonLabel
(tl);
}
}
$range.
addEventListener
(
'input'
, seekTimeline);
$playPauseButton.
addEventListener
(
'click'
, playPauseTimeline);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"medium centered row"
>
<
fieldset
class
=
"controls"
>
<
input
type
=
"range"
min
=
0
max
=
2000
value
=
0
class
=
"range"
/>
<
button
style
=
"flex: 0.25;"
class
=
"button play-pause"
>
Play
</
button
>
</
fieldset
>
</
div
>
Previous
Next
revert()
stretch()

--- Timer ---
Timer

Playback settings
Since 4.0.0
loop
Defines how many times a timer repeats.
Accepts
Value
Effect
Number
The number of loops in the range
[
0
,
Infinity
]
Infinity
Loop indefinitely
true
Equivalent to
Infinity
-
1
Equivalent to
Infinity
Default
0
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
loop
=
true
;
import
{ createTimer, utils }
from
'animejs'
;
const
[ $loops ] = utils.$(
'.loops'
);
const
[ $time ] = utils.$(
'.time'
);
let
loops =
0
;
createTimer
({
loop
:
true
,
duration
:
1000
,
onLoop
:
() =>
$loops.
innerHTML
= ++loops,
onUpdate
:
self
=>
$time.
innerHTML
= self.
iterationCurrentTime
});
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
loops count
</
span
>
<
span
class
=
"loops value"
>
0
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
iteration time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
Previous
Next
duration
loopDelay

--- Animation ---
Animation

Tween parameters
Since 4.0.0
composition
V4
JS
Defines how animations behave when another animation on the same target with the same property is playing simultaneously. The composition mode can be defined globally for all animation properties or locally for a specific property.
Accepts
Mode
Description
'replace'
Replace and cancel the running animation.
'none'
JS
Do not replace the running animation. This means the previous animation will continue running if its duration is longer than the new animation. This mode can also offer better performance.
'blend'
JS
Creates an additive animation and blends its values with the running animation.
0
JS
Shorthand for
'replace'
.
1
JS
Shorthand for
'none'
.
2
JS
Shorthand for
'blend'
.
Default
'replace'
if the animation targets count is below
1000
; otherwise, the default composition is set to
'none'
on the
JS
version if no composition mode is defined.
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
composition
=
'blend'
;
Additive animations
The
'blend'
mode lets you create
additive animations
. This type of animation allows you to smoothly blend two animations of the same property on the same target together. This mode works best on properties that visually
move
on the screen, like
'translate'
,
'scale'
, and
'rotation'
.
It is not currently possible to use the additive mode when using keyframes or with color values.
import
{ animate, utils }
from
'animejs'
;
const
squares = utils.$(
'.square'
);
const
[ $none, $replace, $blend ] = squares;
// Animate each square with a different composition mode
squares.
forEach
($square => {
// 'none', 'replace', 'blend'
const
mode = $square.
classList
[
1
];
animate
($square, {
scale
: [
.5
,
1
],
alternate
:
true
,
loop
:
true
,
duration
:
750
,
composition
: mode,
});
});
// Common animation parameters
const
enter = {
scale
:
1.5
,
duration
:
350
};
const
leave = {
scale
:
1.0
,
duration
:
250
};
// Composition none animations
const
enterNone
= (
) =>
animate
($none, {
composition
:
'none'
, ...enter
});
const
leaveNone
= (
) =>
animate
($none, {
composition
:
'none'
, ...leave
});
$none.
addEventListener
(
'mouseenter'
, enterNone);
$none.
addEventListener
(
'mouseleave'
, leaveNone);
// Composition replace animations
const
enterReplace
= (
) =>
animate
($replace, {
composition
:
'replace'
, ...enter
});
const
leaveReplace
= (
) =>
animate
($replace, {
composition
:
'replace'
, ...leave
});
$replace.
addEventListener
(
'mouseenter'
, enterReplace);
$replace.
addEventListener
(
'mouseleave'
, leaveReplace);
// Composition blend animations
const
enterBlend
= (
) =>
animate
($blend, {
composition
:
'blend'
, ...enter
});
const
leaveBlend
= (
) =>
animate
($blend, {
composition
:
'blend'
, ...leave
});
$blend.
addEventListener
(
'mouseenter'
, enterBlend);
$blend.
addEventListener
(
'mouseleave'
, leaveBlend);
<
div
class
=
"large spaced-evenly row"
>
<
div
class
=
"col"
>
<
div
class
=
"centered row"
>
<
span
class
=
"label centered"
>
none
<
br
>
<
br
>
</
span
>
<
div
class
=
"square none"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"col"
>
<
div
class
=
"centered row"
>
<
span
class
=
"label centered"
>
replace
<
br
>
<
br
>
</
span
>
<
div
class
=
"square replace"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"col"
>
<
div
class
=
"centered row"
>
<
span
class
=
"label centered"
>
blend
<
br
>
<
br
>
</
span
>
<
div
class
=
"square blend"
>
</
div
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"medium spaced-evenly centered row"
>
<
div
class
=
"label"
>
<
br
>
<
br
>
(Hover the squares)
</
div
>
</
div
>
Previous
Next
ease
modifier

--- Animation ---
Animation

Tween value types
Since 1.0.0
Numerical value
Specifies the numerical value of the animated property by passing either a
Number
or a
String
containing at least one
Number
.
If no unit is specified for properties that expect a unit, like
width
for example, the resulting animation will use the default browser unit.
animate
(target, {
width
:
100
});
// Defaults to px
Accepts
Number
String
If a specific unit is already specified, the
JS
animate
()
method can inherits previously defined units and the next value set without a unit on the same target property inherits the previously defined unit.
animate
(target, {
width
:
'50%'
});
// Uses '%'
animate
(target, {
width
:
75
});
// Inherits '%' -> '75%'
The
WAAPI
animate
()
method only falls back automatically to
'px'
with the following properties:
- x / translateX
- y / translateY
- z / translateZ
- perspective
- top
- right
- bottom
- left
- width
- height
- margin
- padding
- borderWidth
- borderRadius
- fontSize
import
{ waapi }
from
'animejs'
;
waapi.
animate
(
'.square'
, {
x
:
240
,
// -> 240px
width
:
75
,
// -> 75px
rotate
:
'.75turn'
,
});
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Tween value types
Unit conversion value

--- Timer ---
Timer

Methods
Since 4.0.0
stretch()
Changes the total duration of a timer to fit a specific time.
The total duration is equal to the duration of an iteration multiplied with the total number of iterations. So if a timer has a duration of 1000ms and loops twice (3 iterations in total), the total duration is 3000ms (1000 * 3).
timer.
stretch
(duration);
Parameters
Name
Type
Description
duration
Number
The new total duration in ms of the timer
Returns
The timer itself
Can be chained with other timer methods.
import
{ animate, utils }
from
'animejs'
;
const
[ $range ] = utils.$(
'.range'
);
const
[ $duration ] = utils.$(
'.duration'
);
const
[ $time ] = utils.$(
'.time'
);
const
timer =
createTimer
({
duration
:
2000
,
onUpdate
:
self
=>
$time.
innerHTML
= self.
currentTime
});
const
stretchTimer
= (
) => {
timer.
stretch
(+$range.
value
);
$duration.
innerHTML
= timer.
duration
;
timer.
restart
();
}
$range.
addEventListener
(
'input'
, stretchTimer);
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
duration
</
span
>
<
span
class
=
"duration value"
>
2000
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
input
type
=
"range"
min
=
0
max
=
4000
value
=
2000
step
=
100
class
=
"range"
/>
</
fieldset
>
</
div
>
Previous
Next
seek()
Timer properties

--- Engine ---
Engine

Parameters
Since 4.0.0
fps
Controls the global frame rate at which animations are updated and rendered.
Adjusting the frame rate can help optimize performance on lower-end devices or when running many complex animations simultaneously. However, it may affect the perceived smoothness of animations.
engine.
fps
=
30
;
// Set all animations to update at 30 fps
Accepts
A
Number
greater than
0
Default
120
import
{ engine, animate, utils }
from
'animejs'
;
const
[ $container ] = utils.$(
'.container'
);
const
[ $range ] = utils.$(
'.range'
);
for
(
let
i =
0
; i <
150
; i++) {
const
$particle =
document
.
createElement
(
'div'
);
$particle.
classList
.
add
(
'particle'
);
$container.
appendChild
($particle);
animate
($particle, {
x
: utils.
random
(-
10
,
10
,
2
) +
'rem'
,
y
: utils.
random
(-
3
,
3
,
2
) +
'rem'
,
scale
: [{
from
:
0
,
to
:
1
}, {
to
:
0
}],
delay
: utils.
random
(
0
,
1000
),
loop
:
true
,
});
}
function
onInput
(
) {
engine.
fps
=
this
.
value
;
}
$range.
addEventListener
(
'input'
, onInput);
<
div
class
=
"large row container"
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
input
type
=
"range"
min
=
0
max
=
240
value
=
60
step
=
1
class
=
"range"
/>
</
fieldset
>
</
div
>
Previous
Next
speed
precision

--- Stagger ---
Stagger

Parameters
Since 2.0.0
Stagger grid axis
Defines the direction of a staggered grid effect by restricting which axis of the grid can update.
Accepts
Value
Effect
'x'
Restrict the direction to the x axis
'y'
Restrict the direction to the y axis
import
{ animate, stagger }
from
'animejs'
;
const
grid = [
11
,
4
];
const
$squares = utils.$(
'.square'
);
function
animateGrid
(
) {
const
from
= utils.
random
(
0
,
11
*
4
);
animate
($squares, {
translateX
: [
{
to
:
stagger
(
'-.75rem'
, { grid,
from
,
axis
:
'x'
}) },
{
to
:
0
,
ease
:
'inOutQuad'
, },
],
translateY
: [
{
to
:
stagger
(
'-.75rem'
, { grid,
from
,
axis
:
'y'
}) },
{
to
:
0
,
ease
:
'inOutQuad'
},
],
opacity
: [
{
to
:
.5
},
{
to
:
1
}
],
delay
:
stagger
(
85
, { grid,
from
}),
onComplete
: animateGrid
});
}
animateGrid
();
<
div
class
=
"small justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Stagger grid
Stagger modifier

--- Timeline ---
Timeline

Methods
Since 4.0.0
init()
V4
Initialises the initial values of all the elements of a timeline.
Animations with specific initial values added to a timeline are not automatically set to their
from
state like a normal call to
animate
()
would, instead, they are initialised when the timeline playhead reaches the element in the timeline.
This is where
.
init
()
comes in handy, it forces a render of all the children initial state and updates their values.
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline }
from
'animejs'
;
const
tl =
createTimeline
()
.
add
(
'.square'
, {
x
: {
from
:
'15rem'
} })
.
add
(
'.triangle'
, {
x
: {
from
:
'15rem'
} },
500
)
.
add
(
'.circle'
, {
x
: {
from
:
'15rem'
} },
1000
)
.
init
();
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
Previous
Next
call()
play()

--- Timeline ---
Timeline

Methods
Since 4.0.0
revert()
V4
Cancels the timeline, reverts all its children's animated values to their original state, cleans up the CSS inline styles, and reverts the linked
onScroll
()
instance if necessary.
Use
.
revert
()
when you want to completely stop and destroy a timeline.
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $revertButton ] = utils.$(
'.revert'
);
const
[ $restartButton ] = utils.$(
'.restart'
);
// Set an initial x value
utils.
set
([
'.circle'
,
'.triangle'
,
'.square'
], {
x
:
'15rem'
});
const
tl =
createTimeline
({
loop
:
true
,
alternate
:
true
,
})
.
add
(
'.circle'
, {
x
:
0
})
.
add
(
'.triangle'
, {
x
:
0
},
500
)
.
add
(
'.square'
, {
x
:
0
},
1000
);
const
revertTimeline
= (
) => tl.
revert
();
const
restartTimeline
= (
) => tl.
restart
();
$revertButton.
addEventListener
(
'click'
, revertTimeline);
$restartButton.
addEventListener
(
'click'
, restartTimeline);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button revert"
>
Revert
</
button
>
<
button
class
=
"button restart"
>
Restart
</
button
>
</
fieldset
>
</
div
>
Previous
Next
cancel()
seek()

--- Animation ---
Animation

Tween parameters
Since 4.0.0
from
V4
Animates
from
a specified value to the current target value.
Must be defined inside a local tween parameter
Object
.
Required
Only if no
to
property is defined
Accepts
Any valid
Tween value types
Default
The current target value is used if only a
to
property is defined
import
{ animate }
from
'animejs'
;
animate
(
'.square'
, {
opacity
: {
from
:
.5
},
// Animate from .5 opacity to 1 opacity
translateX
: {
from
:
'16rem'
},
// From 16rem to 0rem
rotate
: {
from
:
'-.75turn'
,
// From -.75turn to 0turn
ease
:
'inOutQuad'
,
},
});
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
to
delay

--- Timer ---
Timer

Playback settings
Since 4.0.0
alternate
Defines if the direction of the timer alternates on each iteration when the
loop
is set to
true
or superior to
1
.
Accepts
Boolean
Default
false
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
alternate
=
true
;
import
{ animate }
from
'animejs'
;
const
[ $loops ] = utils.$(
'.loops'
);
const
[ $time ] = utils.$(
'.time'
);
let
loops =
0
;
createTimer
({
loop
:
true
,
duration
:
1000
,
alternate
:
true
,
onLoop
:
() =>
$loops.
innerHTML
= ++loops,
onUpdate
:
self
=>
$time.
innerHTML
= self.
iterationCurrentTime
});
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
loops count
</
span
>
<
span
class
=
"loops value"
>
0
</
span
>
</
pre
>
</
div
>
<
div
class
=
"col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
iteration time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
Previous
Next
loopDelay
reversed

--- ScrollObserver ---
ScrollObserver
V4
Triggers and synchronises Timer, Animation and Timeline instances on scroll
ScrollObservers are created with the
onScroll
()
function and can be directly declared in the
autoplay parameter
.
import
{ onScroll, animate }
from
'animejs'
;
animate
(targets, {
x
:
100
,
autoplay
:
onScroll
(parameters) });
Parameters
Name
Accepts
parameters
An
Object
of
ScrollObserver settings
,
ScrollObserver thresholds
,
ScrollObserver sync modes
and
ScrollObserver callbacks
Returns
ScrollObserver
import
{ animate, utils, onScroll }
from
'animejs'
;
const
[ container ] = utils.$(
'.scroll-container'
);
const
debug =
true
;
// Animation
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
duration
:
2000
,
alternate
:
true
,
loop
:
true
,
autoplay
:
onScroll
({ container, debug })
});
// Timer
const
[ $timer ] = utils.$(
'.timer'
);
createTimer
({
duration
:
2000
,
alternate
:
true
,
loop
:
true
,
onUpdate
:
self
=>
{
$timer.
innerHTML
= self.
iterationCurrentTime
},
autoplay
:
onScroll
({
target
: $timer.
parentNode
,
container,
debug
})
});
// Timeline
const
circles = utils.$(
'.circle'
);
createTimeline
({
alternate
:
true
,
loop
:
true
,
autoplay
:
onScroll
({
target
: circles[
0
],
container,
debug
})
})
.
add
(circles[
2
], {
x
:
'9rem'
})
.
add
(circles[
1
], {
x
:
'9rem'
})
.
add
(circles[
0
], {
x
:
'9rem'
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large centered row"
>
<
div
class
=
"label"
>
scroll down
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large centered row"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
timer
</
span
>
<
span
class
=
"timer value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
</
div
>
</
div
>
In this section
Settings
Thresholds
Synchronisation modes
Callbacks
Methods
Properties
Previous
Next
Draggable
ScrollObserver settings

--- Timeline ---
Timeline
Since 2.0.0
Timeline callbacks
Execute functions at specific points during a timeline playback.
Timeline callbacks functions are defined directly in the
createTimeline
()
parameters
Object
.
createTimeline
({
defaults
: {
ease
:
'out(3)'
,
duration
:
500
,
},
loop
:
3
,
alternate
:
true
,
autoplay
:
false
,
┌─────────────────────┐
│
onBegin
:
() =>
{}, │
│
onLoop
:
() =>
{}, ├─
Callbacks
│
onUpdate
:
() =>
{}, │
└─────────────────────┘
});
In this section
onBegin
onComplete
onBeforeUpdate
onUpdate
onRender
onLoop
onPause
then()
Previous
Next
Timeline playback settings
onBegin

--- Animation ---
Animation

Tween value types
Since 1.0.0
Function based value
Sets different values for each target of a multi-target animation by using a
Function
as the value.
Function-based values can be re-calculated without creating a new animation using the
animation.
refresh
()
method.
Accepts
A
Function
with the following parameters:
animate
(targets, {
x
:
(
target, index, length
) =>
target.
dataset
.
value
* (length - index),
});
Parameters
Name
Description
target
The current animated target element
index
The index of current targeted element
length
The total number of animated targets of the animation
Must return
Tween value
Tween parameters
import
{ animate }
from
'animejs'
;
animate
(
'.square'
, {
x
: $el =>
/**
@type
{
HTMLElement
} */
($el).
getAttribute
(
'data-x'
),
y
:
(
_, i
) =>
50
+ (-
50
* i),
scale
:
(
_, i, l
) =>
(l - i) *
.75
,
rotate
:
() =>
utils.
random
(-
360
,
360
),
borderRadius
:
() =>
`+=
${utils.random(
0
,
8
)}
`
,
duration
:
() =>
utils.
random
(
1200
,
1800
),
delay
:
() =>
utils.
random
(
0
,
400
),
ease
:
'outElastic(1, .5)'
,
});
<
div
class
=
"medium row"
>
<
div
class
=
"square"
data-x
=
"170"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
data-x
=
"80"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
data-x
=
"270"
>
</
div
>
</
div
>
Previous
Next
CSS variable
Tween parameters

--- ScrollObserver ---
ScrollObserver
Since 4.0.0
ScrollObserver callbacks
Triggers functions at specific points during scroll.
ScrollObservers callbacks functions are defined directly in the
onScroll
()
parameters
Object
.
animate
(
'.square'
, {
x
:
100
,
autoplay
:
onScroll
({
container
:
'.container'
,
target
:
'.section'
,
axis
:
'y'
,
enter
:
'bottom top'
,
leave
:
'top bottom'
,
sync
:
true
,
┌──────────────────────────┐
│
onEnter
:
() =>
{}, │
│
onLeave
:
() =>
{}, ├─
Callbacks
│
onUpdate
:
() =>
{}, │
└──────────────────────────┘
})
});
In this section
onEnter
onEnterForward
onEnterBackward
onLeave
onLeaveForward
onLeaveBackward
onUpdate
onSyncComplete
Previous
Next
ScrollObserver synchronisation modes
onEnter

--- ScrollObserver ---
ScrollObserver

Settings
Since 4.0.0
debug
Displays markers to better visualise the
enter
and
leave
thresholds
values.
Each ScrollObserver instances has a dedicated color.
The left side of the ruler represents the container
threshold
, and the right side the target
threshold
values.
Accepts
Boolean
Default
false
import
{ animate, onScroll }
from
'animejs'
;
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
duration
:
2000
,
alternate
:
true
,
loop
:
true
,
ease
:
'inOutQuad'
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
debug
:
true
,
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large centered row"
>
<
div
class
=
"label"
>
scroll down
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large centered row"
>
<
div
class
=
"label"
>
scroll up
</
div
>
</
div
>
</
div
>
</
div
>
</
div
>
Previous
Next
target
axis

--- Timer ---
Timer
Timer properties
const
timer =
createTimer
(parameters);
┌────────────┐
timer.│progress │
timer.│currentTime ├─
Properties
timer.│duration │
└────────────┘
Name
Description
id
Gets and sets the ID of the timer (
String
|
Number
)
deltaTime
Gets the time in ms elapsed between the current and previous frame (
Number
)
currentTime
Gets and sets the global current time in ms of the timer (
Number
)
iterationCurrentTime
Gets and sets the current iteration time in ms (
Number
)
progress
Gets and sets the overall progress of the timer from
0
to
1
(
Number
)
iterationProgress
Gets and sets the progress of the current iteration from
0
to
1
(
Number
)
currentIteration
Gets and sets the current iteration count (
Number
).
speed
Gets and sets the playbackRate multiplier of the timer (
Number
)
fps
Gets and sets the frameRate of the timer (
Number
)
paused
Gets and sets whether the timer is paused (
Boolean
)
began
Gets and sets whether the timer has started (
Boolean
)
completed
Gets and sets whether the timer has completed (
Boolean
)
reversed
Gets and sets whether the timer is reversed (
Boolean
)
Previous
Next
Timer methods
Animation

--- Animation ---
Animation

Keyframes
Since 4.0.0
Tween values keyframes
V4
Sequences multiple
Tween value
specific to an
Animatable property
using an
Array
.
The duration between each keyframe equals the total animation duration divided by the number of transitions between each keyframes.
The first keyframe defines the
from value
of the tween.
You can use this syntax to quickly set the initial
from value
value of an animation:
animate
(
target
: {
x
: [-
100
,
100
] });
// Animate x from -100 to 100
Accepts
An
Array
of valid
Tween values
import
{ animate }
from
'animejs'
;
animate
(
'.square'
, {
translateX
: [
'0rem'
,
0
,
17
,
17
,
0
,
0
],
translateY
: [
'0rem'
, -
2.5
, -
2.5
,
2.5
,
2.5
,
0
],
scale
: [
1
,
1
,
.5
,
.5
,
1
,
1
],
rotate
: {
to
:
360
,
ease
:
'linear'
},
duration
:
3000
,
ease
:
'inOut'
,
// ease applied between each keyframes if no ease defined
playbackEase
:
'ouIn(5)'
,
// ease applied accross all keyframes
loop
:
true
,
});
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Keyframes
Tween parameters keyframes

--- ScrollObserver ---
ScrollObserver

Callbacks
Since 4.0.0
onSyncComplete
Triggers a function when the linked object synchronisation completes.
Accepts
A
Function
whose first argument returns the ScrollObserver instance
Default
noop
import
{ animate, onScroll, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
completions =
0
;
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
ease
:
'linear'
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
enter
:
'bottom top'
,
leave
:
'center bottom'
,
sync
:
.5
,
debug
:
true
,
onSyncComplete
:
() =>
$value.
textContent
= ++completions,
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded sticky"
>
<
div
class
=
"large row"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
completions
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section"
>
</
div
>
</
div
>
</
div
>
Previous
Next
onUpdate
ScrollObserver methods

--- Animation ---
Animation

Animatable properties
Since 1.0.0
JavaScript Object properties
JS
Numerical and color JavaScript
Object
properties can be passed directly to the animation parameters.
import
{ animate, utils }
from
'animejs'
;
const
myObject = {
number
:
1337
,
unit
:
'42%'
,
}
const
[ $log ] = utils.$(
'code'
);
animate
(myObject, {
number
:
50
,
unit
:
'100%'
,
modifier
: utils.
round
(
0
),
onRender
:
function
(
) {
$log.
innerHTML
=
JSON
.
stringify
(myObject);
}
});
<
pre
class
=
"row large centered"
>
<
code
>
{"number":1337,"unit":"42%"}
</
code
>
</
pre
>
Previous
Next
CSS Variables
HTML Attributes

--- Timeline ---
Timeline
Since 4.0.0
Sync timelines
V4
Timelines can be synchronised to an other timeline using the
sync
()
method.
timelineA.
sync
(timelineB, position);
Parameters
Name
Accepts
synced
Animation
|
Timer
|
Timeline
position
(opt)
Time position
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline, animate }
from
'animejs'
;
const
circleAnimation =
animate
(
'.circle'
, {
x
:
'15rem'
});
const
tlA =
createTimeline
()
.
sync
(circleAnimation)
.
add
(
'.triangle'
, {
x
:
'15rem'
,
duration
:
2000
,
})
.
add
(
'.square'
, {
x
:
'15rem'
,
});
const
tlB =
createTimeline
({
defaults
: {
duration
:
2000
} })
.
add
([
'.triangle'
,
'.square'
], {
rotate
:
360
,
},
0
)
.
add
(
'.circle'
, {
scale
: [
1
,
1.5
,
1
],
},
0
);
const
tlMain =
createTimeline
()
.
sync
(tlA)
.
sync
(tlB,
'-=2000'
);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
Previous
Next
Sync WAAPI animations
Call functions

--- Animation ---
Animation

Methods
Since 4.0.0
refresh()
V4
JS
Re-computes animated properties values defined with a
Function based value
by updating the
from
values to the current target values, and the
to
values to the newly computed values.
Only the animatable properties values are re-calculated,
duration
and
delay
cannot be refreshed.
Returns
The animation itself
Can be chained with other animation methods.
import
{ animate }
from
'animejs'
;
const
[ $refreshButton ] = utils.$(
'.refresh'
);
const
animation =
animate
(
'.square'
, {
x
:
() =>
utils.
random
(
0
,
17
) +
'rem'
,
y
:
() =>
utils.
random
(-
1
,
1
) +
'rem'
,
rotate
:
() =>
utils.
random
(-
360
,
360
,
1
),
scale
:
() =>
utils.
random
(
.1
,
1.5
,
2
),
duration
:
750
,
loop
:
true
,
onLoop
:
self
=>
self.
refresh
()
});
const
refreshAnimation
= (
) => animation.
refresh
().
restart
();
$refreshButton.
addEventListener
(
'click'
, refreshAnimation);
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button refresh"
>
Refresh & Restart
</
button
>
</
fieldset
>
</
div
>
Previous
Next
stretch()
Animation properties

--- Draggable ---
Draggable

Axes parameters
Since 4.0.0
modifier
Defines a
Modifier function
that alter of modify the value of either both axes or one specific axis.
Accepts
Modifier function
Default
noop
import
{ createDraggable, utils }
from
'animejs'
;
createDraggable
(
'.square'
, {
modifier
: utils.
wrap
(-
32
,
32
),
// Global to both x and y
x
: {
modifier
: utils.
wrap
(-
128
,
128
) },
// Specific to x
});
<
div
class
=
"large grid centered square-grid"
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
Previous
Next
snap
mapTo

--- Stagger ---
Stagger

Parameters
Since 2.0.0
Stagger grid
Distributes values on a 2d
Array
.
Accepts
[<
Number
>, <
Number
>]
Default
null
import
{ animate, stagger }
from
'animejs'
;
const
$squares = utils.$(
'.square'
);
function
animateGrid
(
) {
animate
($squares, {
scale
: [
{
to
: [
0
,
1.25
] },
{
to
:
0
}
],
boxShadow
: [
{
to
:
'0 0 1rem 0 currentColor'
},
{
to
:
'0 0 0rem 0 currentColor'
}
],
delay
:
stagger
(
100
, {
grid
: [
11
,
4
],
from
: utils.
random
(
0
,
11
*
4
)
}),
onComplete
: animateGrid
});
}
animateGrid
();
<
div
class
=
"small justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Stagger ease
Stagger grid axis

--- Draggable ---
Draggable

Settings
Since 4.0.0
cursor
Specifies custom CSS cursor style properties for the hovered and grabbed states on devices that match the media query
'(pointer:fine)'
.
Accepts
Boolean
(
false
disable custom styling)
{
onHover
:
'grab'
,
onGrab
:
'grabbing'
}
A
Function
that returns an of the above
When defined using a
Function
, the value will be automatically refreshed every time the container or target element is resized.
It can also be refreshed manually using the
refresh
()
method.
Default
{
onHover
:
'grab'
,
onGrab
:
'grabbing'
}
import
{ createDraggable }
from
'animejs'
;
createDraggable
(
'.square'
, {
cursor
:
false
});
createDraggable
(
'.circle'
, {
cursor
: {
onHover
:
'move'
,
onGrab
:
'wait'
}
});
<
div
class
=
"large centered row"
>
<
div
class
=
"square draggable"
>
</
div
>
<
div
class
=
"circle draggable"
>
</
div
>
</
div
>
Previous
Next
scrollSpeed
Draggable callbacks

--- Draggable ---
Draggable

Methods
Since 4.0.0
disable()
Deactivates the draggable, rendering it inert.
Returns
The draggable itself
import
{ createDraggable, utils }
from
'animejs'
;
const
[ $disableButton ] = utils.$(
'.disable'
);
const
draggable =
createDraggable
(
'.square'
);
const
disableDraggable
= (
) => draggable.
disable
();
$disableButton.
addEventListener
(
'click'
, disableDraggable);
<
div
class
=
"large centered row"
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
<
div
class
=
"large row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button disable"
>
Disable
</
button
>
</
fieldset
>
</
div
>
Previous
Next
Draggable methods
enable()

--- Timeline ---
Timeline

Methods
Since 2.0.0
add()
V4
Creates and adds animations and timers to a timeline.
The type of element added to the timeline depends of the parameters passed to
add
()
.
Add animation
timeline.
add
(targets, parameters, position);
Parameter
Accepts
targets
Targets
parameters
Animatable properties
&
Tween parameters
&
Animation playback settings
&
Animation callbacks
position
(opt)
Time position
Add timer
timeline.
add
(timerParameters, position);
Parameter
Type
timerParameters
Timer playback settings
&
Timer callbacks
position
(opt)
Time position
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
const
tl =
createTimeline
()
// Add labels
.
label
(
'start timer 1'
,
0
)
.
label
(
'animate circle'
,
1000
)
.
label
(
'start timer 2'
,
2000
)
// Add Timer
.
add
({
duration
:
1000
,
onUpdate
:
self
=>
$value.
innerHTML
= self.
currentTime
,
},
'start timer 1'
)
// Add Animation
.
add
(
'.circle'
, {
duration
:
2000
,
x
:
'16rem'
,
},
'animate circle'
)
// Add Timer
.
add
({
duration
:
1000
,
onUpdate
:
self
=>
$value.
innerHTML
= self.
currentTime
,
},
'start timer 2'
);
<
div
class
=
"large row"
>
<
div
class
=
"circle"
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
value
</
span
>
<
span
class
=
"value lcd"
>
0
</
span
>
</
pre
>
</
div
>
Previous
Next
Timeline methods
set()

--- ScrollObserver ---
ScrollObserver

Thresholds
Since 4.0.0
Positions shorthands
Defines the position of the target and container by passing the position name.
Accepts
Value
Returns
'top'
The top y value
'bottom'
The bottom y value
'left'
The left x value
'right'
The right x value
'center'
The center x or y value
'start'
Equivalent to
'top'
and
'left'
depending of the axis
'end'
Equivalent to
'bottom'
and
'right'
depending of the axis
import
{ animate, onScroll }
from
'animejs'
;
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
duration
:
2000
,
alternate
:
true
,
loop
:
true
,
ease
:
'inOutQuad'
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
enter
:
'center top'
,
leave
:
'center bottom'
,
debug
:
true
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large centered row"
>
<
div
class
=
"label"
>
scroll down
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section"
>
</
div
>
</
div
>
</
div
>
Previous
Next
Numeric values
Relative position values

--- Draggable ---
Draggable

Axes parameters
Since 4.0.0
y
Defines the behaviour of the y-axis by either passing an object of parameters or disabling it by setting the value to
false
.
Accepts
Boolean
Draggable axes parameters
Object
Default
true
import
{ createDraggable }
from
'animejs'
;
createDraggable
(
'.square.enabled'
, {
y
:
true
});
createDraggable
(
'.square.disabled'
, {
y
:
false
});
<
div
class
=
"large spaced-evenly row"
>
<
div
class
=
"square enabled draggable"
>
</
div
>
<
div
class
=
"square disabled draggable"
>
</
div
>
</
div
>
<
div
class
=
"large spaced-evenly row"
>
<
div
class
=
"label"
>
y enabled
</
div
>
<
div
class
=
"label"
>
y disabled
</
div
>
</
div
>
Previous
Next
x
snap

--- Draggable ---
Draggable
Since 4.0.0
Draggable callbacks
Execute functions at specific points while dragging an element.
Draggable callback functions are specified directly in the
createDraggable
()
parameters
Object
.
createDraggable
(
'.square'
, {
x
: {
snap
:
100
},
y
: {
snap
:
50
},
modifier
: utils.
wrap
(-
200
,
0
),
containerPadding
:
10
,
containerStiffness
:
40
,
containerEase
:
'out(3)'
,
┌────────────────────────┐
│
onGrab
:
() =>
{}, │
│
onDrag
:
() =>
{}, ├─
Callbaks
│
onRelease
:
() =>
{}, │
└────────────────────────┘
});
In this section
onGrab
onDrag
onUpdate
onRelease
onSnap
onSettle
onResize
onAfterResize
Previous
Next
Draggable settings
onGrab

--- Timeline ---
Timeline

Playback settings
Since 2.0.0
delay
Defines the delay, in milliseconds, before the timeline starts.
Accepts
A
Number
equal to or greater than
0
Default
0
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
delay
=
500
;
import
{ createTimeline, createTimer, utils }
from
'animejs'
;
const
tl =
createTimeline
({
delay
:
2000
,
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
'-=500'
)
.
add
(
'.square'
, {
x
:
'15rem'
},
'-=500'
);
// For logging delayed time only
const
[ $time ] = utils.$(
'.time'
);
createTimer
({
duration
:
2000
+ tl.
duration
,
onUpdate
:
self
=>
$time.
innerHTML
= (
2000
- self.
currentTime
) * -
1
,
});
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
Previous
Next
defaults
loop

--- Scope ---
Scope
Since 4.0.0
Register method function
A method can be registered within a Scope by passing a
String
name and a
Function
to the Scope's
add
()
method. Once registered, the method becomes available on the Scope instance's
methods
object. This allows the method to be called from outside the Scope while maintaining its execution context within the Scope.
scope.
add
(
'methodName'
, methodFunction);
// Register the method
scope.
methods
.
methodName
();
// Execute the method
Method arguments
Name
Type
...args
Any
import
{ utils, animate, createScope }
from
'animejs'
;
const
scope =
createScope
({
mediaQueries
: {
isSmall
:
'(max-width: 200px)'
},
})
.
add
(
self
=>
{
/* Registering the method inside the scope allows access to the scope itself */
self.
add
(
'onClick'
,
(
e
) =>
{
const
{ clientX, clientY } = e;
const
{ isSmall } = self.
matches
;
animate
(
'.square'
, {
rotate
: isSmall ?
'+=360'
:
0
,
x
: isSmall ?
0
: clientX - (
window
.
innerWidth
/
2
),
y
: isSmall ?
0
: clientY - (
window
.
innerHeight
/
2
),
duration
: isSmall ?
750
:
400
,
});
});
utils.
set
(
document
.
body
, {
cursor
: self.
matches
.
isSmall
?
'alias'
:
'crosshair'
});
});
/* Methods can be called outside the scope */
document
.
addEventListener
(
'click'
, scope.
methods
.
onClick
);
<
div
class
=
"iframe-content resizable"
>
<
div
class
=
"large centered row"
>
<
div
class
=
"col"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
</
div
>
Previous
Next
Add constructor function
Scope parameters

--- Animation ---
Animation

Playback settings
Since 4.0.0
playbackEase
V4
JS
Applies and easing function to the entire playback of the animation.
Unlike the tween
ease
parameter that is applied in between every property keyframes like this:
0
────────────────────────────────›
1
A ──ease──› B ──ease──› C ──ease──› D
The
playbackEase
parameter is applied globally like this:
0
──────────────ease──────────────›
1
A ────────› B ────────› C ────────› D
Accepts
ease
Default
null
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
playbackEase
=
'inOut'
;
import
{ animate }
from
'animejs'
;
animate
(
'.square'
, {
keyframes
: [
{
y
:
'-2.5rem'
,
duration
:
400
},
{
x
:
'17rem'
,
rotate
:
180
,
scale
:
.5
},
{
y
:
'2.5rem'
},
{
x
:
0
,
rotate
:
360
,
scale
:
1
},
{
y
:
0
,
duration
:
400
}
],
duration
:
4000
,
playbackEase
:
'inOut(3)'
,
// this ease is applied accross all keyframes
loop
:
true
,
});
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
playbackRate
Animation callbacks

--- Animation ---
Animation

Tween value types
Since 4.0.0
CSS variable
WAAPI
The
WAAPI
animate
()
method can natively animate any css variable by simply passing the variable value using the
'var(--my-value)'
syntax.
Accepts
CSS variable
CSS Variables can be used with the
JS
animate
()
method by combining a
Function based value
and
utils.
get
()
.
color
: $target => utils.
get
($target,
'--variable-name'
)
import
{ waapi, animate }
from
'animejs'
;
waapi.
animate
(
'.square'
, {
rotate
:
'var(--rotation)'
,
borderColor
: [
'var(--hex-orange)'
,
'var(--hex-red)'
],
});
// Helper for the JS animate() method
const
cssVar
= name => $el => utils.
get
($el, name);
animate
(
'.square'
, {
scale
:
cssVar
(
'--scale'
),
background
: [
cssVar
(
'--hex-red'
),
cssVar
(
'--hex-orange'
)],
});
<
div
class
=
"medium justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Color function value
Function based value

--- Animation ---
Animation

Callbacks
Since 4.0.0
onUpdate
JS
Executes a function on every frames of a running animation at the specified
frameRate
.
Accepts
A
Function
whose first argument returns the animation itself
Default
noop
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
onUpdate
=
self
=>
console
.
log
(self.
id
);
import
{ animate, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
let
updates =
0
;
const
animation =
animate
(
'.circle'
, {
x
:
'16rem'
,
loopDelay
:
1500
,
loop
:
true
,
alternate
:
true
,
onUpdate
:
self
=>
$value.
textContent
= ++updates
});
<
div
class
=
"large row"
>
<
div
class
=
"circle"
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
updates
</
span
>
<
span
class
=
"value"
>
0
</
span
>
</
pre
>
</
div
>
Previous
Next
onBeforeUpdate
onRender

--- Timer ---
Timer

Methods
Since 4.0.0
complete()
Completes a timer instantly.
Returns
The timer itself
Can be chained with other timer methods.
import
{ createTimer, utils }
from
'animejs'
;
const
[ $completeButton ] = utils.$(
'.complete'
);
const
[ $time ] = utils.$(
'.time'
);
const
timer =
createTimer
({
duration
:
100000
,
onUpdate
:
self
=>
$time.
innerHTML
= self.
currentTime
});
const
completeTimer
= (
) => timer.
complete
();
$completeButton.
addEventListener
(
'click'
, completeTimer);
<
div
class
=
"large centered row"
>
<
div
class
=
"half col"
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
current time
</
span
>
<
span
class
=
"time value lcd"
>
0
</
span
>
</
pre
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button complete"
>
Complete
</
button
>
</
fieldset
>
</
div
>
Previous
Next
resume()
cancel()

--- Animation ---
Animation

Keyframes
Since 2.0.0
Duration based keyframes
JS
Sequences multiple
Animatable property
one after another.
This syntax allows very fine control over an animation by giving access to
ease
,
delay
,
duration
and
modifier
parameters for each individual keyframes.
The default duration of a keyframe equals the total animation duration divided by the total number of keyframes.
keyframes
: [
{
y
:
50
,
ease
:
'out'
,
duration
:
400
},
{
x
:
75
,
scale
:
.5
,
duration
:
800
},
]
Accepts
An
Array
of
Object
containing one
Animatable property
and
Tween parameters
import
{ animate }
from
'animejs'
;
animate
(
'.square'
, {
keyframes
: [
{
y
:
'-2.5rem'
,
ease
:
'out'
,
duration
:
400
},
{
x
:
'17rem'
,
scale
:
.5
,
duration
:
800
},
{
y
:
'2.5rem'
},
// The duration here is 3000 / 5 = 600ms
{
x
:
0
,
scale
:
1
,
duration
:
800
},
{
y
:
0
,
ease
:
'in'
,
duration
:
400
}
],
rotate
: {
to
:
360
,
ease
:
'linear'
},
duration
:
3000
,
ease
:
'inOut'
,
// ease applied between each keyframes if no ease defined
playbackEase
:
'ouIn(5)'
,
// ease applied accross all keyframes
loop
:
true
,
});
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Tween parameters keyframes
Percentage based keyframes

--- Draggable ---
Draggable
Since 4.0.0
Draggable methods
Controls the state and behaviour of a draggable.
Draggable methods are accessible through a Draggable instance
Object
.
const
draggable =
createDraggable
(target, parameters);
┌──────────┐
draggable.│
disable
() │
draggable.│
enable
() ├─
Methods
draggable.│
revert
() │
└──────────┘
In this section
disable()
enable()
setX()
setY()
animateInView()
scrollInView()
stop()
reset()
revert()
refresh()
Previous
Next
Draggable callbacks
disable()

--- ScrollObserver ---
ScrollObserver

Thresholds
Since 4.0.0
Numeric values
Defines an offset from the top of the target and container by passing a numeric values.
If no unit is defined, the values is interpreted as pixels.
Accepts
Type
Example
Description
Number
100
100px from the top of the target or container
Unit
'1rem'
1rem from the top of the target or container
Percentage
'10%'
10% of the target or container height, from the top of the target or container
Default unit
px
import
{ animate, onScroll }
from
'animejs'
;
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
duration
:
2000
,
alternate
:
true
,
loop
:
true
,
ease
:
'inOutQuad'
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
// -48px from the top of the target, 80px from the top of the container
enter
:
'80 -48'
,
// 250% from the top of the target, 67.5% from the top of the container
leave
:
'67.5% 250%'
,
debug
:
true
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large centered row"
>
<
div
class
=
"label"
>
scroll down
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section"
>
</
div
>
</
div
>
</
div
>
Previous
Next
ScrollObserver thresholds
Positions shorthands

--- Stagger ---
Stagger
Since 2.0.0
Values staggering
All tweens animatable properties accept function-based values, enabling the use of the stagger function returned by the
stagger
()
method in multi-target animations.
This results in each target having a staggered value, increasing by a set number for each subsequent target.
import
{ animate, stagger }
from
'animejs'
;
const
animation =
animate
(
'.square'
, {
y
:
stagger
([
'-2.75rem'
,
'2.75rem'
]),
rotate
: {
from
:
stagger
(
'-.125turn'
) },
loop
:
true
,
alternate
:
true
});
<
div
class
=
"small justified row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
Time staggering
Timeline positions staggering

--- Timeline ---
Timeline

Playback settings
Since 4.0.0
alternate
Defines if the direction of the timeline alternates on each iteration when the loop parameter is set to
true
or superior to
1
.
Accepts
Boolean
Default
false
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
alternate
=
true
;
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $loops ] = utils.$(
'.loops'
);
let
loops =
0
;
const
tl =
createTimeline
({
loop
:
true
,
alternate
:
true
,
onLoop
:
self
=>
$loops.
innerHTML
= ++loops,
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
'-=500'
)
.
add
(
'.square'
, {
x
:
'15rem'
},
'-=500'
);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
loops
</
span
>
<
span
class
=
"loops value"
>
0
</
span
>
</
pre
>
</
div
>
Previous
Next
loopDelay
reversed

--- Timeline ---
Timeline

Methods
Since 4.0.0
complete()
V4
Completes the timeline instantly.
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $completeButton ] = utils.$(
'.complete'
);
const
tl =
createTimeline
({
loop
:
true
,
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
},
500
)
.
add
(
'.square'
, {
x
:
'15rem'
},
1000
);
const
completeTimeline
= (
) => tl.
complete
();
$completeButton.
addEventListener
(
'click'
, completeTimeline);
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button complete"
>
Complete
</
button
>
</
fieldset
>
</
div
>
Previous
Next
resume()
cancel()

--- Animation ---
Animation

Tween value types
Since 2.0.0
Relative value
JS
Adds, subtracts or multiplies the current target value by a specified amount.
Accepts
Prefix
Effect
Examples
'+='
Add
'+=45'
|
'+=45px'
'-='
Subtracts
'-=45'
|
'-=45deg'
'*='
Multiply
'*=.5'
import
{ animate, utils }
from
'animejs'
;
const
[ $clock ] = utils.$(
'.clock'
);
const
[ $add ] = utils.$(
'.add'
);
const
[ $sub ] = utils.$(
'.sub'
);
const
[ $mul ] = utils.$(
'.mul'
);
const
add
= (
) =>
animate
($clock, {
rotate
:
'+=90'
});
const
sub
= (
) =>
animate
($clock, {
rotate
:
'-=90'
});
const
mul
= (
) =>
animate
($clock, {
rotate
:
'*=.5'
});
$add.
addEventListener
(
'click'
, add);
$sub.
addEventListener
(
'click'
, sub);
$mul.
addEventListener
(
'click'
, mul);
<
div
class
=
"large centered row"
>
<
div
class
=
"clock"
>
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
class
=
"button add"
>
+ 90°
</
button
>
<
button
class
=
"button sub"
>
- 90°
</
button
>
<
button
class
=
"button mul"
>
× .5
</
button
>
</
fieldset
>
</
div
>
Previous
Next
Unit conversion value
Color value

--- Timeline ---
Timeline

Callbacks
Since 4.0.0
onBegin
Executes a function when an timeline begins to play.
Accepts
A
Function
whose first argument returns the timeline itself
Default
noop
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
onBegin
=
self
=>
console
.
log
(self.
id
);
import
{ createTimeline, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
const
tl =
createTimeline
({
delay
:
1000
,
// Delays the onBegin() callback by 1000ms
onBegin
:
self
=>
$value.
textContent
= self.
began
})
.
add
(
'.circle'
, {
x
:
'15rem'
})
.
add
(
'.triangle'
, {
x
:
'15rem'
})
.
add
(
'.square'
, {
x
:
'15rem'
});
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
began
</
span
>
<
span
class
=
"value"
>
false
</
span
>
</
pre
>
</
div
>
Previous
Next
Timeline callbacks
onComplete

--- ScrollObserver ---
ScrollObserver

Synchronisation modes
Since 4.0.0
Smooth scroll
Smoothly animate the playback progress of the linked object to the scroll position by passing a value between
0
and
1
. The closer the value gets to
0
, the longer the animation takes to catch up with the current scroll position.
Accepts
A
Number
greater than or equal to
0
and lower to or equal
1
import
{ animate, onScroll }
from
'animejs'
;
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
ease
:
'linear'
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
enter
:
'bottom-=50 top'
,
leave
:
'top+=60 bottom'
,
sync
:
.25
,
debug
:
true
,
})
});
<
div
class
=
"scroll-container scroll-y"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"label"
>
scroll down
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section"
>
</
div
>
</
div
>
</
div
>
Previous
Next
Playback progress
Eased scroll

--- Utilities ---
Utilities
Since 2.0.0
random()
Returns a random
Number
within a specified range, with an optional third parameter determining the number of decimal places.
const
randomValue = utils.
random
(min, max, decimalLength);
Parameters
Name
Accepts
min
Number
max
Number
decimalLength=0
(opt)
Number
Returns
Number
import
{ utils }
from
'animejs'
;
utils.
set
(
'.square'
, {
x
:
() =>
utils.
random
(
2
,
18
,
2
) +
'rem'
,
rotate
:
() =>
utils.
random
(
0
,
180
),
scale
:
() =>
utils.
random
(
.25
,
1.5
,
3
),
});
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
<
div
class
=
"small row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
Previous
Next
cleanInlineStyles()
randomPick()

--- Animation ---
Animation

Tween parameters
Since 4.0.0
ease
Defines the easing function for all animated properties or a specific property.
Easing functions control the rate of change of a property value over time, determining the animation's speed at different points during playback.
All Anime.js built-in easing functions can either be used by passing the easing name
String
or the function accessible on the
eases
object.
import
{ eases }
from
'animejs'
;
const
{ linear, outExpo, cubicBezier } = eases;
The
createSpring
()
easing function must be imported separately.
import
{ createSpring }
from
'animejs'
;
Accepts
Built-in string
Function
Parameters
'linear'
'linear(0, .5 75%, 1)'
linear
()
coords (
0
,
'.5 75%'
,
1
)
'irregular'
JS
'irregular(10, 1)'
JS
irregular
()
length =
10
, randomness =
1
'steps'
'steps(10)'
steps
()
steps =
10
'cubicBezier'
'cubicBezier(.5,0,.5,1)'
cubicBezier
()
x1 =
.5
, y1 =
0
, x2 =
.5
, y2 =
1
'in'
'in(1.675)'
in
()
power =
1.675
'out'
'out(1.675)'
out
()
power =
1.675
'inOut'
'inOut(1.675)'
inOut
()
power =
1.675
'inQuad'
JS
inQuad
-
'outQuad'
JS
outQuad
-
'inOutQuad'
JS
inOutQuad
-
'inCubic'
JS
inCubic
-
'outCubic'
JS
outCubic
-
'inOutCubic'
JS
inOutCubic
-
'inQuart'
JS
inQuart
-
'outQuart'
JS
outQuart
-
'inOutQuart'
JS
inOutQuart
-
'inQuint'
JS
inQuint
-
'outQuint'
JS
outQuint
-
'inOutQuint'
JS
inOutQuint
-
'inSine'
JS
inSine
-
'outSine'
JS
outSine
-
'inOutSine'
JS
inOutSine
-
'inCirc'
JS
inCirc
-
'outCirc'
JS
outCirc
-
'inOutCirc'
JS
inOutCirc
-
'inExpo'
JS
inExpo
-
'outExpo'
JS
outExpo
-
'inOutExpo'
JS
inOutExpo
-
'inBounce'
JS
inBounce
-
'outBounce'
JS
outBounce
-
'inOutBounce'
JS
inOutBounce
-
'inBack'
JS
'inBack(1.70158) '
JS
inBack
()
overshoot =
1.70158
'outBack'
JS
'outBack(1.70158) '
JS
outBack
()
overshoot =
1.70158
'inOutBack'
JS
'inOutBack(1.70158) '
JS
inOutBack
()
overshoot =
1.70158
'inElastic'
JS
'inElastic(1, .3) '
JS
inElastic
()
amplitude =
1
, period =
.3
'outElastic'
JS
'outElastic(1, .3) '
JS
outElastic
()
amplitude =
1
, period =
.3
'inOutElastic'
JS
'inOutElastic(1, .3) '
JS
inOutElastic
()
amplitude =
1
, period =
.3
-
createSpring
()
{
mass
:
1
,
stiffness
:
100
,
damping
:
10
,
velocity
:
0
}
Default
'out(2)'
To change the default value globally, update the
engine.
defaults
object.
import
{ engine }
from
'animejs'
;
engine.
defaults
.
ease
=
'outElastic(1, .5)'
;
// // v3 throwback :)
import
{ animate, waapi, eases, createSpring }
from
'animejs'
;
animate
(
'.row:nth-child(1) .square'
, {
x
:
'17rem'
,
rotate
:
360
,
ease
:
'inQuad'
,
});
animate
(
'.row:nth-child(2) .square'
, {
x
:
'17rem'
,
rotate
:
360
,
ease
: eases.
outQuad
,
});
waapi.
animate
(
'.row:nth-child(3) .square'
, {
x
:
'17rem'
,
rotate
: {
to
:
360
,
ease
:
'out(6)'
,
},
ease
:
createSpring
({
stiffness
:
70
}),
});
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
all: 'inQuad'
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
all: eases.outQuad
</
div
>
</
div
>
<
div
class
=
"medium row"
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"padded label"
>
x: createSpring()
<
br
>
rotate: 'inQuad'
</
div
>
</
div
>
Previous
Next
duration
composition

--- SVG ---
SVG
A collection of utility functions to help with SVG morphing, line drawing and motion path animations.
All SVG utilities functions are available on the
svg
object.
import
{ svg }
from
'animejs'
;
In this section
morphTo()
createDrawable()
createMotionPath()
Previous
Next
Stagger
morphTo()

--- ScrollObserver ---
ScrollObserver

Settings
Since 4.0.0
axis
Specifies the scroll direction of the ScrollObserver container
HTMLElement
.
Accepts
'x'
'y'
Defaults
'y'
import
{ createTimer, utils, onScroll }
from
'animejs'
;
animate
(
'.square'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
duration
:
2000
,
alternate
:
true
,
loop
:
true
,
ease
:
'inOutQuad'
,
autoplay
:
onScroll
({
container
:
'.scroll-container'
,
axis
:
'x'
,
})
});
<
div
class
=
"scroll-container scroll-x"
>
<
div
class
=
"scroll-content grid square-grid"
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large centered row"
>
<
div
class
=
"label"
>
scroll right →
</
div
>
</
div
>
</
div
>
<
div
class
=
"scroll-section padded"
>
<
div
class
=
"large row"
>
<
div
class
=
"square"
>
</
div
>
</
div
>
</
div
>
</
div
>
</
div
>
Previous
Next
debug
repeat

--- Web Animation API ---
Web Animation API

API differences
Since 4.0.0
finished
animation.
finished
is replaced by the
animation.
then
()
method. It returns a
Promise
that resolves and execute a callback when the animation completes.
Syntax comparison
Anime.js
The
then
()
method can be directly inlined like this:
waapi.
animate
(target, {
translate
:
'100px'
,
duration
:
500
,
}).
then
(callback);
Or used in an
async
/
await
context:
async
function
waitForAnimationToComplete
(
) {
return
animate
(target, {
translate
:
'100px'
,
duration
:
500
,
});
}
const
asyncAnimation =
await
waitForAnimationToComplete
();
WAAPI equivalent
const
targets =
document
.
querySelectorAll
(
'.square'
);
const
animations = [];
targets.
forEach
(
(
$el, i
) =>
{
animations[i] = $el.
animate
({
translate
:
'100px'
,
}, {
fill
:
'forwards'
,
duration
:
500
,
});
});
Promise
.
all
(
animations
.
map
(
(
animation
) =>
animation.
finished
)
.
then
(
() =>
console
.
log
(
'completed'
))
);
Parameters
Name
Type
callback
A
Function
whose first argument returns the animation itself
Returns
Promise
import
{ waapi, utils }
from
'animejs'
;
const
[ $value ] = utils.$(
'.value'
);
const
animation = waapi.
animate
(
'.circle'
, {
translate
:
'16rem'
,
loop
:
2
,
alternate
:
true
,
});
animation.
then
(
() =>
$value.
textContent
=
'fulfilled'
);
<
div
class
=
"large row"
>
<
div
class
=
"circle"
>
</
div
>
<
pre
class
=
"large log row"
>
<
span
class
=
"label"
>
promise status
</
span
>
<
span
class
=
"value"
>
pending
</
span
>
</
pre
>
</
div
>
Previous
Next
easing
waapi.convertEase()

--- Draggable ---
Draggable

Methods
Since 4.0.0
scrollInView()
Animate the scroll position of the container if the draggable position is outside of the
scroll threshold
.
Parameters
Name
Type
Description
duration
(opt)
Number
The duration of the animation (default
350
)
gap
(opt)
Boolean
How much extra distance from the edges of the container the draggable should be animated to
ease
(opt)
ease
The easing function applied to the animation (default
InOutQuad
Returns
The draggable itself
import
{ createDraggable }
from
'animejs'
;
const
[ $scrollInView ] = utils.$(
'.scroll-button'
);
const
draggable =
createDraggable
(
'.square'
, {
container
:
'.scroll-container'
,
});
const
scrollInView
= (
) => {
draggable.
scrollInView
(
400
,
100
);
}
// Set the draggable position outside the scroll viewport
draggable.
x
=
120
;
draggable.
y
=
200
;
$scrollInView.
addEventListener
(
'click'
, scrollInView);
<
div
class
=
"scroll-container scroll-x scroll-y"
>
<
div
class
=
"scroll-content"
>
<
div
class
=
"large padded grid square-grid"
>
<
div
class
=
"square draggable"
>
</
div
>
</
div
>
</
div
>
</
div
>
<
fieldset
class
=
"absolute controls"
>
<
button
class
=
"button scroll-button"
>
Scroll in view
</
button
>
</
fieldset
>
Previous
Next
animateInView()
stop()

--- Animation ---
Animation
Since 1.0.0
Animation playback settings
Specify the timings and behaviours of an animation.
Playback settings properties are defined directly in the
animate
()
parameters
Object
.
animate
(
'.square'
, {
translateX
:
100
,
scale
:
2
,
opacity
:
.5
,
duration
:
400
,
delay
:
250
,
ease
:
'out(3)'
,
┌───────────────────┐
│
loop
:
3
, │
│
alternate
:
true
, ├─
Playback
Settings
│
autoplay
:
false
, │
└───────────────────┘
onBegin
:
() =>
{},
onLoop
:
() =>
{},
onUpdate
:
() =>
{},
});
In this section
delay
duration
loop
loopDelay
alternate
reversed
autoplay
frameRate
playbackRate
playbackEase
Previous
Next
Keyframes
delay

--- SVG ---
SVG
createMotionPath()
Creates pre-defined
Tween parameter
objects that animate along an SVGPathElement's coordinates and inclination.
const
{ translateX, translateY, rotate } = svg.
createMotionPath
(path);
Parameters
Name
Type
path
CSS selector
|
SVGPathElement
Returns
An
Object
with the following properties:
Name
Type
Description
translateX
Tween parameter
Map to the x coordinate of the path element
translateY
Tween parameter
Map to the y coordinate of the path element
rotate
Tween parameter
Map to the angle of the path element
import
{ animate, svg }
from
'animejs'
;
// Animate the transforms properties of .car the motion path values
const
carAnimation =
animate
(
'.car'
, {
ease
:
'linear'
,
duration
:
5000
,
loop
:
true
,
...svg.
createMotionPath
(
'path'
)
});
// Line drawing animation following the motion path values
// For demo aesthetic only
animate
(svg.
createDrawable
(
'path'
), {
draw
:
'0 1'
,
ease
:
'linear'
,
duration
:
5000
,
loop
:
true
});
<
svg
viewBox
=
"0 0 304 112"
>
<
title
>
Suzuka
</
title
>
<
g
stroke
=
"none"
fill
=
"none"
fill-rule
=
"evenodd"
>
<
path
d
=
"M189.142857,4 C227.456875,4 248.420457,4.00974888 256.864191,4.00974888 C263.817211,4.00974888 271.61219,3.69583517 274.986231,6.63061513 C276.382736,7.84531176 279.193529,11.3814152 280.479499,13.4815847 C281.719344,15.5064248 284.841964,20.3571626 275.608629,20.3571626 C265.817756,20.3571626 247.262478,19.9013915 243.955117,19.9013915 C239.27946,19.9013915 235.350655,24.7304885 228.6344,24.7304885 C224.377263,24.7304885 219.472178,21.0304113 214.535324,21.0304113 C207.18393,21.0304113 200.882842,30.4798911 194.124187,30.4798911 C186.992968,30.4798911 182.652552,23.6245972 173.457298,23.6245972 C164.83277,23.6245972 157.191045,31.5424105 157.191045,39.1815359 C157.191045,48.466779 167.088672,63.6623005 166.666679,66.9065088 C166.378668,69.1206889 155.842137,79.2568633 151.508744,77.8570506 C145.044576,75.7689355 109.126667,61.6405346 98.7556561,52.9785141 C96.4766876,51.0750861 89.3680347,39.5769094 83.4195005,38.5221785 C80.6048001,38.0231057 73.0179337,38.7426555 74.4158694,42.6956376 C76.7088819,49.1796531 86.3280337,64.1214904 87.1781062,66.9065088 C88.191957,70.2280995 86.4690152,77.0567847 82.2060607,79.2503488 C79.2489435,80.7719756 73.1324132,82.8858479 64.7015706,83.0708761 C55.1604808,83.2802705 44.4254811,80.401884 39.1722168,80.401884 C25.7762119,80.401884 24.3280517,89.1260466 22.476679,94.4501705 C21.637667,96.8629767 20.4337535,108 33.2301959,108 C37.8976087,108 45.0757044,107.252595 53.4789069,103.876424 C61.8821095,100.500252 122.090049,78.119656 128.36127,75.3523302 C141.413669,69.5926477 151.190142,68.4987755 147.018529,52.0784879 C143.007818,36.291544 143.396957,23.4057975 145.221196,19.6589263 C146.450194,17.1346449 148.420955,14.8552817 153.206723,15.7880203 C155.175319,16.1716965 155.097637,15.0525421 156.757598,11.3860986 C158.417558,7.71965506 161.842736,4.00974888 167.736963,4.00974888 C177.205308,4.00974888 184.938832,4 189.142857,4 Z"
id
=
"suzuka"
stroke
=
"currentColor"
stroke-width
=
"2"
>
</
path
>
</
g
>
</
svg
>
<
div
class
=
"square car motion-path-car"
style
=
"transform: translateX(189px) translateY(4px);"
>
</
div
>
Previous
Next
createDrawable()
Utilities

--- Engine ---
Engine

Methods
Since 4.0.0
resume()
Resumes the engine after being either paused with a call to
engine.
pause
()
.
engine.
pause
();
// Pauses the engine and all animations
engine.
resume
();
// Resumes the engine and all animations
Returns
Engine
import
{ engine, animate, utils }
from
'animejs'
;
const
[ $container ] = utils.$(
'.container'
);
const
[ $pause, $resume ] = utils.$(
'button'
);
function
addAnimation
(
) {
const
$particle =
document
.
createElement
(
'div'
);
$particle.
classList
.
add
(
'particle'
);
$container.
appendChild
($particle);
animate
($particle, {
x
: utils.
random
(-
10
,
10
,
2
) +
'rem'
,
y
: utils.
random
(-
3
,
3
,
2
) +
'rem'
,
scale
: [{
from
:
0
,
to
:
1
}, {
to
:
0
}],
loop
:
true
,
delay
: utils.
random
(
0
,
1000
)
});
}
for
(
let
i =
0
; i <
150
; i++)
addAnimation
();
const
resumeEngine
= (
) => engine.
resume
();
const
pauseEngine
= (
) => engine.
pause
();
$pause.
addEventListener
(
'click'
, pauseEngine);
$resume.
addEventListener
(
'click'
, resumeEngine);
<
div
class
=
"large row container"
>
</
div
>
<
div
class
=
"medium row"
>
<
fieldset
class
=
"controls"
>
<
button
>
Pause
</
button
>
<
button
>
Resume
</
button
>
</
fieldset
>
</
div
>
Previous
Next
pause()
Engine properties

--- Timer ---
Timer
Since 4.0.0
Timer callbacks
Execute functions at specific points during a timer playback.
Callbacks
Function
are specified directly in the
createTimer
()
parameters
Object
.
createTimer
({
duration
:
1000
,
frameRate
:
true
,
loop
:
true
,
┌─────────────────────┐
│
onBegin
:
() =>
{}, │
│
onLoop
:
() =>
{}, ├─
Callbacks
│
onUpdate
:
() =>
{}, │
└─────────────────────┘
});
In this section
onBegin
onComplete
onUpdate
onLoop
onPause
then()
Previous
Next
Timer playback settings
onBegin

--- Timeline ---
Timeline
Since 2.0.0
Add animations
Animations can be added to a timeline using the
add
()
method or the
sync
()
method.
Animation creation
Creates and adds an animation directly to the timeline with the
add
()
method.
This allows tween value composition with the timeline's existing children.
timeline.
add
(targets, parameters, position);
Parameters
Name
Accepts
targets
Targets
parameters
An
Object
of
Animatable properties
,
Tween parameters
,
Playback settings
and
Animation callbacks
position
(opt)
Time position
Animation synchronisation
Synchronises an existing animation with the
sync
()
method.
Tween value composition is handled when the animation is created, and won't affect the timeline's existing children when added.
const
animation =
animate
(target, {
x
:
100
});
timeline.
sync
(animation, position);
Parameters
Name
Accepts
animation
Animation
position
(opt)
Time position
Returns
The timeline itself
Can be chained with other timeline methods.
import
{ createTimeline, animate }
from
'animejs'
;
const
circleAnimation =
animate
(
'.circle'
, {
x
:
'15rem'
});
const
tl =
createTimeline
()
.
sync
(circleAnimation)
.
add
(
'.triangle'
, {
x
:
'15rem'
,
rotate
:
'1turn'
,
duration
:
500
,
alternate
:
true
,
loop
:
2
,
})
.
add
(
'.square'
, {
x
:
'15rem'
,
});
<
div
class
=
"large row"
>
<
div
class
=
"medium pyramid"
>
<
div
class
=
"triangle"
>
</
div
>
<
div
class
=
"square"
>
</
div
>
<
div
class
=
"circle"
>
</
div
>
</
div
>
</
div
>
Previous
Next
Add timers
Sync WAAPI animations
