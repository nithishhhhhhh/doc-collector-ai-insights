URL: https://getbootstrap.com/docs/5.3/getting-started/download
==================================================

Compiled CSS and JS
Download ready-to-use compiled code for
to easily drop into your project, which includes:
Compiled and minified CSS bundles (see
CSS files comparison
Compiled and minified JavaScript plugins (see
JS files comparison
This doesn’t include documentation, source files, or any optional JavaScript dependencies like Popper.
Download
Source files
Compile Bootstrap with your own asset pipeline by downloading our source Sass, JavaScript, and documentation files. This option requires some additional tooling:
Sass compiler
for compiling Sass source files into CSS files
Autoprefixer
for CSS vendor prefixing
Should you require our full set of
build tools
, they are included for developing Bootstrap and its docs, but they’re likely unsuitable for your own purposes.
Download source
Examples
If you want to download and examine our
examples
, you can grab the already built examples:
Download Examples
CDN via jsDelivr
Skip the download with
jsDelivr
to deliver cached version of Bootstrap’s compiled CSS and JS to your project.
link
href
https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css
stylesheet
integrity
sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr
crossorigin
anonymous
script
https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js
integrity
sha384-ndDqU0Gzau9qJ1lfW4pNLlhNTkCfHzAVBReH9diLvGRem5+R9g2FzA8ZGN954O5Q
crossorigin
anonymous
script
If you’re using our compiled JavaScript and prefer to include Popper separately, add Popper before our JS, via a CDN preferably.
script
https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js
integrity
sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r
crossorigin
anonymous
script
script
https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.min.js
integrity
sha384-7qAoOXltbVP82dhxHAUje59V5r2YsVfBafyUDxEdApLPmcdhBPg1DKg1ERo0BZlK
crossorigin
anonymous
script
Alternative CDNs
We recommend
jsDelivr
and use it ourselves in our documentation. However, in some cases—like in some specific countries or environments—you may need to use other CDN providers like
cdnjs
unpkg
You’ll find the same files on these CDN providers, albeit with different URLs. With cdnjs, you can
use this direct Bootstrap package link
to copy and paste ready-to-use HTML snippets for each dist file from any version of Bootstrap.
If the SRI hashes differ for a given file, you shouldn’t use the files from that CDN, because it means that the file was modified by someone else.
Note that you should compare same length hashes, e.g.
sha384
with
sha384
, otherwise it’s expected for them to be different.
As such, you can use an online tool like
SRI Hash Generator
to make sure that the hashes are the same for a given file.
Alternatively, assuming you have OpenSSL installed, you can achieve the same from the CLI, for example:
openssl dgst
-sha384
-binary
openssl base64
Package managers
Pull in Bootstrap’s
source files
into nearly any project with some of the most popular package managers. No matter the package manager, Bootstrap will
require a
Sass compiler
Autoprefixer
for a setup that matches our official compiled versions.
Install Bootstrap in your Node.js powered apps with
the npm package
install
const bootstrap = require('bootstrap')
import bootstrap from 'bootstrap'
will load all of Bootstrap’s plugins onto a
object.
module itself exports all of our plugins. You can manually load Bootstrap’s plugins individually by loading the
/js/dist/*.js
files under the package’s top-level directory.
package.json
contains some additional metadata under the following keys:
sass
- path to Bootstrap’s main
Sass
source file
style
- path to Bootstrap’s non-minified CSS that’s been compiled using the default settings (no customization)
Get started with Bootstrap via npm with our starter project!
Head to the
Sass & JS example
template repository to see how to build and customize Bootstrap in your own npm project. Includes Sass compiler, Autoprefixer, Stylelint, PurgeCSS, and Bootstrap Icons.
yarn
Install Bootstrap in your Node.js powered apps with
the yarn package
yarn
Yarn 2+ (aka Yarn Berry) doesn’t support the
node_modules
directory by default
: using our
Sass & JS example
needs some adjustments:
yarn
config
nodeLinker node-modules
# Use the node_modules linker
touch
yarn.lock
# Create an empty yarn.lock file
yarn
install
# Install the dependencies
yarn
start
# Start the project
Install Bootstrap in your Bun or Node.js powered apps with
the Bun CLI
RubyGems
Install Bootstrap in your Ruby apps using
Bundler
recommended
) and
RubyGems
by adding the following line to your
Gemfile
'bootstrap'
'~> 5.3.7'
Alternatively, if you’re not using Bundler, you can install the gem by running this command:
install
See the gem’s README
for further details.
Composer
You can also install and manage Bootstrap’s Sass and JavaScript using
Composer
composer
require twbs/bootstrap:5.3.7
NuGet
If you develop in .NET Framework, you can also install and manage Bootstrap’s
Sass
and JavaScript using
NuGet
. Newer projects should use
libman
or another method as NuGet is designed for compiled code, not frontend assets.
Install-Package
Install-Package
sass
IntelliSense extension
Install the community-maintained
IntelliSense extension
for Visual Studio Code to get IntelliSense auto-completion for Bootstrap classes.
View in VS Code Marketplace