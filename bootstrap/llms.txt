# BOOTSTRAP Documentation
# Generated from 143 documentation pages
# Minified for LLM consumption

--- 026_migration.txt ---
Dependencies
Migrated from Hugo to Astro for building our documentation
If you’re migrating from our previous alpha releases of v5.3.0, please review their changes in addition to this section.
Helpers
Colored links
once again have
!important
so they work better with our newly added link utilities.
Utilities
Added new
.d-inline-grid
display utility
If you’re migrating from our previous alpha release of v5.3.0, please review the changes listed below.
CSS variables
Removed several duplicate and unused root CSS variables.
Color modes
Dark mode colors are now derived from our theme colors (e.g.,
$primary
) in Sass, rather than color specific tints or shades (e.g.,
$blue-300
). This allows for a more automated dark mode when customizing the default theme colors.
Added Sass maps for generating theme colors for dark mode text, subtle background, and subtle border.
Snippet examples
are now ready for dark mode with updated markup and reduced custom styles.
Added
color-scheme: dark
to dark mode CSS to change OS level controls like scrollbars
Form validation
border-color
and text
color
states now respond to dark mode, thanks to new Sass and CSS variables.
Dropped recently added form control background CSS variables and reassigned the Sass variables to use CSS variables instead. This simplifies the styling across color modes and avoids an issue where form controls in dark mode wouldn’t update properly.
box-shadow
s will once again always stay dark instead of inverting to white when in dark mode.
Improved HTML and JavaScript for our color mode toggle script. The selector for changing the active SVG has been improved, and the markup made more accessible with ARIA attributes.
Improved docs code syntax colors and more across light and dark modes.
Typography
We no longer set a color for
$headings-color-dark
--bs-heading-color
for dark mode. To avoid several problems of headings within components appearing the wrong color, we’ve set the Sass variable to
null
and added a
null
check like we use on the default light mode.
Components
Cards now have a
color
set on them to improve rendering across color modes.
Added new
.nav-underline
variant for our navigation with a simpler bottom border under the active nav link.
See the docs for an example.
Navs now have new
:focus-visible
styles that better match our custom button focus styles.
Helpers
Added new
.icon-link
helper to quickly place and align Bootstrap Icons alongside a textual link. Icon links support our new link utilities, too.
Added new focus ring helper for removing the default
outline
and setting a custom
box-shadow
focus ring.
Utilities
Renamed Sass and CSS variables
${color}-text
${color}-text-emphasis
to match their associated utilities.
Added new
.link-body-emphasis
helper alongside our
colored links
. This creates a colored link using our color mode responsive emphasis color.
Added new link utilities for link color opacity, underline offset, underline color, and underline opacity.
Explore the new links utilities.
CSS variable based
border-width
utilities have been reverted to set their property directly (as was done prior to v5.2.0). This avoids inheritance issues across nested elements, including tables.
Added new
.border-black
utility to match our
.text-black
.bg-black
utilities.
Deprecated
.text-muted
utility and
$text-muted
Sass variable have been deprecated and replaced with
.text-body-secondary
$body-secondary-color
Docs
Examples are now displayed with the appropriate light or dark color mode as dictated by the setting in our docs. Each example has an individual color mode picker.
Improved included JavaScript for live Toast demo.
Added
twbs/examples
repo contents to the top of the Examples page.
Tooling
Added SCSS testing via True to help test our utilities API and other customizations.
Replaced instances of our bootstrap-npm-starter project with the newer and more complete
twbs/examples repo
For a complete list of changes,
see the v5.3.0-alpha2 project on GitHub
Color modes!
Learn more by reading the new
color modes documentation
Global support for light (default) and dark color modes.
Set color mode globally on the
:root
element, on groups of elements and components with a wrapper class, or directly on components, with
data-bs-theme="light|dark"
. Also included is a new
color-mode()
mixin that can output a ruleset with the
data-bs-theme
selector or a media query, depending on your preference.
Deprecated
Color modes replace dark variants for components, so
.btn-close-white
.carousel-dark
.dropdown-menu-dark
, and
.navbar-dark
are deprecated.
New extended color system.
We’ve added new theme colors (but not in
$theme-colors
) for a more nuanced, system-wide color palette with new secondary, tertiary, and emphasis colors for
color
background-color
. These new colors are available as Sass variables, CSS variables, and utilities.
We’ve also expanded our theme color Sass variables, CSS variables, and utilities to include text emphasis, subtle background colors, and subtle border colors. These are available as Sass variables, CSS variables, and utilities.
Adds new
_variables-dark.scss
stylesheet to house dark-mode specific overrides. This stylesheet should be imported immediately after the existing
_variables.scss
file in your import stack.
diff --git a/scss/bootstrap.scss b/scss/bootstrap.scss
index 8f8296def..449d70487 100644
--- a/scss/bootstrap.scss
+++ b/scss/bootstrap.scss
@@ -6,6 +6,7 @@
// Configuration
@import "functions";
@import "variables";
@import "variables-dark";
@import "maps";
@import "mixins";
@import "utilities";
CSS variables
Restores CSS variables for breakpoints, though we don’t use them in our media queries as they’re not supported. However, these can be useful in JS-specific contexts.
Per the color modes update, we’ve added new utilities for new Sass CSS variables
secondary
tertiary
text and background colors, plus
{color}-bg-subtle
{color}-border-subtle
, and
{color}-text-emphasis
for our theme colors. These new colors are available through Sass and CSS variables (but not our color maps) with the express goal of making it easier to customize across multiple colors modes like light and dark.
Adds additional variables for alerts,
.btn-close
, and
.offcanvas
--bs-heading-color
variable is back with an update and dark mode support. First, we now check for a
null
value on the associated Sass variable,
$headings-color
, before trying to output the CSS variable, so by default it’s not present in our compiled CSS. Second, we use the CSS variable with a fallback value,
inherit
, allowing the original behavior to persist, but also allowing for overrides.
Converts links to use CSS variables for styling
color
, but not
text-decoration
. Colors are now set with
--bs-link-color-rgb
--bs-link-opacity
rgba()
color, allowing you to customize the translucency with ease. The
a:hover
pseudo-class now overrides
--bs-link-color-rgb
instead of explicitly setting the
color
property.
--bs-border-width
is now being used in more components for greater control over default global styling.
Adds new root CSS variables for our
box-shadow
s, including
--bs-box-shadow
--bs-box-shadow-sm
--bs-box-shadow-lg
, and
--bs-box-shadow-inset
Components
Alert
Alert variants are now styled via CSS variables.
Deprecated
alert-variant()
mixin is now deprecated. We now
use a Sass loop
directly to modify the component’s default CSS variables for each variant.
List group
List group item variants are now styled via CSS variables.
Deprecated
list-group-item-variant()
mixin is now deprecated. We now
use a Sass loop
directly to modify the component’s default CSS variables for each variant.
Dropdowns
Deprecated
.dropdown-menu-dark
class has been deprecated and replaced with
data-bs-theme="dark"
on the dropdown or any parent element.
See the docs for an example.
Close button
Deprecated
.btn-close-white
class has been deprecated and replaced with
data-bs-theme="dark"
on the close button or any parent element.
See the docs for an example.
Navbar
Deprecated
.navbar-dark
class has been deprecated and replaced with
data-bs-theme="dark"
on the navbar or any parent element.
See the docs for updated examples.
Progress bars
The markup for
progress bars
has been updated in v5.3.0. Due to the placement of
role
and various
aria-
attributes on the inner
.progress-bar
element,
some screen readers were not announcing zero value progress bars
. Now,
role="progressbar"
and the relevant
aria-*
attributes are on the outer
.progress
element, leaving the
.progress-bar
purely for the visual presentation of the bar and optional label.
While we recommend adopting the new markup for improved compatibility with all screen readers, note that the legacy progress bar structure will continue to work as before.
<!-- Previous markup -->
class
progress
class
progress-bar
role
progressbar
aria-label
Basic example
style
width
aria-valuenow
aria-valuemin
aria-valuemax
<!-- New markup -->
class
progress
role
progressbar
aria-label
Basic example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar
style
width
We’ve also introduced a new
.progress-stacked
class to more logically wrap
multiple progress bars
into a single stacked progress bar.
<!-- Previous markup -->
class
progress
class
progress-bar
role
progressbar
aria-label
Segment one
style
width
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar bg-success
role
progressbar
aria-label
Segment two
style
width
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar bg-info
role
progressbar
aria-label
Segment three
style
width
aria-valuenow
aria-valuemin
aria-valuemax
<!-- New markup -->
class
progress-stacked
class
progress
role
progressbar
aria-label
Segment one
aria-valuenow
aria-valuemin
aria-valuemax
style
width
class
progress-bar
class
progress
role
progressbar
aria-label
Segment two
aria-valuenow
aria-valuemin
aria-valuemax
style
width
class
progress-bar bg-success
class
progress
role
progressbar
aria-label
Segment three
aria-valuenow
aria-valuemin
aria-valuemax
style
width
class
progress-bar bg-info
Forms
.form-control
is now styled with CSS variables to support color modes. This includes the addition of two new root CSS variables for the default and disabled form control backgrounds.
.form-check
.form-switch
components are now built with CSS variables for setting the
background-image
. The usage here differs from other components in that the various focus, active, etc states for each component aren’t set on the base class. Instead, the states override one variable (e.g.,
--bs-form-switch-bg
Floating form labels now have a
background-color
to fix support for
<textarea>
elements. Additional changes have been made to also support disabled states and more.
Fixed display of date and time inputs in WebKit based browsers.
Utilities
Deprecated
.text-muted
will be replaced by
.text-body-secondary
in v6.
With the addition of the expanded theme colors and variables, the
.text-muted
variables and utility have been deprecated with v5.3.0. Its default value has also been reassigned to the new
--bs-secondary-color
CSS variable to better support color modes. It will be removed in v6.0.0.
Adds new
.overflow-x
.overflow-y
, and several
.object-fit-*
utilities.
The object-fit property is used to specify how an
<img>
<video>
should be resized to fit its container, giving us a responsive alternative to using
background-image
for a resizable fill/fit image.
Adds new
.fw-medium
utility.
Added new
.z-*
utilities
z-index
Box shadow utilities
(and Sass variables) have been updated for dark mode. They now use
--bs-body-color-rgb
to generate the
rgba()
color values, allowing them to easily adapt to color modes based on the specified foreground color.
For a complete list of changes,
see the v5.3.0 project on GitHub
v5.2.0
Refreshed design
most notably through refined
border-radius
values on buttons and form controls
. Our documentation also has been updated with a new homepage, simpler docs layout that no longer collapses sections of the sidebar, and more prominent examples of
More CSS variables
We’ve updated all our components to use CSS variables.
While Sass still underpins everything, each component has been updated to include CSS variables on the component base classes (e.g.,
.btn
), allowing for more real-time customization of Bootstrap. In subsequent releases, we'll continue to expand our use of CSS variables into our layout, forms, helpers, and utilities. Read more about CSS variables in each component on their respective documentation pages.
Our CSS variable usage will be somewhat incomplete until Bootstrap 6. While we’d love to fully implement these across the board, they do run the risk of causing breaking changes. For example, setting
$alert-border-width: var(--bs-border-width)
in our source code breaks potential Sass in your own code if you were doing
$alert-border-width * 2
for some reason.
As such, wherever possible, we will continue to push towards more CSS variables, but please recognize our implementation may be slightly limited in v5.
_maps.scss
_maps.scss
It pulls out several Sass maps from
_variables.scss
to fix an issue where updates to an original map were not applied to secondary maps that extend them. For example, updates to
$theme-colors
were not being applied to other theme maps that relied on
$theme-colors
, breaking key customization workflows. In short, Sass has a limitation where once a default variable or map has been
used
, it cannot be updated.
There’s a similar shortcoming with CSS variables when they’re used to compose other CSS variables.
This is why variable customizations in Bootstrap have to come after
@import "functions"
, but before
@import "variables"
and the rest of our import stack. The same applies to Sass maps—you must override the defaults before they get used. The following maps have been moved to the new
_maps.scss
$theme-colors-rgb
$utilities-colors
$utilities-text
$utilities-text-colors
$utilities-bg
$utilities-bg-colors
$negative-spacers
$gutters
Your custom Bootstrap CSS builds should now look something like this with a separate maps import.
// Functions come first
@import "functions";
// Optional variable overrides here
$custom-color: #df711b;
$custom-theme-colors: (
"custom": $custom-color
// Variables come next
@import "variables";
// Optional Sass map overrides here
$theme-colors: map-merge($theme-colors, $custom-theme-colors);
// Followed by our default maps
@import "maps";
// Rest of our imports
@import "mixins";
@import "utilities";
@import "root";
@import "reboot";
// etc
New utilities
Expanded
font-weight
utilities
to include
.fw-semibold
for semibold fonts.
Expanded
border-radius
utilities
to include two new sizes,
.rounded-4
.rounded-5
, for more options.
Additional changes
Introduced new
$enable-container-classes
option. —
Now when opting into the experimental CSS Grid layout,
.container-*
classes will still be compiled, unless this option is set to
false
. Containers also now keep their gutter values.
Offcanvas component now has
responsive variations
The original
.offcanvas
class remains unchanged—it hides content across all viewports. To make it responsive, change that
.offcanvas
class to any
.offcanvas-{sm|md|lg|xl|xxl}
class.
Thicker table dividers are now opt-in. —
We’ve removed the thicker and more difficult to override border between table groups and moved it to an optional class you can apply,
.table-group-divider
See the table docs for an example.
Scrollspy has been rewritten
to use the Intersection Observer API
, which means you no longer need relative parent wrappers, deprecates
offset
config, and more. Look for your Scrollspy implementations to be more accurate and consistent in their nav highlighting.
Popovers and tooltips now use CSS variables.
Some CSS variables have been updated from their Sass counterparts to reduce the number of variables. As a result, three variables have been deprecated in this release:
$popover-arrow-color
$popover-arrow-outer-color
, and
$tooltip-arrow-color
Added new
.text-bg-{color}
helpers.
Instead of setting individual
.text-*
.bg-*
utilities, you can now use
.text-bg-*
helpers
to set a
background-color
with contrasting foreground
color
Added
.form-check-reverse
modifier to flip the order of labels and associated checkboxes/radios.
Added
striped columns
support to tables via the new
.table-striped-columns
class.
For a complete list of changes,
see the v5.2.0 project on GitHub
v5.1.0
Added experimental support for
CSS Grid layout
This is a work in progress, and is not yet ready for production use, but you can opt into the new feature via Sass. To enable it, disable the default grid, by setting
$enable-grid-classes: false
and enable the CSS Grid by setting
$enable-cssgrid: true
Updated navbars to support offcanvas. —
offcanvas drawers in any navbar
with the responsive
.navbar-expand-*
classes and some offcanvas markup.
Added new
placeholder component
Our newest component, a way to provide temporary blocks in lieu of real content to help indicate that something is still loading in your site or app.
Collapse plugin now supports
horizontal collapsing
.collapse-horizontal
to your
.collapse
to collapse the
width
instead of the
height
. Avoid browser repainting by setting a
min-height
height
Added new stack and vertical rule helpers. —
Quickly apply multiple flexbox properties to quickly create custom layouts with
stacks
. Choose from horizontal (
.hstack
) and vertical (
.vstack
) stacks. Add vertical dividers similar to
<hr>
elements with the
helpers
Added new global
:root
CSS variables. —
Added several new CSS variables to the
:root
level for controlling
<body>
styles. More are in the works, including across our utilities and components, but for now read up
CSS variables in the Customize section
Overhauled color and background utilities to use CSS variables, and added new
text opacity
background opacity
utilities. —
.text-*
.bg-*
utilities are now built with CSS variables and
rgba()
color values, allowing you to easily customize any utility with new opacity utilities.
Added new snippet examples based to show how to customize our components. —
Pull ready to use customized components and other common design patterns with our new
Snippets examples
. Includes
footers
dropdowns
list groups
, and
modals
Removed unused positioning styles from popovers and tooltips
as these are handled solely by Popper.
$tooltip-margin
has been deprecated and set to
null
in the process.
Want more information?
Read the v5.1.0 blog post.
v5.0.0
Hey there!
Changes to our first major release of Bootstrap 5, v5.0.0, are documented below. They don’t reflect the additional changes shown above.
Dependencies
Dropped jQuery.
Upgraded from Popper v1.x to Popper v2.x.
Replaced Libsass with Dart Sass as our Sass compiler given Libsass was deprecated.
Migrated from Jekyll to Hugo for building our documentation
Browser support
Dropped Internet Explorer 10 and 11
Dropped Microsoft Edge < 16 (Legacy Edge)
Dropped Firefox < 60
Dropped Safari < 12
Dropped iOS Safari < 12
Dropped Chrome < 60
Documentation changes
Redesigned homepage, docs layout, and footer.
Added
new Parcel guide
Added
new Customize section
, replacing
v4’s Theming page
, with new details on Sass, global configuration options, color schemes, CSS variables, and more.
Reorganized all form documentation into
new Forms section
, breaking apart the content into more focused pages.
Similarly, updated
the Layout section
, to flesh out grid content more clearly.
Renamed “Navs” component page to "Navs & Tabs".
Renamed “Checks” page to "Checks & radios".
Redesigned the navbar and added a new subnav to make it easier to get around our sites and docs versions.
Added new keyboard shortcut for the search field:
Ctrl
Sass
We’ve ditched the default Sass map merges to make it easier to remove redundant values. Keep in mind you now have to define all values in the Sass maps like
$theme-colors
. Check out how to deal with
Sass maps
Breaking
Renamed
color-yiq()
function and related variables to
color-contrast()
as it’s no longer related to YIQ color space.
See #30168.
$yiq-contrasted-threshold
is renamed to
$min-contrast-ratio
$yiq-text-dark
$yiq-text-light
are respectively renamed to
$color-contrast-dark
$color-contrast-light
Breaking
Media query mixins parameters have changed for a more logical approach.
media-breakpoint-down()
uses the breakpoint itself instead of the next breakpoint (e.g.,
media-breakpoint-down(lg)
instead of
media-breakpoint-down(md)
targets viewports smaller than
Similarly, the second parameter in
media-breakpoint-between()
also uses the breakpoint itself instead of the next breakpoint (e.g.,
media-breakpoint-between(sm, lg)
instead of
media-breakpoint-between(sm, md)
targets viewports between
Breaking
Removed print styles and
$enable-print-styles
variable. Print display classes are still around.
See #28339
Breaking
Dropped
color()
theme-color()
, and
gray()
functions in favor of variables.
See #29083
Breaking
Renamed
theme-color-level()
function to
color-level()
and now accepts any color you want instead of only
$theme-color
colors.
See #29083
Watch out:
color-level()
was later on dropped in
v5.0.0-alpha3
Breaking
Renamed
$enable-prefers-reduced-motion-media-query
$enable-pointer-cursor-for-buttons
$enable-reduced-motion
$enable-button-pointers
for brevity.
Breaking
Removed the
bg-gradient-variant()
mixin. Use the
.bg-gradient
class to add gradients to elements instead of the generated
.bg-gradient-*
classes.
Breaking
Removed previously deprecated mixins:
hover
hover-focus
plain-hover-focus
, and
hover-focus-active
float()
form-control-mixin()
nav-divider()
retina-img()
text-hide()
(also dropped the associated utility class,
.text-hide
visibility()
form-control-focus()
Breaking
Renamed
scale-color()
function to
shift-color()
to avoid collision with Sass’s own color scaling function.
box-shadow
mixins now allow
null
values and drop
none
from multiple arguments.
See #30394
border-radius()
mixin now has a default value.
Color system
The color system which worked with
color-level()
$theme-color-interval
was removed in favor of a new color system. All
lighten()
darken()
functions in our codebase are replaced by
tint-color()
shade-color()
. These functions will mix the color with either white or black instead of changing its lightness by a fixed amount. The
shift-color()
will either tint or shade a color depending on whether its weight parameter is positive or negative.
See #30622
for more details.
Added new tints and shades for every color, providing nine separate colors for each base color, as new Sass variables.
Improved color contrast. Bumped color contrast ratio from 3:1 to 4.5:1 and updated blue, green, cyan, and pink colors to ensure WCAG 2.2 AA contrast. Also changed our color contrast color from
$gray-900
$black
To support our color system, we’ve added new custom
tint-color()
shade-color()
functions to mix our colors appropriately.
Grid updates
New breakpoint!
Added new
breakpoint for
1400px
and up. No changes to all other breakpoints.
Improved gutters.
Gutters are now set in rems, and are narrower than v4 (
1.5rem
, or about
24px
, down from
30px
). This aligns our grid system’s gutters with our spacing utilities.
Added new
gutter class
.g-*
.gx-*
, and
.gy-*
) to control horizontal/vertical gutters, horizontal gutters, and vertical gutters.
Breaking
Renamed
.no-gutters
.g-0
to match new gutter utilities.
Columns no longer have
position: relative
applied, so you may have to add
.position-relative
to some elements to restore that behavior.
Breaking
Dropped several
.order-*
classes that often went unused. We now only provide
.order-0
.order-5
out of the box.
Breaking
Dropped the
.media
component as it can be easily replicated with utilities.
See #28265
and the
flex utilities page for an example
Breaking
now only applies
box-sizing: border-box
to the column instead of resetting the global box-sizing. This way, our grid styles can be used in more places without interference.
$enable-grid-classes
no longer disables the generation of container classes anymore.
See #29146.
Updated the
make-col
mixin to default to equal columns without a specified size.
Content, Reboot, etc
is now enabled by default.
Headings using the
font-size()
mixin will automatically adjust their
font-size
to scale with the viewport.
This feature was previously opt-in with v4.
Breaking
Overhauled our display typography to replace our
$display-*
variables and with a
$display-font-sizes
Sass map. Also removed the individual
$display-*-weight
variables for a single
$display-font-weight
and adjusted
font-size
Added two new
.display-*
heading sizes,
.display-5
.display-6
Links are underlined by default
(not just on hover), unless they’re part of specific components.
Redesigned tables
to refresh their styles and rebuild them with CSS variables for more control over styling.
Breaking
Nested tables do not inherit styles anymore.
Breaking
.thead-light
.thead-dark
are dropped in favor of the
.table-*
variant classes which can be used for all table elements (
thead
tbody
tfoot
Breaking
table-row-variant()
mixin is renamed to
table-variant()
and accepts only 2 parameters:
$color
(color name) and
$value
(color code). The border color and accent colors are automatically calculated based on the table factor variables.
Split table cell padding variables into
Breaking
Dropped
.pre-scrollable
class.
See #29135
Breaking
.text-*
utilities do not add hover and focus states to links anymore.
.link-*
helper classes can be used instead.
See #29267
Breaking
Dropped
.text-justify
class.
See #29793
Breaking
<hr>
elements now use
height
instead of
border
to better support the
size
attribute. This also enables use of padding utilities to create thicker dividers (e.g.,
<hr class="py-1">
Reset default horizontal
padding-left
<ul>
<ol>
elements from browser default
40px
2rem
Added
$enable-smooth-scroll
, which applies
scroll-behavior: smooth
globally—except for users asking for reduced motion through
prefers-reduced-motion
media query.
See #31877
Horizontal direction specific variables, utilities, and mixins have all been renamed to use logical properties like those found in flexbox layouts—e.g.,
start
in lieu of
left
right
Forms
Added new floating forms!
We’ve promoted the Floating labels example to fully supported form components.
See the new Floating labels page.
Breaking
Consolidated native and custom form elements.
Checkboxes, radios, selects, and other inputs that had native and custom classes in v4 have been consolidated. Now nearly all our form elements are entirely custom, most without the need for custom HTML.
.custom-control.custom-checkbox
is now
.form-check
.custom-control.custom-radio
is now
.form-check
.custom-control.custom-switch
is now
.form-check.form-switch
.custom-select
is now
.form-select
.custom-file
.form-control-file
have been replaced by custom styles on top of
.form-control
.custom-range
is now
.form-range
Dropped native
.form-control-file
.form-control-range
Breaking
Dropped
.input-group-append
.input-group-prepend
. You can now just add buttons and
.input-group-text
as direct children of the input groups.
The longstanding
Missing border radius on input group with validation feedback bug
is finally fixed by adding an additional
.has-validation
class to input groups with validation.
Breaking
Dropped form-specific layout classes for our grid system.
Use our grid and utilities instead of
.form-group
.form-row
, or
.form-inline
Breaking
Form labels now require
.form-label
Breaking
.form-text
no longer sets
display
, allowing you to create inline or block help text as you wish just by changing the HTML element.
Form controls no longer used fixed
height
when possible, instead deferring to
min-height
to improve customization and compatibility with other components.
Validation icons are no longer applied to
<select>
s with
multiple
Rearranged source Sass files under
scss/forms/
, including input group styles.
Components
Unified
padding
values for alerts, breadcrumbs, cards, dropdowns, list groups, modals, popovers, and tooltips to be based on our
$spacer
variable.
See #30564
Accordion
Added
new accordion component
Alerts
Alerts now have
examples with icons
Removed custom styles for
<hr>
s in each alert since they already use
currentColor
Badges
Breaking
Dropped all
.badge-*
color classes for background utilities (e.g., use
.bg-primary
instead of
.badge-primary
Breaking
Dropped
.badge-pill
—use the
.rounded-pill
utility instead.
Breaking
Removed hover and focus styles for
<button>
elements.
Increased default padding for badges from
.25em
.5em
.35em
.65em
Breadcrumbs
Simplified the default appearance of breadcrumbs by removing
padding
background-color
, and
border-radius
Added new CSS custom property
--bs-breadcrumb-divider
for easy customization without needing to recompile CSS.
Buttons
Breaking
Toggle buttons
, with checkboxes or radios, no longer require JavaScript and have new markup.
We no longer require a wrapping element, add
.btn-check
to the
<input>
, and pair it with any
.btn
classes on the
<label>
See #30650
The docs for this has moved from our Buttons page to the new Forms section.
Breaking
Dropped
.btn-block
for utilities.
Instead of using
.btn-block
on the
.btn
, wrap your buttons with
.d-grid
and a
.gap-*
utility to space them as needed. Switch to responsive classes for even more control over them.
Read the docs for some examples.
Updated our
button-variant()
button-outline-variant()
mixins to support additional parameters.
Updated buttons to ensure increased contrast on hover and active states.
Disabled buttons now have
pointer-events: none;
Card
Breaking
Dropped
.card-deck
in favor of our grid. Wrap your cards in column classes and add a parent
.row-cols-*
container to recreate card decks (but with more control over responsive alignment).
Breaking
Dropped
.card-columns
in favor of Masonry.
See #28922
Breaking
Replaced the
.card
based accordion with a
new Accordion component
Carousel
Added new
.carousel-dark
variant
for dark text, controls, and indicators (great for lighter backgrounds).
Replaced chevron icons for carousel controls with new SVGs from
Close button
Breaking
Renamed
.close
.btn-close
for a less generic name.
Close buttons now use a
background-image
(embedded SVG) instead of a
&times;
in the HTML, allowing for easier customization without the need to touch your markup.
Added new
.btn-close-white
variant that uses
filter: invert(1)
to enable higher contrast dismiss icons against darker backgrounds.
Collapse
Removed scroll anchoring for accordions.
Dropdowns
Added new
.dropdown-menu-dark
variant and associated variables for on-demand dark dropdowns.
Added new variable for
$dropdown-padding-x
Darkened the dropdown divider for improved contrast.
Breaking
All the events for the dropdown are now triggered on the dropdown toggle button and then bubbled up to the parent element.
Dropdown menus now have a
data-bs-popper="static"
attribute set when the positioning of the dropdown is static, or dropdown is in the navbar. This is added by our JavaScript and helps us use custom position styles without interfering with Popper’s positioning.
Breaking
Dropped
flip
option for dropdown plugin in favor of native Popper configuration. You can now disable the flipping behavior by passing an empty array for
fallbackPlacements
option in
flip
modifier.
Dropdown menus can now be clickable with a new
autoClose
option to handle the
auto close behavior
. You can use this option to accept the click inside or outside the dropdown menu to make it interactive.
Dropdowns now support
.dropdown-item
s wrapped in
<li>
Jumbotron
Breaking
Dropped the jumbotron component as it can be replicated with utilities.
See our new Jumbotron example for a demo.
List group
Added new
.list-group-numbered
modifier
to list groups.
Navs and tabs
Added new
null
variables for
font-size
font-weight
color
, and
:hover
color
to the
.nav-link
class.
Navbars
Breaking
Navbars now require a container within (to drastically simplify spacing requirements and CSS required).
Breaking
.active
class can no longer be applied to
.nav-item
s, it must be applied directly on
.nav-link
Offcanvas
Added the new
offcanvas component
Pagination
Pagination links now have customizable
margin-left
that are dynamically rounded on all corners when separated from one another.
Added
transition
s to pagination links.
Popovers
Breaking
Renamed
.arrow
.popover-arrow
in our default popover template.
Renamed
whiteList
option to
allowList
Spinners
Spinners now honor
prefers-reduced-motion: reduce
by slowing down animations.
See #31882
Improved spinner vertical alignment.
Toasts
Toasts can now be
positioned
in a
.toast-container
with the help of
positioning utilities
Changed default toast duration to 5 seconds.
Removed
overflow: hidden
from toasts and replaced with proper
border-radius
s with
calc()
functions.
Tooltips
Breaking
Renamed
.arrow
.tooltip-arrow
in our default tooltip template.
Breaking
The default value for the
fallbackPlacements
is changed to
['top', 'right', 'bottom', 'left']
for better placement of popper elements.
Breaking
Renamed
whiteList
option to
allowList
Utilities
Breaking
Renamed several utilities to use logical property names instead of directional names with the addition of RTL support:
Renamed
.float-left
.float-right
.float-start
.float-end
Renamed
.border-left
.border-right
.border-start
.border-end
Renamed
.rounded-left
.rounded-right
.rounded-start
.rounded-end
Renamed
.ml-*
.mr-*
.ms-*
.me-*
Renamed
.pl-*
.pr-*
.ps-*
.pe-*
Renamed
.text-*-left
.text-*-right
.text-*-start
.text-*-end
Breaking
Disabled negative margins by default.
Added new
.bg-body
class for quickly setting the
<body>
’s background to additional elements.
Added new
position utilities
right
bottom
, and
left
. Values include
, and
100%
for each property.
Added new
.translate-middle-x
.translate-middle-y
utilities to horizontally or vertically center absolute/fixed positioned elements.
Added new
border-width
utilities
Breaking
Renamed
.text-monospace
.font-monospace
Breaking
Removed
.text-hide
as it’s an antiquated method for hiding text that shouldn’t be used anymore.
Added
.fs-*
utilities for
font-size
utilities (with RFS enabled). These use the same scale as HTML’s default headings (1-6, large to small), and can be modified via Sass map.
Breaking
Renamed
.font-weight-*
utilities as
.fw-*
for brevity and consistency.
Breaking
Renamed
.font-italic
utility to
.fst-italic
for brevity and consistency with new
.fst-normal
utility.
Added
.d-grid
to display utilities and new
utilities (
.gap
) for CSS Grid and flexbox layouts.
Breaking
Removed
.rounded-sm
rounded-lg
, and introduced a new scale of classes,
.rounded-0
.rounded-3
See #31687
Added new
line-height
utilities:
.lh-1
.lh-sm
.lh-base
.lh-lg
. See
here
Moved the
.d-none
utility in our CSS to give it more weight over other display utilities.
Extended the
.visually-hidden-focusable
helper to also work on containers, using
:focus-within
Helpers
Breaking
Responsive embed helpers have been renamed to
ratio helpers
with new class names and improved behaviors, as well as a helpful CSS variable.
Classes have been renamed to change
in the aspect ratio. For example,
.ratio-16by9
is now
.ratio-16x9
We’ve dropped the
.embed-responsive-item
and element group selector in favor of a simpler
.ratio > *
selector. No more class is needed, and the ratio helper now works with any HTML element.
$embed-responsive-aspect-ratios
Sass map has been renamed to
$aspect-ratios
and its values have been simplified to include the class name and the percentage as the
key: value
pair.
CSS variables are now generated and included for each value in the Sass map. Modify the
--bs-aspect-ratio
variable on the
.ratio
to create any
custom aspect ratio
Breaking
"Screen reader" classes are now
"visually hidden" classes
Changed the Sass file from
scss/helpers/_screenreaders.scss
scss/helpers/_visually-hidden.scss
Renamed
.sr-only
.sr-only-focusable
.visually-hidden
.visually-hidden-focusable
Renamed
sr-only()
sr-only-focusable()
mixins to
visually-hidden()
visually-hidden-focusable()
now also includes our helpers. Helpers don’t need to be imported in custom builds anymore.
JavaScript
Dropped jQuery dependency
and rewrote plugins to be in regular JavaScript.
Breaking
Data attributes for all JavaScript plugins are now namespaced to help distinguish Bootstrap functionality from third parties and your own code. For example, we use
data-bs-toggle
instead of
data-toggle
All plugins can now accept a CSS selector as the first argument.
You can either pass a DOM element or any valid CSS selector to create a new instance of the plugin:
const
modal
Modal
'#myModal'
const
dropdown
Dropdown
'[data-bs-toggle="dropdown"]'
popperConfig
can be passed as a function that accepts the Bootstrap’s default Popper config as an argument, so that you can merge this default configuration in your way.
Applies to dropdowns, popovers, and tooltips.
The default value for the
fallbackPlacements
is changed to
['top', 'right', 'bottom', 'left']
for better placement of Popper elements.
Applies to dropdowns, popovers, and tooltips.
Removed underscore from public static methods like
_getInstance()
getInstance()
Removed
util.js
, with its functionality now integrated into individual plugins. If you previously included
util.js
manually, you can safely remove it, as it is no longer needed. Each plugin now contains only the utilities it requires, enhancing modularity and reducing dependencies.

--- 069_utilities_api.txt ---
official Sass docs
to get started.
$utilities
map contains all our utilities and is later merged with your custom
$utilities
map, if present. The utility map contains a keyed list of utility groups which accept the following options:
Option
Type
Default value
Description
property
Required
Name of the property, this can be a string or an array of strings (e.g., horizontal paddings or margins).
values
Required
List of values, or a map if you don’t want the class name to be the same as the value. If
null
is used as map key,
class
is not prepended to the class name.
class
Optional
null
Name of the generated class. If not provided and
property
is an array of strings,
class
will default to the first element of the
property
array. If not provided and
property
is a string, the
values
keys are used for the
class
names.
css-var
Optional
false
Boolean to generate CSS variables instead of CSS rules.
css-variable-name
Optional
null
Custom un-prefixed name for the CSS variable inside the ruleset.
local-vars
Optional
null
Map of local CSS variables to generate in addition to the CSS rules.
state
Optional
null
List of pseudo-class variants (e.g.,
:hover
:focus
) to generate.
responsive
Optional
false
Boolean indicating if responsive classes should be generated.
Optional
false
Boolean to enable
fluid rescaling with RFS
print
Optional
false
Boolean indicating if print classes need to be generated.
Optional
true
Boolean indicating if utility should be kept in RTL.
API explained
All utility variables are added to the
$utilities
variable within our
_utilities.scss
stylesheet. Each group of utilities looks something like this:
$utilities
"opacity"
property
opacity
values
Which outputs the following:
.opacity-0
opacity
.opacity-25
opacity
.opacity-50
opacity
.opacity-75
opacity
.opacity-100
opacity
Property
The required
property
key must be set for any utility, and it must contain a valid CSS property. This property is used in the generated utility’s ruleset. When the
class
key is omitted, it also serves as the default class name. Consider the
text-decoration
utility:
$utilities
"text-decoration"
property
text-decoration
values
none underline line-through
Output:
.text-decoration-none
text-decoration
none
!important
.text-decoration-underline
text-decoration
underline
!important
.text-decoration-line-through
text-decoration
line-through
!important
Values
Use the
values
key to specify which values for the specified
property
should be used in the generated class names and rules. Can be a list or map (set in the utilities or in a Sass variable).
As a list, like with
text-decoration
utilities
values
none underline line-through
As a map, like with
opacity
utilities
values
As a Sass variable that sets the list or map, as in our
position
utilities
values
$position-values
Class
Use the
class
option to change the class prefix used in the compiled CSS. For example, to change from
.opacity-*
.o-*
$utilities
"opacity"
property
opacity
class
values
Output:
.o-0
opacity
!important
.o-25
opacity
!important
.o-50
opacity
!important
.o-75
opacity
!important
.o-100
opacity
!important
class: null
, generates classes for each of the
values
keys:
$utilities
"visibility"
property
visibility
class
null
values
visible
visible
invisible
hidden
Output:
.visible
visibility
visible
!important
.invisible
visibility
hidden
!important
CSS variable utilities
Set the
css-var
boolean option to
true
and the API will generate local CSS variables for the given selector instead of the usual
property: value
rules. Add an optional
css-variable-name
to set a different CSS variable name than the class name.
Consider our
.text-opacity-*
utilities. If we add the
css-variable-name
option, we'll get a custom output.
$utilities
"text-opacity"
css-var
true
css-variable-name
text-alpha
class
text-opacity
values
Output:
.text-opacity-25
--bs-text-alpha
.text-opacity-50
--bs-text-alpha
.text-opacity-75
--bs-text-alpha
.text-opacity-100
--bs-text-alpha
Local CSS variables
Use the
local-vars
option to specify a Sass map that will generate local CSS variables within the utility class’s ruleset. Please note that it may require additional work to consume those local CSS variables in the generated CSS rules. For example, consider our
.bg-*
utilities:
$utilities
"background-color"
property
background-color
class
local-vars
"bg-opacity"
values
map-merge
$utilities-bg-colors
"transparent"
transparent
Output:
.bg-primary
--bs-bg-opacity
background-color
rgba
--bs-primary-rgb
--bs-bg-opacity
!important
States
Use the
state
option to generate pseudo-class variations. Example pseudo-classes are
:hover
:focus
. When a list of states are provided, classnames are created for that pseudo-class. For example, to change opacity on hover, add
state: hover
and you’ll get
.opacity-hover:hover
in your compiled CSS.
Need multiple pseudo-classes? Use a space-separated list of states:
state: hover focus
$utilities
"opacity"
property
opacity
class
opacity
state
hover
values
Output:
.opacity-0-hover:hover
opacity
!important
.opacity-25-hover:hover
opacity
!important
.opacity-50-hover:hover
opacity
!important
.opacity-75-hover:hover
opacity
!important
.opacity-100-hover:hover
opacity
!important
Responsive
Add the
responsive
boolean to generate responsive utilities (e.g.,
.opacity-md-25
) across
all breakpoints
$utilities
"opacity"
property
opacity
responsive
true
values
Output:
.opacity-0
opacity
!important
.opacity-25
opacity
!important
.opacity-50
opacity
!important
.opacity-75
opacity
!important
.opacity-100
opacity
!important
@media
min-width
576px
.opacity-sm-0
opacity
!important
.opacity-sm-25
opacity
!important
.opacity-sm-50
opacity
!important
.opacity-sm-75
opacity
!important
.opacity-sm-100
opacity
!important
@media
min-width
768px
.opacity-md-0
opacity
!important
.opacity-md-25
opacity
!important
.opacity-md-50
opacity
!important
.opacity-md-75
opacity
!important
.opacity-md-100
opacity
!important
@media
min-width
992px
.opacity-lg-0
opacity
!important
.opacity-lg-25
opacity
!important
.opacity-lg-50
opacity
!important
.opacity-lg-75
opacity
!important
.opacity-lg-100
opacity
!important
@media
min-width
1200px
.opacity-xl-0
opacity
!important
.opacity-xl-25
opacity
!important
.opacity-xl-50
opacity
!important
.opacity-xl-75
opacity
!important
.opacity-xl-100
opacity
!important
@media
min-width
1400px
.opacity-xxl-0
opacity
!important
.opacity-xxl-25
opacity
!important
.opacity-xxl-50
opacity
!important
.opacity-xxl-75
opacity
!important
.opacity-xxl-100
opacity
!important
Print
Enabling the
print
option will
also
generate utility classes for print, which are only applied within the
@media print { ... }
media query.
$utilities
"opacity"
property
opacity
print
true
values
Output:
.opacity-0
opacity
!important
.opacity-25
opacity
!important
.opacity-50
opacity
!important
.opacity-75
opacity
!important
.opacity-100
opacity
!important
@media
print
.opacity-print-0
opacity
!important
.opacity-print-25
opacity
!important
.opacity-print-50
opacity
!important
.opacity-print-75
opacity
!important
.opacity-print-100
opacity
!important
Importance
All utilities generated by the API include
!important
to ensure they override components and modifier classes as intended. You can toggle this setting globally with the
$enable-important-utilities
variable (defaults to
true
Using the API
Now that you’re familiar with how the utilities API works, learn how to add your own custom classes and modify our default utilities.
Override utilities
Override existing utilities by using the same key. For example, if you want additional responsive overflow utility classes, you can do this:
$utilities
"overflow"
responsive
true
property
overflow
values
visible hidden scroll auto
Add utilities
New utilities can be added to the default
$utilities
map with a
map-merge
. Make sure our required Sass files and
_utilities.scss
are imported first, then use the
map-merge
to add your additional utilities. For example, here’s how to add a responsive
cursor
utility with three values.
@import
"bootstrap/scss/functions"
@import
"bootstrap/scss/variables"
@import
"bootstrap/scss/variables-dark"
@import
"bootstrap/scss/maps"
@import
"bootstrap/scss/mixins"
@import
"bootstrap/scss/utilities"
$utilities
map-merge
$utilities
"cursor"
property
cursor
class
cursor
responsive
true
values
auto pointer grab
@import
"bootstrap/scss/utilities/api"
Modify utilities
Modify existing utilities in the default
$utilities
map with
map-get
map-merge
functions. In the example below, we’re adding an additional value to the
width
utilities. Start with an initial
map-merge
and then specify which utility you want to modify. From there, fetch the nested
"width"
map with
map-get
to access and modify the utility’s options and values.
@import
"bootstrap/scss/functions"
@import
"bootstrap/scss/variables"
@import
"bootstrap/scss/variables-dark"
@import
"bootstrap/scss/maps"
@import
"bootstrap/scss/mixins"
@import
"bootstrap/scss/utilities"
$utilities
map-merge
$utilities
"width"
map-merge
map-get
$utilities
"width"
values
map-merge
map-get
map-get
$utilities
"width"
"values"
@import
"bootstrap/scss/utilities/api"
Enable responsive
You can enable responsive classes for an existing set of utilities that are not currently responsive by default. For example, to make the
border
classes responsive:
@import
"bootstrap/scss/functions"
@import
"bootstrap/scss/variables"
@import
"bootstrap/scss/variables-dark"
@import
"bootstrap/scss/maps"
@import
"bootstrap/scss/mixins"
@import
"bootstrap/scss/utilities"
$utilities
map-merge
$utilities
"border"
map-merge
map-get
$utilities
"border"
responsive
true
@import
"bootstrap/scss/utilities/api"
This will now generate responsive variations of
.border
.border-0
for each breakpoint. Your generated CSS will look like this:
.border
.border-0
@media
min-width
576px
.border-sm
.border-sm-0
@media
min-width
768px
.border-md
.border-md-0
@media
min-width
992px
.border-lg
.border-lg-0
@media
min-width
1200px
.border-xl
.border-xl-0
@media
min-width
1400px
.border-xxl
.border-xxl-0
Rename utilities
Missing v4 utilities, or used to another naming convention? The utilities API can be used to override the resulting
class
of a given utility—for example, to rename
.ms-*
utilities to oldish
.ml-*
@import
"bootstrap/scss/functions"
@import
"bootstrap/scss/variables"
@import
"bootstrap/scss/variables-dark"
@import
"bootstrap/scss/maps"
@import
"bootstrap/scss/mixins"
@import
"bootstrap/scss/utilities"
$utilities
map-merge
$utilities
"margin-start"
map-merge
map-get
$utilities
"margin-start"
class
@import
"bootstrap/scss/utilities/api"
Remove utilities
Remove any of the default utilities with the
map-remove()
Sass function
@import
"bootstrap/scss/functions"
@import
"bootstrap/scss/variables"
@import
"bootstrap/scss/variables-dark"
@import
"bootstrap/scss/maps"
@import
"bootstrap/scss/mixins"
@import
"bootstrap/scss/utilities"
// Remove multiple utilities with a comma-separated list
$utilities
map-remove
$utilities
"width"
"float"
@import
"bootstrap/scss/utilities/api"
You can also use the
map-merge()
Sass function
and set the group key to
null
to remove the utility.
@import
"bootstrap/scss/functions"
@import
"bootstrap/scss/variables"
@import
"bootstrap/scss/variables-dark"
@import
"bootstrap/scss/maps"
@import
"bootstrap/scss/mixins"
@import
"bootstrap/scss/utilities"
$utilities
map-merge
$utilities
"width"
null
@import
"bootstrap/scss/utilities/api"
Add, remove, modify
You can add, remove, and modify many utilities all at once with the
map-merge()
Sass function
. Here’s how you can combine the previous examples into one larger map.
@import
"bootstrap/scss/functions"
@import
"bootstrap/scss/variables"
@import
"bootstrap/scss/variables-dark"
@import
"bootstrap/scss/maps"
@import
"bootstrap/scss/mixins"
@import
"bootstrap/scss/utilities"
$utilities
map-merge
$utilities
// Remove the `width` utility
"width"
null
// Make an existing utility responsive
"border"
map-merge
map-get
$utilities
"border"
responsive
true
// Add new utilities
"cursor"
property
cursor
class
cursor
responsive
true
values
auto pointer grab
@import
"bootstrap/scss/utilities/api"
Remove utility in RTL
Some edge cases make
RTL styling difficult
, such as line breaks in Arabic. Thus utilities can be dropped from RTL output by setting the
option to
false
$utilities
"word-wrap"
property
word-wrap word-break
class
text
values
break
break-word
false
Output:
/* rtl:begin:remove */
.text-break
word-wrap
break-word
!important
word-break
break-word
!important
/* rtl:end:remove */
This doesn’t output anything in RTL, thanks to
the RTLCSS
remove
control directive

--- 096_utilities_position.txt ---
Position values
Quick positioning classes are available, though they are not responsive.
class
position-static
class
position-relative
class
position-absolute
class
position-fixed
class
position-sticky
Arrange elements
Arrange elements easily with the edge positioning utilities. The format is
{property}-{position}
Where
property
is one of:
- for the vertical
position
start
- for the horizontal
left
position (in LTR)
bottom
- for the vertical
bottom
position
- for the horizontal
right
position (in LTR)
Where
position
is one of:
- for
edge position
- for
edge position
- for
100%
edge position
(You can add more position values by adding entries to the
$position-values
Sass map variable.)
html
class
position-relative
class
position-absolute top-0 start-0
class
position-absolute top-0 end-0
class
position-absolute top-50 start-50
class
position-absolute bottom-50 end-50
class
position-absolute bottom-0 start-0
class
position-absolute bottom-0 end-0
Center elements
In addition, you can also center the elements with the transform utility class
.translate-middle
This class applies the transformations
translateX(-50%)
translateY(-50%)
to the element which, in combination with the edge positioning utilities, allows you to absolute center an element.
html
class
position-relative
class
position-absolute top-0 start-0 translate-middle
class
position-absolute top-0 start-50 translate-middle
class
position-absolute top-0 start-100 translate-middle
class
position-absolute top-50 start-0 translate-middle
class
position-absolute top-50 start-50 translate-middle
class
position-absolute top-50 start-100 translate-middle
class
position-absolute top-100 start-0 translate-middle
class
position-absolute top-100 start-50 translate-middle
class
position-absolute top-100 start-100 translate-middle
By adding
.translate-middle-x
.translate-middle-y
classes, elements can be positioned only in horizontal or vertical direction.
html
class
position-relative
class
position-absolute top-0 start-0
class
position-absolute top-0 start-50 translate-middle-x
class
position-absolute top-0 end-0
class
position-absolute top-50 start-0 translate-middle-y
class
position-absolute top-50 start-50 translate-middle
class
position-absolute top-50 end-0 translate-middle-y
class
position-absolute bottom-0 start-0
class
position-absolute bottom-0 start-50 translate-middle-x
class
position-absolute bottom-0 end-0
Examples
Here are some real life examples of these classes:
Mails
unread messages
Marker
Alerts
unread messages
html
button
type
button
class
btn btn-primary position-relative
Mails
span
class
position-absolute top-0 start-100 translate-middle badge rounded-pill text-bg-secondary
span
class
visually-hidden
unread messages
span
span
button
class
position-relative py-2 px-4 text-bg-secondary border border-secondary rounded-pill
Marker
width
height
viewBox
0 0 16 16
class
position-absolute top-100 start-50 translate-middle mt-1
fill
var(--bs-secondary)
xmlns
http://www.w3.org/2000/svg
aria-hidden
true
path
M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z
button
type
button
class
btn btn-primary position-relative
Alerts
span
class
position-absolute top-0 start-100 translate-middle badge border border-light rounded-circle bg-danger p-2
span
class
visually-hidden
unread messages
span
span
button
You can use these classes with existing components to create new ones. Remember that you can extend its functionality by adding entries to the
$position-values
variable.
html
class
position-relative m-4
class
progress
role
progressbar
aria-label
Progress
aria-valuenow
aria-valuemin
aria-valuemax
style
height
class
progress-bar
style
width
button
type
button
class
position-absolute top-0 start-0 translate-middle btn btn-sm btn-primary rounded-pill
style
width
2rem
height
2rem
button
button
type
button
class
position-absolute top-0 start-50 translate-middle btn btn-sm btn-primary rounded-pill
style
width
2rem
height
2rem
button
button
type
button
class
position-absolute top-0 start-100 translate-middle btn btn-sm btn-secondary rounded-pill
style
width
2rem
height
2rem
button
Sass maps
Default position utility values are declared in a Sass map, then used to generate our utilities.
scss/_variables.scss
$position-values
100%
Sass utilities API
Position utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"position"
property
position
values
static relative absolute fixed sticky
"top"
property
values
$position-values
"bottom"
property
bottom
values
$position-values
"start"
property
left
class
start
values
$position-values
"end"
property
right
class
values
$position-values
"translate-middle"
property
transform
class
translate-middle
values
null
translate
-50%
-50%
translateX
-50%
translateY
-50%

--- 134_components_toasts.txt ---
Toasts are lightweight notifications designed to mimic the push notifications that have been popularized by mobile and desktop operating systems. They’re built with flexbox, so they’re easy to align and position.
Overview
Things to know when using the toast plugin:
Toasts are opt-in for performance reasons, so
you must initialize them yourself
Toasts will automatically hide if you do not specify
autohide: false
The animation effect of this component is dependent on the
prefers-reduced-motion
media query. See the
reduced motion section of our accessibility documentation
Examples
Basic
To encourage extensible and predictable toasts, we recommend a header and body. Toast headers use
display: flex
, allowing easy alignment of content thanks to our margin and flexbox utilities.
Toasts are as flexible as you need and have very little required markup. At a minimum, we require a single element to contain your “toasted” content and strongly encourage a dismiss button.
11 mins ago
Hello, world! This is a toast message.
html
class
toast
role
alert
aria-live
assertive
aria-atomic
true
class
toast-header
class
rounded me-2
strong
class
me-auto
strong
small
11 mins ago
small
button
type
button
class
btn-close
data-bs-dismiss
toast
aria-label
Close
button
class
toast-body
Hello, world! This is a toast message.
Previously, our scripts dynamically added the
.hide
class to completely hide a toast (with
display:none
, rather than just with
opacity:0
). This is now not necessary anymore. However, for backwards compatibility, our script will continue to toggle the class (even though there is no practical need for it) until the next major version.
Live example
Click the button below to show a toast (positioned with our utilities in the lower right corner) that has been hidden by default.
11 mins ago
Hello, world! This is a toast message.
Show live toast
button
type
button
class
btn btn-primary
liveToastBtn
Show live toast
button
class
toast-container position-fixed bottom-0 end-0 p-3
liveToast
class
toast
role
alert
aria-live
assertive
aria-atomic
true
class
toast-header
class
rounded me-2
strong
class
me-auto
strong
small
11 mins ago
small
button
type
button
class
btn-close
data-bs-dismiss
toast
aria-label
Close
button
class
toast-body
Hello, world! This is a toast message.
We use the following JavaScript to trigger our live toast demo:
site/src/assets/partials/snippets.js
const
toastTrigger
document
getElementById
'liveToastBtn'
const
toastLiveExample
document
getElementById
'liveToast'
toastTrigger
const
toastBootstrap
Toast
getOrCreateInstance
toastLiveExample
toastTrigger
addEventListener
'click'
toastBootstrap
show
Translucent
Toasts are slightly translucent to blend in with what’s below them.
11 mins ago
Hello, world! This is a toast message.
html
class
toast
role
alert
aria-live
assertive
aria-atomic
true
class
toast-header
class
rounded me-2
strong
class
me-auto
strong
small
class
text-body-secondary
11 mins ago
small
button
type
button
class
btn-close
data-bs-dismiss
toast
aria-label
Close
button
class
toast-body
Hello, world! This is a toast message.
Stacking
You can stack toasts by wrapping them in a toast container, which will vertically add some spacing.
just now
See? Just like this.
2 seconds ago
Heads up, toasts will stack automatically
html
class
toast-container position-static
class
toast
role
alert
aria-live
assertive
aria-atomic
true
class
toast-header
class
rounded me-2
strong
class
me-auto
strong
small
class
text-body-secondary
just now
small
button
type
button
class
btn-close
data-bs-dismiss
toast
aria-label
Close
button
class
toast-body
See? Just like this.
class
toast
role
alert
aria-live
assertive
aria-atomic
true
class
toast-header
class
rounded me-2
strong
class
me-auto
strong
small
class
text-body-secondary
2 seconds ago
small
button
type
button
class
btn-close
data-bs-dismiss
toast
aria-label
Close
button
class
toast-body
Heads up, toasts will stack automatically
Custom content
Customize your toasts by removing sub-components, tweaking them with
utilities
, or by adding your own markup. Here we’ve created a simpler toast by removing the default
.toast-header
, adding a custom hide icon from
, and using some
flexbox utilities
to adjust the layout.
Hello, world! This is a toast message.
html
class
toast align-items-center
role
alert
aria-live
assertive
aria-atomic
true
class
d-flex
class
toast-body
Hello, world! This is a toast message.
button
type
button
class
btn-close me-2 m-auto
data-bs-dismiss
toast
aria-label
Close
button
Alternatively, you can also add additional controls and components to toasts.
Hello, world! This is a toast message.
Take action
Close
html
class
toast
role
alert
aria-live
assertive
aria-atomic
true
class
toast-body
Hello, world! This is a toast message.
class
mt-2 pt-2 border-top
button
type
button
class
btn btn-primary btn-sm
Take action
button
button
type
button
class
btn btn-secondary btn-sm
data-bs-dismiss
toast
Close
button
Color schemes
Building on the above example, you can create different toast color schemes with our
color
background
utilities. Here we’ve added
.text-bg-primary
to the
.toast
, and then added
.btn-close-white
to our close button. For a crisp edge, we remove the default border with
.border-0
Hello, world! This is a toast message.
html
class
toast align-items-center text-bg-primary border-0
role
alert
aria-live
assertive
aria-atomic
true
class
d-flex
class
toast-body
Hello, world! This is a toast message.
button
type
button
class
btn-close btn-close-white me-2 m-auto
data-bs-dismiss
toast
aria-label
Close
button
Placement
Place toasts with custom CSS as you need them. The top right is often used for notifications, as is the top middle. If you’re only ever going to show one toast at a time, put the positioning styles right on the
.toast
Toast placement
Select a position...
Top left
Top center
Top right
Middle left
Middle center
Middle right
Bottom left
Bottom center
Bottom right
11 mins ago
Hello, world! This is a toast message.
html
form
class
mb-3
label
selectToastPlacement
Toast placement
label
select
class
form-select mt-2
selectToastPlacement
option
value
selected
Select a position...
option
option
value
top-0 start-0
Top left
option
option
value
top-0 start-50 translate-middle-x
Top center
option
option
value
top-0 end-0
Top right
option
option
value
top-50 start-0 translate-middle-y
Middle left
option
option
value
top-50 start-50 translate-middle
Middle center
option
option
value
top-50 end-0 translate-middle-y
Middle right
option
option
value
bottom-0 start-0
Bottom left
option
option
value
bottom-0 start-50 translate-middle-x
Bottom center
option
option
value
bottom-0 end-0
Bottom right
option
select
form
aria-live
polite
aria-atomic
true
class
bg-body-secondary position-relative bd-example-toasts rounded-3
class
toast-container p-3
toastPlacement
class
toast
class
toast-header
class
rounded me-2
strong
class
me-auto
strong
small
11 mins ago
small
class
toast-body
Hello, world! This is a toast message.
For systems that generate more notifications, consider using a wrapping element so they can easily stack.
just now
See? Just like this.
2 seconds ago
Heads up, toasts will stack automatically
html
aria-live
polite
aria-atomic
true
class
position-relative
<!-- Position it: -->
<!-- - `.toast-container` for spacing between toasts -->
<!-- - `top-0` & `end-0` to position the toasts in the upper right corner -->
<!-- - `.p-3` to prevent the toasts from sticking to the edge of the container -->
class
toast-container top-0 end-0 p-3
<!-- Then put toasts within -->
class
toast
role
alert
aria-live
assertive
aria-atomic
true
class
toast-header
class
rounded me-2
strong
class
me-auto
strong
small
class
text-body-secondary
just now
small
button
type
button
class
btn-close
data-bs-dismiss
toast
aria-label
Close
button
class
toast-body
See? Just like this.
class
toast
role
alert
aria-live
assertive
aria-atomic
true
class
toast-header
class
rounded me-2
strong
class
me-auto
strong
small
class
text-body-secondary
2 seconds ago
small
button
type
button
class
btn-close
data-bs-dismiss
toast
aria-label
Close
button
class
toast-body
Heads up, toasts will stack automatically
You can also get fancy with flexbox utilities to align toasts horizontally and/or vertically.
11 mins ago
Hello, world! This is a toast message.
html
<!-- Flexbox container for aligning the toasts -->
aria-live
polite
aria-atomic
true
class
d-flex justify-content-center align-items-center w-100
<!-- Then put toasts within -->
class
toast
role
alert
aria-live
assertive
aria-atomic
true
class
toast-header
class
rounded me-2
strong
class
me-auto
strong
small
11 mins ago
small
button
type
button
class
btn-close
data-bs-dismiss
toast
aria-label
Close
button
class
toast-body
Hello, world! This is a toast message.
Accessibility
Toasts are intended to be small interruptions to your visitors or users, so to help those with screen readers and similar assistive technologies, you should wrap your toasts in an
aria-live
region
. Changes to live regions (such as injecting/updating a toast component) are automatically announced by screen readers without needing to move the user’s focus or otherwise interrupt the user. Additionally, include
aria-atomic="true"
to ensure that the entire toast is always announced as a single (atomic) unit, rather than just announcing what was changed (which could lead to problems if you only update part of the toast’s content, or if displaying the same toast content at a later point in time). If the information needed is important for the process, e.g. for a list of errors in a form, then use the
alert component
instead of toast.
Note that the live region needs to be present in the markup
before
the toast is generated or updated. If you dynamically generate both at the same time and inject them into the page, they will generally not be announced by assistive technologies.
You also need to adapt the
role
aria-live
level depending on the content. If it’s an important message like an error, use
role="alert" aria-live="assertive"
, otherwise use
role="status" aria-live="polite"
attributes.
As the content you’re displaying changes, be sure to update the
delay
timeout
so that users have enough time to read the toast.
class
toast
role
alert
aria-live
polite
aria-atomic
true
data-bs-delay
10000
role
alert
aria-live
assertive
aria-atomic
true
When using
autohide: false
, you must add a close button to allow users to dismiss the toast.
11 mins ago
Hello, world! This is a toast message.
html
role
alert
aria-live
assertive
aria-atomic
true
class
toast
data-bs-autohide
false
class
toast-header
class
rounded me-2
strong
class
me-auto
strong
small
11 mins ago
small
button
type
button
class
btn-close
data-bs-dismiss
toast
aria-label
Close
button
class
toast-body
Hello, world! This is a toast message.
While technically it’s possible to add focusable/actionable controls (such as additional buttons or links) in your toast, you should avoid doing this for autohiding toasts. Even if you give the toast a long
delay
timeout
, keyboard and assistive technology users may find it difficult to reach the toast in time to take action (since toasts don’t receive focus when they are displayed). If you absolutely must have further controls, we recommend using a toast with
autohide: false
Variables
Added in v5.2.0
As part of Bootstrap’s evolving CSS variables approach, toasts now use local CSS variables on
.toast
for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
scss/_toasts.scss
#{$prefix}
toast-zindex
#{$zindex-toast}
#{$prefix}
toast-padding-x
#{$toast-padding-x}
#{$prefix}
toast-padding-y
#{$toast-padding-y}
#{$prefix}
toast-spacing
#{$toast-spacing}
#{$prefix}
toast-max-width
#{$toast-max-width}
@include
$toast-font-size
#{$prefix}
toast-font-size
#{$prefix}
toast-color
#{$toast-color}
#{$prefix}
toast-bg
#{$toast-background-color}
#{$prefix}
toast-border-width
#{$toast-border-width}
#{$prefix}
toast-border-color
#{$toast-border-color}
#{$prefix}
toast-border-radius
#{$toast-border-radius}
#{$prefix}
toast-box-shadow
#{$toast-box-shadow}
#{$prefix}
toast-header-color
#{$toast-header-color}
#{$prefix}
toast-header-bg
#{$toast-header-background-color}
#{$prefix}
toast-header-border-color
#{$toast-header-border-color}
Sass variables
scss/_variables.scss
$toast-max-width
350px
$toast-padding-x
.75rem
$toast-padding-y
.5rem
$toast-font-size
.875rem
$toast-color
null
$toast-background-color
rgba
#{$prefix}
body-bg-rgb
$toast-border-width
#{$prefix}
border-width
$toast-border-color
#{$prefix}
border-color-translucent
$toast-border-radius
#{$prefix}
border-radius
$toast-box-shadow
#{$prefix}
box-shadow
$toast-spacing
$container-padding-x
$toast-header-color
#{$prefix}
secondary-color
$toast-header-background-color
rgba
#{$prefix}
body-bg-rgb
$toast-header-border-color
$toast-border-color
Usage
Initialize toasts via JavaScript:
const
toastElList
document
querySelectorAll
'.toast'
const
toastList
toastElList
toastEl
Toast
toastEl
option
Triggers
Dismissal can be achieved with the
data-bs-dismiss
attribute on a button
within the toast
as demonstrated below:
button
type
button
class
btn-close
data-bs-dismiss
toast
aria-label
Close
button
or on a button
outside the toast
using the additional
data-bs-target
as demonstrated below:
button
type
button
class
btn-close
data-bs-dismiss
toast
data-bs-target
#my-toast
aria-label
Close
button
Options
As options can be passed via data attributes or JavaScript, you can append an option name to
data-bs-
, as in
data-bs-animation="{value}"
. Make sure to change the case type of the option name from “
camelCase
” to “
kebab-case
” when passing the options via data attributes. For example, use
data-bs-custom-class="beautifier"
instead of
data-bs-customClass="beautifier"
As of Bootstrap 5.2.0, all components support an
experimental
reserved data attribute
data-bs-config
that can house simple component configuration as a JSON string. When an element has
data-bs-config='{"delay":0, "title":123}'
data-bs-title="456"
attributes, the final
title
value will be
and the separate data attributes will override values given on
data-bs-config
. In addition, existing data attributes are able to house JSON values like
data-bs-delay='{"show":0,"hide":150}'
The final configuration object is the merged result of
data-bs-config
data-bs-
, and
js object
where the latest given key-value overrides the others.
Name
Type
Default
Description
animation
boolean
true
Apply a CSS fade transition to the toast.
autohide
boolean
true
Automatically hide the toast after the delay.
delay
number
5000
Delay in milliseconds before hiding the toast.
Methods
All API methods are asynchronous and start a transition.
They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored.
Learn more in our JavaScript docs.
Method
Description
dispose
Hides an element’s toast. Your toast will remain on the DOM but won’t show anymore.
getInstance
Static
method which allows you to get the toast instance associated with a DOM element.
For example:
const myToastEl = document.getElementById('myToastEl')
const myToast = bootstrap.Toast.getInstance(myToastEl)
Returns a Bootstrap toast instance.
getOrCreateInstance
Static
method which allows you to get the toast instance associated with a DOM element, or create a new one, in case it wasn’t initialized.
const myToastEl = document.getElementById('myToastEl')
const myToast = bootstrap.Toast.getOrCreateInstance(myToastEl)
Returns a Bootstrap toast instance.
hide
Hides an element’s toast.
Returns to the caller before the toast has actually been hidden
(i.e. before the
hidden.bs.toast
event occurs). You have to manually call this method if you made
autohide
false
isShown
Returns a boolean according to toast’s visibility state.
show
Reveals an element’s toast.
Returns to the caller before the toast has actually been shown
(i.e. before the
shown.bs.toast
event occurs). You have to manually call this method, instead your toast won’t show.
Events
Event
Description
hide.bs.toast
This event is fired immediately when the
hide
instance method has been called.
hidden.bs.toast
This event is fired when the toast has finished being hidden from the user.
show.bs.toast
This event fires immediately when the
show
instance method is called.
shown.bs.toast
This event is fired when the toast has been made visible to the user.
const
myToastEl
document
getElementById
'myToast'
myToastEl
addEventListener
'hidden.bs.toast'
// do something...

--- 105_customize_css-variables.txt ---
CSS custom properties (variables)
in its compiled CSS for real-time customization without the need to recompile Sass. These provide easy access to commonly used values like our theme colors, breakpoints, and primary font stacks when working in your browser’s inspector, a code sandbox, or general prototyping.
All our custom properties are prefixed with
to avoid conflicts with third party CSS.
Root variables
Here are the variables we include (note that the
:root
is required) that can be accessed anywhere Bootstrap’s CSS is loaded. They’re located in our
_root.scss
file and included in our compiled dist files.
Default
These CSS variables are available everywhere, regardless of color mode.
:root,
[data-bs-theme=light]
--bs-blue
#0d6efd
--bs-indigo
#6610f2
--bs-purple
#6f42c1
--bs-pink
#d63384
--bs-red
#dc3545
--bs-orange
#fd7e14
--bs-yellow
#ffc107
--bs-green
#198754
--bs-teal
#20c997
--bs-cyan
#0dcaf0
--bs-black
#000
--bs-white
#fff
--bs-gray
#6c757d
--bs-gray-dark
#343a40
--bs-gray-100
#f8f9fa
--bs-gray-200
#e9ecef
--bs-gray-300
#dee2e6
--bs-gray-400
#ced4da
--bs-gray-500
#adb5bd
--bs-gray-600
#6c757d
--bs-gray-700
#495057
--bs-gray-800
#343a40
--bs-gray-900
#212529
--bs-primary
#0d6efd
--bs-secondary
#6c757d
--bs-success
#198754
--bs-info
#0dcaf0
--bs-warning
#ffc107
--bs-danger
#dc3545
--bs-light
#f8f9fa
--bs-dark
#212529
--bs-primary-rgb
--bs-secondary-rgb
--bs-success-rgb
--bs-info-rgb
--bs-warning-rgb
--bs-danger-rgb
--bs-light-rgb
--bs-dark-rgb
--bs-primary-text-emphasis
#052c65
--bs-secondary-text-emphasis
#2b2f32
--bs-success-text-emphasis
#0a3622
--bs-info-text-emphasis
#055160
--bs-warning-text-emphasis
#664d03
--bs-danger-text-emphasis
#58151c
--bs-light-text-emphasis
#495057
--bs-dark-text-emphasis
#495057
--bs-primary-bg-subtle
#cfe2ff
--bs-secondary-bg-subtle
#e2e3e5
--bs-success-bg-subtle
#d1e7dd
--bs-info-bg-subtle
#cff4fc
--bs-warning-bg-subtle
#fff3cd
--bs-danger-bg-subtle
#f8d7da
--bs-light-bg-subtle
#fcfcfd
--bs-dark-bg-subtle
#ced4da
--bs-primary-border-subtle
#9ec5fe
--bs-secondary-border-subtle
#c4c8cb
--bs-success-border-subtle
#a3cfbb
--bs-info-border-subtle
#9eeaf9
--bs-warning-border-subtle
#ffe69c
--bs-danger-border-subtle
#f1aeb5
--bs-light-border-subtle
#e9ecef
--bs-dark-border-subtle
#adb5bd
--bs-white-rgb
--bs-black-rgb
--bs-font-sans-serif
system-ui
-apple-system
"Segoe UI"
Roboto
"Helvetica Neue"
"Noto Sans"
"Liberation Sans"
Arial
sans-serif
"Apple Color Emoji"
"Segoe UI Emoji"
"Segoe UI Symbol"
"Noto Color Emoji"
--bs-font-monospace
SFMono-Regular
Menlo
Monaco
Consolas
"Liberation Mono"
"Courier New"
monospace
--bs-gradient
linear-gradient
180deg
rgba
0.15
rgba
--bs-body-font-family
--bs-font-sans-serif
--bs-body-font-size
1rem
--bs-body-font-weight
--bs-body-line-height
--bs-body-color
#212529
--bs-body-color-rgb
--bs-body-bg
#fff
--bs-body-bg-rgb
--bs-emphasis-color
#000
--bs-emphasis-color-rgb
--bs-secondary-color
rgba
0.75
--bs-secondary-color-rgb
--bs-secondary-bg
#e9ecef
--bs-secondary-bg-rgb
--bs-tertiary-color
rgba
--bs-tertiary-color-rgb
--bs-tertiary-bg
#f8f9fa
--bs-tertiary-bg-rgb
--bs-heading-color
inherit
--bs-link-color
#0d6efd
--bs-link-color-rgb
--bs-link-decoration
underline
--bs-link-hover-color
#0a58ca
--bs-link-hover-color-rgb
--bs-code-color
#d63384
--bs-highlight-color
#212529
--bs-highlight-bg
#fff3cd
--bs-border-width
--bs-border-style
solid
--bs-border-color
#dee2e6
--bs-border-color-translucent
rgba
0.175
--bs-border-radius
0.375rem
--bs-border-radius-sm
0.25rem
--bs-border-radius-lg
0.5rem
--bs-border-radius-xl
1rem
--bs-border-radius-xxl
2rem
--bs-border-radius-2xl
--bs-border-radius-xxl
--bs-border-radius-pill
50rem
--bs-box-shadow
0 0.5rem 1rem
rgba
0.15
--bs-box-shadow-sm
0 0.125rem 0.25rem
rgba
0.075
--bs-box-shadow-lg
0 1rem 3rem
rgba
0.175
--bs-box-shadow-inset
inset 0 1px 2px
rgba
0.075
--bs-focus-ring-width
0.25rem
--bs-focus-ring-opacity
0.25
--bs-focus-ring-color
rgba
0.25
--bs-form-valid-color
#198754
--bs-form-valid-border-color
#198754
--bs-form-invalid-color
#dc3545
--bs-form-invalid-border-color
#dc3545
Dark mode
These variables are scoped to our built-in dark mode.
[data-bs-theme=dark]
color-scheme
dark
--bs-body-color
#dee2e6
--bs-body-color-rgb
--bs-body-bg
#212529
--bs-body-bg-rgb
--bs-emphasis-color
#fff
--bs-emphasis-color-rgb
--bs-secondary-color
rgba
0.75
--bs-secondary-color-rgb
--bs-secondary-bg
#343a40
--bs-secondary-bg-rgb
--bs-tertiary-color
rgba
--bs-tertiary-color-rgb
--bs-tertiary-bg
#2b3035
--bs-tertiary-bg-rgb
--bs-primary-text-emphasis
#6ea8fe
--bs-secondary-text-emphasis
#a7acb1
--bs-success-text-emphasis
#75b798
--bs-info-text-emphasis
#6edff6
--bs-warning-text-emphasis
#ffda6a
--bs-danger-text-emphasis
#ea868f
--bs-light-text-emphasis
#f8f9fa
--bs-dark-text-emphasis
#dee2e6
--bs-primary-bg-subtle
#031633
--bs-secondary-bg-subtle
#161719
--bs-success-bg-subtle
#051b11
--bs-info-bg-subtle
#032830
--bs-warning-bg-subtle
#332701
--bs-danger-bg-subtle
#2c0b0e
--bs-light-bg-subtle
#343a40
--bs-dark-bg-subtle
#1a1d20
--bs-primary-border-subtle
#084298
--bs-secondary-border-subtle
#41464b
--bs-success-border-subtle
#0f5132
--bs-info-border-subtle
#087990
--bs-warning-border-subtle
#997404
--bs-danger-border-subtle
#842029
--bs-light-border-subtle
#495057
--bs-dark-border-subtle
#343a40
--bs-heading-color
inherit
--bs-link-color
#6ea8fe
--bs-link-hover-color
#8bb9fe
--bs-link-color-rgb
--bs-link-hover-color-rgb
--bs-code-color
#e685b5
--bs-highlight-color
#dee2e6
--bs-highlight-bg
#664d03
--bs-border-color
#495057
--bs-border-color-translucent
rgba
0.15
--bs-form-valid-color
#75b798
--bs-form-valid-border-color
#75b798
--bs-form-invalid-color
#ea868f
--bs-form-invalid-border-color
#ea868f
Component variables
Have a look at our table documentation for some
insight into how we’re using CSS variables
. Our
navbars also use CSS variables
as of v5.2.0. We’re also using CSS variables across our grids—primarily for gutters the
new opt-in CSS grid
—with more component usage coming in the future.
Whenever possible, we'll assign CSS variables at the base component level (e.g.,
.navbar
for navbar and its sub-components). This reduces guessing on where and how to customize, and allows for easy modifications by our team in future updates.
Prefix
Most CSS variables use a prefix to avoid collisions with your own codebase. This prefix is in addition to the
that’s required on every CSS variable.
Customize the prefix via the
$prefix
Sass variable. By default, it’s set to
(note the trailing dash).
Examples
CSS variables offer similar flexibility to Sass’s variables, but without the need for compilation before being served to the browser. For example, here we’re resetting our page’s font and link styles with CSS variables.
body
font
1rem/1.5
--bs-font-sans-serif
color
--bs-blue
Focus variables
Added in v5.3.0
:focus
styles using a combination of Sass and CSS variables that can be optionally added to specific components and elements. We do not yet globally override all
:focus
styles.
In our Sass, we set default values that can be customized before compiling.
scss/_variables.scss
$focus-ring-width
.25rem
$focus-ring-opacity
$focus-ring-color
rgba
$primary
$focus-ring-opacity
$focus-ring-blur
$focus-ring-box-shadow
$focus-ring-blur
$focus-ring-width
$focus-ring-color
Those variables are then reassigned to
:root
level CSS variables that can be customized in real-time, including with options for
offsets (which default to their fallback value of
scss/_root.scss
#{$prefix}
focus-ring-width
#{$focus-ring-width}
#{$prefix}
focus-ring-opacity
#{$focus-ring-opacity}
#{$prefix}
focus-ring-color
#{$focus-ring-color}
Grid breakpoints
While we include our grid breakpoints as CSS variables (except for
), be aware that
CSS variables do not work in media queries
. This is by design in the CSS spec for variables, but may change in coming years with support for
env()
variables. Check out
this Stack Overflow answer
for some helpful links. In the meantime, you can use these variables in other CSS situations, as well as in your JavaScript.

--- 061_examples_starter-template.txt ---
Get started with Bootstrap
Quickly and easily get started with Bootstrap's compiled, production-ready files with this barebones example featuring some basic HTML and helpful links. Download all our examples to get started.
Download examples
Starter projects
Ready to go beyond the starter template? Check out these open source projects that you can quickly duplicate to a new GitHub repository.
Guides
Read more detailed instructions and documentation on using or contributing to Bootstrap.
Contributing to Bootstrap

--- 143_about_overview.txt ---
Team
small team of developers
on GitHub. We’re actively looking to grow this team and would love to hear from you if you’re excited about CSS at scale, writing and maintaining vanilla JavaScript plugins, and improving build tooling processes for frontend code.
History
Originally created by a designer and a developer at Twitter, Bootstrap has become one of the most popular front-end frameworks and open source projects in the world.
@mdo
@fat
. Prior to being an open-sourced framework, Bootstrap was known as
Twitter Blueprint
. A few months into development, Twitter held its
first Hack Week
and the project exploded as developers of all skill levels jumped in without any external guidance. It served as the style guide for internal tools development at the company for over a year before its public release, and continues to do so today.
Originally
released
Friday, August 19, 2011
, we’ve since had over
twenty releases
, including two major rewrites with v2 and v3. With Bootstrap 2, we added responsive functionality to the entire framework as an optional stylesheet. Building on that with Bootstrap 3, we rewrote the library once more to make it responsive by default with a mobile first approach.
With Bootstrap 4, we once again rewrote the project to account for two key architectural changes: a migration to Sass and the move to CSS’s flexbox. Our intention is to help in a small way to move the web development community forward by pushing for newer CSS properties, fewer dependencies, and new technologies across more modern browsers.
Our latest release, Bootstrap 5, focuses on improving v4’s codebase with as few major breaking changes as possible. We improved existing features and components, removed support for older browsers, dropped jQuery for regular JavaScript, and embraced more future-friendly technologies like CSS custom properties as part of our tooling.
Get involved
Get involved with Bootstrap development by
opening an issue
or submitting a pull request. Read our
contributing guidelines
for information on how we develop.

--- 052_customize_overview.txt ---
Sass
Utilize our source Sass files to take advantage of variables, maps, mixins, and functions.
Options
Customize Bootstrap with built-in variables to easily toggle global CSS preferences.
Color
Learn about and customize the color systems that support the entire toolkit.
Color modes
Explore our default light mode and the new dark mode, or create custom color modes yourself.
Components
Learn how we build nearly all our components responsively and with base and modifier classes.
CSS variables
Use Bootstrap’s CSS custom properties for fast and forward-looking design and development.
Optimize
Keep your projects lean, responsive, and maintainable so you can deliver the best experience.
Overview
There are multiple ways to customize Bootstrap. Your best path can depend on your project, the complexity of your build tools, the version of Bootstrap you’re using, browser support, and more.
Our two preferred methods are:
Using Bootstrap
via package manager
so you can use and extend our source files.
Using Bootstrap’s compiled distribution files or
jsDelivr
so you can add onto or override Bootstrap’s styles.
While we cannot go into details here on how to use every package manager, we can give some guidance on
using Bootstrap with your own Sass compiler
For those who want to use the distribution files, review the
getting started page
for how to include those files and an example HTML page. From there, consult the docs for the layout, components, and behaviors you’d like to use.
As you familiarize yourself with Bootstrap, continue exploring this section for more details on how to utilize our global options, making use of and changing our color system, how we build our components, how to use our growing list of CSS custom properties, and how to optimize your code when building with Bootstrap.
CSPs and embedded SVGs
Several Bootstrap components include embedded SVGs in our CSS to style components consistently and easily across browsers and devices.
For organizations with more strict
configurations
, we’ve documented all instances of our embedded SVGs (all of which are applied via
background-image
) so you can more thoroughly review your options.
Accordion
Carousel controls
Close button
(used in alerts and modals)
Form checkboxes and radio buttons
Form switches
Form validation icons
Navbar toggle buttons
Select menus
Based on
community conversation
, some options for addressing this in your own codebase include
replacing the URLs with locally hosted assets
, removing the images and using inline images (not possible in all components), and modifying your CSP. Our recommendation is to carefully review your own security policies and decide on the best path forward, if necessary.

--- 102_helpers_stretched-link.txt ---
.stretched-link
to a link to make its
containing block
clickable via a
::after
pseudo element. In most cases, this means that an element with
position: relative;
that contains a link with the
.stretched-link
class is clickable. Please note given
how CSS
position
works
.stretched-link
cannot be mixed with most table elements.
Cards have
position: relative
by default in Bootstrap, so in this case you can safely add the
.stretched-link
class to a link in the card without any other HTML changes.
Multiple links and tap targets are not recommended with stretched links. However, some
position
z-index
styles can help should this be required.
Card image cap
Card with stretched link
Some quick example text to build on the card title and make up the bulk of the card’s content.
Go somewhere
html
class
card
style
width
18rem
class
card-img-top
class
card-body
class
card-title
Card with stretched link
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
href
class
btn btn-primary stretched-link
Go somewhere
Most custom components do not have
position: relative
by default, so we need to add the
.position-relative
here to prevent the link from stretching outside the parent element.
Generic placeholder image22222
Custom component with stretched link
This is some placeholder content for the custom component. It is intended to mimic what some real-world content would look like, and we’re using it here to give the component a bit of body and size.
Go somewhere
html
class
d-flex position-relative
class
flex-shrink-0 me-3
class
mt-0
Custom component with stretched link
This is some placeholder content for the custom component. It is intended to mimic what some real-world content would look like, and we’re using it here to give the component a bit of body and size.
href
class
stretched-link
Go somewhere
Generic placeholder image
Columns with stretched link
Another instance of placeholder content for this other custom component. It is intended to mimic what some real-world content would look like, and we’re using it here to give the component a bit of body and size.
Go somewhere
html
class
row g-0 bg-body-secondary position-relative
class
col-md-6 mb-md-0 p-md-4
class
w-100
class
col-md-6 p-4 ps-md-0
class
mt-0
Columns with stretched link
Another instance of placeholder content for this other custom component. It is intended to mimic what some real-world content would look like, and we’re using it here to give the component a bit of body and size.
href
class
stretched-link
Go somewhere
Identifying the containing block
If the stretched link doesn’t seem to work, the
containing block
will probably be the cause. The following CSS properties will make an element the containing block:
position
value other than
static
transform
perspective
value other than
none
will-change
value of
transform
perspective
filter
value other than
none
or a
will-change
value of
filter
(only works on Firefox)
Card image cap
Card with stretched links
Some quick example text to build on the card title and make up the bulk of the card’s content.
Stretched link will not work here, because
position: relative
is added to the link
This
stretched link
will only be spread over the
-tag, because a transform is applied to it.
html
class
card
style
width
18rem
class
card-img-top
class
card-body
class
card-title
Card with stretched links
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
class
card-text
href
class
stretched-link text-danger
style
position
relative
Stretched link will not work here, because
code
position: relative
code
is added to the link
class
card-text bg-body-tertiary
style
transform
rotate
This
href
class
text-warning stretched-link
stretched link
will only be spread over the
code
code
-tag, because a transform is applied to it.

--- 126_examples_grid.txt ---
Basic grid layouts to get you familiar with building within the Bootstrap grid system.
In these examples the
.themed-grid-col
class is added to the columns to add some theming. This is not a class that is available in Bootstrap by default.
Five grid tiers
There are five tiers to the Bootstrap grid system, one for each range of devices we support. Each tier starts at a minimum viewport size and automatically applies to the larger devices unless overridden.
.col-4
.col-4
.col-4
.col-sm-4
.col-sm-4
.col-sm-4
.col-md-4
.col-md-4
.col-md-4
.col-lg-4
.col-lg-4
.col-lg-4
.col-xl-4
.col-xl-4
.col-xl-4
.col-xxl-4
.col-xxl-4
.col-xxl-4
Three equal columns
Get three equal-width columns
starting at desktops and scaling to large desktops
. On mobile devices, tablets and below, the columns will automatically stack.
.col-md-4
.col-md-4
.col-md-4
Three equal columns alternative
By using the
.row-cols-*
classes, you can easily create a grid with equal columns.
.col
child of
.row-cols-md-3
.col
child of
.row-cols-md-3
.col
child of
.row-cols-md-3
Three unequal columns
Get three columns
starting at desktops and scaling to large desktops
of various widths. Remember, grid columns should add up to twelve for a single horizontal block. More than that, and columns start stacking no matter the viewport.
.col-md-3
.col-md-6
.col-md-3
Two columns
Get two columns
starting at desktops and scaling to large desktops
.col-md-8
.col-md-4
Full width, single column
No grid classes are necessary for full-width elements.
Two columns with two nested columns
Per the documentation, nesting is easy—just put a row of columns within an existing column. This gives you two columns
starting at desktops and scaling to large desktops
, with another two (equal widths) within the larger column.
At mobile device sizes, tablets and down, these columns and their nested columns will stack.
.col-md-8
.col-md-6
.col-md-6
.col-md-4
Mixed: mobile and desktop
The Bootstrap v5 grid system has six tiers of classes: xs (extra small, this class infix is not used), sm (small), md (medium), lg (large), xl (x-large), and xxl (xx-large). You can use nearly any combination of these classes to create more dynamic and flexible layouts.
Each tier of classes scales up, meaning if you plan on setting the same widths for md, lg, xl and xxl, you only need to specify md.
.col-md-8
.col-6 .col-md-4
.col-6 .col-md-4
.col-6 .col-md-4
.col-6 .col-md-4
.col-6
.col-6
Mixed: mobile, tablet, and desktop
.col-sm-6 .col-lg-8
.col-6 .col-lg-4
.col-6 .col-sm-4
.col-6 .col-sm-4
.col-6 .col-sm-4
Gutters
With
.gx-*
classes, the horizontal gutters can be adjusted.
.col
with
.gx-4
gutters
.col
with
.gx-4
gutters
.col
with
.gx-4
gutters
.col
with
.gx-4
gutters
.col
with
.gx-4
gutters
.col
with
.gx-4
gutters
Use the
.gy-*
classes to control the vertical gutters.
.col
with
.gy-4
gutters
.col
with
.gy-4
gutters
.col
with
.gy-4
gutters
.col
with
.gy-4
gutters
.col
with
.gy-4
gutters
.col
with
.gy-4
gutters
With
.g-*
classes, the gutters in both directions can be adjusted.
.col
with
.g-3
gutters
.col
with
.g-3
gutters
.col
with
.g-3
gutters
.col
with
.g-3
gutters
.col
with
.g-3
gutters
.col
with
.g-3
gutters
Containers
Additional classes added in Bootstrap v4.4 allow containers that are 100% wide until a particular breakpoint. v5 adds a new
breakpoint.
.container
.container-sm
.container-md
.container-lg
.container-xl
.container-xxl
.container-fluid

--- 107_utilities_vertical-align.txt ---
Change the alignment of elements with the
vertical-alignment
utilities. Please note that vertical-align only affects inline, inline-block, inline-table, and table cell elements.
Choose from
.align-baseline
.align-top
.align-middle
.align-bottom
.align-text-bottom
, and
.align-text-top
as needed.
To vertically center non-inline content (like
<div>
s and more), use our
flex box utilities
With inline elements:
baseline
middle
bottom
text-top
text-bottom
html
span
class
align-baseline
baseline
span
span
class
align-top
span
span
class
align-middle
middle
span
span
class
align-bottom
bottom
span
span
class
align-text-top
text-top
span
span
class
align-text-bottom
text-bottom
span
With table cells:
baseline
middle
bottom
text-top
text-bottom
html
table
style
height
100px
tbody
class
align-baseline
baseline
class
align-top
class
align-middle
middle
class
align-bottom
bottom
class
align-text-top
text-top
class
align-text-bottom
text-bottom
tbody
table
Sass utilities API
Vertical align utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"align"
property
vertical-align
class
align
values
baseline top middle bottom text-bottom text-top

--- 119_content_reboot.txt ---
Approach
Reboot builds upon Normalize, providing many HTML elements with somewhat opinionated styles using only element selectors. Additional styling is done only with classes. For example, we reboot some
<table>
styles for a simpler baseline and later provide
.table
.table-bordered
, and more.
Here are our guidelines and reasons for choosing what to override in Reboot:
Update some browser default values to use
s instead of
s for scalable component spacing.
Avoid
margin-top
. Vertical margins can collapse, yielding unexpected results. More importantly though, a single direction of
margin
is a simpler mental model.
For easier scaling across device sizes, block elements should use
s for
margin
Keep declarations of
font
-related properties to a minimum, using
inherit
whenever possible.
CSS variables
Added in v5.2.0
With v5.1.1, we standardized our required
@import
s across all our CSS bundles (including
, and
) to include
_root.scss
. This adds
:root
level CSS variables to all bundles, regardless of how many of them are used in that bundle. Ultimately Bootstrap 5 will continue to see more
CSS variables
added over time, in order to provide more real-time customization without the need to always recompile Sass. Our approach is to take our source Sass variables and transform them into CSS variables. That way, even if you don’t use CSS variables, you still have all the power of Sass.
This is still in-progress and will take time to fully implement.
For example, consider these
:root
CSS variables for common
<body>
styles:
scss/_root.scss
$font-size-root
!= null
#{$prefix}
root-font-size
#{$font-size-root}
#{$prefix}
body-font-family
inspect
$font-family-base
@include
$font-size-base
#{$prefix}
body-font-size
#{$prefix}
body-font-weight
#{$font-weight-base}
#{$prefix}
body-line-height
#{$line-height-base}
$body-text-align
!= null
#{$prefix}
body-text-align
#{$body-text-align}
#{$prefix}
body-color
#{$body-color}
#{$prefix}
body-color-rgb
to-rgb
$body-color
#{$prefix}
body-bg
#{$body-bg}
#{$prefix}
body-bg-rgb
to-rgb
$body-bg
#{$prefix}
emphasis-color
#{$body-emphasis-color}
#{$prefix}
emphasis-color-rgb
to-rgb
$body-emphasis-color
#{$prefix}
secondary-color
#{$body-secondary-color}
#{$prefix}
secondary-color-rgb
to-rgb
$body-secondary-color
#{$prefix}
secondary-bg
#{$body-secondary-bg}
#{$prefix}
secondary-bg-rgb
to-rgb
$body-secondary-bg
#{$prefix}
tertiary-color
#{$body-tertiary-color}
#{$prefix}
tertiary-color-rgb
to-rgb
$body-tertiary-color
#{$prefix}
tertiary-bg
#{$body-tertiary-bg}
#{$prefix}
tertiary-bg-rgb
to-rgb
$body-tertiary-bg
In practice, those variables are then applied in Reboot like so:
scss/_reboot.scss
body
margin
// 1
font-family
#{$prefix}
body-font-family
@include
font-size
#{$prefix}
body-font-size
font-weight
#{$prefix}
body-font-weight
line-height
#{$prefix}
body-line-height
color
#{$prefix}
body-color
text-align
#{$prefix}
body-text-align
background-color
#{$prefix}
body-bg
// 2
-webkit-text-size-adjust
100%
// 3
-webkit-tap-highlight-color
rgba
$black
// 4
Which allows you to make real-time customizations however you like:
body
style
--bs-body-color
#333
<!-- ... -->
body
Page defaults
<html>
<body>
elements are updated to provide better page-wide defaults. More specifically:
box-sizing
is globally set on every element—including
*::before
*::after
, to
border-box
. This ensures that the declared width of element is never exceeded due to padding or border.
No base
font-size
is declared on the
<html>
, but
16px
is assumed (the browser default).
font-size: 1rem
is applied on the
<body>
for easy responsive type-scaling via media queries while respecting user preferences and ensuring a more accessible approach. This browser default can be overridden by modifying the
$font-size-root
variable.
<body>
also sets a global
font-family
font-weight
line-height
, and
color
. This is inherited later by some form elements to prevent font inconsistencies.
For safety, the
<body>
has a declared
background-color
, defaulting to
#fff
Native font stack
native font stacks in this
Smashing Magazine
article
$font-family-sans-serif
// Cross-platform generic font family (default user interface font)
system-ui
// Safari for macOS and iOS (San Francisco)
-apple-system
// Windows
"Segoe UI"
// Android
Roboto
// older macOS and iOS
"Helvetica Neue"
// Linux
"Noto Sans"
"Liberation Sans"
// Basic web fallback
Arial
// Sans serif fallback
sans-serif
// Emoji fonts
"Apple Color Emoji"
"Segoe UI Emoji"
"Segoe UI Symbol"
"Noto Color Emoji"
!default
Note that because the font stack includes emoji fonts, many common symbol/dingbat Unicode characters will be rendered as multicolored pictographs. Their appearance will vary, depending on the style used in the browser/platform’s native emoji font, and they won’t be affected by any CSS
color
styles.
This
font-family
is applied to the
<body>
and automatically inherited globally throughout Bootstrap. To switch the global
font-family
, update
$font-family-base
and recompile Bootstrap.
Headings
All heading elements—
<h1>
<h6>
have their
margin-top
removed,
margin-bottom: .5rem
set, and
line-height
tightened. While headings inherit their
color
by default, you can also override it via optional CSS variable,
--bs-heading-color
Heading
Example
<h1></h1>
h1. Bootstrap heading
<h2></h2>
h2. Bootstrap heading
<h3></h3>
h3. Bootstrap heading
<h4></h4>
h4. Bootstrap heading
<h5></h5>
h5. Bootstrap heading
<h6></h6>
h6. Bootstrap heading
Paragraphs
elements have their
margin-top
removed and
margin-bottom: 1rem
set for easy spacing.
This is an example paragraph.
html
This is an example paragraph.
Links
Links have a default
color
and underline applied. While links change on
:hover
, they don’t change based on whether someone
:visited
the link. They also receive no special
:focus
styles.
This is an example link
html
href
This is an example link
As of v5.3.x, link
color
is set using
rgba()
and new
-rgb
CSS variables, allowing for easy customization of link color opacity. Change the link color opacity with the
--bs-link-opacity
CSS variable:
This is an example link
html
href
style
--bs-link-opacity
This is an example link
Placeholder links—those without an
href
—are targeted with a more specific selector and have their
color
text-decoration
reset to their default values.
This is a placeholder link
html
This is a placeholder link
Horizontal rules
<hr>
element has been simplified. Similar to browser defaults,
<hr>
s are styled via
border-top
, have a default
opacity: .25
, and automatically inherit their
border-color
color
, including when
color
is set via the parent. They can be modified with text, border, and opacity utilities.
html
class
text-success
class
border border-danger border-2 opacity-50
class
border border-primary border-3 opacity-75
Lists
All lists—
<ul>
<ol>
, and
<dl>
—have their
margin-top
removed and a
margin-bottom: 1rem
. Nested lists have no
margin-bottom
. We’ve also reset the
padding-left
<ul>
<ol>
elements.
All lists have their top margin removed
And their bottom margin normalized
Nested lists have no bottom margin
This way they have a more even appearance
Particularly when followed by more list items
The left padding has also been reset
Here’s an ordered list
With a few list items
It has the same overall look
As the previous unordered list
For simpler styling, clear hierarchy, and better spacing, description lists have updated
margin
<dd>
s reset
margin-left
and add
margin-bottom: .5rem
<dt>
s are
bolded
Description lists
A description list is perfect for defining terms.
Term
Definition for the term.
A second definition for the same term.
Another term
Definition for this other term.
Inline code
Wrap inline snippets of code with
<code>
. Be sure to escape HTML angle brackets.
For example,
<section>
should be wrapped as inline.
html
For example,
code
&lt;
section
&gt;
code
should be wrapped as inline.
Code blocks
<pre>
s for multiple lines of code. Once again, be sure to escape any angle brackets in the code for proper rendering. The
<pre>
element is reset to remove its
margin-top
and use
units for its
margin-bottom
<p>Sample text here...</p>
<p>And another line of sample text here...</p>
html
code
&lt;
&gt;
Sample text here...
&lt;
&gt;
&lt;
&gt;
And another line of sample text here...
&lt;
&gt;
code
Variables
For indicating variables use the
<var>
tag.
html
User input
Use the
<kbd>
to indicate input that is typically entered via keyboard.
To switch directories, type
followed by the name of the directory.
To edit settings, press
Ctrl
html
To switch directories, type
followed by the name of the directory.
To edit settings, press
Ctrl
Sample output
For indicating sample output from a program use the
<samp>
tag.
This text is meant to be treated as sample output from a computer program.
html
samp
This text is meant to be treated as sample output from a computer program.
samp
Tables
Tables are slightly adjusted to style
<caption>
s, collapse borders, and ensure consistent
text-align
throughout. Additional changes for borders, padding, and more come with
.table
class
This is an example table, and this is its caption to describe the contents.
Table heading
Table heading
Table heading
Table heading
Table cell
Table cell
Table cell
Table cell
Table cell
Table cell
Table cell
Table cell
Table cell
Table cell
Table cell
Table cell
html
table
caption
This is an example table, and this is its caption to describe the contents.
caption
thead
Table heading
Table heading
Table heading
Table heading
thead
tbody
Table cell
Table cell
Table cell
Table cell
Table cell
Table cell
Table cell
Table cell
Table cell
Table cell
Table cell
Table cell
tbody
table
Forms
Various form elements have been rebooted for simpler base styles. Here are some of the most notable changes:
<fieldset>
s have no borders, padding, or margin so they can be easily used as wrappers for individual inputs or groups of inputs.
<legend>
s, like fieldsets, have also been restyled to be displayed as a heading of sorts.
<label>
s are set to
display: inline-block
to allow
margin
to be applied.
<input>
<select>
<textarea>
s, and
<button>
s are mostly addressed by Normalize, but Reboot removes their
margin
and sets
line-height: inherit
, too.
<textarea>
s are modified to only be resizable vertically as horizontal resizing often “breaks” page layout.
<button>
s and
<input>
button elements have
cursor: pointer
when
:not(:disabled)
These changes, and more, are demonstrated below.
Some date inputs types are
not fully supported
by the latest versions of Safari and Firefox.
Example legend
Example input
Example email
Example telephone
Example url
Example number
Example search
Example range
Example file input
Example select
Choose...
Option 1
Option 2
Option 3
Option 4
Option 5
Option 6
Check this checkbox
Option one is this and that
Option two is something else that’s also super long to demonstrate the wrapping of these fancy form controls.
Option three is disabled
Example textarea
Example date
Example time
Example password
Example datetime-local
Example week
Example month
Example color
Example output
Button submit
Button submit
Pointers on buttons
Reboot includes an enhancement for
role="button"
to change the default cursor to
pointer
. Add this attribute to elements to help indicate elements are interactive. This role isn’t necessary for
<button>
elements, which get their own
cursor
change.
Non-button element button
html
span
role
button
tabindex
Non-button element button
span
Misc elements
Address
<address>
element is updated to reset the browser default
font-style
from
italic
normal
line-height
is also now inherited, and
margin-bottom: 1rem
has been added.
<address>
s are for presenting contact information for the nearest ancestor (or an entire body of work). Preserve formatting by ending lines with
<br>
ACME Corporation
1123 Fictional St,
San Francisco, CA 94103
(123) 456-7890
Full Name
first.last@example.com
Blockquote
The default
margin
on blockquotes is
1em 40px
, so we reset that to
0 0 1rem
for something more consistent with other elements.
A well-known quote, contained in a blockquote element.
Someone famous in
Source Title
Inline elements
<abbr>
element receives basic styling to make it stand out amongst paragraph text.
HTML
abbreviation element.
Summary
The default
cursor
on summary is
text
, so we reset that to
pointer
to convey that the element can be interacted with by clicking on it.
Some details
More info about the details.
Even more details
Here are even more details about the details.
HTML5
[hidden]
attribute
HTML5 adds
a new global attribute named
[hidden]
, which is styled as
display: none
by default. Borrowing an idea from
PureCSS
, we improve upon this default by making
[hidden] { display: none !important; }
to help prevent its
display
from getting accidentally overridden.
input
type
text
hidden
Since
[hidden]
is not compatible with jQuery’s
$(...).hide()
$(...).show()
methods, we don’t specifically endorse
[hidden]
over other techniques for managing the
display
of elements.
To merely toggle the visibility of an element, meaning its
display
is not modified and the element can still affect the flow of the document, use
.invisible
class
instead.

--- 003_helpers_icon-link.txt ---
The icon link helper component modifies our default link styles to enhance their appearance and quickly align any pairing of icon and text. Alignment is set via inline flexbox styling and a default
value. We stylize the underline with a custom offset and color. Icons are automatically sized to
to best match their associated text’s
font-size
Icon links assume
are being used, but you can use any icon or image you like.
When icons are purely decorative, they should be hidden from assistive technologies using
aria-hidden="true"
, as we’ve done in our examples. For icons that convey meaning, provide an appropriate text alternative by adding
role="img"
and an appropriate
aria-label="..."
to the SVGs.
Example
Take a regular
element, add
.icon-link
, and insert an icon on either the left or right of your link text. The icon is automatically sized, placed, and colored.
Icon link
html
class
icon-link
href
xmlns
http://www.w3.org/2000/svg
class
viewBox
0 0 16 16
aria-hidden
true
path
M8.186 1.113a.5.5 0 0 0-.372 0L1.846 3.5l2.404.961L10.404 2l-2.218-.887zm3.564 1.426L5.596 5 8 5.961 14.154 3.5l-2.404-.961zm3.25 1.7-6.5 2.6v7.922l6.5-2.6V4.24zM7.5 14.762V6.838L1 4.239v7.923l6.5 2.6zM7.443.184a1.5 1.5 0 0 1 1.114 0l7.129 2.852A.5.5 0 0 1 16 3.5v8.662a1 1 0 0 1-.629.928l-7.185 2.874a.5.5 0 0 1-.372 0L.63 13.09a1 1 0 0 1-.63-.928V3.5a.5.5 0 0 1 .314-.464L7.443.184z
Icon link
Icon link
html
class
icon-link
href
Icon link
xmlns
http://www.w3.org/2000/svg
class
viewBox
0 0 16 16
aria-hidden
true
path
M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z
Style on hover
.icon-link-hover
to move the icon to the right on hover.
Icon link
html
class
icon-link icon-link-hover
href
Icon link
xmlns
http://www.w3.org/2000/svg
class
viewBox
0 0 16 16
aria-hidden
true
path
M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z
Customize
Modify the styling of an icon link with our link CSS variables, Sass variables, utilities, or custom styles.
CSS variables
Modify the
--bs-link-*
--bs-icon-link-*
CSS variables as needed to change the default appearance.
Customize the hover
transform
by overriding the
--bs-icon-link-transform
CSS variable:
Icon link
html
class
icon-link icon-link-hover
style
--bs-icon-link-transform
translate3d
-.125rem
href
xmlns
http://www.w3.org/2000/svg
class
viewBox
0 0 16 16
aria-hidden
true
path
M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z
path
M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z
Icon link
Customize the color by overriding the
--bs-link-*
CSS variable:
Icon link
html
class
icon-link icon-link-hover
style
--bs-link-hover-color-rgb
href
Icon link
xmlns
http://www.w3.org/2000/svg
class
viewBox
0 0 16 16
aria-hidden
true
path
M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z
Sass variables
Customize the icon link Sass variables to modify all icon link styles across your Bootstrap-powered project.
scss/_variables.scss
$icon-link-gap
.375rem
$icon-link-underline-offset
.25em
$icon-link-icon-size
$icon-link-icon-transition
.2s ease-in-out transform
$icon-link-icon-transform
translate3d
.25em
Sass utilities API
Modify icon links with any of
our link utilities
for modifying underline color and offset.
Icon link
html
class
icon-link icon-link-hover link-success link-underline-success link-underline-opacity-25
href
Icon link
xmlns
http://www.w3.org/2000/svg
class
viewBox
0 0 16 16
aria-hidden
true
path
M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z

--- 146_getting-started_contribute.txt ---
Tooling setup
npm scripts
to build the documentation and compile source files. Our
package.json
houses these scripts for compiling code, running tests, and more. These aren’t intended for use outside our repository and documentation.
To use our build system and run our documentation locally, you’ll need a copy of Bootstrap’s source files and Node. Follow these steps and you should be ready to rock:
Download and install Node.js
, which we use to manage our dependencies.
Either
download Bootstrap’s sources
or fork and clone
Navigate to the root
/bootstrap
directory and run
npm install
to install our local dependencies listed in
package.json
When completed, you’ll be able to run the various commands provided from the command line.
Using npm scripts
package.json
includes numerous tasks for developing the project. Run
npm run
to see all the npm scripts in your terminal.
Primary tasks include:
Task
Description
npm start
Compiles CSS and JavaScript, builds the documentation, and starts a local server.
npm run dist
Creates the
dist/
directory with compiled files. Uses
Sass
Autoprefixer
, and
terser
npm test
Runs tests locally after running
npm run dist
npm run docs-serve
Builds and runs the documentation locally.
Get started with Bootstrap via npm with our starter project!
Head to the
Sass & JS example
template repository to see how to build and customize Bootstrap in your own npm project. Includes Sass compiler, Autoprefixer, Stylelint, PurgeCSS, and Bootstrap Icons.
Sass
Dart Sass
for compiling our Sass source files into CSS files (included in our build process), and we recommend you do the same if you’re compiling Sass using your own asset pipeline. We previously used Node Sass for Bootstrap v4, but LibSass and packages built on top of it, including Node Sass, are now
deprecated
Dart Sass uses a rounding precision of 10 and for efficiency reasons does not allow adjustment of this value. We don’t lower this precision during further processing of our generated CSS, such as during minification, but if you chose to do so we recommend maintaining a precision of at least 6 to prevent issues with browser rounding.
Autoprefixer
Autoprefixer
(included in our build process) to automatically add vendor prefixes to some CSS properties at build time. Doing so saves us time and code by allowing us to write key parts of our CSS a single time while eliminating the need for vendor mixins like those found in v3.
We maintain the list of browsers supported through Autoprefixer in a separate file within our GitHub repository. See
.browserslistrc
for details.
RTLCSS
RTLCSS
to process compiled CSS and convert them to RTL – basically replacing horizontal direction aware properties (e.g.
padding-left
) with their opposite. It allows us only write our CSS a single time and make minor tweaks using RTLCSS
control
value
directives.
Local documentation
Running our documentation locally requires the use of Astro. Astro is a modern static site generator that allows us to build our documentation with a combination of Markdown and React components. Here’s how to get it started:
Run through the
tooling setup
above to install all dependencies.
From the root
/bootstrap
directory, run
npm run docs-serve
in the command line.
Open
http://localhost:4321/
in your browser, and voilà.
Learn more about using Astro by reading its
documentation
Troubleshooting
Should you encounter problems with installing dependencies, uninstall all previous dependency versions (global and local). Then, rerun
npm install

--- 109_forms_overview.txt ---
Form control
Style textual inputs and textareas with support for multiple states.
Select
Improve browser default select elements with a custom initial appearance.
Checks & radios
Use our custom radio buttons and checkboxes in forms for selecting input options.
Range
Replace browser default range inputs with our custom version.
Input group
Attach labels and buttons to your inputs for increased semantic value.
Floating labels
Create beautifully simple form labels that float over your input fields.
Layout
Create inline, horizontal, or complex grid-based layouts with your forms.
Validation
Validate your forms with custom or native validation behaviors and styles.
Overview
our Rebooted form styles
with classes. Use these classes to opt into their customized displays for a more consistent rendering across browsers and devices.
Be sure to use an appropriate
type
attribute on all inputs (e.g.,
email
for email address or
number
for numerical information) to take advantage of newer input controls like email verification, number selection, and more.
Here’s a quick example to demonstrate Bootstrap’s form styles. Keep reading for documentation on required classes, form layout, and more.
Email address
We'll never share your email with anyone else.
Password
Check me out
Submit
html
form
class
mb-3
label
exampleInputEmail1
class
form-label
Email address
label
input
type
email
class
form-control
exampleInputEmail1
aria-describedby
emailHelp
emailHelp
class
form-text
We'll never share your email with anyone else.
class
mb-3
label
exampleInputPassword1
class
form-label
Password
label
input
type
password
class
form-control
exampleInputPassword1
class
mb-3 form-check
input
type
checkbox
class
form-check-input
exampleCheck1
label
class
form-check-label
exampleCheck1
Check me out
label
button
type
submit
class
btn btn-primary
Submit
button
form
Disabled forms
Add the
disabled
boolean attribute on an input to prevent user interactions and make it appear lighter.
input
class
form-control
disabledInput
type
text
placeholder
Disabled input here...
disabled
Add the
disabled
attribute to a
<fieldset>
to disable all the controls within. Browsers treat all native form controls (
<input>
<select>
, and
<button>
elements) inside a
<fieldset disabled>
as disabled, preventing both keyboard and mouse interactions on them.
However, if your form also includes custom button-like elements such as
<a class="btn btn-*">...</a>
, these will only be given a style of
pointer-events: none
, meaning they are still focusable and operable using the keyboard. In this case, you must manually modify these controls by adding
tabindex="-1"
to prevent them from receiving focus and
aria-disabled="disabled"
to signal their state to assistive technologies.
Disabled fieldset example
Disabled input
Disabled select menu
Disabled select
Can’t check this
Submit
html
form
fieldset
disabled
legend
Disabled fieldset example
legend
class
mb-3
label
disabledTextInput
class
form-label
Disabled input
label
input
type
text
disabledTextInput
class
form-control
placeholder
Disabled input
class
mb-3
label
disabledSelect
class
form-label
Disabled select menu
label
select
disabledSelect
class
form-select
option
Disabled select
option
select
class
mb-3
class
form-check
input
class
form-check-input
type
checkbox
disabledFieldsetCheck
disabled
label
class
form-check-label
disabledFieldsetCheck
Can’t check this
label
button
type
submit
class
btn btn-primary
Submit
button
fieldset
form
Accessibility
Ensure that all form controls have an appropriate accessible name so that their purpose can be conveyed to users of assistive technologies. The simplest way to achieve this is to use a
<label>
element, or—in the case of buttons—to include sufficiently descriptive text as part of the
<button>...</button>
content.
For situations where it’s not possible to include a visible
<label>
or appropriate text content, there are alternative ways of still providing an accessible name, such as:
<label>
elements hidden using the
.visually-hidden
class
Pointing to an existing element that can act as a label using
aria-labelledby
Providing a
title
attribute
Explicitly setting the accessible name on an element using
aria-label
If none of these are present, assistive technologies may resort to using the
placeholder
attribute as a fallback for the accessible name on
<input>
<textarea>
elements. The examples in this section provide a few suggested, case-specific approaches.
While using visually hidden content (
.visually-hidden
aria-label
, and even
placeholder
content, which disappears once a form field has content) will benefit assistive technology users, a lack of visible label text may still be problematic for certain users. Some form of visible label is generally the best approach, both for accessibility and usability.
Many form variables are set at a general level to be re-used and extended by individual form components. You’ll see these most often as
$input-btn-*
$input-*
variables.
Sass variables
$input-btn-*
variables are shared global variables between our
buttons
and our form components. You’ll find these frequently reassigned as values to other component-specific variables.
scss/_variables.scss
$input-btn-padding-y
.375rem
$input-btn-padding-x
.75rem
$input-btn-font-family
null
$input-btn-font-size
$font-size-base
$input-btn-line-height
$line-height-base
$input-btn-focus-width
$focus-ring-width
$input-btn-focus-color-opacity
$focus-ring-opacity
$input-btn-focus-color
$focus-ring-color
$input-btn-focus-blur
$focus-ring-blur
$input-btn-focus-box-shadow
$focus-ring-box-shadow
$input-btn-padding-y-sm
.25rem
$input-btn-padding-x-sm
.5rem
$input-btn-font-size-sm
$font-size-sm
$input-btn-padding-y-lg
.5rem
$input-btn-padding-x-lg
1rem
$input-btn-font-size-lg
$font-size-lg
$input-btn-border-width
#{$prefix}
border-width

--- 062_utilities_object-fit.txt ---
How it works
Change the value of the
object-fit
property
with our responsive
object-fit
utility classes. This property tells the content to fill the parent container in a variety of ways, such as preserving the aspect ratio or stretching to take up as much space as possible.
Classes for the value of
object-fit
are named using the format
.object-fit-{value}
. Choose from the following values:
contain
cover
fill
scale
(for scale-down)
none
Examples
Add the
object-fit-{value}
class to the
replaced element
html
class
object-fit-contain border rounded
class
object-fit-cover border rounded
class
object-fit-fill border rounded
class
object-fit-scale border rounded
class
object-fit-none border rounded
Responsive
Responsive variations also exist for each
object-fit
value using the format
.object-fit-{breakpoint}-{value}
, for the following breakpoint abbreviations:
, and
. Classes can be combined for various effects as you need.
html
class
object-fit-sm-contain border rounded
class
object-fit-md-contain border rounded
class
object-fit-lg-contain border rounded
class
object-fit-xl-contain border rounded
class
object-fit-xxl-contain border rounded
Video
.object-fit-{value}
and responsive
.object-fit-{breakpoint}-{value}
utilities also work on
<video>
elements.
video
class
object-fit-contain
autoplay
video
video
class
object-fit-cover
autoplay
video
video
class
object-fit-fill
autoplay
video
video
class
object-fit-scale
autoplay
video
video
class
object-fit-none
autoplay
video
Sass utilities API
Object fit utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"object-fit"
responsive
true
property
object-fit
values
contain
contain
cover
cover
fill
fill
scale
scale-down
none
none

--- 063_examples_cover.txt ---
Toggle theme
Light
Dark
Auto
Cover your page.
Cover is a one-page template for building simple and beautiful home pages. Download, edit the text, and add your own fullscreen background photo to make it your own.
Learn more

--- 001_examples_carousel.txt ---
Example headline.
Some representative placeholder content for the first slide of the carousel.
Sign up today
Another example headline.
Some representative placeholder content for the second slide of the carousel.
Learn more
One more for good measure.
Some representative placeholder content for the third slide of this carousel.
Browse gallery
Previous
Next
Placeholder
Heading
Some representative placeholder content for the three columns of text below the carousel. This is the first column.
View details »
Placeholder
Heading
Another exciting bit of representative placeholder content. This time, we've moved on to the second column.
View details »
Placeholder
Heading
And lastly this, the third column of representative placeholder content.
View details »
First featurette heading.
It’ll blow your mind.
Some great placeholder content for the first featurette here. Imagine some exciting prose here.
Placeholder
500x500
Oh yeah, it’s that good.
See for yourself.
Another featurette? Of course. More placeholder content here to give you an idea of how this layout would work with some actual real-world content in place.
Placeholder
500x500
And lastly, this one.
Checkmate.
And yes, this is the last block of representative placeholder content. Again, not really intended to be actually read, simply here to give you a better view of what this would look like with some actual content. Your content.
Placeholder
500x500

--- 099_layout_containers.txt ---
How they work
Containers are the most basic layout element in Bootstrap and are
required when using our default grid system
. Containers are used to contain, pad, and (sometimes) center the content within them. While containers
be nested, most layouts do not require a nested container.
.container
, which sets a
max-width
at each responsive breakpoint
.container-{breakpoint}
, which is
width: 100%
until the specified breakpoint
.container-fluid
, which is
width: 100%
at all breakpoints
The table below illustrates how each container’s
max-width
compares to the original
.container
.container-fluid
across each breakpoint.
See them in action and compare them in our
Grid example
Extra small
<576px
Small
≥576px
Medium
≥768px
Large
≥992px
X-Large
≥1200px
XX-Large
≥1400px
.container
100%
540px
720px
960px
1140px
1320px
.container-sm
100%
540px
720px
960px
1140px
1320px
.container-md
100%
100%
720px
960px
1140px
1320px
.container-lg
100%
100%
100%
960px
1140px
1320px
.container-xl
100%
100%
100%
100%
1140px
1320px
.container-xxl
100%
100%
100%
100%
100%
1320px
.container-fluid
100%
100%
100%
100%
100%
100%
Default container
Our default
.container
class is a responsive, fixed-width container, meaning its
max-width
changes at each breakpoint.
class
container
<!-- Content here -->
Responsive containers
Responsive containers allow you to specify a class that is 100% wide until the specified breakpoint is reached, after which we apply
max-width
s for each of the higher breakpoints. For example,
.container-sm
is 100% wide to start until the
breakpoint is reached, where it will scale up with
, and
class
container-sm
100% wide until small breakpoint
class
container-md
100% wide until medium breakpoint
class
container-lg
100% wide until large breakpoint
class
container-xl
100% wide until extra large breakpoint
class
container-xxl
100% wide until extra extra large breakpoint
Fluid containers
.container-fluid
for a full width container, spanning the entire width of the viewport.
class
container-fluid
Sass variables
As shown above, Bootstrap generates a series of predefined container classes to help you build the layouts you desire. You may customize these predefined container classes by modifying the Sass map (found in
_variables.scss
) that powers them:
scss/_variables.scss
$container-max-widths
540px
720px
960px
1140px
1320px
For more information and examples on how to modify our Sass maps and variables, please refer to
the Sass section of the Grid documentation
Sass mixins
In addition to customizing the Sass, you can also create your own containers with our Sass mixin.
// Source mixin
@mixin
make-container
$padding-x
$container-padding-x
width
100%
padding-right
$padding-x
padding-left
$padding-x
margin-right
auto
margin-left
auto
// Usage
.custom-container
@include
make-container

--- 014_forms_input-group.txt ---
Basic example
Place one add-on or button on either side of an input. You may also place one on both sides of an input. Remember to place
<label>
s outside the input group.
@example.com
Your vanity URL
https://example.com/users/
Example help text goes outside the input group.
With textarea
html
class
input-group mb-3
span
class
input-group-text
basic-addon1
span
input
type
text
class
form-control
placeholder
Username
aria-label
Username
aria-describedby
basic-addon1
class
input-group mb-3
input
type
text
class
form-control
placeholder
Recipient’s username
aria-label
Recipient’s username
aria-describedby
basic-addon2
span
class
input-group-text
basic-addon2
@example.com
span
class
mb-3
label
basic-url
class
form-label
Your vanity URL
label
class
input-group
span
class
input-group-text
basic-addon3
https://example.com/users/
span
input
type
text
class
form-control
basic-url
aria-describedby
basic-addon3 basic-addon4
class
form-text
basic-addon4
Example help text goes outside the input group.
class
input-group mb-3
span
class
input-group-text
span
input
type
text
class
form-control
aria-label
Amount (to the nearest dollar)
span
class
input-group-text
span
class
input-group mb-3
input
type
text
class
form-control
placeholder
Username
aria-label
Username
span
class
input-group-text
span
input
type
text
class
form-control
placeholder
Server
aria-label
Server
class
input-group
span
class
input-group-text
With textarea
span
textarea
class
form-control
aria-label
With textarea
textarea
Wrapping
Input groups wrap by default via
flex-wrap: wrap
in order to accommodate custom form field validation within an input group. You may disable this with
.flex-nowrap
html
class
input-group flex-nowrap
span
class
input-group-text
addon-wrapping
span
input
type
text
class
form-control
placeholder
Username
aria-label
Username
aria-describedby
addon-wrapping
Border radius
Due to limitations of browser support at the time,
border-radius
styles can only be applied to the first and last children within the
.input-group
class. Any non-visible element in one of those positions will cause the input group to render incorrectly. This will unfortunately not be fixed until v6 most likely.
html
class
input-group
span
class
input-group-text
visible-addon
span
input
type
text
class
form-control
placeholder
Username
aria-label
Username
aria-describedby
visible-addon
input
type
text
class
form-control d-none
placeholder
Hidden input
aria-label
Hidden input
aria-describedby
visible-addon
Sizing
Add the relative form sizing classes to the
.input-group
itself and contents within will automatically resize—no need for repeating the form control size classes on each element.
Sizing on the individual input group elements isn’t supported.
Small
Default
Large
html
class
input-group input-group-sm mb-3
span
class
input-group-text
inputGroup-sizing-sm
Small
span
input
type
text
class
form-control
aria-label
Sizing example input
aria-describedby
inputGroup-sizing-sm
class
input-group mb-3
span
class
input-group-text
inputGroup-sizing-default
Default
span
input
type
text
class
form-control
aria-label
Sizing example input
aria-describedby
inputGroup-sizing-default
class
input-group input-group-lg
span
class
input-group-text
inputGroup-sizing-lg
Large
span
input
type
text
class
form-control
aria-label
Sizing example input
aria-describedby
inputGroup-sizing-lg
Checkboxes and radios
Place any checkbox or radio option within an input group’s addon instead of text. We recommend adding
.mt-0
to the
.form-check-input
when there’s no visible text next to the input.
html
class
input-group mb-3
class
input-group-text
input
class
form-check-input mt-0
type
checkbox
value
aria-label
Checkbox for following text input
input
type
text
class
form-control
aria-label
Text input with checkbox
class
input-group
class
input-group-text
input
class
form-check-input mt-0
type
radio
value
aria-label
Radio button for following text input
input
type
text
class
form-control
aria-label
Text input with radio button
Multiple inputs
While multiple
<input>
s are supported visually, validation styles are only available for input groups with a single
<input>
First and last name
html
class
input-group
span
class
input-group-text
First and last name
span
input
type
text
aria-label
First name
class
form-control
input
type
text
aria-label
Last name
class
form-control
Multiple addons
Multiple add-ons are supported and can be mixed with checkbox and radio input versions.
0.00
0.00
html
class
input-group mb-3
span
class
input-group-text
span
span
class
input-group-text
0.00
span
input
type
text
class
form-control
aria-label
Dollar amount (with dot and two decimal places)
class
input-group
input
type
text
class
form-control
aria-label
Dollar amount (with dot and two decimal places)
span
class
input-group-text
span
span
class
input-group-text
0.00
span
Button addons
Button
Button
Button
Button
Button
Button
html
class
input-group mb-3
button
class
btn btn-outline-secondary
type
button
button-addon1
Button
button
input
type
text
class
form-control
placeholder
aria-label
Example text with button addon
aria-describedby
button-addon1
class
input-group mb-3
input
type
text
class
form-control
placeholder
Recipient’s username
aria-label
Recipient’s username
aria-describedby
button-addon2
button
class
btn btn-outline-secondary
type
button
button-addon2
Button
button
class
input-group mb-3
button
class
btn btn-outline-secondary
type
button
Button
button
button
class
btn btn-outline-secondary
type
button
Button
button
input
type
text
class
form-control
placeholder
aria-label
Example text with two button addons
class
input-group
input
type
text
class
form-control
placeholder
Recipient’s username
aria-label
Recipient’s username with two button addons
button
class
btn btn-outline-secondary
type
button
Button
button
button
class
btn btn-outline-secondary
type
button
Button
button
Buttons with dropdowns
Dropdown
Action
Another action
Something else here
Separated link
Dropdown
Action
Another action
Something else here
Separated link
Dropdown
Action before
Another action before
Something else here
Separated link
Dropdown
Action
Another action
Something else here
Separated link
html
class
input-group mb-3
button
class
btn btn-outline-secondary dropdown-toggle
type
button
data-bs-toggle
dropdown
aria-expanded
false
Dropdown
button
class
dropdown-menu
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
class
dropdown-divider
class
dropdown-item
href
Separated link
input
type
text
class
form-control
aria-label
Text input with dropdown button
class
input-group mb-3
input
type
text
class
form-control
aria-label
Text input with dropdown button
button
class
btn btn-outline-secondary dropdown-toggle
type
button
data-bs-toggle
dropdown
aria-expanded
false
Dropdown
button
class
dropdown-menu dropdown-menu-end
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
class
dropdown-divider
class
dropdown-item
href
Separated link
class
input-group
button
class
btn btn-outline-secondary dropdown-toggle
type
button
data-bs-toggle
dropdown
aria-expanded
false
Dropdown
button
class
dropdown-menu
class
dropdown-item
href
Action before
class
dropdown-item
href
Another action before
class
dropdown-item
href
Something else here
class
dropdown-divider
class
dropdown-item
href
Separated link
input
type
text
class
form-control
aria-label
Text input with 2 dropdown buttons
button
class
btn btn-outline-secondary dropdown-toggle
type
button
data-bs-toggle
dropdown
aria-expanded
false
Dropdown
button
class
dropdown-menu dropdown-menu-end
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
class
dropdown-divider
class
dropdown-item
href
Separated link
Segmented buttons
Action
Toggle Dropdown
Action
Another action
Something else here
Separated link
Action
Toggle Dropdown
Action
Another action
Something else here
Separated link
html
class
input-group mb-3
button
type
button
class
btn btn-outline-secondary
Action
button
button
type
button
class
btn btn-outline-secondary dropdown-toggle dropdown-toggle-split
data-bs-toggle
dropdown
aria-expanded
false
span
class
visually-hidden
Toggle Dropdown
span
button
class
dropdown-menu
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
class
dropdown-divider
class
dropdown-item
href
Separated link
input
type
text
class
form-control
aria-label
Text input with segmented dropdown button
class
input-group
input
type
text
class
form-control
aria-label
Text input with segmented dropdown button
button
type
button
class
btn btn-outline-secondary
Action
button
button
type
button
class
btn btn-outline-secondary dropdown-toggle dropdown-toggle-split
data-bs-toggle
dropdown
aria-expanded
false
span
class
visually-hidden
Toggle Dropdown
span
button
class
dropdown-menu dropdown-menu-end
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
class
dropdown-divider
class
dropdown-item
href
Separated link
Custom forms
Input groups include support for custom selects and custom file inputs. Browser default versions of these are not supported.
Custom select
Options
Choose...
Three
Choose...
Three
Options
Button
Choose...
Three
Choose...
Three
Button
html
class
input-group mb-3
label
class
input-group-text
inputGroupSelect01
Options
label
select
class
form-select
inputGroupSelect01
option
selected
Choose...
option
option
value
option
option
value
option
option
value
Three
option
select
class
input-group mb-3
select
class
form-select
inputGroupSelect02
option
selected
Choose...
option
option
value
option
option
value
option
option
value
Three
option
select
label
class
input-group-text
inputGroupSelect02
Options
label
class
input-group mb-3
button
class
btn btn-outline-secondary
type
button
Button
button
select
class
form-select
inputGroupSelect03
aria-label
Example select with button addon
option
selected
Choose...
option
option
value
option
option
value
option
option
value
Three
option
select
class
input-group
select
class
form-select
inputGroupSelect04
aria-label
Example select with button addon
option
selected
Choose...
option
option
value
option
option
value
option
option
value
Three
option
select
button
class
btn btn-outline-secondary
type
button
Button
button
Custom file input
Upload
Upload
Button
Button
html
class
input-group mb-3
label
class
input-group-text
inputGroupFile01
Upload
label
input
type
file
class
form-control
inputGroupFile01
class
input-group mb-3
input
type
file
class
form-control
inputGroupFile02
label
class
input-group-text
inputGroupFile02
Upload
label
class
input-group mb-3
button
class
btn btn-outline-secondary
type
button
inputGroupFileAddon03
Button
button
input
type
file
class
form-control
inputGroupFile03
aria-describedby
inputGroupFileAddon03
aria-label
Upload
class
input-group
input
type
file
class
form-control
inputGroupFile04
aria-describedby
inputGroupFileAddon04
aria-label
Upload
button
class
btn btn-outline-secondary
type
button
inputGroupFileAddon04
Button
button
Sass variables
scss/_variables.scss
$input-group-addon-padding-y
$input-padding-y
$input-group-addon-padding-x
$input-padding-x
$input-group-addon-font-weight
$input-font-weight
$input-group-addon-color
$input-color
$input-group-addon-bg
#{$prefix}
tertiary-bg
$input-group-addon-border-color
$input-border-color

--- 005_layout_gutters.txt ---
How they work
Gutters are the gaps between column content, created by horizontal
padding
We set
padding-right
padding-left
on each column, and use negative
margin
to offset that at the start and end of each row to align content.
Gutters start at
1.5rem
24px
) wide.
This allows us to match our grid to the
padding and margin spacers
scale.
Gutters can be responsively adjusted.
Use breakpoint-specific gutter classes to modify horizontal gutters, vertical gutters, and all gutters.
Horizontal gutters
.gx-*
classes can be used to control the horizontal gutter widths. The
.container
.container-fluid
parent may need to be adjusted if larger gutters are used too to avoid unwanted overflow, using a matching padding utility. For example, in the following example we’ve increased the padding with
.px-4
Custom column padding
Custom column padding
html
class
container px-4 text-center
class
row gx-5
class
class
Custom column padding
class
class
Custom column padding
An alternative solution is to add a wrapper around the
.row
with the
.overflow-hidden
class:
Custom column padding
Custom column padding
html
class
container overflow-hidden text-center
class
row gx-5
class
class
Custom column padding
class
class
Custom column padding
Vertical gutters
.gy-*
classes can be used to control the vertical gutter widths within a row when columns wrap to new lines. Like the horizontal gutters, the vertical gutters can cause some overflow below the
.row
at the end of a page. If this occurs, you add a wrapper around
.row
with the
.overflow-hidden
class:
Custom column padding
Custom column padding
Custom column padding
Custom column padding
html
class
container overflow-hidden text-center
class
row gy-5
class
col-6
class
Custom column padding
class
col-6
class
Custom column padding
class
col-6
class
Custom column padding
class
col-6
class
Custom column padding
Horizontal & vertical gutters
.g-*
classes to control the horizontal and vertical grid gutters. In the example below, we use a smaller gutter width, so there isn’t a need for the
.overflow-hidden
wrapper class.
Custom column padding
Custom column padding
Custom column padding
Custom column padding
html
class
container text-center
class
row g-2
class
col-6
class
Custom column padding
class
col-6
class
Custom column padding
class
col-6
class
Custom column padding
class
col-6
class
Custom column padding
Row columns gutters
Gutter classes can also be added to
row columns
. In the following example, we use responsive row columns and responsive gutter classes.
Row column
Row column
Row column
Row column
Row column
Row column
Row column
Row column
Row column
Row column
html
class
container text-center
class
row row-cols-2 row-cols-lg-5 g-2 g-lg-3
class
class
Row column
class
class
Row column
class
class
Row column
class
class
Row column
class
class
Row column
class
class
Row column
class
class
Row column
class
class
Row column
class
class
Row column
class
class
Row column
No gutters
The gutters between columns in our predefined grid classes can be removed with
.g-0
. This removes the negative
margin
s from
.row
and the horizontal
padding
from all immediate children columns.
Need an edge-to-edge design?
Drop the parent
.container
.container-fluid
and add
.mx-0
to the
.row
to prevent overflow.
In practice, here’s how it looks. Note that you can continue to use this with all other predefined grid classes (including column widths, responsive tiers, reorders, and more).
.col-sm-6 .col-md-8
.col-6 .col-md-4
html
class
row g-0 text-center
class
col-sm-6 col-md-8
.col-sm-6 .col-md-8
class
col-6 col-md-4
.col-6 .col-md-4
Change the gutters
Classes are built from the
$gutters
Sass map which is inherited from the
$spacers
Sass map.
$grid-gutter-width
1.5rem
$gutters
$spacer
$spacer
$spacer
$spacer
$spacer

--- 017_examples_cheatsheet-rtl.txt ---
المحتوى
النصوص
دليل الإستخدام
العرض 1
العرض 2
العرض 3
العرض 4
العرض 5
العرض 6
عنوان 1
عنوان 2
عنوان 3
عنوان 4
عنوان 5
عنوان 6
هذه قطعة إملائية متميزة، فهي مصممة لتكون بارزة من بين القطع الإملائية الأخرى.
يمكنك استخدام تصنيف mark
لتحديد
من المفترض أن يتم التعامل مع هذا السطر كنص محذوف.
من المفترض أن يتم التعامل مع هذا السطر على أنه لم يعد دقيقًا.
من المفترض أن يتم التعامل مع هذا السطر كإضافة إلى المستند.
سيتم عرض النص في هذا السطر كما وتحته خط.
من المفترض أن يتم التعامل مع هذا السطر على أنه يحوي تفاصيل صغيرة.
هذا السطر يحوي نص عريض.
هذا السطر يحوي نص مائل.
إقتباس مبهر، موضوع في عنصر blockquote
هذه قائمة عناصر.
بالرغم من أنها مصممة كي لا تظهر كذلك.
إلا أنها مجهزة كـ قائمة خلف الكواليس
هذا التصميم ينطبق فقد على القائمة الرئيسية
القوائم الفرعية
لا تتأثر بهذا التصميم
فهي تظهر عليها علامات الترقيم
وتحتوي على مساحة فارغة بجوارها
قد يكون هذا التصميم مفيدًا في بعض الأحيان.
هذا عنصر في قائمة.
وهذا أيضًا.
لكنهم يظهرون متجاورين.
الصور
دليل الإستخدام
Placeholder
صورة مستجيبة
صورة عنصر نائب مربع عام مع حدود بيضاء حولها ، مما يجعلها تشبه صورة تم التقاطها بكاميرا فورية قديمة
200x200
الجداول
دليل الإستخدام
الاسم الاول
الكنية
الاسم المستعار
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
الاسم الاول
الكنية
الاسم المستعار
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
Class
عنوان
عنوان
Default
خلية
خلية
Primary
خلية
خلية
Secondary
خلية
خلية
Success
خلية
خلية
Danger
خلية
خلية
Warning
خلية
خلية
Info
خلية
خلية
Light
خلية
خلية
Dark
خلية
خلية
الاسم الاول
الكنية
الاسم المستعار
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
النماذج البيانية
دليل الإستخدام
Placeholder
400x300
شرح للصورة أعلاه.
النماذج
نظرة عامة
دليل الإستخدام
البريد الإلكتروني
لن نقوم بمشاركة بريدك الإلكتروني مع أي شخص آخر.
كلمة السر
قائمة اختيار
افتح قائمة الاختيار هذه
واحد
اثنان
ثلاثة
اخترني
أزرار الاختيار الأحادي
الخيار الافتراضي
خيار آخر
زر على شكل مفتاح اختيار.
مثال على حقل اختيار نطاقي
إرسال
الحقول المعطلة
دليل الإستخدام
حقل إدخال معطل
قائمة اختيار معطلة
خيار معطل
زر اختيار معطل
أزرار اختيار أحادي معطلين
خيار معطل
خيار آخر معطل
رفع معطل
زر معطل على شكل مفتاح اختيار.
حقل اختيار نطاقي معطل
إرسال
الأحجام
دليل الإستخدام
افتح قائمة الاختيار هذه
واحد
اثنان
ثلاثة
افتح قائمة الاختيار هذه
واحد
اثنان
ثلاثة
مجموعة الإدخال
دليل الإستخدام
أنا اسمي
وغيرها
عنوان حسابك الشخصي
https://example.com/users/
مع textarea
الحقول ذوي العناوين العائمة
دليل الإستخدام
البريد الالكتروني
كلمة السر
التحقق
دليل الإستخدام
الاسم الاول
يبدو صحيحًا!
الكنية
يبدو صحيحًا!
اسم المستخدم
يرجى اختيار اسم مستخدم.
مدينة
يرجى إدخال مدينة صحيحة.
حالة
اختر...
يرجى اختيار ولاية صحيحة.
الرمز البريدي
يرجى إدخال رمز بريدي صحيح.
أوافق على الشروط والأحكام
تجب الموافقة قبل إرسال النموذج.
إرسال النموذج
العناصر
المطوية
دليل الإستخدام
عنصر المطوية الأول
هذا هو محتوى عنصر المطوية الأول.
سيكون المحتوى مخفيًا بشكل إفتراضي حتى يقوم Bootstrap بإضافة الكلاسات اللازمة لكل عنصر في المطوية. هذه الكلاسات تتحكم بالمظهر العام ووتتحكم أيضا بإظهار وإخفاء أقسام المطوية عبر حركات CSS الإنتقالية. يمكنك تعديل أي من هذه عبر كلاسات CSS خاصة بك، او عبر تغيير القيم الإفتراضية المقدمة من Bootstrap. من الجدير بالذكر أنه يمكن وضع أي كود HTML هنا، ولكن الحركة الإنتقالية قد تحد من الoverflow.
عنصر المطوية الثاني
هذا هو محتوى عنصر المطوية الثاني.
سيكون المحتوى مخفيًا بشكل إفتراضي حتى يقوم Bootstrap بإضافة الكلاسات اللازمة لكل عنصر في المطوية. هذه الكلاسات تتحكم بالمظهر العام ووتتحكم أيضا بإظهار وإخفاء أقسام المطوية عبر حركات CSS الإنتقالية. يمكنك تعديل أي من هذه عبر كلاسات CSS خاصة بك، او عبر تغيير القيم الإفتراضية المقدمة من Bootstrap. من الجدير بالذكر أنه يمكن وضع أي كود HTML هنا، ولكن الحركة الإنتقالية قد تحد من الoverflow.
عنصر المطوية الثالث
هذا هو محتوى عنصر المطوية الثالث.
سيكون المحتوى مخفيًا بشكل إفتراضي حتى يقوم Bootstrap بإضافة الكلاسات اللازمة لكل عنصر في المطوية. هذه الكلاسات تتحكم بالمظهر العام ووتتحكم أيضا بإظهار وإخفاء أقسام المطوية عبر حركات CSS الإنتقالية. يمكنك تعديل أي من هذه عبر كلاسات CSS خاصة بك، او عبر تغيير القيم الإفتراضية المقدمة من Bootstrap. من الجدير بالذكر أنه يمكن وضع أي كود HTML هنا، ولكن الحركة الإنتقالية قد تحد من الoverflow.
الإنذارات
دليل الإستخدام
تنبيه primary بسيط مع
رابط مثال
. أعطها نقرة إذا أردت.
تنبيه secondary بسيط مع
رابط مثال
. أعطها نقرة إذا أردت.
تنبيه success بسيط مع
رابط مثال
. أعطها نقرة إذا أردت.
تنبيه danger بسيط مع
رابط مثال
. أعطها نقرة إذا أردت.
تنبيه warning بسيط مع
رابط مثال
. أعطها نقرة إذا أردت.
تنبيه info بسيط مع
رابط مثال
. أعطها نقرة إذا أردت.
تنبيه light بسيط مع
رابط مثال
. أعطها نقرة إذا أردت.
تنبيه dark بسيط مع
رابط مثال
. أعطها نقرة إذا أردت.
أحسنت!
لقد نجحت في قراءة رسالة التنبيه المهمة هذه. سيتم تشغيل نص المثال هذا لفترة أطول قليلاً حتى تتمكن من رؤية كيفية عمل التباعد داخل التنبيه مع هذا النوع من المحتوى.
كلما احتجت إلى ذلك ، تأكد من استخدام أدوات الهامش للحفاظ على الأشياء لطيفة ومرتبة.
الشارة
دليل الإستخدام
مثال على عنوان
جديد
مثال على عنوان
جديد
مثال على عنوان
جديد
مثال على عنوان
جديد
مثال على عنوان
جديد
مثال على عنوان
جديد
مثال على عنوان
جديد
مثال على عنوان
جديد
Primary
Secondary
Success
Danger
Warning
Info
Light
Dark
مسار التنقل التفصيلي (فتات الخبز)
دليل الإستخدام
الأزرار
دليل الإستخدام
Primary
Secondary
Success
Danger
Warning
Info
Light
Dark
رابط
Primary
Secondary
Success
Danger
Warning
Info
Light
Dark
زر صغير
زر قياسي
زر كبير
مجموعة الأزرار
دليل الإستخدام
البطاقة
دليل الإستخدام
Placeholder
غطاء الصورة
عنوان البطاقة
بعض الأمثلة السريعة للنصوص للبناء على عنوان البطاقة وتشكيل الجزء الأكبر من محتوى البطاقة.
اذهب لمكان ما
متميز
عنوان البطاقة
بعض الأمثلة السريعة للنصوص للبناء على عنوان البطاقة وتشكيل الجزء الأكبر من محتوى البطاقة.
اذهب لمكان ما
منذ يومان
عنوان البطاقة
بعض الأمثلة السريعة للنصوص للبناء على عنوان البطاقة وتشكيل الجزء الأكبر من محتوى البطاقة.
عنصر
عنصر آخر
عنصر ثالث
رابط البطاقة
رابط آخر
Placeholder
صورة
عنوان البطاقة
هذه بطاقة أعرض مع نص داعم تحتها كمقدمة طبيعية لمحتوى إضافي. هذا المحتوى أطول قليلاً.
آخر تحديث منذ 3 دقائق
شرائح العرض
دليل الإستخدام
Placeholder
الشريحة الأولى
عنوان الشريحة الأولى
محتوى وصفي يعبئ فراغ الشريحة الأولى.
Placeholder
الشريحة الثانية
عنوان الشريحة الثانية
محتوى وصفي يعبئ فراغ الشريحة الأولى.
Placeholder
الشريحة الثالثة
عنوان الشريحة الثالثة
محتوى وصفي يعبئ فراغ الشريحة الأولى.
السابق
التالي
القوائم المنسدلة
دليل الإستخدام
زر القائمة المنسدلة
عنوان القائمة المنسدلة
عمل آخر
شيء آخر هنا
رابط منفصل
زر القائمة المنسدلة
عنوان القائمة المنسدلة
عمل آخر
شيء آخر هنا
رابط منفصل
زر القائمة المنسدلة
عنوان القائمة المنسدلة
عمل آخر
شيء آخر هنا
رابط منفصل
Primary
تبديل القائمة المنسدلة
عمل آخر
شيء آخر هنا
Secondary
تبديل القائمة المنسدلة
عمل آخر
شيء آخر هنا
Success
تبديل القائمة المنسدلة
عمل آخر
شيء آخر هنا
Info
تبديل القائمة المنسدلة
عمل آخر
شيء آخر هنا
Warning
تبديل القائمة المنسدلة
عمل آخر
شيء آخر هنا
Danger
تبديل القائمة المنسدلة
عمل آخر
شيء آخر هنا
زر القائمة المنسدلة لليسار
عنوان القائمة المنسدلة
عمل آخر
شيء آخر هنا
رابط منفصل
زر القائمة المنسدلة للأعلى
عنوان القائمة المنسدلة
عمل آخر
شيء آخر هنا
رابط منفصل
زر القائمة المنسدلة لليمين
عنوان القائمة المنسدلة
عمل آخر
شيء آخر هنا
رابط منفصل
قائمة منسدلة بمحاذاة نهاية الزر
عنوان القائمة المنسدلة
عمل آخر
رابط منفصل
مجموعة العناصر
دليل الإستخدام
عنصر معطل
عنصر ثاني
عنصر ثالث
عنصر رابع
وعنصر خامس أيضًا
عنصر
عنصر ثاني
عنصر ثالث
عنصر رابع
وعنصر خامس أيضًا
عنصر مجموعة قائمة default بسيط
عنصر مجموعة قائمة primary بسيط
عنصر مجموعة قائمة secondary بسيط
عنصر مجموعة قائمة success بسيط
عنصر مجموعة قائمة danger بسيط
عنصر مجموعة قائمة warning بسيط
عنصر مجموعة قائمة info بسيط
عنصر مجموعة قائمة light بسيط
عنصر مجموعة قائمة dark بسيط
الصندوق العائم
دليل الإستخدام
إطلاق صندوق عائم تجريبي
إطلاق صندوق عائم عالق
صندوق عائم متنصف عاموديًا وقابل للتمرير
صندوق عائم يملأ الشاشة
التنقل
دليل الإستخدام
محتوى لتوضيح كيف يعمل التبويب. هذا المحتوى مرتبط بتبويب الصفحة الرئيسية. إذن، أمامنا بعض التحدّيات الصعبة. لكن لا يمكننا أن نعتمد على التطورات التكنولوجية وحدها في ميدان قوى السوق الحرة، لإخراجنا من هذه الورطة، لا سيّما أنها نفسها، مقرونة بالافتقار إلى البصيرة، هي التي أودت بنا إلى هذا التبدُّل المناخي في الدرجة الأولى.
محتوى لتوضيح كيف يعمل التبويب. هذا المحتوى مرتبط بتبويب الملف الشخصي. معظم البشر في بلدان العالَم النامي، لم يقتنوا بعد مكيّفهم الأول، والمشكلة إلى ازدياد. فمعظم البلدان النامية هي من البلدان الأشد حرارة والأكثر اكتظاظًا بالسكان في العالم.
محتوى لتوضيح كيف يعمل التبويب. هذا المحتوى مرتبط بتبويب الاتصال بنا. أمامنا بعض التحدّيات الصعبة. لكن لا يمكننا أن نعتمد على التطورات التكنولوجية وحدها في ميدان قوى السوق الحرة، بل يجب وضع معايير جدوى جديدة لشركات البناء ومعايير أعلى لجدوى التكييف من أجل تحفيز الحلول المستدامة قانونيًا.
رابط
رابط
معطل
شريط التنقل
دليل الإستخدام
ترقيم الصفحات
دليل الإستخدام
الصناديق المنبثقة
دليل الإستخدام
انقر لعرض/إخفاء الصندوق المنبثق
انبثاق إلى الأعلى
انبثاق إلى اليسار
انبثاق إلى الأسفل
انبثاق إلى اليمين
شريط التقدم
دليل الإستخدام
100%
المخطوطة
دليل الإستخدام
@fat
محتوى لتوضيح كيف تعمل المخطوطة. ببساطة، المخطوطة عبارة عن منشور طويل يحتوي على عدة أقسام، ولديه شريط تنقل يسهل الوصول إلى هذه الأقسام الفرعية.
@mdo
بصرف النظر عن تحسيننا جدوى المكيّفات أو عدم تحسينها، فإن الطلب على الطاقة سيزداد. وطبقاً لما جاء في مقالة معهد ماساشوستس للتكنولوجيا، السالف ذكره، ثمَّة أمر يجب عدم إغفاله، وهو كيف أن هذا الطلب سيضغط على نظم توفير الطاقة الحالية. إذ لا بد من إعادة تأهيل كل شبكات الكهرباء، وتوسيعها لتلبية طلب الطاقة في زمن الذروة، خلال موجات الحرارة المتزايدة. فحين يكون الحر شديداً يجنح الناس إلى البقاء في الداخل، وإلى زيادة تشغيل المكيّفات، سعياً إلى جو لطيف وهم يستخدمون أدوات وأجهزة مختلفة أخرى.
واحد
وكل هذه الأمور المتزامنة من تشغيل الأجهزة، يزيد الضغط على شبكات الطاقة، كما أسلفنا. لكن مجرد زيادة سعة الشبكة ليس كافياً. إذ لا بد من تطوير الشبكات الذكية التي تستخدم الجسّاسات، ونظم المراقبة، والبرامج الإلكترونية، لتحديد متى يكون الشاغلون في المبنى، ومتى يكون ثمَّة حاجة إلى الطاقة، ومتى تكون الحرارة منخفضة، وبذلك يخرج الناس، فلا يستخدمون كثيراً من الكهرباء.
اثنان
مع الأسف، كل هذه الحلول المبتكرة مكلِّفة، وهذا ما يجعلها عديمة الجدوى في نظر بعض الشركات الخاصة والمواطن المتقشّف. إن بعض الأفراد الواعين بيئياً يبذلون قصارى جهدهم في تقليص استهلاكهم من الطاقة، ويعون جيداً أهمية أجهزة التكييف المجدية والأرفق بالبيئة. ولكن جهات كثيرة لن تتحرّك لمجرد حافز سلامة المناخ ووقف هدر الطاقة، ما دامت لا تحركها حوافز قانونية. وعلى الحكومات أن تُقدِم عند الاهتمام بالتغيّر المناخي، على وضع التشريعات المناسبة. فبالنظم والحوافز والدعم، يمكن دفع الشركات إلى اعتماد الحلول الأجدى في مكاتبها.
ثلاثة
وكما يتبيّن لنا، من عدد الحلول الملطِّفة للمشكلة، ومن تنوّعها، وهي الحلول التي أسلفنا الحديث عنها، فإن التكنولوجيا التي نحتاج إليها من أجل معالجة هذه التحديات، هي في مدى قدرتنا، لكنها ربما تتطلّب بعض التحسين، ودعماً استثمارياً أكبر!
ولا مانع من إضافة محتوى آخر ليس تحت أي قسم معين.
الدوائر المتحركة
دليل الإستخدام
جار التحميل...
جار التحميل...
جار التحميل...
جار التحميل...
جار التحميل...
جار التحميل...
جار التحميل...
جار التحميل...
جار التحميل...
جار التحميل...
جار التحميل...
جار التحميل...
جار التحميل...
جار التحميل...
جار التحميل...
جار التحميل...
الإشعارات
دليل الإستخدام
قبل 11 دقيقة
مرحبًا بالعالم! هذه رسالة إشعار.
التلميحات
دليل الإستخدام
تلميح يظهر في الأعلى
تلميح يظهر على اليسار
تلميح يظهر في الأسفل
تلميح يظهر على اليمين
تلميح مع HTML

--- 016_getting-started_introduction.txt ---
Quick start
Get started by including Bootstrap’s production-ready CSS and JavaScript via CDN without the need for any build steps. See it in practice with this
Create a new
index.html
file in your project root.
Include the
<meta name="viewport">
tag as well for
proper responsive behavior
in mobile devices.
doctype
html
html
lang
head
meta
charset
utf-8
meta
name
viewport
content
width=device-width, initial-scale=1
title
title
head
body
Hello, world!
body
html
Include Bootstrap’s CSS and JS.
Place the
<link>
tag in the
<head>
for our CSS, and the
<script>
tag for our JavaScript bundle (including Popper for positioning dropdowns, popovers, and tooltips) before the closing
</body>
. Learn more about our
CDN links
doctype
html
html
lang
head
meta
charset
utf-8
meta
name
viewport
content
width=device-width, initial-scale=1
title
title
link
href
https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css
stylesheet
integrity
sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr
crossorigin
anonymous
head
body
Hello, world!
script
https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js
integrity
sha384-ndDqU0Gzau9qJ1lfW4pNLlhNTkCfHzAVBReH9diLvGRem5+R9g2FzA8ZGN954O5Q
crossorigin
anonymous
script
body
html
You can also include
Popper
and our JS separately. If you don’t plan to use dropdowns, popovers, or tooltips, save some kilobytes by not including Popper.
script
https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js
integrity
sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r
crossorigin
anonymous
script
script
https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.min.js
integrity
sha384-7qAoOXltbVP82dhxHAUje59V5r2YsVfBafyUDxEdApLPmcdhBPg1DKg1ERo0BZlK
crossorigin
anonymous
script
Hello, world!
Open the page in your browser of choice to see your Bootstrapped page. Now you can start building with Bootstrap by creating your own
layout
, adding dozens of
components
, and utilizing
our official examples
CDN links
As reference, here are our primary CDN links.
Description
https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css
https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js
You can also use the CDN to fetch any of our
additional builds listed in the Contents page
When using CDN links, be sure to use the
integrity
attribute to verify the correct files and versions. These hashes are unique to each file and version of Bootstrap, so when you update to a new version, be sure the
integrity
attribute is also updated.
We also include a
crossorigin="anonymous"
attribute to prevent
CORS
errors.
Next steps
Read a bit more about some
important global environment settings
that Bootstrap utilizes.
Read about what’s included in Bootstrap in our
contents section
and the list of
components that require JavaScript
below.
Need a little more power? Consider building with Bootstrap by
including the source files via package manager
Looking to use Bootstrap as a module with
<script type="module">
? Please refer to our
using Bootstrap as a module
section.
JS components
Curious which components explicitly require our JavaScript and Popper? If you’re at all unsure about the general page structure, keep reading for an example page template.
Accordions for extending our Collapse plugin
Alerts for dismissing
Buttons for toggling states and checkbox/radio functionality
Carousel for all slide behaviors, controls, and indicators
Collapse for toggling visibility of content
Dropdowns for displaying and positioning (also requires
Popper
Modals for displaying, positioning, and scroll behavior
Navbar for extending our Collapse and Offcanvas plugins to implement responsive behaviors
Navs with the Tab plugin for toggling content panes
Offcanvases for displaying, positioning, and scroll behavior
Scrollspy for scroll behavior and navigation updates
Toasts for displaying and dismissing
Tooltips and popovers for displaying and positioning (also requires
Popper
Important globals
normalization
of cross browser styles. Let’s dive in.
HTML5 doctype
doctype
html
html
lang
html
Viewport meta
mobile first
, a strategy in which we optimize code for mobile devices first and then scale up components as necessary using CSS media queries. To ensure proper rendering and touch zooming for all devices, add the responsive viewport meta tag to your
<head>
meta
name
viewport
content
width=device-width, initial-scale=1
You can see an example of this in action in the
quick start
Box-sizing
For more straightforward sizing in CSS, we switch the global
box-sizing
value from
content-box
border-box
. This ensures
padding
does not affect the final computed width of an element, but it can cause problems with some third-party software like Google Maps and Google Custom Search Engine.
On the rare occasion you need to override it, use something like the following:
.selector-for-some-widget
box-sizing
content-box
With the above snippet, nested elements—including generated content via
::before
::after
—will all inherit the specified
box-sizing
for that
.selector-for-some-widget
Learn more about
box model and sizing at CSS Tricks
Reboot
For improved cross-browser rendering, we use
Reboot
to correct inconsistencies across browsers and devices while providing slightly more opinionated resets to common HTML elements.
Community
Stay up-to-date on the development of Bootstrap and reach out to the community with these helpful resources.
Read and subscribe to
The Official Bootstrap Blog
Ask questions and explore
our GitHub Discussions
Discuss, ask questions, and more on
the community Discord
Chat with fellow Bootstrappers in IRC. On the
irc.libera.chat
server, in the
#bootstrap
channel.
Implementation help may be found at Stack Overflow (tagged
Developers should use the keyword
on packages that modify or add to the functionality of Bootstrap when distributing through
or similar delivery mechanisms for maximum discoverability.
You can also follow
@getbootstrap on X
for the latest gossip and awesome music videos.

--- 015_layout_css-grid.txt ---
Heads up—our CSS Grid system is experimental and opt-in as of v5.1.0!
We included it in our documentation’s CSS to demonstrate it for you, but it’s disabled by default. Keep reading to learn how to enable it in your projects.
How it works
With Bootstrap 5, we’ve added the option to enable a separate grid system that’s built on CSS Grid, but with a Bootstrap twist. You still get classes you can apply on a whim to build responsive layouts, but with a different approach under the hood.
CSS Grid is opt-in.
Disable the default grid system by setting
$enable-grid-classes: false
and enable the CSS Grid by setting
$enable-cssgrid: true
. Then, recompile your Sass.
Replace instances of
.row
with
.grid
.grid
class sets
display: grid
and creates a
grid-template
that you build on with your HTML.
Replace
.col-*
classes with
.g-col-*
classes.
This is because our CSS Grid columns use the
grid-column
property instead of
width
Columns and gutter sizes are set via CSS variables.
Set these on the parent
.grid
and customize however you want, inline or in a stylesheet, with
--bs-columns
--bs-gap
In the future, Bootstrap will likely shift to a hybrid solution as the
property has achieved nearly full browser support for flexbox.
Key differences
Compared to the default grid system:
Flex utilities don’t affect the CSS Grid columns in the same way.
Gaps replaces gutters. The
property replaces the horizontal
padding
from our default grid system and functions more like
margin
As such, unlike
.row
.grid
s have no negative margins and margin utilities cannot be used to change the grid gutters. Grid gaps are applied horizontally and vertically by default. See the
customizing section
for more details.
Inline and custom styles should be viewed as replacements for modifier classes (e.g.,
style="--bs-columns: 3;"
class="row-cols-3"
Nesting works similarly, but may require you to reset your column counts on each instance of a nested
.grid
. See the
nesting section
for details.
Examples
Three columns
Three equal-width columns across all viewports and devices can be created by using the
.g-col-4
classes. Add
responsive classes
to change the layout by viewport size.
.g-col-4
.g-col-4
.g-col-4
html
class
grid text-center
class
g-col-4
.g-col-4
class
g-col-4
.g-col-4
class
g-col-4
.g-col-4
Responsive
Use responsive classes to adjust your layout across viewports. Here we start with two columns on the narrowest viewports, and then grow to three columns on medium viewports and above.
.g-col-6 .g-col-md-4
.g-col-6 .g-col-md-4
.g-col-6 .g-col-md-4
html
class
grid text-center
class
g-col-6 g-col-md-4
.g-col-6 .g-col-md-4
class
g-col-6 g-col-md-4
.g-col-6 .g-col-md-4
class
g-col-6 g-col-md-4
.g-col-6 .g-col-md-4
Compare that to this two column layout at all viewports.
.g-col-6
.g-col-6
html
class
grid text-center
class
g-col-6
.g-col-6
class
g-col-6
.g-col-6
Wrapping
Grid items automatically wrap to the next line when there’s no more room horizontally. Note that the
applies to horizontal and vertical gaps between grid items.
.g-col-6
.g-col-6
.g-col-6
.g-col-6
html
class
grid text-center
class
g-col-6
.g-col-6
class
g-col-6
.g-col-6
class
g-col-6
.g-col-6
class
g-col-6
.g-col-6
Starts
Start classes aim to replace our default grid’s offset classes, but they’re not entirely the same. CSS Grid creates a grid template through styles that tell browsers to “start at this column” and “end at this column”. Those properties are
grid-column-start
grid-column-end
. Start classes are shorthand for the former. Pair them with the column classes to size and align your columns however you need. Start classes begin at
is an invalid value for these properties.
.g-col-3 .g-start-2
.g-col-4 .g-start-6
html
class
grid text-center
class
g-col-3 g-start-2
.g-col-3 .g-start-2
class
g-col-4 g-start-6
.g-col-4 .g-start-6
Auto columns
When there are no classes on the grid items (the immediate children of a
.grid
), each grid item will automatically be sized to one column.
html
class
grid text-center
This behavior can be mixed with grid column classes.
.g-col-6
html
class
grid text-center
class
g-col-6
.g-col-6
Nesting
Similar to our default grid system, our CSS Grid allows for easy nesting of
.grid
s. However, unlike the default, this grid inherits changes in the rows, columns, and gaps. Consider the example below:
We override the default number of columns with a local CSS variable:
--bs-columns: 3
In the first auto-column, the column count is inherited and each column is one-third of the available width.
In the second auto-column, we’ve reset the column count on the nested
.grid
to 12 (our default).
The third auto-column has no nested content.
In practice this allows for more complex and custom layouts when compared to our default grid system.
First auto-column
Auto-column
Auto-column
Second auto-column
6 of 12
4 of 12
2 of 12
Third auto-column
html
class
grid text-center overflow-x-auto
style
--bs-columns
First auto-column
class
grid
Auto-column
Auto-column
Second auto-column
class
grid
style
--bs-columns
class
g-col-6
6 of 12
class
g-col-4
4 of 12
class
g-col-2
2 of 12
Third auto-column
Customizing
Customize the number of columns, the number of rows, and the width of the gaps with local CSS variables.
Variable
Fallback value
Description
--bs-rows
The number of rows in your grid template
--bs-columns
The number of columns in your grid template
--bs-gap
1.5rem
The size of the gap between columns (vertical and horizontal)
These CSS variables have no default value; instead, they apply fallback values that are used
until
a local instance is provided. For example, we use
var(--bs-rows, 1)
for our CSS Grid rows, which ignores
--bs-rows
because that hasn’t been set anywhere yet. Once it is, the
.grid
instance will use that value instead of the fallback value of
No grid classes
Immediate children elements of
.grid
are grid items, so they’ll be sized without explicitly adding a
.g-col
class.
Auto-column
Auto-column
Auto-column
html
class
grid text-center
style
--bs-columns
Auto-column
Auto-column
Auto-column
Columns and gaps
Adjust the number of columns and the gap.
.g-col-2
.g-col-2
html
class
grid text-center
style
--bs-columns
--bs-gap
5rem
class
g-col-2
.g-col-2
class
g-col-2
.g-col-2
.g-col-6
.g-col-4
html
class
grid text-center
style
--bs-columns
--bs-gap
1rem
class
g-col-6
.g-col-6
class
g-col-4
.g-col-4
Adding rows
Adding more rows and changing the placement of columns:
Auto-column
Auto-column
Auto-column
html
class
grid text-center
style
--bs-rows
--bs-columns
Auto-column
class
g-start-2
style
grid-row
Auto-column
class
g-start-3
style
grid-row
Auto-column
Gaps
Change the vertical gaps only by modifying the
row-gap
. Note that we use
.grid
s, but
row-gap
column-gap
can be modified as needed.
.g-col-6
.g-col-6
.g-col-6
.g-col-6
html
class
grid text-center
style
row-gap
class
g-col-6
.g-col-6
class
g-col-6
.g-col-6
class
g-col-6
.g-col-6
class
g-col-6
.g-col-6
Because of that, you can have different vertical and horizontal
s, which can take a single value (all sides) or a pair of values (vertical and horizontal). This can be applied with an inline style for
, or with our
--bs-gap
CSS variable.
.g-col-6
.g-col-6
.g-col-6
.g-col-6
html
class
grid text-center
style
--bs-gap
.25rem 1rem
class
g-col-6
.g-col-6
class
g-col-6
.g-col-6
class
g-col-6
.g-col-6
class
g-col-6
.g-col-6
Sass
One limitation of the CSS Grid is that our default classes are still generated by two Sass variables,
$grid-columns
$grid-gutter-width
. This effectively predetermines the number of classes generated in our compiled CSS. You have two options here:
Modify those default Sass variables and recompile your CSS.
Use inline or custom styles to augment the provided classes.
For example, you can increase the column count and change the gap size, and then size your “columns” with a mix of inline styles and predefined CSS Grid column classes (e.g.,
.g-col-4
14 columns
.g-col-4
html
class
grid text-center
style
--bs-columns
--bs-gap
.5rem
style
grid-column
span 14
14 columns
class
g-col-4
.g-col-4

--- 125_utilities_float.txt ---
Overview
These utility classes float an element to the left or right, or disable floating, based on the current viewport size using the
float
property
!important
is included to avoid specificity issues. These use the same viewport breakpoints as our grid system. Please be aware float utilities have no effect on flex items.
Float start on all viewport sizes
Float end on all viewport sizes
Don’t float on all viewport sizes
html
class
float-start
Float start on all viewport sizes
class
float-end
Float end on all viewport sizes
class
float-none
Don’t float on all viewport sizes
Use the
clearfix helper
on a parent element to clear floats.
Responsive
Responsive variations also exist for each
float
value.
Float end on viewports sized SM (small) or wider
Float end on viewports sized MD (medium) or wider
Float end on viewports sized LG (large) or wider
Float end on viewports sized XL (extra large) or wider
Float end on viewports sized XXL (extra extra large) or wider
html
class
float-sm-end
Float end on viewports sized SM (small) or wider
class
float-md-end
Float end on viewports sized MD (medium) or wider
class
float-lg-end
Float end on viewports sized LG (large) or wider
class
float-xl-end
Float end on viewports sized XL (extra large) or wider
class
float-xxl-end
Float end on viewports sized XXL (extra extra large) or wider
Here are all the support classes:
.float-start
.float-end
.float-none
.float-sm-start
.float-sm-end
.float-sm-none
.float-md-start
.float-md-end
.float-md-none
.float-lg-start
.float-lg-end
.float-lg-none
.float-xl-start
.float-xl-end
.float-xl-none
.float-xxl-start
.float-xxl-end
.float-xxl-none
Sass utilities API
Float utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"float"
responsive
true
property
float
values
start
left
right
none
none

--- 151_helpers_visually-hidden.txt ---
Visually hide an element while still allowing it to be exposed to assistive technologies (such as screen readers) with
.visually-hidden
. Use
.visually-hidden-focusable
to visually hide an element by default, but to display it when it’s focused (e.g. by a keyboard-only user).
.visually-hidden-focusable
can also be applied to a container–thanks to
:focus-within
, the container will be displayed when any child element of the container receives focus.
Title for screen readers
A container with a
focusable element
html
class
visually-hidden
Title for screen readers
class
visually-hidden-focusable
href
#content
class
visually-hidden-focusable
A container with a
href
focusable element
Both
visually-hidden
visually-hidden-focusable
can also be used as mixins.
// Usage as a mixin
.visually-hidden-title
@include
visually-hidden
.skip-navigation
@include
visually-hidden-focusable

--- 145_components_list-group.txt ---
Basic example
The most basic list group is an unordered list with list items and the proper classes. Build upon it with the options that follow, or with your own CSS as needed.
An item
A second item
A third item
A fourth item
And a fifth one
html
class
list-group
class
list-group-item
An item
class
list-group-item
A second item
class
list-group-item
A third item
class
list-group-item
A fourth item
class
list-group-item
And a fifth one
Active items
.active
to a
.list-group-item
to indicate the current active selection.
An active item
A second item
A third item
A fourth item
And a fifth one
html
class
list-group
class
list-group-item active
aria-current
true
An active item
class
list-group-item
A second item
class
list-group-item
A third item
class
list-group-item
A fourth item
class
list-group-item
And a fifth one
Links and buttons
s or
<button>
s to create
actionable
list group items with hover, disabled, and active states by adding
.list-group-item-action
. We separate these pseudo-classes to ensure list groups made of non-interactive elements (like
<li>
s or
<div>
s) don’t provide a click or tap affordance.
Make
.list-group-item-action
instances
appear
disabled by adding
.disabled
, and
aria-disabled="true"
to inform assistive technologies that the element is disabled. You may require additional JavaScript to fully disable links and buttons.
Be sure to
not use the standard
.btn
classes here
The current link item
A second link item
A third link item
A fourth link item
A disabled link item
html
class
list-group
href
class
list-group-item list-group-item-action active
aria-current
true
The current link item
href
class
list-group-item list-group-item-action
A second link item
href
class
list-group-item list-group-item-action
A third link item
href
class
list-group-item list-group-item-action
A fourth link item
href
class
list-group-item list-group-item-action disabled
aria-disabled
true
A disabled link item
With
<button>
s, you can also make use of the
disabled
attribute instead of the
.disabled
class. Sadly,
s don’t support the disabled attribute.
The current button
A second button item
A third button item
A fourth button item
A disabled button item
html
class
list-group
button
type
button
class
list-group-item list-group-item-action active
aria-current
true
The current button
button
button
type
button
class
list-group-item list-group-item-action
A second button item
button
button
type
button
class
list-group-item list-group-item-action
A third button item
button
button
type
button
class
list-group-item list-group-item-action
A fourth button item
button
button
type
button
class
list-group-item list-group-item-action
disabled
A disabled button item
button
Flush
.list-group-flush
to remove some borders and rounded corners to render list group items edge-to-edge in a parent container (e.g., cards).
An item
A second item
A third item
A fourth item
And a fifth one
html
class
list-group list-group-flush
class
list-group-item
An item
class
list-group-item
A second item
class
list-group-item
A third item
class
list-group-item
A fourth item
class
list-group-item
And a fifth one
Numbered
Add the
.list-group-numbered
modifier class (and optionally use an
<ol>
element) to opt into numbered list group items. Numbers are generated via CSS (as opposed to a
<ol>
s default browser styling) for better placement inside list group items and to allow for better customization.
Numbers are generated by
counter-reset
on the
<ol>
, and then styled and placed with a
::before
pseudo-element on the
<li>
with
counter-increment
content
A list item
A list item
A list item
html
class
list-group list-group-numbered
class
list-group-item
A list item
class
list-group-item
A list item
class
list-group-item
A list item
These work great with custom content as well.
Subheading
Content for list item
Subheading
Content for list item
Subheading
Content for list item
html
class
list-group list-group-numbered
class
list-group-item d-flex justify-content-between align-items-start
class
ms-2 me-auto
class
fw-bold
Subheading
Content for list item
span
class
badge text-bg-primary rounded-pill
span
class
list-group-item d-flex justify-content-between align-items-start
class
ms-2 me-auto
class
fw-bold
Subheading
Content for list item
span
class
badge text-bg-primary rounded-pill
span
class
list-group-item d-flex justify-content-between align-items-start
class
ms-2 me-auto
class
fw-bold
Subheading
Content for list item
span
class
badge text-bg-primary rounded-pill
span
Horizontal
.list-group-horizontal
to change the layout of list group items from vertical to horizontal across all breakpoints. Alternatively, choose a responsive variant
.list-group-horizontal-{sm|md|lg|xl|xxl}
to make a list group horizontal starting at that breakpoint’s
min-width
. Currently
horizontal list groups cannot be combined with flush list groups.
ProTip:
Want equal-width list group items when horizontal? Add
.flex-fill
to each list group item.
An item
A second item
A third item
An item
A second item
A third item
An item
A second item
A third item
An item
A second item
A third item
An item
A second item
A third item
An item
A second item
A third item
html
class
list-group list-group-horizontal
class
list-group-item
An item
class
list-group-item
A second item
class
list-group-item
A third item
class
list-group list-group-horizontal-sm
class
list-group-item
An item
class
list-group-item
A second item
class
list-group-item
A third item
class
list-group list-group-horizontal-md
class
list-group-item
An item
class
list-group-item
A second item
class
list-group-item
A third item
class
list-group list-group-horizontal-lg
class
list-group-item
An item
class
list-group-item
A second item
class
list-group-item
A third item
class
list-group list-group-horizontal-xl
class
list-group-item
An item
class
list-group-item
A second item
class
list-group-item
A third item
class
list-group list-group-horizontal-xxl
class
list-group-item
An item
class
list-group-item
A second item
class
list-group-item
A third item
Variants
Heads up!
As of v5.3.0, the
list-group-item-variant()
Sass mixin is deprecated. List group item variants now have their CSS variables overridden in
a Sass loop
Use contextual classes to style list items with a stateful background and color.
A simple default list group item
A simple primary list group item
A simple secondary list group item
A simple success list group item
A simple danger list group item
A simple warning list group item
A simple info list group item
A simple light list group item
A simple dark list group item
html
class
list-group
class
list-group-item
A simple default list group item
class
list-group-item list-group-item-primary
A simple primary list group item
class
list-group-item list-group-item-secondary
A simple secondary list group item
class
list-group-item list-group-item-success
A simple success list group item
class
list-group-item list-group-item-danger
A simple danger list group item
class
list-group-item list-group-item-warning
A simple warning list group item
class
list-group-item list-group-item-info
A simple info list group item
class
list-group-item list-group-item-light
A simple light list group item
class
list-group-item list-group-item-dark
A simple dark list group item
For links and buttons
Contextual classes also work with
.list-group-item-action
<button>
elements. Note the addition of the hover styles here not present in the previous example. Also supported is the
.active
state; apply it to indicate an active selection on a contextual list group item.
A simple default list group item
A simple primary list group item
A simple secondary list group item
A simple success list group item
A simple danger list group item
A simple warning list group item
A simple info list group item
A simple light list group item
A simple dark list group item
html
class
list-group
href
class
list-group-item list-group-item-action
A simple default list group item
href
class
list-group-item list-group-item-action list-group-item-primary
A simple primary list group item
href
class
list-group-item list-group-item-action list-group-item-secondary
A simple secondary list group item
href
class
list-group-item list-group-item-action list-group-item-success
A simple success list group item
href
class
list-group-item list-group-item-action list-group-item-danger
A simple danger list group item
href
class
list-group-item list-group-item-action list-group-item-warning
A simple warning list group item
href
class
list-group-item list-group-item-action list-group-item-info
A simple info list group item
href
class
list-group-item list-group-item-action list-group-item-light
A simple light list group item
href
class
list-group-item list-group-item-action list-group-item-dark
A simple dark list group item
Accessibility tip:
Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a
sufficient
color contrast
) or is included through alternative means, such as additional text hidden with the
.visually-hidden
class.
With badges
Add badges to any list group item to show unread counts, activity, and more with the help of some
utilities
A list item
A second list item
A third list item
html
class
list-group
class
list-group-item d-flex justify-content-between align-items-center
A list item
span
class
badge text-bg-primary rounded-pill
span
class
list-group-item d-flex justify-content-between align-items-center
A second list item
span
class
badge text-bg-primary rounded-pill
span
class
list-group-item d-flex justify-content-between align-items-center
A third list item
span
class
badge text-bg-primary rounded-pill
span
Custom content
Add nearly any HTML within, even for linked list groups like the one below, with the help of
flexbox utilities
List group item heading
3 days ago
Some placeholder content in a paragraph.
And some small print.
List group item heading
3 days ago
Some placeholder content in a paragraph.
And some muted small print.
List group item heading
3 days ago
Some placeholder content in a paragraph.
And some muted small print.
html
class
list-group
href
class
list-group-item list-group-item-action active
aria-current
true
class
d-flex w-100 justify-content-between
class
mb-1
List group item heading
small
3 days ago
small
class
mb-1
Some placeholder content in a paragraph.
small
And some small print.
small
href
class
list-group-item list-group-item-action
class
d-flex w-100 justify-content-between
class
mb-1
List group item heading
small
class
text-body-secondary
3 days ago
small
class
mb-1
Some placeholder content in a paragraph.
small
class
text-body-secondary
And some muted small print.
small
href
class
list-group-item list-group-item-action
class
d-flex w-100 justify-content-between
class
mb-1
List group item heading
small
class
text-body-secondary
3 days ago
small
class
mb-1
Some placeholder content in a paragraph.
small
class
text-body-secondary
And some muted small print.
small
Checkboxes and radios
Place Bootstrap’s checkboxes and radios within list group items and customize as needed. You can use them without
<label>
s, but please remember to include an
aria-label
attribute and value for accessibility.
First checkbox
Second checkbox
Third checkbox
html
class
list-group
class
list-group-item
input
class
form-check-input me-1
type
checkbox
value
firstCheckbox
label
class
form-check-label
firstCheckbox
First checkbox
label
class
list-group-item
input
class
form-check-input me-1
type
checkbox
value
secondCheckbox
label
class
form-check-label
secondCheckbox
Second checkbox
label
class
list-group-item
input
class
form-check-input me-1
type
checkbox
value
thirdCheckbox
label
class
form-check-label
thirdCheckbox
Third checkbox
label
First radio
Second radio
Third radio
html
class
list-group
class
list-group-item
input
class
form-check-input me-1
type
radio
name
listGroupRadio
value
firstRadio
checked
label
class
form-check-label
firstRadio
First radio
label
class
list-group-item
input
class
form-check-input me-1
type
radio
name
listGroupRadio
value
secondRadio
label
class
form-check-label
secondRadio
Second radio
label
class
list-group-item
input
class
form-check-input me-1
type
radio
name
listGroupRadio
value
thirdRadio
label
class
form-check-label
thirdRadio
Third radio
label
You can use
.stretched-link
<label>
s to make the whole list group item clickable.
First checkbox
Second checkbox
Third checkbox
html
class
list-group
class
list-group-item
input
class
form-check-input me-1
type
checkbox
value
firstCheckboxStretched
label
class
form-check-label stretched-link
firstCheckboxStretched
First checkbox
label
class
list-group-item
input
class
form-check-input me-1
type
checkbox
value
secondCheckboxStretched
label
class
form-check-label stretched-link
secondCheckboxStretched
Second checkbox
label
class
list-group-item
input
class
form-check-input me-1
type
checkbox
value
thirdCheckboxStretched
label
class
form-check-label stretched-link
thirdCheckboxStretched
Third checkbox
label
Variables
Added in v5.2.0
As part of Bootstrap’s evolving CSS variables approach, list groups now use local CSS variables on
.list-group
for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
scss/_list-group.scss
#{$prefix}
list-group-color
#{$list-group-color}
#{$prefix}
list-group-bg
#{$list-group-bg}
#{$prefix}
list-group-border-color
#{$list-group-border-color}
#{$prefix}
list-group-border-width
#{$list-group-border-width}
#{$prefix}
list-group-border-radius
#{$list-group-border-radius}
#{$prefix}
list-group-item-padding-x
#{$list-group-item-padding-x}
#{$prefix}
list-group-item-padding-y
#{$list-group-item-padding-y}
#{$prefix}
list-group-action-color
#{$list-group-action-color}
#{$prefix}
list-group-action-hover-color
#{$list-group-action-hover-color}
#{$prefix}
list-group-action-hover-bg
#{$list-group-hover-bg}
#{$prefix}
list-group-action-active-color
#{$list-group-action-active-color}
#{$prefix}
list-group-action-active-bg
#{$list-group-action-active-bg}
#{$prefix}
list-group-disabled-color
#{$list-group-disabled-color}
#{$prefix}
list-group-disabled-bg
#{$list-group-disabled-bg}
#{$prefix}
list-group-active-color
#{$list-group-active-color}
#{$prefix}
list-group-active-bg
#{$list-group-active-bg}
#{$prefix}
list-group-active-border-color
#{$list-group-active-border-color}
Sass variables
scss/_variables.scss
$list-group-color
#{$prefix}
body-color
$list-group-bg
#{$prefix}
body-bg
$list-group-border-color
#{$prefix}
border-color
$list-group-border-width
#{$prefix}
border-width
$list-group-border-radius
#{$prefix}
border-radius
$list-group-item-padding-y
$spacer
$list-group-item-padding-x
$spacer
// fusv-disable
$list-group-item-bg-scale
-80%
// Deprecated in v5.3.0
$list-group-item-color-scale
// Deprecated in v5.3.0
// fusv-enable
$list-group-hover-bg
#{$prefix}
tertiary-bg
$list-group-active-color
$component-active-color
$list-group-active-bg
$component-active-bg
$list-group-active-border-color
$list-group-active-bg
$list-group-disabled-color
#{$prefix}
secondary-color
$list-group-disabled-bg
$list-group-bg
$list-group-action-color
#{$prefix}
secondary-color
$list-group-action-hover-color
#{$prefix}
emphasis-color
$list-group-action-active-color
#{$prefix}
body-color
$list-group-action-active-bg
#{$prefix}
secondary-bg
Sass mixins
Deprecated in v5.3.0
scss/mixins/_list-group.scss
@mixin
list-group-item-variant
$state
$background
$color
.list-group-item-
#{$state}
color
$color
background-color
$background
.list-group-item-action
:hover,
:focus
color
$color
background-color
shade-color
$background
.active
color
$white
background-color
$color
border-color
$color
Sass loops
Loop that generates the modifier classes with an overriding of CSS variables.
scss/_list-group.scss
// List group contextual variants
// Add modifier classes to change text and background color on individual items.
// Organizationally, this must come after the `:hover` states.
@each
$state
map-keys
$theme-colors
.list-group-item-
#{$state}
#{$prefix}
list-group-color
#{$prefix}
#{$state}
-text-emphasis
#{$prefix}
list-group-bg
#{$prefix}
#{$state}
-bg-subtle
#{$prefix}
list-group-border-color
#{$prefix}
#{$state}
-border-subtle
#{$prefix}
list-group-action-hover-color
#{$prefix}
emphasis-color
#{$prefix}
list-group-action-hover-bg
#{$prefix}
#{$state}
-border-subtle
#{$prefix}
list-group-action-active-color
#{$prefix}
emphasis-color
#{$prefix}
list-group-action-active-bg
#{$prefix}
#{$state}
-border-subtle
#{$prefix}
list-group-active-color
#{$prefix}
#{$state}
-bg-subtle
#{$prefix}
list-group-active-bg
#{$prefix}
#{$state}
-text-emphasis
#{$prefix}
list-group-active-border-color
#{$prefix}
#{$state}
-text-emphasis
JavaScript behavior
Use the tab JavaScript plugin—include it individually or through the compiled
file—to extend our list group to create tabbable panes of local content.
Home
Profile
Messages
Settings
Some placeholder content in a paragraph relating to "Home". And some more content, used here just to pad out and fill this tab panel. In production, you would obviously have more real content here. And not just text. It could be anything, really. Text, images, forms.
Some placeholder content in a paragraph relating to "Profile". And some more content, used here just to pad out and fill this tab panel. In production, you would obviously have more real content here. And not just text. It could be anything, really. Text, images, forms.
Some placeholder content in a paragraph relating to "Messages". And some more content, used here just to pad out and fill this tab panel. In production, you would obviously have more real content here. And not just text. It could be anything, really. Text, images, forms.
Some placeholder content in a paragraph relating to "Settings". And some more content, used here just to pad out and fill this tab panel. In production, you would obviously have more real content here. And not just text. It could be anything, really. Text, images, forms.
class
class
col-4
class
list-group
list-tab
role
tablist
class
list-group-item list-group-item-action active
list-home-list
data-bs-toggle
list
href
#list-home
role
aria-controls
list-home
Home
class
list-group-item list-group-item-action
list-profile-list
data-bs-toggle
list
href
#list-profile
role
aria-controls
list-profile
Profile
class
list-group-item list-group-item-action
list-messages-list
data-bs-toggle
list
href
#list-messages
role
aria-controls
list-messages
Messages
class
list-group-item list-group-item-action
list-settings-list
data-bs-toggle
list
href
#list-settings
role
aria-controls
list-settings
Settings
class
col-8
class
tab-content
nav-tabContent
class
tab-pane fade show active
list-home
role
tabpanel
aria-labelledby
list-home-list
class
tab-pane fade
list-profile
role
tabpanel
aria-labelledby
list-profile-list
class
tab-pane fade
list-messages
role
tabpanel
aria-labelledby
list-messages-list
class
tab-pane fade
list-settings
role
tabpanel
aria-labelledby
list-settings-list
Using data attributes
You can activate a list group navigation without writing any JavaScript by simply specifying
data-bs-toggle="list"
or on an element. Use these data attributes on
.list-group-item
role
tabpanel
<!-- List group -->
class
list-group
myList
role
tablist
class
list-group-item list-group-item-action active
data-bs-toggle
list
href
#home
role
Home
class
list-group-item list-group-item-action
data-bs-toggle
list
href
#profile
role
Profile
class
list-group-item list-group-item-action
data-bs-toggle
list
href
#messages
role
Messages
class
list-group-item list-group-item-action
data-bs-toggle
list
href
#settings
role
Settings
<!-- Tab panes -->
class
tab-content
class
tab-pane active
home
role
tabpanel
class
tab-pane
profile
role
tabpanel
class
tab-pane
messages
role
tabpanel
class
tab-pane
settings
role
tabpanel
Via JavaScript
Enable tabbable list item via JavaScript (each list item needs to be activated individually):
const
triggerTabList
document
querySelectorAll
'#myTab a'
triggerTabList
forEach
triggerEl
const
tabTrigger
triggerEl
triggerEl
addEventListener
'click'
event
event
preventDefault
tabTrigger
show
You can activate individual list item in several ways:
const
triggerEl
document
querySelector
'#myTab a[href="#profile"]'
getInstance
triggerEl
show
// Select tab by name
const
triggerFirstTabEl
document
querySelector
'#myTab li:first-child a'
getInstance
triggerFirstTabEl
show
// Select first tab
Fade effect
To make tabs panel fade in, add
.fade
to each
.tab-pane
. The first tab pane must also have
.show
to make the initial content visible.
class
tab-content
class
tab-pane fade show active
home
role
tabpanel
class
tab-pane fade
profile
role
tabpanel
class
tab-pane fade
messages
role
tabpanel
class
tab-pane fade
settings
role
tabpanel
Methods
All API methods are asynchronous and start a transition.
They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored.
Learn more in our JavaScript docs.
Activates your content as a tab element.
You can create a tab instance with the constructor, for example:
const
bsTab
'#myTab'
Method
Description
dispose
Destroys an element’s tab.
getInstance
Static method which allows you to get the tab instance associated with a DOM element, you can use it like this:
getOrCreateInstance
Static method which returns a tab instance associated to a DOM element or create a new one in case it wasn’t initialized. You can use it like this:
show
Selects the given tab and shows its associated pane. Any other tab that was previously selected becomes unselected and its associated pane is hidden.
Returns to the caller before the tab pane has actually been shown
(i.e. before the
shown.bs.tab
event occurs).
Events
When showing a new tab, the events fire in the following order:
hide.bs.tab
(on the current active tab)
show.bs.tab
(on the to-be-shown tab)
hidden.bs.tab
(on the previous active tab, the same one as for the
hide.bs.tab
event)
shown.bs.tab
(on the newly-active just-shown tab, the same one as for the
show.bs.tab
event)
If no tab was already active, then the
hide.bs.tab
hidden.bs.tab
events will not be fired.
Event type
Description
hide.bs.tab
This event fires when a new tab is to be shown (and thus the previous active tab is to be hidden). Use
event.target
event.relatedTarget
to target the current active tab and the new soon-to-be-active tab, respectively.
hidden.bs.tab
This event fires after a new tab is shown (and thus the previous active tab is hidden). Use
event.target
event.relatedTarget
to target the previous active tab and the new active tab, respectively.
show.bs.tab
This event fires on tab show, but before the new tab has been shown. Use
event.target
event.relatedTarget
to target the active tab and the previous active tab (if available) respectively.
shown.bs.tab
This event fires on tab show after a tab has been shown. Use
event.target
event.relatedTarget
to target the active tab and the previous active tab (if available) respectively.
const
tabElms
document
querySelectorAll
'a[data-bs-toggle="list"]'
tabElms
forEach
tabElm
tabElm
addEventListener
'shown.bs.tab'
event
event
target
// newly activated tab
event
relatedTarget
// previous active tab

--- 115_examples.txt ---
Starters
Functional examples of using Bootstrap in common JS frameworks like Webpack, Parcel, Vite, and more you can edit in StackBlitz.
CDN starter
Instantly include Bootstrap's compiled CSS and JavaScript via the jsDelivr CDN.
Edit in StackBlitz
Sass & JS
Use npm to import and compile Bootstrap's Sass with Autoprefixer and Stylelint, plus our bundled JavaScript.
Edit in StackBlitz
Sass & ESM JS
Import and compile Bootstrap's Sass with Autoprefixer and Stylelint, and compile our source JavaScript with an ESM shim.
Edit in StackBlitz
Import and compile Bootstrap's Sass with Stylelint, and the Bootstrap color modes.
Edit in StackBlitz
Import and compile Bootstrap's Sass with Stylelint, PurgeCSS, and the Bootstrap Icons web font.
Edit in StackBlitz
Parcel
Import and bundle Bootstrap's source Sass and JavaScript via Parcel.
Edit in StackBlitz
React
Import and bundle Bootstrap's source Sass and JavaScript with React, Next.js, and React Bootstrap.
Edit in StackBlitz
Vite
Import and bundle Bootstrap's source Sass and JavaScript with Vite.
Edit in StackBlitz
Import and bundle Bootstrap's source Sass and JavaScript with Vue and Vite.
Edit in StackBlitz
Webpack
Import and bundle Bootstrap's source Sass and JavaScript with Webpack.
Edit in StackBlitz

--- 118_components_tooltips.txt ---
Overview
Things to know when using the tooltip plugin:
Tooltips rely on the third party library
Popper
for positioning. You must include
popper.min.js
before
, or use one
which contains Popper.
Tooltips are opt-in for performance reasons, so
you must initialize them yourself
Tooltips with zero-length titles are never displayed.
Specify
container: 'body'
to avoid rendering problems in more complex components (like our input groups, button groups, etc).
Triggering tooltips on hidden elements will not work.
Tooltips for
.disabled
disabled
elements must be triggered on a wrapper element.
When triggered from hyperlinks that span multiple lines, tooltips will be centered. Use
white-space: nowrap;
on your
s to avoid this behavior.
Tooltips must be hidden before their corresponding elements have been removed from the DOM.
Tooltips can be triggered thanks to an element inside a shadow DOM.
Got all that? Great, let’s see how they work with some examples.
By default, this component uses the built-in content sanitizer, which strips out any HTML elements that are not explicitly allowed. See the
sanitizer section in our JavaScript documentation
for more details.
The animation effect of this component is dependent on the
prefers-reduced-motion
media query. See the
reduced motion section of our accessibility documentation
Examples
Enable tooltips
As mentioned above, you must initialize tooltips before they can be used. One way to initialize all tooltips on a page would be to select them by their
data-bs-toggle
attribute, like so:
const
tooltipTriggerList
document
querySelectorAll
'[data-bs-toggle="tooltip"]'
const
tooltipList
tooltipTriggerList
tooltipTriggerEl
Tooltip
tooltipTriggerEl
Tooltips on links
Hover over the links below to see tooltips:
Placeholder text to demonstrate some
inline links
with tooltips. This is now just filler, no killer. Content placed here just to mimic the presence of
real text
. And all that just to give you an idea of how tooltips would look when used in real-world situations. So hopefully you’ve now seen how
these tooltips on links
can work in practice, once you use them on
your own
site or project.
html
class
muted
Placeholder text to demonstrate some
href
data-bs-toggle
tooltip
data-bs-title
Default tooltip
inline links
with tooltips. This is now just filler, no killer. Content placed here just to mimic the presence of
href
data-bs-toggle
tooltip
data-bs-title
Another tooltip
real text
. And all that just to give you an idea of how tooltips would look when used in real-world situations. So hopefully you’ve now seen how
href
data-bs-toggle
tooltip
data-bs-title
Another one here too
these tooltips on links
can work in practice, once you use them on
href
data-bs-toggle
tooltip
data-bs-title
The last tip!
your own
site or project.
Feel free to use either
title
data-bs-title
in your HTML. When
title
is used, Popper will replace it automatically with
data-bs-title
when the element is rendered.
Custom tooltips
Added in v5.2.0
You can customize the appearance of tooltips using
CSS variables
. We set a custom class with
data-bs-custom-class="custom-tooltip"
to scope our custom appearance and use it to override a local CSS variable.
site/src/scss/_component-examples.scss
.custom-tooltip
--bs-tooltip-bg
--bd-violet-bg
--bs-tooltip-color
--bs-white
Custom tooltip
html
button
type
button
class
btn btn-secondary
data-bs-toggle
tooltip
data-bs-placement
data-bs-custom-class
custom-tooltip
data-bs-title
This top tooltip is themed via CSS variables.
Custom tooltip
button
Directions
Hover over the buttons below to see the four tooltips directions: top, right, bottom, and left. Directions are mirrored when using Bootstrap in RTL.
Tooltip on top
Tooltip on right
Tooltip on bottom
Tooltip on left
Tooltip with HTML
button
type
button
class
btn btn-secondary
data-bs-toggle
tooltip
data-bs-placement
data-bs-title
Tooltip on top
Tooltip on top
button
button
type
button
class
btn btn-secondary
data-bs-toggle
tooltip
data-bs-placement
right
data-bs-title
Tooltip on right
Tooltip on right
button
button
type
button
class
btn btn-secondary
data-bs-toggle
tooltip
data-bs-placement
bottom
data-bs-title
Tooltip on bottom
Tooltip on bottom
button
button
type
button
class
btn btn-secondary
data-bs-toggle
tooltip
data-bs-placement
left
data-bs-title
Tooltip on left
Tooltip on left
button
And with custom HTML added:
button
type
button
class
btn btn-secondary
data-bs-toggle
tooltip
data-bs-html
true
data-bs-title
<em>Tooltip</em> <u>with</u> <b>HTML</b>
Tooltip with HTML
button
With an SVG:
Variables
Added in v5.2.0
As part of Bootstrap’s evolving CSS variables approach, tooltips now use local CSS variables on
.tooltip
for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
scss/_tooltip.scss
#{$prefix}
tooltip-zindex
#{$zindex-tooltip}
#{$prefix}
tooltip-max-width
#{$tooltip-max-width}
#{$prefix}
tooltip-padding-x
#{$tooltip-padding-x}
#{$prefix}
tooltip-padding-y
#{$tooltip-padding-y}
#{$prefix}
tooltip-margin
#{$tooltip-margin}
@include
$tooltip-font-size
#{$prefix}
tooltip-font-size
#{$prefix}
tooltip-color
#{$tooltip-color}
#{$prefix}
tooltip-bg
#{$tooltip-bg}
#{$prefix}
tooltip-border-radius
#{$tooltip-border-radius}
#{$prefix}
tooltip-opacity
#{$tooltip-opacity}
#{$prefix}
tooltip-arrow-width
#{$tooltip-arrow-width}
#{$prefix}
tooltip-arrow-height
#{$tooltip-arrow-height}
Sass variables
scss/_variables.scss
$tooltip-font-size
$font-size-sm
$tooltip-max-width
200px
$tooltip-color
#{$prefix}
body-bg
$tooltip-bg
#{$prefix}
emphasis-color
$tooltip-border-radius
#{$prefix}
border-radius
$tooltip-opacity
$tooltip-padding-y
$spacer
$tooltip-padding-x
$spacer
$tooltip-margin
null
// TODO: remove this in v6
$tooltip-arrow-width
.8rem
$tooltip-arrow-height
.4rem
// fusv-disable
$tooltip-arrow-color
null
// Deprecated in Bootstrap 5.2.0 for CSS variables
// fusv-enable
Usage
The tooltip plugin generates content and markup on demand, and by default places tooltips after their trigger element. Trigger the tooltip via JavaScript:
const
exampleEl
document
getElementById
'example'
const
tooltip
Tooltip
exampleEl
options
Tooltips automatically attempt to change positions when a parent container has
overflow: auto
overflow: scroll
, but still keeps the original placement’s positioning. Set the
boundary
option
(for the flip modifier using the
popperConfig
option) to any HTMLElement to override the default value,
'clippingParents'
, such as
document.body
const
tooltip
Tooltip
'#example'
boundary
document
body
// or document.querySelector('#boundary')
Markup
The required markup for a tooltip is only a
data
attribute and
title
on the HTML element you wish to have a tooltip. The generated markup of a tooltip is rather simple, though it does require a position (by default, set to
by the plugin).
Keep tooltips accessible to keyboard and assistive technology users
by only adding them to HTML elements that are traditionally keyboard-focusable and interactive (such as links or form controls). While other HTML elements can be made focusable by adding
tabindex="0"
, this can create annoying and confusing tab stops on non-interactive elements for keyboard users, and most assistive technologies currently do not announce tooltips in this situation. Additionally, do not rely solely on
hover
as the trigger for your tooltips as this will make them impossible to trigger for keyboard users.
<!-- HTML to write -->
href
data-bs-toggle
tooltip
data-bs-title
Some tooltip text!
Hover over me
<!-- Generated markup by the plugin -->
class
tooltip bs-tooltip-auto
role
tooltip
class
tooltip-arrow
class
tooltip-inner
Some tooltip text!
Disabled elements
Elements with the
disabled
attribute aren’t interactive, meaning users cannot focus, hover, or click them to trigger a tooltip (or popover). As a workaround, you’ll want to trigger the tooltip from a wrapper
<div>
<span>
, ideally made keyboard-focusable using
tabindex="0"
Disabled button
html
span
class
d-inline-block
tabindex
data-bs-toggle
tooltip
data-bs-title
Disabled tooltip
button
class
btn btn-primary
type
button
disabled
Disabled button
button
span
Options
As options can be passed via data attributes or JavaScript, you can append an option name to
data-bs-
, as in
data-bs-animation="{value}"
. Make sure to change the case type of the option name from “
camelCase
” to “
kebab-case
” when passing the options via data attributes. For example, use
data-bs-custom-class="beautifier"
instead of
data-bs-customClass="beautifier"
As of Bootstrap 5.2.0, all components support an
experimental
reserved data attribute
data-bs-config
that can house simple component configuration as a JSON string. When an element has
data-bs-config='{"delay":0, "title":123}'
data-bs-title="456"
attributes, the final
title
value will be
and the separate data attributes will override values given on
data-bs-config
. In addition, existing data attributes are able to house JSON values like
data-bs-delay='{"show":0,"hide":150}'
The final configuration object is the merged result of
data-bs-config
data-bs-
, and
js object
where the latest given key-value overrides the others.
Note that for security reasons the
sanitize
sanitizeFn
, and
allowList
options cannot be supplied using data attributes.
Name
Type
Default
Description
allowList
object
Default value
An object containing allowed tags and attributes. Those not explicitly allowed will be removed by
the content sanitizer
Exercise caution when adding to this list.
Refer to
OWASP’s Cross Site Scripting Prevention Cheat Sheet
for more information.
animation
boolean
true
Apply a CSS fade transition to the tooltip.
boundary
string, element
'clippingParents'
Overflow constraint boundary of the tooltip (applies only to Popper’s preventOverflow modifier). By default, it’s
'clippingParents'
and can accept an HTMLElement reference (via JavaScript only). For more information refer to Popper’s
detectOverflow docs
container
string, element, false
false
Appends the tooltip to a specific element. Example:
container: 'body'
. This option is particularly useful in that it allows you to position the tooltip in the flow of the document near the triggering element - which will prevent the tooltip from floating away from the triggering element during a window resize.
customClass
string, function
Add classes to the tooltip when it is shown. Note that these classes will be added in addition to any classes specified in the template. To add multiple classes, separate them with spaces:
'class-1 class-2'
. You can also pass a function that should return a single string containing additional class names.
delay
number, object
Delay showing and hiding the tooltip (ms)—doesn’t apply to manual trigger type. If a number is supplied, delay is applied to both hide/show. Object structure is:
delay: { "show": 500, "hide": 100 }
fallbackPlacements
array
['top', 'right', 'bottom', 'left']
Define fallback placements by providing a list of placements in array (in order of preference). For more information refer to Popper’s
behavior docs
html
boolean
false
Allow HTML in the tooltip. If true, HTML tags in the tooltip’s
title
will be rendered in the tooltip. If false,
innerText
property will be used to insert content into the DOM. Prefer text when dealing with user-generated input to
prevent XSS attacks
offset
array, string, function
[0, 6]
Offset of the tooltip relative to its target. You can pass a string in data attributes with comma separated values like:
data-bs-offset="10,20"
. When a function is used to determine the offset, it is called with an object containing the popper placement, the reference, and popper rects as its first argument. The triggering element DOM node is passed as the second argument. The function must return an array with two numbers:
skidding
distance
. For more information refer to Popper’s
offset docs
placement
string, function
'top'
How to position the tooltip: auto, top, bottom, left, right. When
auto
is specified, it will dynamically reorient the tooltip. When a function is used to determine the placement, it is called with the tooltip DOM node as its first argument and the triggering element DOM node as its second. The
this
context is set to the tooltip instance.
popperConfig
null, object, function
null
To change Bootstrap’s default Popper config, see
Popper’s configuration
. When a function is used to create the Popper configuration, it’s called with an object that contains the Bootstrap’s default Popper configuration. It helps you use and merge the default with your own configuration. The function must return a configuration object for Popper.
sanitize
boolean
true
Enable
content sanitization
. If true, the
template
content
title
options will be sanitized.
Exercise caution when disabling content sanitization.
Refer to
OWASP’s Cross Site Scripting Prevention Cheat Sheet
for more information. Vulnerabilities caused solely by disabling content sanitization are not considered within scope for Bootstrap’s security model.
sanitizeFn
null, function
null
Provide an alternative
content sanitization
function. This can be useful if you prefer to use a dedicated library to perform sanitization.
selector
string, false
false
If a selector is provided, tooltip objects will be delegated to the specified targets. In practice, this is used to also apply tooltips to dynamically added DOM elements (
jQuery.on
support). See
this issue
an informative example
Note
title
attribute must not be used as a selector.
template
string
'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'
Base HTML to use when creating the tooltip. The tooltip’s
title
will be injected into the
.tooltip-inner
.tooltip-arrow
will become the tooltip’s arrow. The outermost wrapper element should have the
.tooltip
class and
role="tooltip"
title
string, element, function
The tooltip title. If a function is given, it will be called with its
this
reference set to the element that the popover is attached to.
trigger
string
'hover focus'
How tooltip is triggered: click, hover, focus, manual. You may pass multiple triggers; separate them with a space.
'manual'
indicates that the tooltip will be triggered programmatically via the
.tooltip('show')
.tooltip('hide')
.tooltip('toggle')
methods; this value cannot be combined with any other trigger.
'hover'
on its own will result in tooltips that cannot be triggered via the keyboard, and should only be used if alternative methods for conveying the same information for keyboard users is present.
Data attributes for individual tooltips
Options for individual tooltips can alternatively be specified through the use of data attributes, as explained above.
Using function with
popperConfig
const
tooltip
Tooltip
element
popperConfig
defaultBsPopperConfig
// const newPopperConfig = {...}
// use defaultBsPopperConfig if needed...
// return newPopperConfig
Methods
All API methods are asynchronous and start a transition.
They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored.
Learn more in our JavaScript docs.
Method
Description
disable
Removes the ability for an element’s tooltip to be shown. The tooltip will only be able to be shown if it is re-enabled.
dispose
Hides and destroys an element’s tooltip (Removes stored data on the DOM element). Tooltips that use delegation (which are created using
selector
option
) cannot be individually destroyed on descendant trigger elements.
enable
Gives an element’s tooltip the ability to be shown.
Tooltips are enabled by default.
getInstance
Static
method which allows you to get the tooltip instance associated with a DOM element.
getOrCreateInstance
Static
method which allows you to get the tooltip instance associated with a DOM element, or create a new one in case it wasn’t initialized.
hide
Hides an element’s tooltip.
Returns to the caller before the tooltip has actually been hidden
(i.e. before the
hidden.bs.tooltip
event occurs). This is considered a “manual” triggering of the tooltip.
setContent
Gives a way to change the tooltip’s content after its initialization.
show
Reveals an element’s tooltip.
Returns to the caller before the tooltip has actually been shown
(i.e. before the
shown.bs.tooltip
event occurs). This is considered a “manual” triggering of the tooltip. Tooltips with zero-length titles are never displayed.
toggle
Toggles an element’s tooltip.
Returns to the caller before the tooltip has actually been shown or hidden
(i.e. before the
shown.bs.tooltip
hidden.bs.tooltip
event occurs). This is considered a “manual” triggering of the tooltip.
toggleEnabled
Toggles the ability for an element’s tooltip to be shown or hidden.
update
Updates the position of an element’s tooltip.
const
tooltip
Tooltip
getInstance
'#example'
// Returns a Bootstrap tooltip instance
// setContent example
tooltip
setContent
'.tooltip-inner'
'another title'
setContent
method accepts an
object
argument, where each property-key is a valid
string
selector within the tooltip template, and each related property-value can be
string
element
function
null
Events
Event
Description
hide.bs.tooltip
This event is fired immediately when the
hide
instance method has been called.
hidden.bs.tooltip
This event is fired when the tooltip has finished being hidden from the user (will wait for CSS transitions to complete).
inserted.bs.tooltip
This event is fired after the
show.bs.tooltip
event when the tooltip template has been added to the DOM.
show.bs.tooltip
This event fires immediately when the
show
instance method is called.
shown.bs.tooltip
This event is fired when the tooltip has been made visible to the user (will wait for CSS transitions to complete).
const
myTooltipEl
document
getElementById
'myTooltip'
const
tooltip
Tooltip
getOrCreateInstance
myTooltipEl
myTooltipEl
addEventListener
'hidden.bs.tooltip'
// do something...
tooltip
hide

--- 065_helpers_stacks.txt ---
Stacks offer a shortcut for applying a number of flexbox properties to quickly and easily create layouts in Bootstrap. All credit for the concept and implementation goes to the open source
Pylon project
Heads up!
Support for gap utilities with flexbox isn’t available in Safari prior to 14.5, so consider verifying your intended browser support. Grid layout should have no issues.
Read more
Vertical
.vstack
to create vertical layouts. Stacked items are full-width by default. Use
.gap-*
utilities to add space between items.
First item
Second item
Third item
html
class
vstack gap-3
class
First item
class
Second item
class
Third item
Horizontal
.hstack
for horizontal layouts. Stacked items are vertically centered by default and only take up their necessary width. Use
.gap-*
utilities to add space between items.
First item
Second item
Third item
html
class
hstack gap-3
class
First item
class
Second item
class
Third item
Using horizontal margin utilities like
.ms-auto
as spacers:
First item
Second item
Third item
html
class
hstack gap-3
class
First item
class
p-2 ms-auto
Second item
class
Third item
And with
vertical rules
First item
Second item
Third item
html
class
hstack gap-3
class
First item
class
p-2 ms-auto
Second item
class
class
Third item
Examples
.vstack
to stack buttons and other elements:
Save changes
Cancel
html
class
vstack gap-2 col-md-5 mx-auto
button
type
button
class
btn btn-secondary
Save changes
button
button
type
button
class
btn btn-outline-secondary
Cancel
button
Create an inline form with
.hstack
Submit
Reset
html
class
hstack gap-3
input
class
form-control me-auto
type
text
placeholder
Add your item here...
aria-label
Add your item here...
button
type
button
class
btn btn-secondary
Submit
button
class
button
type
button
class
btn btn-outline-danger
Reset
button
scss/helpers/_stacks.scss
.hstack
display
flex
flex-direction
align-items
center
align-self
stretch
.vstack
display
flex
flex
1 1 auto
flex-direction
column
align-self
stretch

--- 054_layout_z-index.txt ---
Several Bootstrap components utilize
z-index
, the CSS property that helps control layout by providing a third axis to arrange content. We utilize a default z-index scale in Bootstrap that’s been designed to properly layer navigation, tooltips and popovers, modals, and more.
These higher values start at an arbitrary number, high and specific enough to ideally avoid conflicts. We need a standard set of these across our layered components—tooltips, popovers, navbars, dropdowns, modals—so we can be reasonably consistent in the behaviors. There’s no reason we couldn’t have used
+ or
We don’t encourage customization of these individual values; should you change one, you likely need to change them all.
scss/_variables.scss
$zindex-dropdown
1000
$zindex-sticky
1020
$zindex-fixed
1030
$zindex-offcanvas-backdrop
1040
$zindex-offcanvas
1045
$zindex-modal-backdrop
1050
$zindex-modal
1055
$zindex-popover
1070
$zindex-tooltip
1080
$zindex-toast
1090
To handle overlapping borders within components (e.g., buttons and inputs in input groups), we use low single digit
z-index
values of
, and
for default, hover, and active states. On hover/focus/active, we bring a particular element to the forefront with a higher
z-index
value to show their border over the sibling elements.

--- 112_examples_navbar-fixed.txt ---
Toggle theme
Light
Dark
Auto
Navbar example
This example is a quick exercise to illustrate how fixed to top navbar works. As you scroll, it will remain fixed to the top of your browser’s viewport.
View navbar docs »

--- 066_customize_components.txt ---
Base classes
.btn
, and then group individual styles for each variant into modifier classes, like
.btn-primary
.btn-success
To build our modifier classes, we use Sass’s
@each
loops to iterate over a Sass map. This is especially helpful for generating variants of a component by our
$theme-colors
and creating responsive variants for each breakpoint. As you customize these Sass maps and recompile, you’ll automatically see your changes reflected in these loops.
Check out
our Sass maps and loops docs
for how to customize these loops and extend Bootstrap’s base-modifier approach to your own code.
Modifiers
Many of Bootstrap’s components are built with a base-modifier class approach. This means the bulk of the styling is contained to a base class (e.g.,
.btn
) while style variations are confined to modifier classes (e.g.,
.btn-danger
). These modifier classes are built from the
$theme-colors
map to make customizing the number and name of our modifier classes.
Here are two examples of how we loop over the
$theme-colors
map to generate modifiers to the
.alert
.list-group
components.
scss/_alert.scss
// Generate contextual modifier classes for colorizing the alert
@each
$state
map-keys
$theme-colors
.alert-
#{$state}
#{$prefix}
alert-color
#{$prefix}
#{$state}
-text-emphasis
#{$prefix}
alert-bg
#{$prefix}
#{$state}
-bg-subtle
#{$prefix}
alert-border-color
#{$prefix}
#{$state}
-border-subtle
#{$prefix}
alert-link-color
#{$prefix}
#{$state}
-text-emphasis
scss/_list-group.scss
// List group contextual variants
// Add modifier classes to change text and background color on individual items.
// Organizationally, this must come after the `:hover` states.
@each
$state
map-keys
$theme-colors
.list-group-item-
#{$state}
#{$prefix}
list-group-color
#{$prefix}
#{$state}
-text-emphasis
#{$prefix}
list-group-bg
#{$prefix}
#{$state}
-bg-subtle
#{$prefix}
list-group-border-color
#{$prefix}
#{$state}
-border-subtle
#{$prefix}
list-group-action-hover-color
#{$prefix}
emphasis-color
#{$prefix}
list-group-action-hover-bg
#{$prefix}
#{$state}
-border-subtle
#{$prefix}
list-group-action-active-color
#{$prefix}
emphasis-color
#{$prefix}
list-group-action-active-bg
#{$prefix}
#{$state}
-border-subtle
#{$prefix}
list-group-active-color
#{$prefix}
#{$state}
-bg-subtle
#{$prefix}
list-group-active-bg
#{$prefix}
#{$state}
-text-emphasis
#{$prefix}
list-group-active-border-color
#{$prefix}
#{$state}
-text-emphasis
Responsive
These Sass loops aren’t limited to color maps, either. You can also generate responsive variations of your components. Take for example our responsive alignment of the dropdowns where we mix an
@each
loop for the
$grid-breakpoints
Sass map with a media query include.
scss/_dropdown.scss
// We deliberately hardcode the `bs-` prefix because we check
// this custom property in JS to determine Popper's positioning
@each
$breakpoint
map-keys
$grid-breakpoints
@include
media-breakpoint-up
$breakpoint
$infix
breakpoint-infix
$breakpoint
$grid-breakpoints
.dropdown-menu
#{$infix}
-start
--bs-position
start
[data-bs-popper]
right
auto
left
.dropdown-menu
#{$infix}
-end
--bs-position
[data-bs-popper]
right
left
auto
Should you modify your
$grid-breakpoints
, your changes will apply to all the loops iterating over that map.
scss/_variables.scss
$grid-breakpoints
576px
768px
992px
1200px
1400px
For more information and examples on how to modify our Sass maps and variables, please refer to
the CSS section of the Grid documentation
Creating your own
We encourage you to adopt these guidelines when building with Bootstrap to create your own components. We’ve extended this approach ourselves to the custom components in our documentation and examples. Components like our callouts are built just like our provided components with base and modifier classes.
This is a callout.
We built it custom for our docs so our messages to you stand out. It has three variants via modifier classes.
class
callout
In your CSS, you’d have something like the following where the bulk of the styling is done via
.callout
. Then, the unique styles between each variant is controlled via modifier class.
// Base class
.callout
// Modifier classes
.callout-info
.callout-warning
.callout-danger
For the callouts, that unique styling is just a
border-left-color
. When you combine that base class with one of those modifier classes, you get your complete component family:
This is an info callout.
Example text to show it in action.
This is a warning callout.
Example text to show it in action.
This is a danger callout.
Example text to show it in action.

--- 012_utilities_overflow.txt ---
Overflow
Adjust the
overflow
property on the fly with four default values and classes. These classes are not responsive by default.
This is an example of using
.overflow-auto
on an element with set width and height dimensions. By design, this content will vertically scroll.
This is an example of using
.overflow-hidden
on an element with set width and height dimensions.
This is an example of using
.overflow-visible
on an element with set width and height dimensions.
This is an example of using
.overflow-scroll
on an element with set width and height dimensions.
class
overflow-auto
class
overflow-hidden
class
overflow-visible
class
overflow-scroll
overflow-x
Adjust the
overflow-x
property to affect the overflow of content horizontally.
.overflow-x-auto
example on an element
with set width and height dimensions.
.overflow-x-hidden
example
on an element with set width and height dimensions.
.overflow-x-visible
example
on an element with set width and height dimensions.
.overflow-x-scroll
example on an element
with set width and height dimensions.
class
overflow-x-auto
class
overflow-x-hidden
class
overflow-x-visible
class
overflow-x-scroll
overflow-y
Adjust the
overflow-y
property to affect the overflow of content vertically.
.overflow-y-auto
example on an element with set width and height dimensions.
.overflow-y-hidden
example on an element with set width and height dimensions.
.overflow-y-visible
example on an element with set width and height dimensions.
.overflow-y-scroll
example on an element with set width and height dimensions.
class
overflow-y-auto
class
overflow-y-hidden
class
overflow-y-visible
class
overflow-y-scroll
Using Sass variables, you may customize the overflow utilities by changing the
$overflows
variable in
_variables.scss
Sass utilities API
Overflow utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"overflow"
property
overflow
values
auto hidden visible scroll
"overflow-x"
property
overflow-x
values
auto hidden visible scroll
"overflow-y"
property
overflow-y
values
auto hidden visible scroll

--- 098_utilities_flex.txt ---
Enable flex behaviors
Apply
display
utilities to create a flexbox container and transform
direct children elements
into flex items. Flex containers and items are able to be modified further with additional flex properties.
I'm a flexbox container!
html
class
d-flex p-2
I'm a flexbox container!
I'm an inline flexbox container!
html
class
d-inline-flex p-2
I'm an inline flexbox container!
Responsive variations also exist for
.d-flex
.d-inline-flex
.d-flex
.d-inline-flex
.d-sm-flex
.d-sm-inline-flex
.d-md-flex
.d-md-inline-flex
.d-lg-flex
.d-lg-inline-flex
.d-xl-flex
.d-xl-inline-flex
.d-xxl-flex
.d-xxl-inline-flex
Direction
Set the direction of flex items in a flex container with direction utilities. In most cases you can omit the horizontal class here as the browser default is
. However, you may encounter situations where you needed to explicitly set this value (like responsive layouts).
.flex-row
to set a horizontal direction (the browser default), or
.flex-row-reverse
to start the horizontal direction from the opposite side.
Flex item 1
Flex item 2
Flex item 3
Flex item 1
Flex item 2
Flex item 3
html
class
d-flex flex-row mb-3
class
Flex item 1
class
Flex item 2
class
Flex item 3
class
d-flex flex-row-reverse
class
Flex item 1
class
Flex item 2
class
Flex item 3
.flex-column
to set a vertical direction, or
.flex-column-reverse
to start the vertical direction from the opposite side.
Flex item 1
Flex item 2
Flex item 3
Flex item 1
Flex item 2
Flex item 3
html
class
d-flex flex-column mb-3
class
Flex item 1
class
Flex item 2
class
Flex item 3
class
d-flex flex-column-reverse
class
Flex item 1
class
Flex item 2
class
Flex item 3
Responsive variations also exist for
flex-direction
.flex-row
.flex-row-reverse
.flex-column
.flex-column-reverse
.flex-sm-row
.flex-sm-row-reverse
.flex-sm-column
.flex-sm-column-reverse
.flex-md-row
.flex-md-row-reverse
.flex-md-column
.flex-md-column-reverse
.flex-lg-row
.flex-lg-row-reverse
.flex-lg-column
.flex-lg-column-reverse
.flex-xl-row
.flex-xl-row-reverse
.flex-xl-column
.flex-xl-column-reverse
.flex-xxl-row
.flex-xxl-row-reverse
.flex-xxl-column
.flex-xxl-column-reverse
Justify content
justify-content
utilities on flexbox containers to change the alignment of flex items on the main axis (the x-axis to start, y-axis if
flex-direction: column
). Choose from
start
(browser default),
center
between
around
, or
evenly
Justify
Content
Start
Justify
Content
Justify
Content
Center
Justify
Content
Between
Justify
Content
Around
Justify
Content
Evenly
class
d-flex justify-content-start
class
d-flex justify-content-end
class
d-flex justify-content-center
class
d-flex justify-content-between
class
d-flex justify-content-around
class
d-flex justify-content-evenly
Responsive variations also exist for
justify-content
.justify-content-start
.justify-content-end
.justify-content-center
.justify-content-between
.justify-content-around
.justify-content-evenly
.justify-content-sm-start
.justify-content-sm-end
.justify-content-sm-center
.justify-content-sm-between
.justify-content-sm-around
.justify-content-sm-evenly
.justify-content-md-start
.justify-content-md-end
.justify-content-md-center
.justify-content-md-between
.justify-content-md-around
.justify-content-md-evenly
.justify-content-lg-start
.justify-content-lg-end
.justify-content-lg-center
.justify-content-lg-between
.justify-content-lg-around
.justify-content-lg-evenly
.justify-content-xl-start
.justify-content-xl-end
.justify-content-xl-center
.justify-content-xl-between
.justify-content-xl-around
.justify-content-xl-evenly
.justify-content-xxl-start
.justify-content-xxl-end
.justify-content-xxl-center
.justify-content-xxl-between
.justify-content-xxl-around
.justify-content-xxl-evenly
Align items
align-items
utilities on flexbox containers to change the alignment of flex items on the cross axis (the y-axis to start, x-axis if
flex-direction: column
). Choose from
start
center
baseline
, or
stretch
(browser default).
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
class
d-flex align-items-start
class
d-flex align-items-end
class
d-flex align-items-center
class
d-flex align-items-baseline
class
d-flex align-items-stretch
Responsive variations also exist for
align-items
.align-items-start
.align-items-end
.align-items-center
.align-items-baseline
.align-items-stretch
.align-items-sm-start
.align-items-sm-end
.align-items-sm-center
.align-items-sm-baseline
.align-items-sm-stretch
.align-items-md-start
.align-items-md-end
.align-items-md-center
.align-items-md-baseline
.align-items-md-stretch
.align-items-lg-start
.align-items-lg-end
.align-items-lg-center
.align-items-lg-baseline
.align-items-lg-stretch
.align-items-xl-start
.align-items-xl-end
.align-items-xl-center
.align-items-xl-baseline
.align-items-xl-stretch
.align-items-xxl-start
.align-items-xxl-end
.align-items-xxl-center
.align-items-xxl-baseline
.align-items-xxl-stretch
Align self
align-self
utilities on flexbox items to individually change their alignment on the cross axis (the y-axis to start, x-axis if
flex-direction: column
). Choose from the same options as
align-items
start
center
baseline
, or
stretch
(browser default).
Flex item
Aligned flex item
Flex item
Flex item
Aligned flex item
Flex item
Flex item
Aligned flex item
Flex item
Flex item
Aligned flex item
Flex item
Flex item
Aligned flex item
Flex item
class
align-self-start
Aligned flex item
class
align-self-end
Aligned flex item
class
align-self-center
Aligned flex item
class
align-self-baseline
Aligned flex item
class
align-self-stretch
Aligned flex item
Responsive variations also exist for
align-self
.align-self-start
.align-self-end
.align-self-center
.align-self-baseline
.align-self-stretch
.align-self-sm-start
.align-self-sm-end
.align-self-sm-center
.align-self-sm-baseline
.align-self-sm-stretch
.align-self-md-start
.align-self-md-end
.align-self-md-center
.align-self-md-baseline
.align-self-md-stretch
.align-self-lg-start
.align-self-lg-end
.align-self-lg-center
.align-self-lg-baseline
.align-self-lg-stretch
.align-self-xl-start
.align-self-xl-end
.align-self-xl-center
.align-self-xl-baseline
.align-self-xl-stretch
.align-self-xxl-start
.align-self-xxl-end
.align-self-xxl-center
.align-self-xxl-baseline
.align-self-xxl-stretch
Fill
Use the
.flex-fill
class on a series of sibling elements to force them into widths equal to their content (or equal widths if their content does not surpass their border-boxes) while taking up all available horizontal space.
Flex item with a lot of content
Flex item
Flex item
html
class
d-flex
class
p-2 flex-fill
Flex item with a lot of content
class
p-2 flex-fill
Flex item
class
p-2 flex-fill
Flex item
Responsive variations also exist for
flex-fill
.flex-fill
.flex-sm-fill
.flex-md-fill
.flex-lg-fill
.flex-xl-fill
.flex-xxl-fill
Grow and shrink
.flex-grow-*
utilities to toggle a flex item’s ability to grow to fill available space. In the example below, the
.flex-grow-1
elements uses all available space it can, while allowing the remaining two flex items their necessary space.
Flex item
Flex item
Third flex item
html
class
d-flex
class
p-2 flex-grow-1
Flex item
class
Flex item
class
Third flex item
.flex-shrink-*
utilities to toggle a flex item’s ability to shrink if necessary. In the example below, the second flex item with
.flex-shrink-1
is forced to wrap its contents to a new line, “shrinking” to allow more space for the previous flex item with
.w-100
Flex item
Flex item
html
class
d-flex
class
p-2 w-100
Flex item
class
p-2 flex-shrink-1
Flex item
Responsive variations also exist for
flex-grow
flex-shrink
.flex-{grow|shrink}-0
.flex-{grow|shrink}-1
.flex-sm-{grow|shrink}-0
.flex-sm-{grow|shrink}-1
.flex-md-{grow|shrink}-0
.flex-md-{grow|shrink}-1
.flex-lg-{grow|shrink}-0
.flex-lg-{grow|shrink}-1
.flex-xl-{grow|shrink}-0
.flex-xl-{grow|shrink}-1
.flex-xxl-{grow|shrink}-0
.flex-xxl-{grow|shrink}-1
Auto margins
Flexbox can do some pretty awesome things when you mix flex alignments with auto margins. Shown below are three examples of controlling flex items via auto margins: default (no auto margin), pushing two items to the right (
.me-auto
), and pushing two items to the left (
.ms-auto
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
html
class
d-flex mb-3
class
Flex item
class
Flex item
class
Flex item
class
d-flex mb-3
class
me-auto p-2
Flex item
class
Flex item
class
Flex item
class
d-flex mb-3
class
Flex item
class
Flex item
class
ms-auto p-2
Flex item
With align-items
Vertically move one flex item to the top or bottom of a container by mixing
align-items
flex-direction: column
, and
margin-top: auto
margin-bottom: auto
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
html
class
d-flex align-items-start flex-column mb-3
style
height
200px
class
mb-auto p-2
Flex item
class
Flex item
class
Flex item
class
d-flex align-items-end flex-column mb-3
style
height
200px
class
Flex item
class
Flex item
class
mt-auto p-2
Flex item
Wrap
Change how flex items wrap in a flex container. Choose from no wrapping at all (the browser default) with
.flex-nowrap
, wrapping with
.flex-wrap
, or reverse wrapping with
.flex-wrap-reverse
Flex item
Flex item
Flex item
Flex item
Flex item
class
d-flex flex-nowrap
Flex item 1
Flex item 2
Flex item 3
Flex item 4
Flex item 5
Flex item 6
Flex item 7
Flex item 8
Flex item 9
Flex item 10
Flex item 11
Flex item 12
Flex item 13
Flex item 14
class
d-flex flex-wrap
Flex item 1
Flex item 2
Flex item 3
Flex item 4
Flex item 5
Flex item 6
Flex item 7
Flex item 8
Flex item 9
Flex item 10
Flex item 11
Flex item 12
Flex item 13
Flex item 14
class
d-flex flex-wrap-reverse
Responsive variations also exist for
flex-wrap
.flex-nowrap
.flex-wrap
.flex-wrap-reverse
.flex-sm-nowrap
.flex-sm-wrap
.flex-sm-wrap-reverse
.flex-md-nowrap
.flex-md-wrap
.flex-md-wrap-reverse
.flex-lg-nowrap
.flex-lg-wrap
.flex-lg-wrap-reverse
.flex-xl-nowrap
.flex-xl-wrap
.flex-xl-wrap-reverse
.flex-xxl-nowrap
.flex-xxl-wrap
.flex-xxl-wrap-reverse
Order
Change the
visual
order of specific flex items with a handful of
order
utilities. We only provide options for making an item first or last, as well as a reset to use the DOM order. As
order
takes any integer value from 0 to 5, add custom CSS for any additional values needed.
First flex item
Second flex item
Third flex item
html
class
d-flex flex-nowrap
class
order-3 p-2
First flex item
class
order-2 p-2
Second flex item
class
order-1 p-2
Third flex item
Responsive variations also exist for
order
.order-0
.order-1
.order-2
.order-3
.order-4
.order-5
.order-sm-0
.order-sm-1
.order-sm-2
.order-sm-3
.order-sm-4
.order-sm-5
.order-md-0
.order-md-1
.order-md-2
.order-md-3
.order-md-4
.order-md-5
.order-lg-0
.order-lg-1
.order-lg-2
.order-lg-3
.order-lg-4
.order-lg-5
.order-xl-0
.order-xl-1
.order-xl-2
.order-xl-3
.order-xl-4
.order-xl-5
.order-xxl-0
.order-xxl-1
.order-xxl-2
.order-xxl-3
.order-xxl-4
.order-xxl-5
Additionally there are also responsive
.order-first
.order-last
classes that change the
order
of an element by applying
order: -1
order: 6
, respectively.
.order-first
.order-last
.order-sm-first
.order-sm-last
.order-md-first
.order-md-last
.order-lg-first
.order-lg-last
.order-xl-first
.order-xl-last
.order-xxl-first
.order-xxl-last
Align content
align-content
utilities on flexbox containers to align flex items
together
on the cross axis. Choose from
start
(browser default),
center
between
around
, or
stretch
. To demonstrate these utilities, we’ve enforced
flex-wrap: wrap
and increased the number of flex items.
Heads up!
This property has no effect on single rows of flex items.
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
class
d-flex align-content-start flex-wrap
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
class
d-flex align-content-end flex-wrap
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
class
d-flex align-content-center flex-wrap
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
class
d-flex align-content-between flex-wrap
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
class
d-flex align-content-around flex-wrap
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
Flex item
class
d-flex align-content-stretch flex-wrap
Responsive variations also exist for
align-content
.align-content-start
.align-content-end
.align-content-center
.align-content-between
.align-content-around
.align-content-stretch
.align-content-sm-start
.align-content-sm-end
.align-content-sm-center
.align-content-sm-between
.align-content-sm-around
.align-content-sm-stretch
.align-content-md-start
.align-content-md-end
.align-content-md-center
.align-content-md-between
.align-content-md-around
.align-content-md-stretch
.align-content-lg-start
.align-content-lg-end
.align-content-lg-center
.align-content-lg-between
.align-content-lg-around
.align-content-lg-stretch
.align-content-xl-start
.align-content-xl-end
.align-content-xl-center
.align-content-xl-between
.align-content-xl-around
.align-content-xl-stretch
.align-content-xxl-start
.align-content-xxl-end
.align-content-xxl-center
.align-content-xxl-between
.align-content-xxl-around
.align-content-xxl-stretch
Media object
Looking to replicate the
media object component
from Bootstrap 4? Recreate it in no time with a few flex utilities that allow even more flexibility and customization than before.
Placeholder
Image
This is some content from a media component. You can replace this with any content and adjust it as needed.
html
class
d-flex
class
flex-shrink-0
class
flex-grow-1 ms-3
This is some content from a media component. You can replace this with any content and adjust it as needed.
And say you want to vertically center the content next to the image:
Placeholder
Image
This is some content from a media component. You can replace this with any content and adjust it as needed.
html
class
d-flex align-items-center
class
flex-shrink-0
class
flex-grow-1 ms-3
This is some content from a media component. You can replace this with any content and adjust it as needed.
Sass utilities API
Flexbox utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"flex"
responsive
true
property
flex
values
fill
1 1 auto
"flex-direction"
responsive
true
property
flex-direction
class
flex
values
row column row-reverse column-reverse
"flex-grow"
responsive
true
property
flex-grow
class
flex
values
grow-0
grow-1
"flex-shrink"
responsive
true
property
flex-shrink
class
flex
values
shrink-0
shrink-1
"flex-wrap"
responsive
true
property
flex-wrap
class
flex
values
wrap nowrap wrap-reverse
"justify-content"
responsive
true
property
justify-content
values
start
flex-start
flex-end
center
center
between
space-between
around
space-around
evenly
space-evenly
"align-items"
responsive
true
property
align-items
values
start
flex-start
flex-end
center
center
baseline
baseline
stretch
stretch
"align-content"
responsive
true
property
align-content
values
start
flex-start
flex-end
center
center
between
space-between
around
space-around
stretch
stretch
"align-self"
responsive
true
property
align-self
values
auto
auto
start
flex-start
flex-end
center
center
baseline
baseline
stretch
stretch
"order"
responsive
true
property
order
values
first
last

--- 141_examples_product.txt ---
Designed for engineers
Build anything you want with Aperture
Learn more
Another headline
And an even wittier subheading.
Another headline
And an even wittier subheading.
Another headline
And an even wittier subheading.
Another headline
And an even wittier subheading.
Another headline
And an even wittier subheading.
Another headline
And an even wittier subheading.
Another headline
And an even wittier subheading.
Another headline
And an even wittier subheading.

--- 082_about_license.txt ---
It requires you to:
Keep the license and copyright notice included in Bootstrap’s CSS and JavaScript files when you use them in your works
It permits you to:
Freely download and use Bootstrap, in whole or in part, for personal, private, company internal, or commercial purposes
Use Bootstrap in packages or distributions that you create
Modify the source code
Grant a sublicense to modify and distribute Bootstrap to third parties not included in the license
It forbids you to:
Hold the authors and license owners liable for damages as Bootstrap is provided without warranty
Hold the creators or copyright holders of Bootstrap liable
Redistribute any piece of Bootstrap without proper attribution
Use any marks owned by Bootstrap in any way that might state or imply that Bootstrap endorses your distribution
Use any marks owned by Bootstrap in any way that might state or imply that you created the Bootstrap software in question
It does not require you to:
Include the source of Bootstrap itself, or of any modifications you may have made to it, in any redistribution you may assemble that includes it
Submit changes that you make to Bootstrap back to the Bootstrap project (though such feedback is encouraged)
The full Bootstrap license is located
in the project repository
for more information.

--- 092_forms_range.txt ---
Overview
Create custom
<input type="range">
controls with
.form-range
. The track (the background) and thumb (the value) are both styled to appear the same across browsers. As only Firefox supports “filling” their track from the left or right of the thumb as a means to visually indicate progress, we do not currently support it.
Example range
html
label
customRange1
class
form-label
Example range
label
input
type
range
class
form-range
customRange1
Disabled
Add the
disabled
boolean attribute on an input to give it a grayed out appearance, remove pointer events, and prevent focusing.
Disabled range
html
label
disabledRange
class
form-label
Disabled range
label
input
type
range
class
form-range
disabledRange
disabled
Min and max
Range inputs have implicit values for
, respectively. You may specify new values for those using the
attributes.
Example range
html
label
customRange2
class
form-label
Example range
label
input
type
range
class
form-range
customRange2
Steps
By default, range inputs “snap” to integer values. To change this, you can specify a
step
value. In the example below, we double the number of steps by using
step="0.5"
Example range
html
label
customRange3
class
form-label
Example range
label
input
type
range
class
form-range
step
customRange3
Output value
The value of the range input can be shown using the
output
element and a bit of JavaScript.
Example range
html
label
customRange4
class
form-label
Example range
label
input
type
range
class
form-range
value
customRange4
output
customRange4
rangeValue
aria-hidden
true
output
script
// This is an example script, please modify as needed
const
rangeInput
document
getElementById
'customRange4'
const
rangeOutput
document
getElementById
'rangeValue'
// Set initial value
rangeOutput
textContent
rangeInput
value
rangeInput
addEventListener
'input'
function
rangeOutput
textContent
this
value
script
Sass variables
scss/_variables.scss
$form-range-track-width
100%
$form-range-track-height
.5rem
$form-range-track-cursor
pointer
$form-range-track-bg
#{$prefix}
secondary-bg
$form-range-track-border-radius
1rem
$form-range-track-box-shadow
#{$prefix}
box-shadow-inset
$form-range-thumb-width
1rem
$form-range-thumb-height
$form-range-thumb-width
$form-range-thumb-bg
$component-active-bg
$form-range-thumb-border
$form-range-thumb-border-radius
1rem
$form-range-thumb-box-shadow
0 .1rem .25rem
rgba
$black
$form-range-thumb-focus-box-shadow
0 0 0 1px
$body-bg
$input-focus-box-shadow
$form-range-thumb-focus-box-shadow-width
$input-focus-width
// For focus box shadow issue in Edge
$form-range-thumb-active-bg
tint-color
$component-active-bg
$form-range-thumb-disabled-bg
#{$prefix}
secondary-color
$form-range-thumb-transition
background-color .15s ease-in-out
border-color .15s ease-in-out
box-shadow .15s ease-in-out

--- 025_components_navs-tabs.txt ---
Base nav
Navigation available in Bootstrap share general markup and styles, from the base
.nav
class to the active and disabled states. Swap modifier classes to switch between each style.
The base
.nav
component is built with flexbox and provide a strong foundation for building all types of navigation components. It includes some style overrides (for working with lists), some link padding for larger hit areas, and basic disabled styling.
The base
.nav
component does not include any
.active
state. The following examples include the class, mainly to demonstrate that this particular class does not trigger any special styling.
To convey the active state to assistive technologies, use the
aria-current
attribute — using the
page
value for current page, or
true
for the current item in a set.
Active
Link
Link
Disabled
html
class
class
nav-item
class
nav-link active
aria-current
page
href
Active
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link disabled
aria-disabled
true
Disabled
Classes are used throughout, so your markup can be super flexible. Use
<ul>
s like above,
<ol>
if the order of your items is important, or roll your own with a
<nav>
element. Because the
.nav
uses
display: flex
, the nav links behave the same as nav items would, but without the extra markup.
html
class
class
nav-link active
aria-current
page
href
Active
class
nav-link
href
Link
class
nav-link
href
Link
class
nav-link disabled
aria-disabled
true
Disabled
Available styles
Change the style of
.nav
s component with modifiers and utilities. Mix and match as needed, or build your own.
Horizontal alignment
Change the horizontal alignment of your nav with
flexbox utilities
. By default, navs are left-aligned, but you can easily change them to center or right-aligned.
Centered with
.justify-content-center
Active
Link
Link
Disabled
html
class
nav justify-content-center
class
nav-item
class
nav-link active
aria-current
page
href
Active
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link disabled
aria-disabled
true
Disabled
Right-aligned with
.justify-content-end
Active
Link
Link
Disabled
html
class
nav justify-content-end
class
nav-item
class
nav-link active
aria-current
page
href
Active
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link disabled
aria-disabled
true
Disabled
Vertical
Stack your navigation by changing the flex item direction with the
.flex-column
utility. Need to stack them on some viewports but not others? Use the responsive versions (e.g.,
.flex-sm-column
Active
Link
Link
Disabled
html
class
nav flex-column
class
nav-item
class
nav-link active
aria-current
page
href
Active
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link disabled
aria-disabled
true
Disabled
As always, vertical navigation is possible without
<ul>
s, too.
html
class
nav flex-column
class
nav-link active
aria-current
page
href
Active
class
nav-link
href
Link
class
nav-link
href
Link
class
nav-link disabled
aria-disabled
true
Disabled
Tabs
Takes the basic nav from above and adds the
.nav-tabs
class to generate a tabbed interface. Use them to create tabbable regions with our
tab JavaScript plugin
Active
Link
Link
Disabled
html
class
nav nav-tabs
class
nav-item
class
nav-link active
aria-current
page
href
Active
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link disabled
aria-disabled
true
Disabled
Pills
Take that same HTML, but use
.nav-pills
instead:
Active
Link
Link
Disabled
html
class
nav nav-pills
class
nav-item
class
nav-link active
aria-current
page
href
Active
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link disabled
aria-disabled
true
Disabled
Underline
Take that same HTML, but use
.nav-underline
instead:
Active
Link
Link
Disabled
html
class
nav nav-underline
class
nav-item
class
nav-link active
aria-current
page
href
Active
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link disabled
aria-disabled
true
Disabled
Fill and justify
Force your
.nav
’s contents to extend the full available width with one of two modifier classes. To proportionately fill all available space with your
.nav-item
s, use
.nav-fill
. Notice that all horizontal space is occupied, but not every nav item has the same width.
Active
Much longer nav link
Link
Disabled
html
class
nav nav-pills nav-fill
class
nav-item
class
nav-link active
aria-current
page
href
Active
class
nav-item
class
nav-link
href
Much longer nav link
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link disabled
aria-disabled
true
Disabled
When using a
<nav>
-based navigation, you can safely omit
.nav-item
as only
.nav-link
is required for styling
elements.
html
class
nav nav-pills nav-fill
class
nav-link active
aria-current
page
href
Active
class
nav-link
href
Much longer nav link
class
nav-link
href
Link
class
nav-link disabled
aria-disabled
true
Disabled
For equal-width elements, use
.nav-justified
. All horizontal space will be occupied by nav links, but unlike the
.nav-fill
above, every nav item will be the same width.
Active
Much longer nav link
Link
Disabled
html
class
nav nav-pills nav-justified
class
nav-item
class
nav-link active
aria-current
page
href
Active
class
nav-item
class
nav-link
href
Much longer nav link
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link disabled
aria-disabled
true
Disabled
Similar to the
.nav-fill
example using a
<nav>
-based navigation.
html
class
nav nav-pills nav-justified
class
nav-link active
aria-current
page
href
Active
class
nav-link
href
Much longer nav link
class
nav-link
href
Link
class
nav-link disabled
aria-disabled
true
Disabled
Working with flex utilities
If you need responsive nav variations, consider using a series of
flexbox utilities
. While more verbose, these utilities offer greater customization across responsive breakpoints. In the example below, our nav will be stacked on the lowest breakpoint, then adapt to a horizontal layout that fills the available width starting from the small breakpoint.
html
class
nav nav-pills flex-column flex-sm-row
class
flex-sm-fill text-sm-center nav-link active
aria-current
page
href
Active
class
flex-sm-fill text-sm-center nav-link
href
Longer nav link
class
flex-sm-fill text-sm-center nav-link
href
Link
class
flex-sm-fill text-sm-center nav-link disabled
aria-disabled
true
Disabled
Regarding accessibility
If you’re using navs to provide a navigation bar, be sure to add a
role="navigation"
to the most logical parent container of the
<ul>
, or wrap a
<nav>
element around the whole navigation. Do not add the role to the
<ul>
itself, as this would prevent it from being announced as an actual list by assistive technologies.
Note that navigation bars, even if visually styled as tabs with the
.nav-tabs
class, should
be given
role="tablist"
role="tab"
role="tabpanel"
attributes. These are only appropriate for dynamic tabbed interfaces, as described in the
ARIA Authoring Practices Guide tabs pattern
. See
JavaScript behavior
for dynamic tabbed interfaces in this section for an example. The
aria-current
attribute is not necessary on dynamic tabbed interfaces since our JavaScript handles the selected state by adding
aria-selected="true"
on the active tab.
Using dropdowns
Add dropdown menus with a little extra HTML and the
dropdowns JavaScript plugin
Tabs with dropdowns
Active
Dropdown
Action
Another action
Something else here
Separated link
Link
Disabled
html
class
nav nav-tabs
class
nav-item
class
nav-link active
aria-current
page
href
Active
class
nav-item dropdown
class
nav-link dropdown-toggle
data-bs-toggle
dropdown
href
role
button
aria-expanded
false
Dropdown
class
dropdown-menu
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
class
dropdown-divider
class
dropdown-item
href
Separated link
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link disabled
aria-disabled
true
Disabled
Pills with dropdowns
Active
Dropdown
Action
Another action
Something else here
Separated link
Link
Disabled
html
class
nav nav-pills
class
nav-item
class
nav-link active
aria-current
page
href
Active
class
nav-item dropdown
class
nav-link dropdown-toggle
data-bs-toggle
dropdown
href
role
button
aria-expanded
false
Dropdown
class
dropdown-menu
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
class
dropdown-divider
class
dropdown-item
href
Separated link
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link disabled
aria-disabled
true
Disabled
Variables
Added in v5.2.0
As part of Bootstrap’s evolving CSS variables approach, navs now use local CSS variables on
.nav
.nav-tabs
, and
.nav-pills
for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
On the
.nav
base class:
scss/_nav.scss
#{$prefix}
nav-link-padding-x
#{$nav-link-padding-x}
#{$prefix}
nav-link-padding-y
#{$nav-link-padding-y}
@include
$nav-link-font-size
#{$prefix}
nav-link-font-size
#{$prefix}
nav-link-font-weight
#{$nav-link-font-weight}
#{$prefix}
nav-link-color
#{$nav-link-color}
#{$prefix}
nav-link-hover-color
#{$nav-link-hover-color}
#{$prefix}
nav-link-disabled-color
#{$nav-link-disabled-color}
On the
.nav-tabs
modifier class:
scss/_nav.scss
#{$prefix}
nav-tabs-border-width
#{$nav-tabs-border-width}
#{$prefix}
nav-tabs-border-color
#{$nav-tabs-border-color}
#{$prefix}
nav-tabs-border-radius
#{$nav-tabs-border-radius}
#{$prefix}
nav-tabs-link-hover-border-color
#{$nav-tabs-link-hover-border-color}
#{$prefix}
nav-tabs-link-active-color
#{$nav-tabs-link-active-color}
#{$prefix}
nav-tabs-link-active-bg
#{$nav-tabs-link-active-bg}
#{$prefix}
nav-tabs-link-active-border-color
#{$nav-tabs-link-active-border-color}
On the
.nav-pills
modifier class:
scss/_nav.scss
#{$prefix}
nav-pills-border-radius
#{$nav-pills-border-radius}
#{$prefix}
nav-pills-link-active-color
#{$nav-pills-link-active-color}
#{$prefix}
nav-pills-link-active-bg
#{$nav-pills-link-active-bg}
Added in v5.3.0
On the
.nav-underline
modifier class:
scss/_nav.scss
#{$prefix}
nav-underline-gap
#{$nav-underline-gap}
#{$prefix}
nav-underline-border-width
#{$nav-underline-border-width}
#{$prefix}
nav-underline-link-active-color
#{$nav-underline-link-active-color}
Sass variables
scss/_variables.scss
$nav-link-padding-y
.5rem
$nav-link-padding-x
1rem
$nav-link-font-size
null
$nav-link-font-weight
null
$nav-link-color
#{$prefix}
link-color
$nav-link-hover-color
#{$prefix}
link-hover-color
$nav-link-transition
color .15s ease-in-out
background-color .15s ease-in-out
border-color .15s ease-in-out
$nav-link-disabled-color
#{$prefix}
secondary-color
$nav-link-focus-box-shadow
$focus-ring-box-shadow
$nav-tabs-border-color
#{$prefix}
border-color
$nav-tabs-border-width
#{$prefix}
border-width
$nav-tabs-border-radius
#{$prefix}
border-radius
$nav-tabs-link-hover-border-color
#{$prefix}
secondary-bg
#{$prefix}
secondary-bg
$nav-tabs-border-color
$nav-tabs-link-active-color
#{$prefix}
emphasis-color
$nav-tabs-link-active-bg
#{$prefix}
body-bg
$nav-tabs-link-active-border-color
#{$prefix}
border-color
#{$prefix}
border-color
$nav-tabs-link-active-bg
$nav-pills-border-radius
#{$prefix}
border-radius
$nav-pills-link-active-color
$component-active-color
$nav-pills-link-active-bg
$component-active-bg
$nav-underline-gap
1rem
$nav-underline-border-width
.125rem
$nav-underline-link-active-color
#{$prefix}
emphasis-color
JavaScript behavior
Use the tab JavaScript plugin—include it individually or through the compiled
file—to extend our navigational tabs and pills to create tabbable panes of local content.
Home
Profile
Contact
Disabled
This is some placeholder content the
Home tab’s
associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other
.nav
-powered navigation.
This is some placeholder content the
Profile tab’s
associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other
.nav
-powered navigation.
This is some placeholder content the
Contact tab’s
associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other
.nav
-powered navigation.
This is some placeholder content the
Disabled tab’s
associated content.
class
nav nav-tabs
myTab
role
tablist
class
nav-item
role
presentation
button
class
nav-link active
home-tab
data-bs-toggle
data-bs-target
#home-tab-pane
type
button
role
aria-controls
home-tab-pane
aria-selected
true
Home
button
class
nav-item
role
presentation
button
class
nav-link
profile-tab
data-bs-toggle
data-bs-target
#profile-tab-pane
type
button
role
aria-controls
profile-tab-pane
aria-selected
false
Profile
button
class
nav-item
role
presentation
button
class
nav-link
contact-tab
data-bs-toggle
data-bs-target
#contact-tab-pane
type
button
role
aria-controls
contact-tab-pane
aria-selected
false
Contact
button
class
nav-item
role
presentation
button
class
nav-link
disabled-tab
data-bs-toggle
data-bs-target
#disabled-tab-pane
type
button
role
aria-controls
disabled-tab-pane
aria-selected
false
disabled
Disabled
button
class
tab-content
myTabContent
class
tab-pane fade show active
home-tab-pane
role
tabpanel
aria-labelledby
home-tab
tabindex
class
tab-pane fade
profile-tab-pane
role
tabpanel
aria-labelledby
profile-tab
tabindex
class
tab-pane fade
contact-tab-pane
role
tabpanel
aria-labelledby
contact-tab
tabindex
class
tab-pane fade
disabled-tab-pane
role
tabpanel
aria-labelledby
disabled-tab
tabindex
To help fit your needs, this works with
<ul>
-based markup, as shown above, or with any arbitrary “roll your own” markup. Note that if you’re using
<nav>
, you shouldn’t add
role="tablist"
directly to it, as this would override the element’s native role as a navigation landmark. Instead, switch to an alternative element (in the example below, a simple
<div>
) and wrap the
<nav>
around it.
This is some placeholder content the
Home tab’s
associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other
.nav
-powered navigation.
This is some placeholder content the
Profile tab’s
associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other
.nav
-powered navigation.
This is some placeholder content the
Contact tab’s
associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other
.nav
-powered navigation.
This is some placeholder content the
Disabled tab’s
associated content.
class
nav nav-tabs
nav-tab
role
tablist
button
class
nav-link active
nav-home-tab
data-bs-toggle
data-bs-target
#nav-home
type
button
role
aria-controls
nav-home
aria-selected
true
Home
button
button
class
nav-link
nav-profile-tab
data-bs-toggle
data-bs-target
#nav-profile
type
button
role
aria-controls
nav-profile
aria-selected
false
Profile
button
button
class
nav-link
nav-contact-tab
data-bs-toggle
data-bs-target
#nav-contact
type
button
role
aria-controls
nav-contact
aria-selected
false
Contact
button
button
class
nav-link
nav-disabled-tab
data-bs-toggle
data-bs-target
#nav-disabled
type
button
role
aria-controls
nav-disabled
aria-selected
false
disabled
Disabled
button
class
tab-content
nav-tabContent
class
tab-pane fade show active
nav-home
role
tabpanel
aria-labelledby
nav-home-tab
tabindex
class
tab-pane fade
nav-profile
role
tabpanel
aria-labelledby
nav-profile-tab
tabindex
class
tab-pane fade
nav-contact
role
tabpanel
aria-labelledby
nav-contact-tab
tabindex
class
tab-pane fade
nav-disabled
role
tabpanel
aria-labelledby
nav-disabled-tab
tabindex
The tabs plugin also works with pills.
Home
Profile
Contact
Disabled
This is some placeholder content the
Home tab’s
associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other
.nav
-powered navigation.
This is some placeholder content the
Profile tab’s
associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other
.nav
-powered navigation.
This is some placeholder content the
Contact tab’s
associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other
.nav
-powered navigation.
This is some placeholder content the
Disabled tab’s
associated content.
class
nav nav-pills mb-3
pills-tab
role
tablist
class
nav-item
role
presentation
button
class
nav-link active
pills-home-tab
data-bs-toggle
pill
data-bs-target
#pills-home
type
button
role
aria-controls
pills-home
aria-selected
true
Home
button
class
nav-item
role
presentation
button
class
nav-link
pills-profile-tab
data-bs-toggle
pill
data-bs-target
#pills-profile
type
button
role
aria-controls
pills-profile
aria-selected
false
Profile
button
class
nav-item
role
presentation
button
class
nav-link
pills-contact-tab
data-bs-toggle
pill
data-bs-target
#pills-contact
type
button
role
aria-controls
pills-contact
aria-selected
false
Contact
button
class
nav-item
role
presentation
button
class
nav-link
pills-disabled-tab
data-bs-toggle
pill
data-bs-target
#pills-disabled
type
button
role
aria-controls
pills-disabled
aria-selected
false
disabled
Disabled
button
class
tab-content
pills-tabContent
class
tab-pane fade show active
pills-home
role
tabpanel
aria-labelledby
pills-home-tab
tabindex
class
tab-pane fade
pills-profile
role
tabpanel
aria-labelledby
pills-profile-tab
tabindex
class
tab-pane fade
pills-contact
role
tabpanel
aria-labelledby
pills-contact-tab
tabindex
class
tab-pane fade
pills-disabled
role
tabpanel
aria-labelledby
pills-disabled-tab
tabindex
And with vertical pills. Ideally, for vertical tabs, you should also add
aria-orientation="vertical"
to the tab list container.
Home
Profile
Disabled
Messages
Settings
This is some placeholder content the
Home tab’s
associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other
.nav
-powered navigation.
This is some placeholder content the
Profile tab’s
associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other
.nav
-powered navigation.
This is some placeholder content the
Disabled tab’s
associated content.
This is some placeholder content the
Messages tab’s
associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other
.nav
-powered navigation.
This is some placeholder content the
Settings tab’s
associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other
.nav
-powered navigation.
class
d-flex align-items-start
class
nav flex-column nav-pills me-3
v-pills-tab
role
tablist
aria-orientation
vertical
button
class
nav-link active
v-pills-home-tab
data-bs-toggle
pill
data-bs-target
#v-pills-home
type
button
role
aria-controls
v-pills-home
aria-selected
true
Home
button
button
class
nav-link
v-pills-profile-tab
data-bs-toggle
pill
data-bs-target
#v-pills-profile
type
button
role
aria-controls
v-pills-profile
aria-selected
false
Profile
button
button
class
nav-link
v-pills-disabled-tab
data-bs-toggle
pill
data-bs-target
#v-pills-disabled
type
button
role
aria-controls
v-pills-disabled
aria-selected
false
disabled
Disabled
button
button
class
nav-link
v-pills-messages-tab
data-bs-toggle
pill
data-bs-target
#v-pills-messages
type
button
role
aria-controls
v-pills-messages
aria-selected
false
Messages
button
button
class
nav-link
v-pills-settings-tab
data-bs-toggle
pill
data-bs-target
#v-pills-settings
type
button
role
aria-controls
v-pills-settings
aria-selected
false
Settings
button
class
tab-content
v-pills-tabContent
class
tab-pane fade show active
v-pills-home
role
tabpanel
aria-labelledby
v-pills-home-tab
tabindex
class
tab-pane fade
v-pills-profile
role
tabpanel
aria-labelledby
v-pills-profile-tab
tabindex
class
tab-pane fade
v-pills-disabled
role
tabpanel
aria-labelledby
v-pills-disabled-tab
tabindex
class
tab-pane fade
v-pills-messages
role
tabpanel
aria-labelledby
v-pills-messages-tab
tabindex
class
tab-pane fade
v-pills-settings
role
tabpanel
aria-labelledby
v-pills-settings-tab
tabindex
Accessibility
Dynamic tabbed interfaces, as described in the
ARIA Authoring Practices Guide tabs pattern
, require
role="tablist"
role="tab"
role="tabpanel"
, and additional
aria-
attributes in order to convey their structure, functionality, and current state to users of assistive technologies (such as screen readers). As a best practice, we recommend using
<button>
elements for the tabs, as these are controls that trigger a dynamic change, rather than links that navigate to a new page or location.
In line with the ARIA Authoring Practices pattern, only the currently active tab receives keyboard focus. When the JavaScript plugin is initialized, it will set
tabindex="-1"
on all inactive tab controls. Once the currently active tab has focus, the cursor keys activate the previous/next tab. The
Home
keys activate the first and last tabs, respectively. The plugin will change the
roving
tabindex
accordingly. However, note that the JavaScript plugin does not distinguish between horizontal and vertical tab lists when it comes to cursor key interactions: regardless of the tab list’s orientation, both the up
left cursor go to the previous tab, and down
right cursor go to the next tab.
In general, to facilitate keyboard navigation, it’s recommended to make the tab panels themselves focusable as well, unless the first element containing meaningful content inside the tab panel is already focusable. The JavaScript plugin does not try to handle this aspect—where appropriate, you’ll need to explicitly make your tab panels focusable by adding
tabindex="0"
in your markup.
The tab JavaScript plugin
does not
support tabbed interfaces that contain dropdown menus, as these cause both usability and accessibility issues. From a usability perspective, the fact that the currently displayed tab’s trigger element is not immediately visible (as it’s inside the closed dropdown menu) can cause confusion. From an accessibility point of view, there is currently no sensible way to map this sort of construct to a standard WAI ARIA pattern, meaning that it cannot be easily made understandable to users of assistive technologies.
Using data attributes
You can activate a tab or pill navigation without writing any JavaScript by simply specifying
data-bs-toggle="tab"
data-bs-toggle="pill"
on an element. Use these data attributes on
.nav-tabs
.nav-pills
<!-- Nav tabs -->
class
nav nav-tabs
myTab
role
tablist
class
nav-item
role
presentation
button
class
nav-link active
home-tab
data-bs-toggle
data-bs-target
#home
type
button
role
aria-controls
home
aria-selected
true
Home
button
class
nav-item
role
presentation
button
class
nav-link
profile-tab
data-bs-toggle
data-bs-target
#profile
type
button
role
aria-controls
profile
aria-selected
false
Profile
button
class
nav-item
role
presentation
button
class
nav-link
messages-tab
data-bs-toggle
data-bs-target
#messages
type
button
role
aria-controls
messages
aria-selected
false
Messages
button
class
nav-item
role
presentation
button
class
nav-link
settings-tab
data-bs-toggle
data-bs-target
#settings
type
button
role
aria-controls
settings
aria-selected
false
Settings
button
<!-- Tab panes -->
class
tab-content
class
tab-pane active
home
role
tabpanel
aria-labelledby
home-tab
tabindex
class
tab-pane
profile
role
tabpanel
aria-labelledby
profile-tab
tabindex
class
tab-pane
messages
role
tabpanel
aria-labelledby
messages-tab
tabindex
class
tab-pane
settings
role
tabpanel
aria-labelledby
settings-tab
tabindex
Via JavaScript
Enable tabbable tabs via JavaScript (each tab needs to be activated individually):
const
triggerTabList
document
querySelectorAll
'#myTab button'
triggerTabList
forEach
triggerEl
const
tabTrigger
triggerEl
triggerEl
addEventListener
'click'
event
event
preventDefault
tabTrigger
show
You can activate individual tabs in several ways:
const
triggerEl
document
querySelector
'#myTab button[data-bs-target="#profile"]'
getInstance
triggerEl
show
// Select tab by name
const
triggerFirstTabEl
document
querySelector
'#myTab li:first-child button'
getInstance
triggerFirstTabEl
show
// Select first tab
Fade effect
To make tabs fade in, add
.fade
to each
.tab-pane
. The first tab pane must also have
.show
to make the initial content visible.
class
tab-content
class
tab-pane fade show active
home
role
tabpanel
aria-labelledby
home-tab
tabindex
class
tab-pane fade
profile
role
tabpanel
aria-labelledby
profile-tab
tabindex
class
tab-pane fade
messages
role
tabpanel
aria-labelledby
messages-tab
tabindex
class
tab-pane fade
settings
role
tabpanel
aria-labelledby
settings-tab
tabindex
Methods
All API methods are asynchronous and start a transition.
They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored.
Learn more in our JavaScript docs.
Activates your content as a tab element.
You can create a tab instance with the constructor, for example:
const
bsTab
'#myTab'
Method
Description
dispose
Destroys an element’s tab.
getInstance
Static method which allows you to get the tab instance associated with a DOM element, you can use it like this:
getOrCreateInstance
Static method which returns a tab instance associated to a DOM element or create a new one in case it wasn’t initialized. You can use it like this:
show
Selects the given tab and shows its associated pane. Any other tab that was previously selected becomes unselected and its associated pane is hidden.
Returns to the caller before the tab pane has actually been shown
(i.e. before the
shown.bs.tab
event occurs).
Events
When showing a new tab, the events fire in the following order:
hide.bs.tab
(on the current active tab)
show.bs.tab
(on the to-be-shown tab)
hidden.bs.tab
(on the previous active tab, the same one as for the
hide.bs.tab
event)
shown.bs.tab
(on the newly-active just-shown tab, the same one as for the
show.bs.tab
event)
If no tab was already active, then the
hide.bs.tab
hidden.bs.tab
events will not be fired.
Event type
Description
hide.bs.tab
This event fires when a new tab is to be shown (and thus the previous active tab is to be hidden). Use
event.target
event.relatedTarget
to target the current active tab and the new soon-to-be-active tab, respectively.
hidden.bs.tab
This event fires after a new tab is shown (and thus the previous active tab is hidden). Use
event.target
event.relatedTarget
to target the previous active tab and the new active tab, respectively.
show.bs.tab
This event fires on tab show, but before the new tab has been shown. Use
event.target
event.relatedTarget
to target the active tab and the previous active tab (if available) respectively.
shown.bs.tab
This event fires on tab show after a tab has been shown. Use
event.target
event.relatedTarget
to target the active tab and the previous active tab (if available) respectively.
const
tabEl
document
querySelector
'button[data-bs-toggle="tab"]'
tabEl
addEventListener
'shown.bs.tab'
event
event
target
// newly activated tab
event
relatedTarget
// previous active tab

--- 079_forms_validation.txt ---
We are aware that currently the client-side custom validation styles and tooltips are not accessible, since they are not exposed to assistive technologies. While we work on a solution, we’d recommend either using the server-side option or the default browser validation method.
How it works
Here’s how form validation works with Bootstrap:
HTML form validation is applied via CSS’s two pseudo-classes,
:invalid
:valid
. It applies to
<input>
<select>
, and
<textarea>
elements.
:invalid
:valid
styles to parent
.was-validated
class, usually applied to the
<form>
. Otherwise, any required field without a value shows up as invalid on page load. This way, you may choose when to activate them (typically after form submission is attempted).
To reset the appearance of the form (for instance, in the case of dynamic form submissions using Ajax), remove the
.was-validated
class from the
<form>
again after submission.
As a fallback,
.is-invalid
.is-valid
classes may be used instead of the pseudo-classes for
server-side validation
. They do not require a
.was-validated
parent class.
Due to constraints in how CSS works, we cannot (at present) apply styles to a
<label>
that comes before a form control in the DOM without the help of custom JavaScript.
All modern browsers support the
constraint validation API
, a series of JavaScript methods for validating form controls.
Feedback messages may utilize the
browser defaults
(different for each browser, and unstylable via CSS) or our custom feedback styles with additional HTML and CSS.
You may provide custom validity messages with
setCustomValidity
in JavaScript.
With that in mind, consider the following demos for our custom form validation styles, optional server-side classes, and browser defaults.
Custom styles
For custom Bootstrap form validation messages, you’ll need to add the
novalidate
boolean attribute to your
<form>
. This disables the browser default feedback tooltips, but still provides access to the form validation APIs in JavaScript. Try to submit the form below; our JavaScript will intercept the submit button and relay feedback to you. When attempting to submit, you’ll see the
:invalid
:valid
styles applied to your form controls.
Custom feedback styles apply custom colors, borders, focus styles, and background icons to better communicate feedback. Background icons for
<select>
s are only available with
.form-select
, and not
.form-control
First name
Looks good!
Last name
Looks good!
Username
Please choose a username.
City
Please provide a valid city.
State
Choose...
Please select a valid state.
Please provide a valid zip.
Agree to terms and conditions
You must agree before submitting.
Submit form
html
form
class
row g-3 needs-validation
novalidate
class
col-md-4
label
validationCustom01
class
form-label
First name
label
input
type
text
class
form-control
validationCustom01
value
Mark
required
class
valid-feedback
Looks good!
class
col-md-4
label
validationCustom02
class
form-label
Last name
label
input
type
text
class
form-control
validationCustom02
value
Otto
required
class
valid-feedback
Looks good!
class
col-md-4
label
validationCustomUsername
class
form-label
Username
label
class
input-group has-validation
span
class
input-group-text
inputGroupPrepend
span
input
type
text
class
form-control
validationCustomUsername
aria-describedby
inputGroupPrepend
required
class
invalid-feedback
Please choose a username.
class
col-md-6
label
validationCustom03
class
form-label
City
label
input
type
text
class
form-control
validationCustom03
required
class
invalid-feedback
Please provide a valid city.
class
col-md-3
label
validationCustom04
class
form-label
State
label
select
class
form-select
validationCustom04
required
option
selected
disabled
value
Choose...
option
option
option
select
class
invalid-feedback
Please select a valid state.
class
col-md-3
label
validationCustom05
class
form-label
label
input
type
text
class
form-control
validationCustom05
required
class
invalid-feedback
Please provide a valid zip.
class
col-12
class
form-check
input
class
form-check-input
type
checkbox
value
invalidCheck
required
label
class
form-check-label
invalidCheck
Agree to terms and conditions
label
class
invalid-feedback
You must agree before submitting.
class
col-12
button
class
btn btn-primary
type
submit
Submit form
button
form
// Example starter JavaScript for disabling form submissions if there are invalid fields
'use strict'
// Fetch all the forms we want to apply custom Bootstrap validation styles to
const
forms
document
querySelectorAll
'.needs-validation'
// Loop over them and prevent submission
Array
from
forms
forEach
form
form
addEventListener
'submit'
event
form
checkValidity
event
preventDefault
event
stopPropagation
form
classList
'was-validated'
false
Browser defaults
Not interested in custom validation feedback messages or writing JavaScript to change form behaviors? All good, you can use the browser defaults. Try submitting the form below. Depending on your browser and OS, you’ll see a slightly different style of feedback.
While these feedback styles cannot be styled with CSS, you can still customize the feedback text through JavaScript.
First name
Last name
Username
City
State
Choose...
Agree to terms and conditions
Submit form
html
form
class
row g-3
class
col-md-4
label
validationDefault01
class
form-label
First name
label
input
type
text
class
form-control
validationDefault01
value
Mark
required
class
col-md-4
label
validationDefault02
class
form-label
Last name
label
input
type
text
class
form-control
validationDefault02
value
Otto
required
class
col-md-4
label
validationDefaultUsername
class
form-label
Username
label
class
input-group
span
class
input-group-text
inputGroupPrepend2
span
input
type
text
class
form-control
validationDefaultUsername
aria-describedby
inputGroupPrepend2
required
class
col-md-6
label
validationDefault03
class
form-label
City
label
input
type
text
class
form-control
validationDefault03
required
class
col-md-3
label
validationDefault04
class
form-label
State
label
select
class
form-select
validationDefault04
required
option
selected
disabled
value
Choose...
option
option
option
select
class
col-md-3
label
validationDefault05
class
form-label
label
input
type
text
class
form-control
validationDefault05
required
class
col-12
class
form-check
input
class
form-check-input
type
checkbox
value
invalidCheck2
required
label
class
form-check-label
invalidCheck2
Agree to terms and conditions
label
class
col-12
button
class
btn btn-primary
type
submit
Submit form
button
form
Server-side
We recommend using client-side validation, but in case you require server-side validation, you can indicate invalid and valid form fields with
.is-invalid
.is-valid
. Note that
.invalid-feedback
is also supported with these classes.
For invalid fields, ensure that the invalid feedback/error message is associated with the relevant form field using
aria-describedby
(noting that this attribute allows more than one
to be referenced, in case the field already points to additional form text).
To fix
issues with border radius
, input groups require an additional
.has-validation
class.
First name
Looks good!
Last name
Looks good!
Username
Please choose a username.
City
Please provide a valid city.
State
Choose...
Please select a valid state.
Please provide a valid zip.
Agree to terms and conditions
You must agree before submitting.
Submit form
html
form
class
row g-3
class
col-md-4
label
validationServer01
class
form-label
First name
label
input
type
text
class
form-control is-valid
validationServer01
value
Mark
required
class
valid-feedback
Looks good!
class
col-md-4
label
validationServer02
class
form-label
Last name
label
input
type
text
class
form-control is-valid
validationServer02
value
Otto
required
class
valid-feedback
Looks good!
class
col-md-4
label
validationServerUsername
class
form-label
Username
label
class
input-group has-validation
span
class
input-group-text
inputGroupPrepend3
span
input
type
text
class
form-control is-invalid
validationServerUsername
aria-describedby
inputGroupPrepend3 validationServerUsernameFeedback
required
validationServerUsernameFeedback
class
invalid-feedback
Please choose a username.
class
col-md-6
label
validationServer03
class
form-label
City
label
input
type
text
class
form-control is-invalid
validationServer03
aria-describedby
validationServer03Feedback
required
validationServer03Feedback
class
invalid-feedback
Please provide a valid city.
class
col-md-3
label
validationServer04
class
form-label
State
label
select
class
form-select is-invalid
validationServer04
aria-describedby
validationServer04Feedback
required
option
selected
disabled
value
Choose...
option
option
option
select
validationServer04Feedback
class
invalid-feedback
Please select a valid state.
class
col-md-3
label
validationServer05
class
form-label
label
input
type
text
class
form-control is-invalid
validationServer05
aria-describedby
validationServer05Feedback
required
validationServer05Feedback
class
invalid-feedback
Please provide a valid zip.
class
col-12
class
form-check
input
class
form-check-input is-invalid
type
checkbox
value
invalidCheck3
aria-describedby
invalidCheck3Feedback
required
label
class
form-check-label
invalidCheck3
Agree to terms and conditions
label
invalidCheck3Feedback
class
invalid-feedback
You must agree before submitting.
class
col-12
button
class
btn btn-primary
type
submit
Submit form
button
form
Supported elements
Validation styles are available for the following form controls and components:
<input>
s and
<textarea>
s with
.form-control
(including up to one
.form-control
in input groups)
<select>
s with
.form-select
.form-check
Textarea
Please enter a message in the textarea.
Check this checkbox
Example invalid feedback text
Toggle this radio
Or toggle this other radio
More example invalid feedback text
Open this select menu
Three
Example invalid select feedback
Example invalid form file feedback
Submit form
html
form
class
was-validated
class
mb-3
label
validationTextarea
class
form-label
Textarea
label
textarea
class
form-control
validationTextarea
placeholder
Required example textarea
required
textarea
class
invalid-feedback
Please enter a message in the textarea.
class
form-check mb-3
input
type
checkbox
class
form-check-input
validationFormCheck1
required
label
class
form-check-label
validationFormCheck1
Check this checkbox
label
class
invalid-feedback
Example invalid feedback text
class
form-check
input
type
radio
class
form-check-input
validationFormCheck2
name
radio-stacked
required
label
class
form-check-label
validationFormCheck2
Toggle this radio
label
class
form-check mb-3
input
type
radio
class
form-check-input
validationFormCheck3
name
radio-stacked
required
label
class
form-check-label
validationFormCheck3
Or toggle this other radio
label
class
invalid-feedback
More example invalid feedback text
class
mb-3
select
class
form-select
required
aria-label
select example
option
value
Open this select menu
option
option
value
option
option
value
option
option
value
Three
option
select
class
invalid-feedback
Example invalid select feedback
class
mb-3
input
type
file
class
form-control
aria-label
file example
required
class
invalid-feedback
Example invalid form file feedback
class
mb-3
button
class
btn btn-primary
type
submit
disabled
Submit form
button
form
Tooltips
If your form layout allows it, you can swap the
.{valid|invalid}-feedback
classes for
.{valid|invalid}-tooltip
classes to display validation feedback in a styled tooltip. Be sure to have a parent with
position: relative
on it for tooltip positioning. In the example below, our column classes have this already, but your project may require an alternative setup.
First name
Looks good!
Last name
Looks good!
Username
Please choose a unique and valid username.
City
Please provide a valid city.
State
Choose...
Please select a valid state.
Please provide a valid zip.
Submit form
html
form
class
row g-3 needs-validation
novalidate
class
col-md-4 position-relative
label
validationTooltip01
class
form-label
First name
label
input
type
text
class
form-control
validationTooltip01
value
Mark
required
class
valid-tooltip
Looks good!
class
col-md-4 position-relative
label
validationTooltip02
class
form-label
Last name
label
input
type
text
class
form-control
validationTooltip02
value
Otto
required
class
valid-tooltip
Looks good!
class
col-md-4 position-relative
label
validationTooltipUsername
class
form-label
Username
label
class
input-group has-validation
span
class
input-group-text
validationTooltipUsernamePrepend
span
input
type
text
class
form-control
validationTooltipUsername
aria-describedby
validationTooltipUsernamePrepend
required
class
invalid-tooltip
Please choose a unique and valid username.
class
col-md-6 position-relative
label
validationTooltip03
class
form-label
City
label
input
type
text
class
form-control
validationTooltip03
required
class
invalid-tooltip
Please provide a valid city.
class
col-md-3 position-relative
label
validationTooltip04
class
form-label
State
label
select
class
form-select
validationTooltip04
required
option
selected
disabled
value
Choose...
option
option
option
select
class
invalid-tooltip
Please select a valid state.
class
col-md-3 position-relative
label
validationTooltip05
class
form-label
label
input
type
text
class
form-control
validationTooltip05
required
class
invalid-tooltip
Please provide a valid zip.
class
col-12
button
class
btn btn-primary
type
submit
Submit form
button
form
Variables
Added in v5.3.0
As part of Bootstrap’s evolving CSS variables approach, forms now use local CSS variables for validation for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
scss/_root.scss
#{$prefix}
form-valid-color
#{$form-valid-color}
#{$prefix}
form-valid-border-color
#{$form-valid-border-color}
#{$prefix}
form-invalid-color
#{$form-invalid-color}
#{$prefix}
form-invalid-border-color
#{$form-invalid-border-color}
These variables are also color mode adaptive, meaning they change color while in dark mode.
Sass variables
scss/_variables.scss
$form-feedback-margin-top
$form-text-margin-top
$form-feedback-font-size
$form-text-font-size
$form-feedback-font-style
$form-text-font-style
$form-feedback-valid-color
$success
$form-feedback-invalid-color
$danger
$form-feedback-icon-valid-color
$form-feedback-valid-color
$form-feedback-icon-valid
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path fill='#{$form-feedback-icon-valid-color}' d='M2.3 6.73.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1'/></svg>"
$form-feedback-icon-invalid-color
$form-feedback-invalid-color
$form-feedback-icon-invalid
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='#{$form-feedback-icon-invalid-color}'><circle cx='6' cy='6' r='4.5'/><path stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/><circle cx='6' cy='8.2' r='.6' fill='#{$form-feedback-icon-invalid-color}' stroke='none'/></svg>"
scss/_variables.scss
$form-valid-color
$form-feedback-valid-color
$form-valid-border-color
$form-feedback-valid-color
$form-invalid-color
$form-feedback-invalid-color
$form-invalid-border-color
$form-feedback-invalid-color
scss/_variables-dark.scss
$form-valid-color-dark
$green-300
$form-valid-border-color-dark
$green-300
$form-invalid-color-dark
$red-300
$form-invalid-border-color-dark
$red-300
Sass mixins
Two mixins are combined, through our
loop
, to generate our form validation feedback styles.
scss/mixins/_forms.scss
@mixin
form-validation-state-selector
$state
$state
"valid"
$state
"invalid"
.was-validated #
#{$state}
.is-
#{$state}
@content
@else
.is-
#{$state}
@content
@mixin
form-validation-state
$state
$color
$icon
$tooltip-color
color-contrast
$color
$tooltip-bg-color
rgba
$color
$form-feedback-tooltip-opacity
$focus-box-shadow
$input-btn-focus-blur
$input-focus-width
rgba
$color
$input-btn-focus-color-opacity
$border-color
$color
#{$state}
-feedback
display
none
width
100%
margin-top
$form-feedback-margin-top
@include
font-size
$form-feedback-font-size
font-style
$form-feedback-font-style
color
$color
#{$state}
-tooltip
position
absolute
100%
z-index
display
none
max-width
100%
// Contain to parent when possible
padding
$form-feedback-tooltip-padding-y
$form-feedback-tooltip-padding-x
margin-top
.1rem
@include
font-size
$form-feedback-tooltip-font-size
line-height
$form-feedback-tooltip-line-height
color
$tooltip-color
background-color
$tooltip-bg-color
@include
border-radius
$form-feedback-tooltip-border-radius
@include
form-validation-state-selector
$state
#{$state}
-feedback,
#{$state}
-tooltip
display
block
.form-control
@include
form-validation-state-selector
$state
border-color
$border-color
$enable-validation-icons
padding-right
$input-height-inner
background-image
escape-svg
$icon
background-repeat
no-repeat
background-position
right
$input-height-inner-quarter
center
background-size
$input-height-inner-half
$input-height-inner-half
:focus
border-color
$border-color
$enable-shadows
@include
box-shadow
$input-box-shadow
$focus-box-shadow
@else
// Avoid using mixin so we can pass custom focus shadow properly
box-shadow
$focus-box-shadow
// stylelint-disable-next-line selector-no-qualifying-type
textarea.form-control
@include
form-validation-state-selector
$state
$enable-validation-icons
padding-right
$input-height-inner
background-position
$input-height-inner-quarter
right
$input-height-inner-quarter
.form-select
@include
form-validation-state-selector
$state
border-color
$border-color
$enable-validation-icons
[multiple]
[size]
[multiple]
[size="1"]
#{$prefix}
form-select-bg-icon
escape-svg
$icon
padding-right
$form-select-feedback-icon-padding-end
background-position
$form-select-bg-position
$form-select-feedback-icon-position
background-size
$form-select-bg-size
$form-select-feedback-icon-size
:focus
border-color
$border-color
$enable-shadows
@include
box-shadow
$form-select-box-shadow
$focus-box-shadow
@else
// Avoid using mixin so we can pass custom focus shadow properly
box-shadow
$focus-box-shadow
.form-control-color
@include
form-validation-state-selector
$state
$enable-validation-icons
width
$form-color-width
$input-height-inner
.form-check-input
@include
form-validation-state-selector
$state
border-color
$border-color
:checked
background-color
$color
:focus
box-shadow
$focus-box-shadow
~ .form-check-label
color
$color
.form-check-inline .form-check-input
#{$state}
-feedback
margin-left
.5em
.input-group
form-control
focus
form-select
focus
form-floating
focus-within
@include
form-validation-state-selector
$state
$state
== "valid"
z-index
@else if
$state
== "invalid"
z-index
Sass maps
This is the validation Sass map from
_variables.scss
. Override or extend this to generate different or additional states.
scss/_variables.scss
$form-validation-states
"valid"
"color"
#{$prefix}
form-valid-color
"icon"
$form-feedback-icon-valid
"tooltip-color"
#fff
"tooltip-bg-color"
#{$prefix}
success
"focus-box-shadow"
$input-btn-focus-blur
$input-focus-width
rgba
#{$prefix}
success-rgb
$input-btn-focus-color-opacity
"border-color"
#{$prefix}
form-valid-border-color
"invalid"
"color"
#{$prefix}
form-invalid-color
"icon"
$form-feedback-icon-invalid
"tooltip-color"
#fff
"tooltip-bg-color"
#{$prefix}
danger
"focus-box-shadow"
$input-btn-focus-blur
$input-focus-width
rgba
#{$prefix}
danger-rgb
$input-btn-focus-color-opacity
"border-color"
#{$prefix}
form-invalid-border-color
Maps of
$form-validation-states
can contain three optional parameters to override tooltips and focus styles.
Sass loops
Used to iterate over
$form-validation-states
map values to generate our validation styles. Any modifications to the above Sass map will be reflected in your compiled CSS via this loop.
scss/forms/_validation.scss
@each
$state
$data
$form-validation-states
@include
form-validation-state
$state
$data
Customizing
Validation states can be customized via Sass with the
$form-validation-states
map. Located in our
_variables.scss
file, this Sass map is how we generate the default
valid
invalid
validation states. Included is a nested map for customizing each state’s color, icon, tooltip color, and focus shadow. While no other states are supported by browsers, those using custom styles can easily add more complex form feedback.

--- 048_examples_dropdowns.txt ---
Toggle theme
Light
Dark
Auto
Action
Another action
Something else here
Separated link
Action
Another action
Something else here
Separated link
Action
Another action
Something else here
Separated link
Action
Another action
Something else here
Separated link
Documents
Photos
Movies
Music
Games
Trash
Documents
Photos
Movies
Music
Games
Trash
June
January
February
March
April
June
July
August
September
October
November
December
June
January
February
March
April
June
July
August
September
October
November
December

--- 129_forms_checks-radios.txt ---
Approach
Browser default checkboxes and radios are replaced with the help of
.form-check
, a series of classes for both input types that improves the layout and behavior of their HTML elements, that provide greater customization and cross browser consistency. Checkboxes are for selecting one or several options in a list, while radios are for selecting one option from many.
Structurally, our
<input>
s and
<label>
s are sibling elements as opposed to an
<input>
within a
<label>
. This is slightly more verbose as you must specify
attributes to relate the
<input>
<label>
. We use the sibling selector (
) for all our
<input>
states, like
:checked
:disabled
. When combined with the
.form-check-label
class, we can easily style the text for each item based on the
<input>
’s state.
Our checks use custom Bootstrap icons to indicate checked or indeterminate states.
Checks
Default checkbox
Checked checkbox
html
class
form-check
input
class
form-check-input
type
checkbox
value
checkDefault
label
class
form-check-label
checkDefault
Default checkbox
label
class
form-check
input
class
form-check-input
type
checkbox
value
checkChecked
checked
label
class
form-check-label
checkChecked
Checked checkbox
label
Indeterminate
Checkboxes can utilize the
:indeterminate
pseudo class when manually set via JavaScript (there is no available HTML attribute for specifying it).
Indeterminate checkbox
html
class
form-check
input
class
form-check-input
type
checkbox
value
checkIndeterminate
label
class
form-check-label
checkIndeterminate
Indeterminate checkbox
label
Disabled
Add the
disabled
attribute and the associated
<label>
s are automatically styled to match with a lighter color to help indicate the input’s state.
Disabled indeterminate checkbox
Disabled checkbox
Disabled checked checkbox
html
class
form-check
input
class
form-check-input
type
checkbox
value
checkIndeterminateDisabled
disabled
label
class
form-check-label
checkIndeterminateDisabled
Disabled indeterminate checkbox
label
class
form-check
input
class
form-check-input
type
checkbox
value
checkDisabled
disabled
label
class
form-check-label
checkDisabled
Disabled checkbox
label
class
form-check
input
class
form-check-input
type
checkbox
value
checkCheckedDisabled
checked
disabled
label
class
form-check-label
checkCheckedDisabled
Disabled checked checkbox
label
Radios
Default radio
Default checked radio
html
class
form-check
input
class
form-check-input
type
radio
name
radioDefault
radioDefault1
label
class
form-check-label
radioDefault1
Default radio
label
class
form-check
input
class
form-check-input
type
radio
name
radioDefault
radioDefault2
checked
label
class
form-check-label
radioDefault2
Default checked radio
label
Disabled
Add the
disabled
attribute and the associated
<label>
s are automatically styled to match with a lighter color to help indicate the input’s state.
Disabled radio
Disabled checked radio
html
class
form-check
input
class
form-check-input
type
radio
name
radioDisabled
radioDisabled
disabled
label
class
form-check-label
radioDisabled
Disabled radio
label
class
form-check
input
class
form-check-input
type
radio
name
radioDisabled
radioCheckedDisabled
checked
disabled
label
class
form-check-label
radioCheckedDisabled
Disabled checked radio
label
Switches
A switch has the markup of a custom checkbox but uses the
.form-switch
class to render a toggle switch. Consider using
role="switch"
to more accurately convey the nature of the control to assistive technologies that support this role. In older assistive technologies, it will simply be announced as a regular checkbox as a fallback. Switches also support the
disabled
attribute.
Default switch checkbox input
Checked switch checkbox input
Disabled switch checkbox input
Disabled checked switch checkbox input
html
class
form-check form-switch
input
class
form-check-input
type
checkbox
role
switch
switchCheckDefault
label
class
form-check-label
switchCheckDefault
Default switch checkbox input
label
class
form-check form-switch
input
class
form-check-input
type
checkbox
role
switch
switchCheckChecked
checked
label
class
form-check-label
switchCheckChecked
Checked switch checkbox input
label
class
form-check form-switch
input
class
form-check-input
type
checkbox
role
switch
switchCheckDisabled
disabled
label
class
form-check-label
switchCheckDisabled
Disabled switch checkbox input
label
class
form-check form-switch
input
class
form-check-input
type
checkbox
role
switch
switchCheckCheckedDisabled
checked
disabled
label
class
form-check-label
switchCheckCheckedDisabled
Disabled checked switch checkbox input
label
Native switches
Progressively enhance your switches for mobile Safari (iOS 17.4+) by adding a
switch
attribute to your input to enable haptic feedback when toggling switches, just like native iOS switches. There are no style changes attached to using this attribute in Bootstrap as all our switches use custom styles.
Native switch haptics
html
class
form-check form-switch
input
class
form-check-input
type
checkbox
value
checkNativeSwitch
switch
label
class
form-check-label
checkNativeSwitch
Native switch haptics
label
Be sure to read more about
the switch attribute on the WebKit blog
. Safari 17.4+ on macOS and iOS both have native-style switches in HTML while other browsers simply fall back to the standard checkbox appearance. Applying the attribute to a non-Bootstrap checkbox in more recent versions of Safari will render a native switch.
Default (stacked)
By default, any number of checkboxes and radios that are immediate sibling will be vertically stacked and appropriately spaced with
.form-check
Default checkbox
Disabled checkbox
html
class
form-check
input
class
form-check-input
type
checkbox
value
defaultCheck1
label
class
form-check-label
defaultCheck1
Default checkbox
label
class
form-check
input
class
form-check-input
type
checkbox
value
defaultCheck2
disabled
label
class
form-check-label
defaultCheck2
Disabled checkbox
label
Default radio
Second default radio
Disabled radio
html
class
form-check
input
class
form-check-input
type
radio
name
exampleRadios
exampleRadios1
value
option1
checked
label
class
form-check-label
exampleRadios1
Default radio
label
class
form-check
input
class
form-check-input
type
radio
name
exampleRadios
exampleRadios2
value
option2
label
class
form-check-label
exampleRadios2
Second default radio
label
class
form-check
input
class
form-check-input
type
radio
name
exampleRadios
exampleRadios3
value
option3
disabled
label
class
form-check-label
exampleRadios3
Disabled radio
label
Inline
Group checkboxes or radios on the same horizontal row by adding
.form-check-inline
to any
.form-check
3 (disabled)
html
class
form-check form-check-inline
input
class
form-check-input
type
checkbox
inlineCheckbox1
value
option1
label
class
form-check-label
inlineCheckbox1
label
class
form-check form-check-inline
input
class
form-check-input
type
checkbox
inlineCheckbox2
value
option2
label
class
form-check-label
inlineCheckbox2
label
class
form-check form-check-inline
input
class
form-check-input
type
checkbox
inlineCheckbox3
value
option3
disabled
label
class
form-check-label
inlineCheckbox3
3 (disabled)
label
3 (disabled)
html
class
form-check form-check-inline
input
class
form-check-input
type
radio
name
inlineRadioOptions
inlineRadio1
value
option1
label
class
form-check-label
inlineRadio1
label
class
form-check form-check-inline
input
class
form-check-input
type
radio
name
inlineRadioOptions
inlineRadio2
value
option2
label
class
form-check-label
inlineRadio2
label
class
form-check form-check-inline
input
class
form-check-input
type
radio
name
inlineRadioOptions
inlineRadio3
value
option3
disabled
label
class
form-check-label
inlineRadio3
3 (disabled)
label
Reverse
Put your checkboxes, radios, and switches on the opposite side with the
.form-check-reverse
modifier class.
Reverse checkbox
Disabled reverse checkbox
Reverse switch checkbox input
html
class
form-check form-check-reverse
input
class
form-check-input
type
checkbox
value
reverseCheck1
label
class
form-check-label
reverseCheck1
Reverse checkbox
label
class
form-check form-check-reverse
input
class
form-check-input
type
checkbox
value
reverseCheck2
disabled
label
class
form-check-label
reverseCheck2
Disabled reverse checkbox
label
class
form-check form-switch form-check-reverse
input
class
form-check-input
type
checkbox
switchCheckReverse
label
class
form-check-label
switchCheckReverse
Reverse switch checkbox input
label
Without labels
Omit the wrapping
.form-check
for checkboxes and radios that have no label text. Remember to still provide some form of accessible name for assistive technologies (for instance, using
aria-label
). See the
forms overview accessibility
section for details.
html
input
class
form-check-input
type
checkbox
checkboxNoLabel
value
aria-label
input
class
form-check-input
type
radio
name
radioNoLabel
radioNoLabel1
value
aria-label
Toggle buttons
Create button-like checkboxes and radio buttons by using
.btn
styles rather than
.form-check-label
on the
<label>
elements. These toggle buttons can further be grouped in a
button group
if needed.
Checkbox toggle buttons
Single toggle
Checked
Disabled
html
input
type
checkbox
class
btn-check
btn-check
autocomplete
label
class
btn btn-primary
btn-check
Single toggle
label
input
type
checkbox
class
btn-check
btn-check-2
checked
autocomplete
label
class
btn btn-primary
btn-check-2
Checked
label
input
type
checkbox
class
btn-check
btn-check-3
autocomplete
disabled
label
class
btn btn-primary
btn-check-3
Disabled
label
Single toggle
Checked
Disabled
html
input
type
checkbox
class
btn-check
btn-check-4
autocomplete
label
class
btn-check-4
Single toggle
label
input
type
checkbox
class
btn-check
btn-check-5
checked
autocomplete
label
class
btn-check-5
Checked
label
input
type
checkbox
class
btn-check
btn-check-6
autocomplete
disabled
label
class
btn-check-6
Disabled
label
Visually, these checkbox toggle buttons are identical to the
button plugin toggle buttons
. However, they are conveyed differently by assistive technologies: the checkbox toggles will be announced by screen readers as “checked“/“not checked“ (since, despite their appearance, they are fundamentally still checkboxes), whereas the button plugin toggle buttons will be announced as “button“/“button pressed“. The choice between these two approaches will depend on the type of toggle you are creating, and whether or not the toggle will make sense to users when announced as a checkbox or as an actual button.
Radio toggle buttons
Checked
Radio
Disabled
Radio
html
input
type
radio
class
btn-check
name
options
option1
autocomplete
checked
label
class
btn btn-secondary
option1
Checked
label
input
type
radio
class
btn-check
name
options
option2
autocomplete
label
class
btn btn-secondary
option2
Radio
label
input
type
radio
class
btn-check
name
options
option3
autocomplete
disabled
label
class
btn btn-secondary
option3
Disabled
label
input
type
radio
class
btn-check
name
options
option4
autocomplete
label
class
btn btn-secondary
option4
Radio
label
Checked
Radio
Disabled
Radio
html
input
type
radio
class
btn-check
name
options-base
option5
autocomplete
checked
label
class
option5
Checked
label
input
type
radio
class
btn-check
name
options-base
option6
autocomplete
label
class
option6
Radio
label
input
type
radio
class
btn-check
name
options-base
option7
autocomplete
disabled
label
class
option7
Disabled
label
input
type
radio
class
btn-check
name
options-base
option8
autocomplete
label
class
option8
Radio
label
Outlined styles
Different variants of
.btn
, such as the various outlined styles, are supported.
Single toggle
Checked
Checked success radio
Danger radio
html
input
type
checkbox
class
btn-check
btn-check-outlined
autocomplete
label
class
btn btn-outline-primary
btn-check-outlined
Single toggle
label
input
type
checkbox
class
btn-check
btn-check-2-outlined
checked
autocomplete
label
class
btn btn-outline-secondary
btn-check-2-outlined
Checked
label
input
type
radio
class
btn-check
name
options-outlined
success-outlined
autocomplete
checked
label
class
btn btn-outline-success
success-outlined
Checked success radio
label
input
type
radio
class
btn-check
name
options-outlined
danger-outlined
autocomplete
label
class
btn btn-outline-danger
danger-outlined
Danger radio
label
Sass variables
Variables for checks:
scss/_variables.scss
$form-check-input-width
$form-check-min-height
$font-size-base
$line-height-base
$form-check-padding-start
$form-check-input-width
.5em
$form-check-margin-bottom
.125rem
$form-check-label-color
null
$form-check-label-cursor
null
$form-check-transition
null
$form-check-input-active-filter
brightness
$form-check-input-bg
$input-bg
$form-check-input-border
#{$prefix}
border-width
solid
#{$prefix}
border-color
$form-check-input-border-radius
.25em
$form-check-radio-border-radius
$form-check-input-focus-border
$input-focus-border-color
$form-check-input-focus-box-shadow
$focus-ring-box-shadow
$form-check-input-checked-color
$component-active-color
$form-check-input-checked-bg-color
$component-active-bg
$form-check-input-checked-border-color
$form-check-input-checked-bg-color
$form-check-input-checked-bg-image
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'><path fill='none' stroke='#{$form-check-input-checked-color}' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='m6 10 3 3 6-6'/></svg>"
$form-check-radio-checked-bg-image
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'><circle r='2' fill='#{$form-check-input-checked-color}'/></svg>"
$form-check-input-indeterminate-color
$component-active-color
$form-check-input-indeterminate-bg-color
$component-active-bg
$form-check-input-indeterminate-border-color
$form-check-input-indeterminate-bg-color
$form-check-input-indeterminate-bg-image
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'><path fill='none' stroke='#{$form-check-input-indeterminate-color}' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='M6 10h8'/></svg>"
$form-check-input-disabled-opacity
$form-check-label-disabled-opacity
$form-check-input-disabled-opacity
$form-check-btn-check-disabled-opacity
$btn-disabled-opacity
$form-check-inline-margin-end
1rem
Variables for switches:
scss/_variables.scss
$form-switch-color
rgba
$black
$form-switch-width
$form-switch-padding-start
$form-switch-width
.5em
$form-switch-bg-image
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'><circle r='3' fill='#{$form-switch-color}'/></svg>"
$form-switch-border-radius
$form-switch-width
$form-switch-transition
background-position .15s ease-in-out
$form-switch-focus-color
$input-focus-border-color
$form-switch-focus-bg-image
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'><circle r='3' fill='#{$form-switch-focus-color}'/></svg>"
$form-switch-checked-color
$component-active-color
$form-switch-checked-bg-image
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'><circle r='3' fill='#{$form-switch-checked-color}'/></svg>"
$form-switch-checked-bg-position
right center

--- 083_utilities_colors.txt ---
Accessibility tip:
Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a
sufficient
color contrast
) or is included through alternative means, such as additional text hidden with the
.visually-hidden
class.
Colors
Colorize text with color utilities. If you want to colorize links, you can use the
.link-*
helper classes
which have
:hover
:focus
states.
Color utilities like
.text-*
that generated from our original
$theme-colors
Sass map don’t yet respond to color modes, however, any
.text-*-emphasis
utility will. This will be resolved in v6.
.text-primary
.text-primary-emphasis
.text-secondary
.text-secondary-emphasis
.text-success
.text-success-emphasis
.text-danger
.text-danger-emphasis
.text-warning
.text-warning-emphasis
.text-info
.text-info-emphasis
.text-light
.text-light-emphasis
.text-dark
.text-dark-emphasis
.text-body
.text-body-emphasis
.text-body-secondary
.text-body-tertiary
.text-black
.text-white
.text-black-50
.text-white-50
html
class
text-primary
.text-primary
class
text-primary-emphasis
.text-primary-emphasis
class
text-secondary
.text-secondary
class
text-secondary-emphasis
.text-secondary-emphasis
class
text-success
.text-success
class
text-success-emphasis
.text-success-emphasis
class
text-danger
.text-danger
class
text-danger-emphasis
.text-danger-emphasis
class
text-warning bg-dark
.text-warning
class
text-warning-emphasis
.text-warning-emphasis
class
text-info bg-dark
.text-info
class
text-info-emphasis
.text-info-emphasis
class
text-light bg-dark
.text-light
class
text-light-emphasis
.text-light-emphasis
class
text-dark bg-white
.text-dark
class
text-dark-emphasis
.text-dark-emphasis
class
text-body
.text-body
class
text-body-emphasis
.text-body-emphasis
class
text-body-secondary
.text-body-secondary
class
text-body-tertiary
.text-body-tertiary
class
text-black bg-white
.text-black
class
text-white bg-dark
.text-white
class
text-black-50 bg-white
.text-black-50
class
text-white-50 bg-dark
.text-white-50
Deprecation:
With the addition of
.text-opacity-*
utilities and CSS variables for text utilities,
.text-black-50
.text-white-50
are deprecated as of v5.1.0. They’ll be removed in v6.0.0.
Deprecation:
With the addition of the expanded theme colors and variables, the
.text-muted
utility has been deprecated as of v5.3.0. Its default value has also been reassigned to the new
--bs-secondary-color
CSS variable to better support color modes. It will be removed in v6.0.0.
Opacity
Added in v5.1.0
As of v5.1.0, text color utilities are generated with Sass using CSS variables. This allows for real-time color changes without compilation and dynamic alpha transparency changes.
How it works
Consider our default
.text-primary
utility.
.text-primary
--bs-text-opacity
color
rgba
--bs-primary-rgb
--bs-text-opacity
!important
We use an RGB version of our
--bs-primary
(with the value of
13, 110, 253
) CSS variable and attached a second CSS variable,
--bs-text-opacity
, for the alpha transparency (with a default value
thanks to a local CSS variable). That means anytime you use
.text-primary
now, your computed
color
value is
rgba(13, 110, 253, 1)
. The local CSS variable inside each
.text-*
class avoids inheritance issues so nested instances of the utilities don’t automatically have a modified alpha transparency.
Example
To change that opacity, override
--bs-text-opacity
via custom styles or inline styles.
This is default primary text
This is 50% opacity primary text
html
class
text-primary
This is default primary text
class
text-primary
style
--bs-text-opacity
This is 50% opacity primary text
Or, choose from any of the
.text-opacity
utilities:
This is default primary text
This is 75% opacity primary text
This is 50% opacity primary text
This is 25% opacity primary text
html
class
text-primary
This is default primary text
class
text-primary text-opacity-75
This is 75% opacity primary text
class
text-primary text-opacity-50
This is 50% opacity primary text
class
text-primary text-opacity-25
This is 25% opacity primary text
Specificity
Sometimes contextual classes cannot be applied due to the specificity of another selector. In some cases, a sufficient workaround is to wrap your element’s content in a
<div>
or more semantic element with the desired class.
In addition to the following Sass functionality, consider reading about our included
CSS custom properties
(aka CSS variables) for colors and more.
Sass variables
Most
color
utilities are generated by our theme colors, reassigned from our generic color palette variables.
scss/_variables.scss
$blue
#0d6efd
$indigo
#6610f2
$purple
#6f42c1
$pink
#d63384
$red
#dc3545
$orange
#fd7e14
$yellow
#ffc107
$green
#198754
$teal
#20c997
$cyan
#0dcaf0
scss/_variables.scss
$primary
$blue
$secondary
$gray-600
$success
$green
$info
$cyan
$warning
$yellow
$danger
$red
$light
$gray-100
$dark
$gray-900
Grayscale colors are also available, but only a subset are used to generate any utilities.
scss/_variables.scss
$white
#fff
$gray-100
#f8f9fa
$gray-200
#e9ecef
$gray-300
#dee2e6
$gray-400
#ced4da
$gray-500
#adb5bd
$gray-600
#6c757d
$gray-700
#495057
$gray-800
#343a40
$gray-900
#212529
$black
#000
scss/_maps.scss
$theme-colors-text
"primary"
$primary-text-emphasis
"secondary"
$secondary-text-emphasis
"success"
$success-text-emphasis
"info"
$info-text-emphasis
"warning"
$warning-text-emphasis
"danger"
$danger-text-emphasis
"light"
$light-text-emphasis
"dark"
$dark-text-emphasis
Variables for setting colors in
.text-*-emphasis
utilities in light and dark mode:
scss/_variables.scss
$primary-text-emphasis
shade-color
$primary
$secondary-text-emphasis
shade-color
$secondary
$success-text-emphasis
shade-color
$success
$info-text-emphasis
shade-color
$info
$warning-text-emphasis
shade-color
$warning
$danger-text-emphasis
shade-color
$danger
$light-text-emphasis
$gray-700
$dark-text-emphasis
$gray-700
scss/_variables-dark.scss
$primary-text-emphasis-dark
tint-color
$primary
$secondary-text-emphasis-dark
tint-color
$secondary
$success-text-emphasis-dark
tint-color
$success
$info-text-emphasis-dark
tint-color
$info
$warning-text-emphasis-dark
tint-color
$warning
$danger-text-emphasis-dark
tint-color
$danger
$light-text-emphasis-dark
$gray-100
$dark-text-emphasis-dark
$gray-300
Sass maps
Theme colors are then put into a Sass map so we can loop over them to generate our utilities, component modifiers, and more.
scss/_variables.scss
$theme-colors
"primary"
$primary
"secondary"
$secondary
"success"
$success
"info"
$info
"warning"
$warning
"danger"
$danger
"light"
$light
"dark"
$dark
Grayscale colors are also available as a Sass map.
This map is not used to generate any utilities.
scss/_variables.scss
$grays
"100"
$gray-100
"200"
$gray-200
"300"
$gray-300
"400"
$gray-400
"500"
$gray-500
"600"
$gray-600
"700"
$gray-700
"800"
$gray-800
"900"
$gray-900
RGB colors are generated from a separate Sass map:
scss/_maps.scss
$theme-colors-rgb
map-loop
$theme-colors
to-rgb
"$value"
Color opacities build on that with their own map that’s consumed by the utilities API:
scss/_maps.scss
$utilities-text
map-merge
$utilities-colors
"black"
to-rgb
$black
"white"
to-rgb
$white
"body"
to-rgb
$body-color
$utilities-text-colors
map-loop
$utilities-text
rgba-css-var
"$key"
"text"
$utilities-text-emphasis-colors
"primary-emphasis"
#{$prefix}
primary-text-emphasis
"secondary-emphasis"
#{$prefix}
secondary-text-emphasis
"success-emphasis"
#{$prefix}
success-text-emphasis
"info-emphasis"
#{$prefix}
info-text-emphasis
"warning-emphasis"
#{$prefix}
warning-text-emphasis
"danger-emphasis"
#{$prefix}
danger-text-emphasis
"light-emphasis"
#{$prefix}
light-text-emphasis
"dark-emphasis"
#{$prefix}
dark-text-emphasis
Color mode adaptive text colors are also available as a Sass map:
scss/_maps.scss
$theme-colors-text
"primary"
$primary-text-emphasis
"secondary"
$secondary-text-emphasis
"success"
$success-text-emphasis
"info"
$info-text-emphasis
"warning"
$warning-text-emphasis
"danger"
$danger-text-emphasis
"light"
$light-text-emphasis
"dark"
$dark-text-emphasis
scss/_maps.scss
$theme-colors-text-dark
"primary"
$primary-text-emphasis-dark
"secondary"
$secondary-text-emphasis-dark
"success"
$success-text-emphasis-dark
"info"
$info-text-emphasis-dark
"warning"
$warning-text-emphasis-dark
"danger"
$danger-text-emphasis-dark
"light"
$light-text-emphasis-dark
"dark"
$dark-text-emphasis-dark
Sass utilities API
Color utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"color"
property
color
class
text
local-vars
"text-opacity"
values
map-merge
$utilities-text-colors
"muted"
#{$prefix}
secondary-color
// deprecated
"black-50"
rgba
$black
// deprecated
"white-50"
rgba
$white
// deprecated
"body-secondary"
#{$prefix}
secondary-color
"body-tertiary"
#{$prefix}
tertiary-color
"body-emphasis"
#{$prefix}
emphasis-color
"reset"
inherit
"text-opacity"
css-var
true
class
text-opacity
values
"text-color"
property
color
class
text
values
$utilities-text-emphasis-colors

--- 090_utilities_z-index.txt ---
Example
z-index
utilities to stack elements on top of one another. Requires a
position
value other than
static
, which can be set with custom styles or using our
position utilities
We call these “low-level”
z-index
utilities because of their default values of
through
, which we use for the layout of overlapping components. High-level
z-index
values are used for overlay components like modals and tooltips.
z-n1
html
class
z-3 position-absolute p-5 rounded-3
span
span
class
z-2 position-absolute p-5 rounded-3
span
span
class
z-1 position-absolute p-5 rounded-3
span
span
class
z-0 position-absolute p-5 rounded-3
span
span
class
z-n1 position-absolute p-5 rounded-3
span
z-n1
span
Overlays
z-index
values to ensure a usable experience with competing “layers” of an interface.
Read about them in the
z-index
layout page
Component approach
On some components, we use our low-level
z-index
values to manage repeating elements that overlap one another (like buttons in a button group or items in a list group).
Learn about our
z-index
approach
Sass maps
Customize this Sass map to change the available values and generated utilities.
scss/_variables.scss
$zindex-levels
Sass utilities API
Position utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"z-index"
property
z-index
class
values
$zindex-levels

--- 030_components_badge.txt ---
Examples
Badges scale to match the size of the immediate parent element by using relative font sizing and
units. As of v5, badges no longer have focus or hover styles for links.
Headings
Example heading
Example heading
Example heading
Example heading
Example heading
Example heading
html
Example heading
span
class
badge text-bg-secondary
span
Example heading
span
class
badge text-bg-secondary
span
Example heading
span
class
badge text-bg-secondary
span
Example heading
span
class
badge text-bg-secondary
span
Example heading
span
class
badge text-bg-secondary
span
Example heading
span
class
badge text-bg-secondary
span
Buttons
Badges can be used as part of links or buttons to provide a counter.
Notifications
html
button
type
button
class
btn btn-primary
Notifications
span
class
badge text-bg-secondary
span
button
Note that depending on how they are used, badges may be confusing for users of screen readers and similar assistive technologies. While the styling of badges provides a visual cue as to their purpose, these users will simply be presented with the content of the badge. Depending on the specific situation, these badges may seem like random additional words or numbers at the end of a sentence, link, or button.
Unless the context is clear (as with the “Notifications” example, where it is understood that the “4” is the number of notifications), consider including additional context with a visually hidden piece of additional text.
Positioned
Use utilities to modify a
.badge
and position it in the corner of a link or button.
Inbox
unread messages
html
button
type
button
class
btn btn-primary position-relative
Inbox
span
class
position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger
span
class
visually-hidden
unread messages
span
span
button
You can also replace the
.badge
class with a few more utilities without a count for a more generic indicator.
Profile
New alerts
html
button
type
button
class
btn btn-primary position-relative
Profile
span
class
position-absolute top-0 start-100 translate-middle p-2 bg-danger border border-light rounded-circle
span
class
visually-hidden
New alerts
span
span
button
Background colors
Added in v5.2.0
Set a
background-color
with contrasting foreground
color
with
.text-bg-{color}
helpers
. Previously it was required to manually pair your choice of
.text-{color}
.bg-{color}
utilities for styling, which you still may use if you prefer.
Primary
Secondary
Success
Danger
Warning
Info
Light
Dark
html
span
class
badge text-bg-primary
Primary
span
span
class
badge text-bg-secondary
Secondary
span
span
class
badge text-bg-success
Success
span
span
class
badge text-bg-danger
Danger
span
span
class
badge text-bg-warning
Warning
span
span
class
badge text-bg-info
Info
span
span
class
badge text-bg-light
Light
span
span
class
badge text-bg-dark
Dark
span
Accessibility tip:
Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a
sufficient
color contrast
) or is included through alternative means, such as additional text hidden with the
.visually-hidden
class.
Pill badges
Use the
.rounded-pill
utility class to make badges more rounded with a larger
border-radius
Primary
Secondary
Success
Danger
Warning
Info
Light
Dark
html
span
class
badge rounded-pill text-bg-primary
Primary
span
span
class
badge rounded-pill text-bg-secondary
Secondary
span
span
class
badge rounded-pill text-bg-success
Success
span
span
class
badge rounded-pill text-bg-danger
Danger
span
span
class
badge rounded-pill text-bg-warning
Warning
span
span
class
badge rounded-pill text-bg-info
Info
span
span
class
badge rounded-pill text-bg-light
Light
span
span
class
badge rounded-pill text-bg-dark
Dark
span
Variables
Added in v5.2.0
As part of Bootstrap’s evolving CSS variables approach, badges now use local CSS variables on
.badge
for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
scss/_badge.scss
#{$prefix}
badge-padding-x
#{$badge-padding-x}
#{$prefix}
badge-padding-y
#{$badge-padding-y}
@include
$badge-font-size
#{$prefix}
badge-font-size
#{$prefix}
badge-font-weight
#{$badge-font-weight}
#{$prefix}
badge-color
#{$badge-color}
#{$prefix}
badge-border-radius
#{$badge-border-radius}
Sass variables
scss/_variables.scss
$badge-font-size
.75em
$badge-font-weight
$font-weight-bold
$badge-color
$white
$badge-padding-y
.35em
$badge-padding-x
.65em
$badge-border-radius
#{$prefix}
border-radius

--- 132_examples_masonry.txt ---
Integrate
Masonry
with the Bootstrap grid system and cards component.
Masonry is not included in Bootstrap. Add it by including the JavaScript plugin manually, or using a CDN like so:
<script src="https://cdn.jsdelivr.net/npm/masonry-layout@4.2.2/dist/masonry.pkgd.min.js" integrity="sha384-GNFwBvfVxBkLMJpYMOABq3c+d3KnQxudP/mGPkzpZSTYykLBNsZEnG2D9G/X/+7D" crossorigin="anonymous" async></script>
By adding
data-masonry='&lcub;"percentPosition": true &rcub;'
to the
.row
wrapper, we can combine the powers of Bootstrap's responsive grid and Masonry's positioning.
Placeholder
Image cap
Card title that wraps to a new line
This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
A well-known quote, contained in a blockquote element.
Someone famous in
Source Title
Placeholder
Image cap
Card title
This card has supporting text below as a natural lead-in to additional content.
Last updated 3 mins ago
A well-known quote, contained in a blockquote element.
Someone famous in
Source Title
Card title
This card has a regular title and short paragraph of text below it.
Last updated 3 mins ago
Placeholder
Card image
A well-known quote, contained in a blockquote element.
Someone famous in
Source Title
Card title
This is another card with title and supporting text below. This card has some additional content to make it slightly taller overall.
Last updated 3 mins ago

--- 100_components_pagination.txt ---
Overview
We use a large block of connected links for our pagination, making links hard to miss and easily scalable—all while providing large hit areas. Pagination is built with list HTML elements so screen readers can announce the number of available links. Use a wrapping
<nav>
element to identify it as a navigation section to screen readers and other assistive technologies.
In addition, as pages likely have more than one such navigation section, it’s advisable to provide a descriptive
aria-label
for the
<nav>
to reflect its purpose. For example, if the pagination component is used to navigate between a set of search results, an appropriate label could be
aria-label="Search results pages"
html
aria-label
Page navigation example
class
pagination
class
page-item
class
page-link
href
Previous
class
page-item
class
page-link
href
class
page-item
class
page-link
href
class
page-item
class
page-link
href
class
page-item
class
page-link
href
Next
Working with icons
Looking to use an icon or symbol in place of text for some pagination links? Be sure to provide proper screen reader support with
aria
attributes.
html
aria-label
Page navigation example
class
pagination
class
page-item
class
page-link
href
aria-label
Previous
span
aria-hidden
true
&laquo;
span
class
page-item
class
page-link
href
class
page-item
class
page-link
href
class
page-item
class
page-link
href
class
page-item
class
page-link
href
aria-label
Next
span
aria-hidden
true
&raquo;
span
Active
.active
to indicate a
.page-item
is the one currently being viewed. If using an
on the current page,
aria-current="page"
should be added for assistive technologies.
html
aria-label
class
pagination
class
page-item
href
class
page-link
Previous
class
page-item
class
page-link
href
class
page-item active
class
page-link
href
aria-current
page
class
page-item
class
page-link
href
class
page-item
class
page-link
href
Next
If using a non-interactive element, like a
<span>
for the current page, you may omit the
aria-current
attribute.
class
page-item active
span
class
page-link
span
Disabled
.disabled
to a
.page-item
to make it appear un-clickable. While
.disabled
uses
pointer-events: none
to disable the link‘s interactivity, that CSS property is not yet standardized and doesn’t account for keyboard navigation. As such, you should always add
tabindex="-1"
on disabled links and use custom JavaScript to fully disable their functionality.
html
aria-label
class
pagination
class
page-item disabled
class
page-link
Previous
class
page-item
class
page-link
href
class
page-item active
class
page-link
href
aria-current
page
class
page-item
class
page-link
href
class
page-item
class
page-link
href
Next
And just like active page items, you can swap out the disabled
for a
<span>
to remove click functionality and prevent keyboard focus while retaining intended styles.
class
page-item disabled
span
class
page-link
Previous
span
Sizing
Fancy larger or smaller pagination? Add
.pagination-lg
.pagination-sm
for additional sizes.
html
aria-label
class
pagination pagination-lg
class
page-item active
class
page-link
aria-current
page
class
page-item
class
page-link
href
class
page-item
class
page-link
href
html
aria-label
class
pagination pagination-sm
class
page-item active
class
page-link
aria-current
page
class
page-item
class
page-link
href
class
page-item
class
page-link
href
Alignment
Change the alignment of pagination components with
flexbox utilities
. For example, with
.justify-content-center
html
aria-label
Page navigation example
class
pagination justify-content-center
class
page-item disabled
class
page-link
Previous
class
page-item
class
page-link
href
class
page-item
class
page-link
href
class
page-item
class
page-link
href
class
page-item
class
page-link
href
Next
Or with
.justify-content-end
html
aria-label
Page navigation example
class
pagination justify-content-end
class
page-item disabled
class
page-link
Previous
class
page-item
class
page-link
href
class
page-item
class
page-link
href
class
page-item
class
page-link
href
class
page-item
class
page-link
href
Next
Variables
Added in v5.2.0
As part of Bootstrap’s evolving CSS variables approach, pagination now uses local CSS variables on
.pagination
for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
scss/_pagination.scss
#{$prefix}
pagination-padding-x
#{$pagination-padding-x}
#{$prefix}
pagination-padding-y
#{$pagination-padding-y}
@include
$pagination-font-size
#{$prefix}
pagination-font-size
#{$prefix}
pagination-color
#{$pagination-color}
#{$prefix}
pagination-bg
#{$pagination-bg}
#{$prefix}
pagination-border-width
#{$pagination-border-width}
#{$prefix}
pagination-border-color
#{$pagination-border-color}
#{$prefix}
pagination-border-radius
#{$pagination-border-radius}
#{$prefix}
pagination-hover-color
#{$pagination-hover-color}
#{$prefix}
pagination-hover-bg
#{$pagination-hover-bg}
#{$prefix}
pagination-hover-border-color
#{$pagination-hover-border-color}
#{$prefix}
pagination-focus-color
#{$pagination-focus-color}
#{$prefix}
pagination-focus-bg
#{$pagination-focus-bg}
#{$prefix}
pagination-focus-box-shadow
#{$pagination-focus-box-shadow}
#{$prefix}
pagination-active-color
#{$pagination-active-color}
#{$prefix}
pagination-active-bg
#{$pagination-active-bg}
#{$prefix}
pagination-active-border-color
#{$pagination-active-border-color}
#{$prefix}
pagination-disabled-color
#{$pagination-disabled-color}
#{$prefix}
pagination-disabled-bg
#{$pagination-disabled-bg}
#{$prefix}
pagination-disabled-border-color
#{$pagination-disabled-border-color}
Sass variables
scss/_variables.scss
$pagination-padding-y
.375rem
$pagination-padding-x
.75rem
$pagination-padding-y-sm
.25rem
$pagination-padding-x-sm
.5rem
$pagination-padding-y-lg
.75rem
$pagination-padding-x-lg
1.5rem
$pagination-font-size
$font-size-base
$pagination-color
#{$prefix}
link-color
$pagination-bg
#{$prefix}
body-bg
$pagination-border-radius
#{$prefix}
border-radius
$pagination-border-width
#{$prefix}
border-width
$pagination-margin-start
calc
#{$pagination-border-width}
// stylelint-disable-line function-disallowed-list
$pagination-border-color
#{$prefix}
border-color
$pagination-focus-color
#{$prefix}
link-hover-color
$pagination-focus-bg
#{$prefix}
secondary-bg
$pagination-focus-box-shadow
$focus-ring-box-shadow
$pagination-focus-outline
$pagination-hover-color
#{$prefix}
link-hover-color
$pagination-hover-bg
#{$prefix}
tertiary-bg
$pagination-hover-border-color
#{$prefix}
border-color
// Todo in v6: remove this?
$pagination-active-color
$component-active-color
$pagination-active-bg
$component-active-bg
$pagination-active-border-color
$component-active-bg
$pagination-disabled-color
#{$prefix}
secondary-color
$pagination-disabled-bg
#{$prefix}
secondary-bg
$pagination-disabled-border-color
#{$prefix}
border-color
$pagination-transition
color .15s ease-in-out
background-color .15s ease-in-out
border-color .15s ease-in-out
box-shadow .15s ease-in-out
$pagination-border-radius-sm
#{$prefix}
border-radius-sm
$pagination-border-radius-lg
#{$prefix}
border-radius-lg
Sass mixins
scss/mixins/_pagination.scss
@mixin
pagination-size
$padding-y
$padding-x
$font-size
$border-radius
#{$prefix}
pagination-padding-x
#{$padding-x}
#{$prefix}
pagination-padding-y
#{$padding-y}
@include
$font-size
#{$prefix}
pagination-font-size
#{$prefix}
pagination-border-radius
#{$border-radius}

--- 149_examples_modals.txt ---
Toggle theme
Light
Dark
Auto
Modal title
This is a modal sheet, a variation of the modal that docs itself to the bottom of the viewport like the newer share sheets in iOS.
Save changes
Close
Enable this setting?
You can always change your mind in your account settings.
Yes, enable
No thanks
What's new
Grid view
Not into lists? Try the new grid view.
Bookmarks
Save items you love for easy access later.
Video embeds
Share videos wherever you go.
Great, thanks!
Sign up for free
Email address
Password
Sign up
By clicking Sign up, you agree to the terms of use.
Or use a third-party
Sign up with Google
Sign up with Facebook
Sign up with GitHub

--- 124_helpers_clearfix.txt ---
Easily clear
float
s by adding
.clearfix
to the parent element
. Can also be used as a mixin.
Use in HTML:
class
clearfix
The mixin source code:
scss/mixins/_clearfix.scss
@mixin
clearfix
::after
display
block
clear
both
content
Use the mixin in SCSS:
.element
@include
clearfix
The following example shows how the clearfix can be used. Without the clearfix the wrapping div would not span around the buttons which would cause a broken layout.
Example Button floated left
Example Button floated right
html
class
bg-info clearfix
button
type
button
class
btn btn-secondary float-start
Example Button floated left
button
button
type
button
class
btn btn-secondary float-end
Example Button floated right
button

--- 034_layout_breakpoints.txt ---
Core concepts
Breakpoints are the building blocks of responsive design.
Use them to control when your layout can be adapted at a particular viewport or device size.
Use media queries to architect your CSS by breakpoint.
Media queries are a feature of CSS that allow you to conditionally apply styles based on a set of browser and operating system parameters. We most commonly use
min-width
in our media queries.
Mobile first, responsive design is the goal.
Available breakpoints
grid tiers
, for building responsively. These breakpoints can be customized if you’re using our source Sass files.
Breakpoint
Class infix
Dimensions
Extra small
None
<576px
Small
≥576px
Medium
≥768px
Large
≥992px
Extra large
≥1200px
Extra extra large
≥1400px
Each breakpoint was chosen to comfortably hold containers whose widths are multiples of 12. Breakpoints are also representative of a subset of common device sizes and viewport dimensions—they don’t specifically target every use case or device. Instead, the ranges provide a strong and consistent foundation to build on for nearly any device.
These breakpoints are customizable via Sass—you’ll find them in a Sass map in our
_variables.scss
stylesheet.
scss/_variables.scss
$grid-breakpoints
576px
768px
992px
1200px
1400px
For more information and examples on how to modify our Sass maps and variables, please refer to
the CSS section of the Grid documentation
Media queries
Since Bootstrap is developed to be mobile first, we use a handful of
media queries
to create sensible breakpoints for our layouts and interfaces. These breakpoints are mostly based on minimum viewport widths and allow us to scale up elements as the viewport changes.
Min-width
// Source mixins
// No media query necessary for xs breakpoint as it’s effectively `@media (min-width: 0) { ... }`
@include
media-breakpoint-up
@include
media-breakpoint-up
@include
media-breakpoint-up
@include
media-breakpoint-up
@include
media-breakpoint-up
// Usage
// Example: Hide starting at `min-width: 0`, and then show at the `sm` breakpoint
.custom-class
display
none
@include
media-breakpoint-up
.custom-class
display
block
These Sass mixins translate in our compiled CSS using the values declared in our Sass variables. For example:
// X-Small devices (portrait phones, less than 576px)
// No media query for `xs` since this is the default in Bootstrap
// Small devices (landscape phones, 576px and up)
@media
min-width
576px
// Medium devices (tablets, 768px and up)
@media
min-width
768px
// Large devices (desktops, 992px and up)
@media
min-width
992px
// X-Large devices (large desktops, 1200px and up)
@media
min-width
1200px
// XX-Large devices (larger desktops, 1400px and up)
@media
min-width
1400px
Max-width
We occasionally use media queries that go in the other direction (the given screen size
or smaller
// No media query necessary for xs breakpoint as it’s effectively `@media (max-width: 0) { ... }`
@include
media-breakpoint-down
@include
media-breakpoint-down
@include
media-breakpoint-down
@include
media-breakpoint-down
@include
media-breakpoint-down
// Example: Style from medium breakpoint and down
@include
media-breakpoint-down
.custom-class
display
block
These mixins take those declared breakpoints, subtract
.02px
from them, and use them as our
max-width
values. For example:
// `xs` returns only a ruleset and no media query
// ... { ... }
// `sm` applies to x-small devices (portrait phones, less than 576px)
@media
max-width
575.98px
// `md` applies to small devices (landscape phones, less than 768px)
@media
max-width
767.98px
// `lg` applies to medium devices (tablets, less than 992px)
@media
max-width
991.98px
// `xl` applies to large devices (desktops, less than 1200px)
@media
max-width
1199.98px
// `xxl` applies to x-large devices (large desktops, less than 1400px)
@media
max-width
1399.98px
Why subtract .02px?
Browsers don’t currently support
range context queries
, so we work around the limitations of
min-
max-
prefixes
and viewports with fractional widths (which can occur under certain conditions on high-dpi devices, for instance) by using values with higher precision.
Single breakpoint
There are also media queries and mixins for targeting a single segment of screen sizes using the minimum and maximum breakpoint widths.
@include
media-breakpoint-only
@include
media-breakpoint-only
@include
media-breakpoint-only
@include
media-breakpoint-only
@include
media-breakpoint-only
@include
media-breakpoint-only
For example the
@include media-breakpoint-only(md) { ... }
will result in :
@media
min-width
768px
max-width
991.98px
Between breakpoints
Similarly, media queries may span multiple breakpoint widths:
@include
media-breakpoint-between
Which results in:
// Example
// Apply styles starting from medium devices and up to extra large devices
@media
min-width
768px
max-width
1199.98px

--- 084_helpers_text-truncation.txt ---
For longer content, you can add a
.text-truncate
class to truncate the text with an ellipsis.
Requires
display: inline-block
display: block
This text is quite long, and will be truncated once displayed.
This text is quite long, and will be truncated once displayed.
html
<!-- Block level -->
class
class
col-2 text-truncate
This text is quite long, and will be truncated once displayed.
<!-- Inline level -->
span
class
d-inline-block text-truncate
style
max-width
150px
This text is quite long, and will be truncated once displayed.
span

--- 020_components_progress.txt ---
New markup in v5.3.0 —
We’ve deprecated the previous HTML structure for progress bars and replaced it with a more accessible one. The previous structure will continue to work until v6.
See what’s changed in our migration guide.
How it works
Progress components are built with two HTML elements, some CSS to set the width, and a few attributes. We don’t use
the HTML5
<progress>
element
, ensuring you can stack progress bars, animate them, and place text labels over them.
We use the
.progress
as a wrapper to indicate the max value of the progress bar.
.progress
wrapper also requires a
role="progressbar"
aria
attributes to make it accessible, including an accessible name (using
aria-label
aria-labelledby
, or similar).
We use the inner
.progress-bar
purely for the visual bar and label.
.progress-bar
requires an inline style, utility class, or custom CSS to set its width.
We provide a special
.progress-stacked
class to create multiple/stacked progress bars.
Put that all together, and you have the following examples.
html
class
progress
role
progressbar
aria-label
Basic example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar
style
width
class
progress
role
progressbar
aria-label
Basic example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar
style
width
class
progress
role
progressbar
aria-label
Basic example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar
style
width
class
progress
role
progressbar
aria-label
Basic example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar
style
width
class
progress
role
progressbar
aria-label
Basic example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar
style
width
100%
Bar sizing
Width
utilities for setting width
. Depending on your needs, these may help with quickly configuring the width of the
.progress-bar
html
class
progress
role
progressbar
aria-label
Basic example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar w-75
Height
You only set a
height
value on the
.progress
container, so if you change that value, the inner
.progress-bar
will automatically resize accordingly.
html
class
progress
role
progressbar
aria-label
Example 1px high
aria-valuenow
aria-valuemin
aria-valuemax
style
height
class
progress-bar
style
width
class
progress
role
progressbar
aria-label
Example 20px high
aria-valuenow
aria-valuemin
aria-valuemax
style
height
20px
class
progress-bar
style
width
Labels
Add labels to your progress bars by placing text within the
.progress-bar
html
class
progress
role
progressbar
aria-label
Example with label
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar
style
width
Long labels
Note that by default, the content inside the
.progress-bar
is controlled with
overflow: hidden
, so it doesn’t bleed out of the bar. If your progress bar is shorter than its label, the content will be capped and may become unreadable. To change this behavior, you can use
.overflow-visible
from the
overflow utilities
Labels longer than the progress bar within may not be fully accessible using this method because it relies on the text color having the correct contrast ratio with both the
.progress
.progress-bar
background colors. Use caution when implementing this example.
If the text can overlap the progress bar, we often recommend displaying the label outside of the progress bar for better accessibility.
Backgrounds
Use background utility classes to change the appearance of individual progress bars.
html
class
progress
role
progressbar
aria-label
Success example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar bg-success
style
width
class
progress
role
progressbar
aria-label
Info example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar bg-info
style
width
class
progress
role
progressbar
aria-label
Warning example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar bg-warning
style
width
class
progress
role
progressbar
aria-label
Danger example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar bg-danger
style
width
100%
Accessibility tip:
Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a
sufficient
color contrast
) or is included through alternative means, such as additional text hidden with the
.visually-hidden
class.
If you’re adding labels to progress bars with a custom background color, make sure to also set an appropriate
text color
, so the labels remain readable and have sufficient contrast. We recommend using the
color and background
helper classes.
100%
html
class
progress
role
progressbar
aria-label
Success example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar text-bg-success
style
width
class
progress
role
progressbar
aria-label
Info example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar text-bg-info
style
width
class
progress
role
progressbar
aria-label
Warning example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar text-bg-warning
style
width
class
progress
role
progressbar
aria-label
Danger example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar text-bg-danger
style
width
100%
100%
Multiple bars
You can include multiple progress components inside a container with
.progress-stacked
to create a single stacked progress bar. Note that in this case, the styling to set the visual width of the progress bar
must
be applied to the
.progress
elements, rather than the
.progress-bar
html
class
progress-stacked
class
progress
role
progressbar
aria-label
Segment one
aria-valuenow
aria-valuemin
aria-valuemax
style
width
class
progress-bar
class
progress
role
progressbar
aria-label
Segment two
aria-valuenow
aria-valuemin
aria-valuemax
style
width
class
progress-bar bg-success
class
progress
role
progressbar
aria-label
Segment three
aria-valuenow
aria-valuemin
aria-valuemax
style
width
class
progress-bar bg-info
Striped
.progress-bar-striped
to any
.progress-bar
to apply a stripe via CSS gradient over the progress bar’s background color.
html
class
progress
role
progressbar
aria-label
Default striped example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar progress-bar-striped
style
width
class
progress
role
progressbar
aria-label
Success striped example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar progress-bar-striped bg-success
style
width
class
progress
role
progressbar
aria-label
Info striped example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar progress-bar-striped bg-info
style
width
class
progress
role
progressbar
aria-label
Warning striped example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar progress-bar-striped bg-warning
style
width
class
progress
role
progressbar
aria-label
Danger striped example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar progress-bar-striped bg-danger
style
width
100%
Animated stripes
The striped gradient can also be animated. Add
.progress-bar-animated
.progress-bar
to animate the stripes right to left via CSS3 animations.
html
class
progress
role
progressbar
aria-label
Animated striped example
aria-valuenow
aria-valuemin
aria-valuemax
class
progress-bar progress-bar-striped progress-bar-animated
style
width
Variables
Added in v5.2.0
As part of Bootstrap’s evolving CSS variables approach, progress bars now use local CSS variables on
.progress
for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
scss/_progress.scss
#{$prefix}
progress-height
#{$progress-height}
@include
$progress-font-size
#{$prefix}
progress-font-size
#{$prefix}
progress-bg
#{$progress-bg}
#{$prefix}
progress-border-radius
#{$progress-border-radius}
#{$prefix}
progress-box-shadow
#{$progress-box-shadow}
#{$prefix}
progress-bar-color
#{$progress-bar-color}
#{$prefix}
progress-bar-bg
#{$progress-bar-bg}
#{$prefix}
progress-bar-transition
#{$progress-bar-transition}
Sass variables
scss/_variables.scss
$progress-height
1rem
$progress-font-size
$font-size-base
$progress-bg
#{$prefix}
secondary-bg
$progress-border-radius
#{$prefix}
border-radius
$progress-box-shadow
#{$prefix}
box-shadow-inset
$progress-bar-color
$white
$progress-bar-bg
$primary
$progress-bar-animation-timing
1s linear infinite
$progress-bar-transition
width .6s ease
Keyframes
Used for creating the CSS animations for
.progress-bar-animated
. Included in
scss/_progress-bar.scss
scss/_progress.scss
$enable-transitions
@keyframes
progress-bar-stripes
background-position-x
#{$prefix}
progress-height

--- 086_examples_carousel-rtl.txt ---
عنوان المثال.
تشير الدراسات الإحصائية حسب الجمعية الأمريكية للغات بأن الإقبال على العربية زاد %126 في الولايات المتحدة الأمريكية وحدها بين عامي 2002 و2009م.
سجل اليوم
عنوان مثال آخر.
حسب المجلس الثقافي البريطاني فإن تعليم الإنجليزية داخل بريطانيا يسهم في تعزيز اقتصادها بما يتجاوز ملياري جنيه سنوياً، كما أنه وفر أكثر من 26 ألف وظيفة.
أعرف أكثر
واحد أكثر لقياس جيد.
الإحصاءات لحجم الاستثمار اللغوي خارج بريطانيا تتفاوت من سنة لأخرى إلا أن المدير التنفيذي للمجلس الثقافي البريطاني إدي بايرز يرى أن استثمار تعليم الإنجليزية في الخارج لا يحسب على المستوى المالي فحسب بل على المستوى السياسي أيضاً.
تصفح المعرض
السابق
التالي
Placeholder
عنوان
تذكر دائماً أن الحاسوب لا يمتلك ذكاءً، ولكنه يكتسب الذكاء الاصطناعي من خلال ثلاثة عناصر وظيفية رئيسة، هي: القدرة على التحليل، والقدرة على التأليف، والاستدلال المنطقي.
عرض التفاصيل
Placeholder
عنوان آخر
إذا أردنا استخدام الحاسوب الذكي في معالجة اللغة العربية فإننا نجد أنفسنا أمام تحدٍّ كبير، خاصة وأن لغتنا تمتاز بتماسك منظوماتها وتداخلها، ومع ذلك فإن الذكاء الاصطناعي يمكّننا من الحصول على أربعة أنواع من المعالجة، هي: المعالجة الصوتية، والمعالجة الصرفية، والمعالجة النحوية، والمعالجة الدلالية.
عرض التفاصيل
Placeholder
عنوان ثالث لتأكيد المعلومة
بفضل بحوث الذكاء الاصطناعي وتقنياته استطعنا الانتقال من مرحلة التعامل مع الفيزيائي إلى مرحلة التعامل مع المنطقي، وقد انعكس هذا الانتقال بصورة إيجابية على الكيفية التي تتعامل بها الشعوب مع لغاتها الحيَّة، وهذا يعني أنه يجب أن ينعكس بصورة إيجابية على كيفية تعاملنا مع لغتنا العربية.
عرض التفاصيل
العنوان الأول المميز.
سيذهل عقلك.
وجه الإنسان هو جزء معقَّد ومتميِّز للغاية من جسمه. وفي الواقع، إنه أحد أكثر أنظمة الإشارات المتاحة تعقيداً لدينا؛ فهو يتضمَّن أكثر من 40 عضلة مستقلة هيكلياً ووظيفياً، بحيث يمكن تشغيل كل منها بشكل مستقل عن البعض الآخر؛ وتشكِّل أحد أقوى مؤشرات العواطف.
Placeholder
500x500
أوه نعم، هذا جيد.
شاهد بنفسك.
عندما نضحك أو نبكي، فإننا نعرض عواطفنا، مما يسمح للآخرين بإلقاء نظرة خاطفة على أذهاننا أثناء "قراءة" وجوهنا بناءً على التغييرات في مكوّنات الوجه الرئيسة، مثل: العينين والحاجبين والجفنين والأنف والشفتين.
Placeholder
500x500
وأخيرًا، هذا.
كش ملك.
إن جميع العضلات في أجسامنا مدعمة بالأعصاب المتصلة من كافة أنحاء الجسم بالنخاع الشوكي والدماغ. وهذا الاتصال العصبي هو ثنائي الاتجاه، أي إن العصب يتسبَّب في تقلصات العضلات بناءً على إشارات الدماغ، ويقوم في الوقت نفسه بإرسال معلومات عن حالة العضلات إلى الدماغ
Placeholder
500x500

--- 022_layout_utilities.txt ---
Changing
display
Use our
display utilities
for responsively toggling common values of the
display
property. Mix it with our grid system, content, or components to show or hide them across specific viewports.
Flexbox options
display
has been changed to
display: flex
as this would add many unnecessary overrides and unexpectedly change key browser behaviors. Most of
our components
are built with flexbox enabled.
Should you need to add
display: flex
to an element, do so with
.d-flex
or one of the responsive variants (e.g.,
.d-sm-flex
). You’ll need this class or
display
value to allow the use of our extra
flexbox utilities
for sizing, alignment, spacing, and more.
Margin and padding
Use the
margin
padding
spacing utilities
to control how elements and components are spaced and sized. Bootstrap includes a six-level scale for spacing utilities, based on a
1rem
value default
$spacer
variable. Choose values for all viewports (e.g.,
.me-3
margin-right: 1rem
in LTR), or pick responsive variants to target specific viewports (e.g.,
.me-md-3
margin-right: 1rem
—in LTR— starting at the
breakpoint).
Toggle
visibility
When toggling
display
isn’t needed, you can toggle the
visibility
of an element with our
visibility utilities
. Invisible elements will still affect the layout of the page, but are visually hidden from visitors.

--- 045_components_placeholders.txt ---
About
Placeholders can be used to enhance the experience of your application. They’re built only with HTML and CSS, meaning you don’t need any JavaScript to create them. You will, however, need some custom JavaScript to toggle their visibility. Their appearance, color, and sizing can be easily customized with our utility classes.
Example
In the example below, we take a typical card component and recreate it with placeholders applied to create a “loading card”. Size and proportions are the same between the two.
Placeholder
Card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
Go somewhere
Placeholder
class
card
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
href
class
btn btn-primary
Go somewhere
class
card
aria-hidden
true
class
card-img-top
class
card-body
class
card-title placeholder-glow
span
class
placeholder col-6
span
class
card-text placeholder-glow
span
class
placeholder col-7
span
span
class
placeholder col-4
span
span
class
placeholder col-4
span
span
class
placeholder col-6
span
span
class
placeholder col-8
span
class
btn btn-primary disabled placeholder col-6
aria-disabled
true
How it works
Create placeholders with the
.placeholder
class and a grid column class (e.g.,
.col-6
) to set the
width
. They can replace the text inside an element or be added as a modifier class to an existing component.
We apply additional styling to
.btn
s via
::before
to ensure the
height
is respected. You may extend this pattern for other situations as needed, or add a
&nbsp;
within the element to reflect the height when actual text is rendered in its place.
html
aria-hidden
true
span
class
placeholder col-6
span
class
btn btn-primary disabled placeholder col-4
aria-disabled
true
The use of
aria-hidden="true"
only indicates that the element should be hidden to screen readers. The
loading
behavior of the placeholder depends on how authors will actually use the placeholder styles, how they plan to update things, etc. Some JavaScript code may be needed to
swap
the state of the placeholder and inform AT users of the update.
Width
You can change the
width
through grid column classes, width utilities, or inline styles.
html
span
class
placeholder col-6
span
span
class
placeholder w-75
span
span
class
placeholder
style
width
span
Color
By default, the
placeholder
uses
currentColor
. This can be overridden with a custom color or utility class.
html
span
class
placeholder col-12
span
span
class
placeholder col-12 bg-primary
span
span
class
placeholder col-12 bg-secondary
span
span
class
placeholder col-12 bg-success
span
span
class
placeholder col-12 bg-danger
span
span
class
placeholder col-12 bg-warning
span
span
class
placeholder col-12 bg-info
span
span
class
placeholder col-12 bg-light
span
span
class
placeholder col-12 bg-dark
span
Sizing
The size of
.placeholder
s are based on the typographic style of the parent element. Customize them with sizing modifiers:
.placeholder-lg
.placeholder-sm
, or
.placeholder-xs
html
span
class
placeholder col-12 placeholder-lg
span
span
class
placeholder col-12
span
span
class
placeholder col-12 placeholder-sm
span
span
class
placeholder col-12 placeholder-xs
span
Animation
Animate placeholders with
.placeholder-glow
.placeholder-wave
to better convey the perception of something being
actively
loaded.
html
class
placeholder-glow
span
class
placeholder col-12
span
class
placeholder-wave
span
class
placeholder col-12
span
Sass variables
scss/_variables.scss
$placeholder-opacity-max
$placeholder-opacity-min

--- 103_getting-started_javascript.txt ---
Individual or compiled
Plugins can be included individually (using Bootstrap’s individual
js/dist/*.js
), or all at once using
or the minified
(don’t include both).
If you use a bundler (Webpack, Parcel, Vite…), you can use
/js/dist/*.js
files which are UMD ready.
Usage with JavaScript frameworks
While the Bootstrap CSS can be used with any framework,
the Bootstrap JavaScript is not fully compatible with JavaScript frameworks like React, Vue, and Angular
which assume full knowledge of the DOM. Both Bootstrap and the framework may attempt to mutate the same DOM element, resulting in bugs like dropdowns that are stuck in the “open” position.
A better alternative for those using this type of frameworks is to use a framework-specific package
instead of
the Bootstrap JavaScript. Here are some of the most popular options:
React:
React Bootstrap
Try it yourself!
Download the source code and working demo for using Bootstrap with React, Next.js, and React Bootstrap from the
twbs/examples repository
. You can also
open the example in StackBlitz
Vue:
(Bootstrap 4)
Vue 3:
(Bootstrap 5, currently in alpha)
Angular:
ng-bootstrap
ngx-bootstrap
Using Bootstrap as a module
Try it yourself!
Download the source code and working demo for using Bootstrap as an ES module from the
twbs/examples repository
. You can also
open the example in StackBlitz
We provide a version of Bootstrap built as
) which allows you to use Bootstrap as a module in the browser, if your
targeted browsers support it
script
type
module
import
Toast
from
'bootstrap.esm.min.js'
Array
from
document
querySelectorAll
'.toast'
forEach
toastNode
Toast
toastNode
script
Compared to JS bundlers, using ESM in the browser requires you to use the full path and filename instead of the module name.
Read more about JS modules in the browser.
That’s why we use
'bootstrap.esm.min.js'
instead of
'bootstrap'
above. However, this is further complicated by our Popper dependency, which imports Popper into our JavaScript like so:
import
Popper
from
"@popperjs/core"
If you try this as-is, you’ll see an error in the console like the following:
Uncaught TypeError: Failed to resolve module specifier "@popperjs/core". Relative references must start with either "/", "./", or "../".
To fix this, you can use an
importmap
to resolve the arbitrary module names to complete paths. If your
targeted browsers
do not support
importmap
, you’ll need to use the
es-module-shims
project. Here’s how it works for Bootstrap and Popper:
doctype
html
html
lang
head
meta
charset
utf-8
meta
name
viewport
content
width=device-width, initial-scale=1
link
href
https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css
stylesheet
integrity
sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr
crossorigin
anonymous
title
Hello, modularity!
title
head
body
Hello, modularity!
button
popoverButton
type
button
class
btn btn-primary btn-lg
data-bs-toggle
popover
title
ESM in Browser
data-bs-content
Bang!
Custom popover
button
script
async
https://cdn.jsdelivr.net/npm/es-module-shims@1/dist/es-module-shims.min.js
crossorigin
anonymous
script
script
type
importmap
"imports"
"@popperjs/core"
"https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/esm/popper.min.js"
"bootstrap"
"https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.esm.min.js"
script
script
type
module
import
from
'bootstrap'
Popover
document
getElementById
'popoverButton'
script
body
html
Dependencies
Some plugins and CSS components depend on other plugins. If you include plugins individually, make sure to check for these dependencies in the docs.
Our dropdowns, popovers, and tooltips also depend on
Popper
Data attributes
Nearly all Bootstrap plugins can be enabled and configured through HTML alone with data attributes (our preferred way of using JavaScript functionality). Be sure to
only use one set of data attributes on a single element
(e.g., you cannot trigger a tooltip and modal from the same button.)
As options can be passed via data attributes or JavaScript, you can append an option name to
data-bs-
, as in
data-bs-animation="{value}"
. Make sure to change the case type of the option name from “
camelCase
” to “
kebab-case
” when passing the options via data attributes. For example, use
data-bs-custom-class="beautifier"
instead of
data-bs-customClass="beautifier"
As of Bootstrap 5.2.0, all components support an
experimental
reserved data attribute
data-bs-config
that can house simple component configuration as a JSON string. When an element has
data-bs-config='{"delay":0, "title":123}'
data-bs-title="456"
attributes, the final
title
value will be
and the separate data attributes will override values given on
data-bs-config
. In addition, existing data attributes are able to house JSON values like
data-bs-delay='{"show":0,"hide":150}'
The final configuration object is the merged result of
data-bs-config
data-bs-
, and
js object
where the latest given key-value overrides the others.
Selectors
We use the native
querySelector
querySelectorAll
methods to query DOM elements for performance reasons, so you must use
valid selectors
. If you use special selectors like
collapse:Example
, be sure to escape them.
Events
show
) is triggered at the start of an event, and its past participle form (ex.
shown
) is triggered on the completion of an action.
All infinitive events provide
preventDefault()
functionality. This provides the ability to stop the execution of an action before it starts. Returning false from an event handler will also automatically call
preventDefault()
const
myModal
document
querySelector
'#myModal'
myModal
addEventListener
'show.bs.modal'
event
return
event
preventDefault
// stops modal from being shown
Programmatic API
All constructors accept an optional options object or nothing (which initiates a plugin with its default behavior):
const
myModalEl
document
querySelector
'#myModal'
const
modal
Modal
myModalEl
// initialized with defaults
const
configObject
keyboard
false
const
modal1
Modal
myModalEl
configObject
// initialized with no keyboard
If you’d like to get a particular plugin instance, each plugin exposes a
getInstance
method. For example, to retrieve an instance directly from an element:
Popover
getInstance
myPopoverEl
This method will return
null
if an instance is not initiated over the requested element.
Alternatively,
getOrCreateInstance
can be used to get the instance associated with a DOM element, or create a new one in case it wasn’t initialized.
Popover
getOrCreateInstance
myPopoverEl
configObject
In case an instance wasn’t initialized, it may accept and use an optional configuration object as second argument.
CSS selectors in constructors
In addition to the
getInstance
getOrCreateInstance
methods, all plugin constructors can accept a DOM element or a valid
CSS selector
as the first argument. Plugin elements are found with the
querySelector
method since our plugins only support a single element.
const
modal
Modal
'#myModal'
const
dropdown
Dropdown
'[data-bs-toggle="dropdown"]'
const
offcanvas
Offcanvas
getInstance
'#myOffcanvas'
const
alert
Alert
getOrCreateInstance
'#myAlert'
Asynchronous functions and transitions
All programmatic API methods are
asynchronous
and return to the caller once the transition is started, but
before it ends
. In order to execute an action once the transition is complete, you can listen to the corresponding event.
const
myCollapseEl
document
querySelector
'#myCollapse'
myCollapseEl
addEventListener
'shown.bs.collapse'
event
// Action to execute once the collapsible area is expanded
In addition, a method call on a
transitioning component will be ignored
const
myCarouselEl
document
querySelector
'#myCarousel'
const
carousel
Carousel
getInstance
myCarouselEl
// Retrieve a Carousel instance
myCarouselEl
addEventListener
'slid.bs.carousel'
event
carousel
// Will slide to the slide 2 as soon as the transition to slide 1 is finished
carousel
// Will start sliding to the slide 1 and returns to the caller
carousel
// !! Will be ignored, as the transition to the slide 1 is not finished !!
dispose
method
While it may seem correct to use the
dispose
method immediately after
hide()
, it will lead to incorrect results. Here’s an example of the problem use:
const
myModal
document
querySelector
'#myModal'
myModal
hide
// it is asynchronous
myModal
addEventListener
'shown.bs.hidden'
event
myModal
dispose
Default settings
You can change the default settings for a plugin by modifying the plugin’s
Constructor.Default
object:
// changes default for the modal plugin’s `keyboard` option to false
Modal
Default
keyboard
false
Methods and properties
Every Bootstrap plugin exposes the following methods and static properties.
Method
Description
dispose
Destroys an element’s modal. (Removes stored data on the DOM element)
getInstance
Static
method which allows you to get the modal instance associated with a DOM element.
getOrCreateInstance
Static
method which allows you to get the modal instance associated with a DOM element, or create a new one in case it wasn’t initialized.
Static property
Description
NAME
Returns the plugin name. (Example:
VERSION
The version of each of Bootstrap’s plugins can be accessed via the
VERSION
property of the plugin’s constructor (Example:
Sanitizer
Our tooltip and popover components are able to render arbitrary HTML to the page if configured to do so.
To prevent cross-site scripting (XSS) attacks, these components use our built-in content sanitizer to sanitize any options which accept HTML before they are rendered to the page. Content sanitization is enabled by default.
The tags and attributes allowed by default are as follows. Any tags or attributes not explicitly allowed will be removed during sanitization:
js/src/util/sanitizer.js
const
ARIA_ATTRIBUTE_PATTERN
^aria-[\w-]*$
export
const
DefaultAllowlist
// Global attributes allowed on any supplied element below.
'class'
'dir'
'id'
'lang'
'role'
ARIA_ATTRIBUTE_PATTERN
'target'
'href'
'title'
'rel'
area
code
'src'
'srcset'
'alt'
'title'
'width'
'height'
small
span
strong
Exercise caution when using these advanced options.
Refer to
OWASP’s Cross Site Scripting Prevention Cheat Sheet
for more information. Vulnerabilities caused solely by disabling or modifying content sanitization are not considered within scope for Bootstrap’s security model.
You can add new values to this default
allowList
const
myDefaultAllowList
Tooltip
Default
allowList
// To allow table elements
myDefaultAllowList
table
// To allow td elements and data-bs-option attributes on td elements
myDefaultAllowList
'data-bs-option'
// You can push your custom regex to validate your attributes.
// Be careful about your regular expressions being too lax
const
myCustomRegex
^data-my-app-[\w-]+
myDefaultAllowList
push
myCustomRegex
You can also replace our sanitizer with a dedicated library, for example
DOMPurify
const
yourTooltipEl
document
querySelector
'#yourTooltip'
const
tooltip
Tooltip
yourTooltipEl
sanitizeFn
content
return
DOMPurify
sanitize
content
Optionally using jQuery
You don’t need jQuery in Bootstrap 5
, but it’s still possible to use our components with jQuery. If Bootstrap detects
jQuery
in the
window
object, it'll add all of our components in jQuery’s plugin system. This allows you to do the following:
// to enable tooltips with the default configuration
'[data-bs-toggle="tooltip"]'
tooltip
// to initialize tooltips with given configuration
'[data-bs-toggle="tooltip"]'
tooltip
boundary
'clippingParents'
customClass
'myClass'
// to trigger the `show` method
'#myTooltip'
tooltip
'show'
The same goes for our other components.
No conflict
Sometimes it is necessary to use Bootstrap plugins with other UI frameworks. In these circumstances, namespace collisions can occasionally occur. If this happens, you may call
.noConflict
on the plugin you wish to revert the value of.
const
button
noConflict
// return $.fn.button to previously assigned value
// give $().bootstrapBtn the Bootstrap functionality
.noConflict
and namespaced events, there may be compatibility problems that you need to fix on your own.
jQuery events
jQuery
is present in the
window
object and there is no
data-bs-no-jquery
attribute set on
<body>
. If jQuery is found, Bootstrap will emit events thanks to jQuery’s event system. So if you want to listen to Bootstrap’s events, you’ll have to use the jQuery methods (
.one
) instead of
addEventListener
'#myTab a'
'shown.bs.tab'
// do something...
Disabled JavaScript
<noscript>
to explain the situation (and how to re-enable JavaScript) to your users, and/or add your own custom fallbacks.

--- 011_examples_cheatsheet.txt ---
Contents
Typography
Documentation
Display 1
Display 2
Display 3
Display 4
Display 5
Display 6
Heading 1
Heading 2
Heading 3
Heading 4
Heading 5
Heading 6
This is a lead paragraph. It stands out from regular paragraphs.
You can use the mark tag to
highlight
text.
This line of text is meant to be treated as deleted text.
This line of text is meant to be treated as no longer accurate.
This line of text is meant to be treated as an addition to the document.
This line of text will render as underlined.
This line of text is meant to be treated as fine print.
This line rendered as bold text.
This line rendered as italicized text.
A well-known quote, contained in a blockquote element.
This is a list.
It appears completely unstyled.
Structurally, it's still a list.
However, this style only applies to immediate child elements.
Nested lists:
are unaffected by this style
will still show a bullet
and have appropriate left margin
This may still come in handy in some situations.
This is a list item.
And another one.
But they're displayed inline.
Images
Documentation
Placeholder
Responsive image
A generic square placeholder image with a white border around it, making it resemble a photograph taken with an old instant camera
200x200
Tables
Documentation
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
Class
Heading
Heading
Default
Cell
Cell
Primary
Cell
Cell
Secondary
Cell
Cell
Success
Cell
Cell
Danger
Cell
Cell
Warning
Cell
Cell
Info
Cell
Cell
Light
Cell
Cell
Dark
Cell
Cell
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
Figures
Documentation
Placeholder
400x300
A caption for the above image.
Forms
Overview
Documentation
Email address
We'll never share your email with anyone else.
Password
Select menu
Open this select menu
Three
Check me out
Radios buttons
Default radio
Another radio
Upload
Checked switch checkbox input
Example range
Submit
Disabled forms
Documentation
Disabled input
Disabled select menu
Disabled select
Can't check this
Disabled radios buttons
Disabled radio
Another radio
Upload
Disabled checked switch checkbox input
Disabled range
Submit
Sizing
Documentation
Open this select menu
Three
Open this select menu
Three
Input group
Documentation
@example.com
Your vanity URL
https://example.com/users/
With textarea
Floating labels
Documentation
Email address
Password
Validation
Documentation
First name
Looks good!
Last name
Looks good!
Username
Please choose a username.
City
Please provide a valid city.
State
Choose...
Please select a valid state.
Please provide a valid zip.
Agree to terms and conditions
You must agree before submitting.
Submit form
Components
Accordion
Documentation
Accordion Item #1
This is the first item's accordion body.
It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the
.accordion-body
, though the transition does limit overflow.
Accordion Item #2
This is the second item's accordion body.
It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the
.accordion-body
, though the transition does limit overflow.
Accordion Item #3
This is the third item's accordion body.
It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the
.accordion-body
, though the transition does limit overflow.
Alerts
Documentation
A simple primary alert with
an example link
. Give it a click if you like.
A simple secondary alert with
an example link
. Give it a click if you like.
A simple success alert with
an example link
. Give it a click if you like.
A simple danger alert with
an example link
. Give it a click if you like.
A simple warning alert with
an example link
. Give it a click if you like.
A simple info alert with
an example link
. Give it a click if you like.
A simple light alert with
an example link
. Give it a click if you like.
A simple dark alert with
an example link
. Give it a click if you like.
Well done!
Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.
Whenever you need to, be sure to use margin utilities to keep things nice and tidy.
Badge
Documentation
Example heading
Example heading
Example heading
Example heading
Example heading
Example heading
Example heading
Example heading
Primary
Secondary
Success
Danger
Warning
Info
Light
Dark
Breadcrumb
Documentation
Buttons
Documentation
Primary
Secondary
Success
Danger
Warning
Info
Light
Dark
Link
Primary
Secondary
Success
Danger
Warning
Info
Light
Dark
Small button
Standard button
Large button
Button group
Documentation
Card
Documentation
Placeholder
Image cap
Card title
Some quick example text to build on the card title and make up the bulk of the card's content.
Go somewhere
Featured
Card title
Some quick example text to build on the card title and make up the bulk of the card's content.
Go somewhere
2 days ago
Card title
Some quick example text to build on the card title and make up the bulk of the card's content.
An item
A second item
A third item
Card link
Another link
Placeholder
Image
Card title
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
Last updated 3 mins ago
Carousel
Documentation
Placeholder
First slide
First slide label
Some representative placeholder content for the first slide.
Placeholder
Second slide
Second slide label
Some representative placeholder content for the second slide.
Placeholder
Third slide
Third slide label
Some representative placeholder content for the third slide.
Previous
Next
Dropdowns
Documentation
Dropdown button
Dropdown header
Action
Another action
Something else here
Separated link
Dropdown button
Dropdown header
Action
Another action
Something else here
Separated link
Dropdown button
Dropdown header
Action
Another action
Something else here
Separated link
Primary
Toggle Dropdown
Action
Another action
Something else here
Secondary
Toggle Dropdown
Action
Another action
Something else here
Success
Toggle Dropdown
Action
Another action
Something else here
Info
Toggle Dropdown
Action
Another action
Something else here
Warning
Toggle Dropdown
Action
Another action
Something else here
Danger
Toggle Dropdown
Action
Another action
Something else here
Dropend button
Dropdown header
Action
Another action
Something else here
Separated link
Dropup button
Dropdown header
Action
Another action
Something else here
Separated link
Dropstart button
Dropdown header
Action
Another action
Something else here
Separated link
End-aligned menu
Dropdown header
Action
Another action
Separated link
List group
Documentation
A disabled item
A second item
A third item
A fourth item
And a fifth one
An item
A second item
A third item
A fourth item
And a fifth one
A simple default list group item
A simple primary list group item
A simple secondary list group item
A simple success list group item
A simple danger list group item
A simple warning list group item
A simple info list group item
A simple light list group item
A simple dark list group item
Modal
Documentation
Launch demo modal
Launch static backdrop modal
Vertically centered scrollable modal
Full screen
Navs
Documentation
This is some placeholder content the
Home tab's
associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other
.nav
-powered navigation.
This is some placeholder content the
Profile tab's
associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other
.nav
-powered navigation.
This is some placeholder content the
Contact tab's
associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other
.nav
-powered navigation.
Active
Link
Link
Disabled
Navbar
Documentation
Pagination
Documentation
Popovers
Documentation
Click to toggle popover
Popover on top
Popover on end
Popover on bottom
Popover on start
Progress
Documentation
100%
Scrollspy
Documentation
First heading
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Second heading
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Third heading
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Fourth heading
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Fifth heading
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Spinners
Documentation
Loading...
Loading...
Loading...
Loading...
Loading...
Loading...
Loading...
Loading...
Loading...
Loading...
Loading...
Loading...
Loading...
Loading...
Loading...
Loading...
Toasts
Documentation
11 mins ago
Hello, world! This is a toast message.
Tooltips
Documentation
Tooltip on top
Tooltip on end
Tooltip on bottom
Tooltip on start
Tooltip with HTML

--- 073_examples_offcanvas-navbar.txt ---
Since 2011
Recent updates
Placeholder
32x32
@username
Some representative placeholder content, with some information about this user. Imagine this being some sort of status update, perhaps?
Placeholder
32x32
@username
Some more representative placeholder content, related to this other user. Another status update, perhaps.
Placeholder
32x32
@username
This user also gets some representative placeholder content. Maybe they did something interesting, and you really want to highlight this in the recent updates.
All updates
Suggestions
Placeholder
32x32
Full Name
Follow
@username
Placeholder
32x32
Full Name
Follow
@username
Placeholder
32x32
Full Name
Follow
@username
All suggestions

--- 006_layout_columns.txt ---
Heads up!
Be sure to
read the Grid page
first before diving into how to modify and customize your grid columns.
How they work
Columns build on the grid’s flexbox architecture.
Flexbox means we have options for changing individual columns and
modifying groups of columns at the row level
. You choose how columns grow, shrink, or otherwise change.
When building grid layouts, all content goes in columns.
The hierarchy of Bootstrap’s grid goes from
container
to row to column to your content. On rare occasions, you may combine content and column, but be aware there can be unintended consequences.
With
six breakpoints
and a dozen columns at each grid tier, we have dozens of classes already built for you to create your desired layouts. This can be disabled via Sass if you wish.
Alignment
Use flexbox alignment utilities to vertically and horizontally align columns.
Vertical alignment
Change the vertical alignment with any of the responsive
align-items-*
classes.
One of three columns
One of three columns
One of three columns
html
class
container text-center
class
row align-items-start
class
One of three columns
class
One of three columns
class
One of three columns
One of three columns
One of three columns
One of three columns
html
class
container text-center
class
row align-items-center
class
One of three columns
class
One of three columns
class
One of three columns
One of three columns
One of three columns
One of three columns
html
class
container text-center
class
row align-items-end
class
One of three columns
class
One of three columns
class
One of three columns
Or, change the alignment of each column individually with any of the responsive
.align-self-*
classes.
One of three columns
One of three columns
One of three columns
html
class
container text-center
class
class
col align-self-start
One of three columns
class
col align-self-center
One of three columns
class
col align-self-end
One of three columns
Horizontal alignment
Change the horizontal alignment with any of the responsive
justify-content-*
classes.
One of two columns
One of two columns
One of two columns
One of two columns
One of two columns
One of two columns
One of two columns
One of two columns
One of two columns
One of two columns
One of two columns
One of two columns
html
class
container text-center
class
row justify-content-start
class
col-4
One of two columns
class
col-4
One of two columns
class
row justify-content-center
class
col-4
One of two columns
class
col-4
One of two columns
class
row justify-content-end
class
col-4
One of two columns
class
col-4
One of two columns
class
row justify-content-around
class
col-4
One of two columns
class
col-4
One of two columns
class
row justify-content-between
class
col-4
One of two columns
class
col-4
One of two columns
class
row justify-content-evenly
class
col-4
One of two columns
class
col-4
One of two columns
Column wrapping
If more than 12 columns are placed within a single row, each group of extra columns will, as one unit, wrap onto a new line.
.col-9
.col-4
Since 9 + 4 = 13 > 12, this 4-column-wide div gets wrapped onto a new line as one contiguous unit.
.col-6
Subsequent columns continue along the new line.
html
class
container
class
class
col-9
.col-9
class
col-4
.col-4
Since 9 + 4 = 13
&gt;
12, this 4-column-wide div gets wrapped onto a new line as one contiguous unit.
class
col-6
.col-6
Subsequent columns continue along the new line.
Column breaks
Breaking columns to a new line in flexbox requires a small hack: add an element with
width: 100%
wherever you want to wrap your columns to a new line. Normally this is accomplished with multiple
.row
s, but not every implementation method can account for this.
.col-6 .col-sm-3
.col-6 .col-sm-3
.col-6 .col-sm-3
.col-6 .col-sm-3
html
class
container text-center
class
class
col-6 col-sm-3
.col-6 .col-sm-3
class
col-6 col-sm-3
.col-6 .col-sm-3
<!-- Force next columns to break to new line -->
class
w-100
class
col-6 col-sm-3
.col-6 .col-sm-3
class
col-6 col-sm-3
.col-6 .col-sm-3
You may also apply this break at specific breakpoints with our
responsive display utilities
.col-6 .col-sm-4
.col-6 .col-sm-4
.col-6 .col-sm-4
.col-6 .col-sm-4
html
class
container text-center
class
class
col-6 col-sm-4
.col-6 .col-sm-4
class
col-6 col-sm-4
.col-6 .col-sm-4
<!-- Force next columns to break to new line at md breakpoint and up -->
class
w-100 d-none d-md-block
class
col-6 col-sm-4
.col-6 .col-sm-4
class
col-6 col-sm-4
.col-6 .col-sm-4
Reordering
Order classes
.order-
classes for controlling the
visual order
of your content. These classes are responsive, so you can set the
order
by breakpoint (e.g.,
.order-1.order-md-2
). Includes support for
through
across all six grid tiers.
First in DOM, no order applied
Second in DOM, with a larger order
Third in DOM, with an order of 1
html
class
container text-center
class
class
First in DOM, no order applied
class
col order-5
Second in DOM, with a larger order
class
col order-1
Third in DOM, with an order of 1
There are also responsive
.order-first
.order-last
classes that change the
order
of an element by applying
order: -1
order: 6
, respectively. These classes can also be intermixed with the numbered
.order-*
classes as needed.
First in DOM, ordered last
Second in DOM, unordered
Third in DOM, ordered first
html
class
container text-center
class
class
col order-last
First in DOM, ordered last
class
Second in DOM, unordered
class
col order-first
Third in DOM, ordered first
If you need more
.order-*
classes, you can add new ones by modifying our
$utilities
Sass map.
Read our Sass maps and loops docs
our Modify utilities docs
for details.
$utilities
map-merge
$utilities
"order"
map-merge
map-get
$utilities
"order"
values
map-merge
map-get
map-get
$utilities
"order"
"values"
// Add a new `.order-{breakpoint}-6` utility
last
// Change the `.order-{breakpoint}-last` utility to use the next number
Offsetting columns
You can offset grid columns in two ways: our responsive
.offset-
grid classes and our
margin utilities
. Grid classes are sized to match columns while margins are more useful for quick layouts where the width of the offset is variable.
Offset classes
Move columns to the right using
.offset-md-*
classes. These classes increase the left margin of a column by
columns. For example,
.offset-md-4
moves
.col-md-4
over four columns.
.col-md-4
.col-md-4 .offset-md-4
.col-md-3 .offset-md-3
.col-md-3 .offset-md-3
.col-md-6 .offset-md-3
html
class
container text-center
class
class
col-md-4
.col-md-4
class
col-md-4 offset-md-4
.col-md-4 .offset-md-4
class
class
col-md-3 offset-md-3
.col-md-3 .offset-md-3
class
col-md-3 offset-md-3
.col-md-3 .offset-md-3
class
class
col-md-6 offset-md-3
.col-md-6 .offset-md-3
In addition to column clearing at responsive breakpoints, you may need to reset offsets. See this in action in
the grid example
.col-sm-5 .col-md-6
.col-sm-5 .offset-sm-2 .col-md-6 .offset-md-0
.col-sm-6 .col-md-5 .col-lg-6
.col-sm-6 .col-md-5 .offset-md-2 .col-lg-6 .offset-lg-0
html
class
container text-center
class
class
col-sm-5 col-md-6
.col-sm-5 .col-md-6
class
col-sm-5 offset-sm-2 col-md-6 offset-md-0
.col-sm-5 .offset-sm-2 .col-md-6 .offset-md-0
class
class
col-sm-6 col-md-5 col-lg-6
.col-sm-6 .col-md-5 .col-lg-6
class
col-sm-6 col-md-5 offset-md-2 col-lg-6 offset-lg-0
.col-sm-6 .col-md-5 .offset-md-2 .col-lg-6 .offset-lg-0
Margin utilities
With the move to flexbox in v4, you can use margin utilities like
.me-auto
to force sibling columns away from one another.
.col-md-4
.col-md-4 .ms-auto
.col-md-3 .ms-md-auto
.col-md-3 .ms-md-auto
.col-auto .me-auto
.col-auto
html
class
container text-center
class
class
col-md-4
.col-md-4
class
col-md-4 ms-auto
.col-md-4 .ms-auto
class
class
col-md-3 ms-md-auto
.col-md-3 .ms-md-auto
class
col-md-3 ms-md-auto
.col-md-3 .ms-md-auto
class
class
col-auto me-auto
.col-auto .me-auto
class
col-auto
.col-auto
Standalone column classes
.col-*
classes can also be used outside a
.row
to give an element a specific width. Whenever column classes are used as non-direct children of a row, the paddings are omitted.
.col-3: width of 25%
.col-sm-9: width of 75% above sm breakpoint
html
class
col-3 p-3 mb-2
.col-3: width of 25%
class
col-sm-9 p-3
.col-sm-9: width of 75% above sm breakpoint
The classes can be used together with utilities to create responsive floated images. Make sure to wrap the content in a
.clearfix
wrapper to clear the float if the text is shorter.
Placeholder
Responsive floated image
A paragraph of placeholder text. We’re using it here to show the use of the clearfix class. We’re adding quite a few meaningless phrases here to demonstrate how the columns interact here with the floated image.
As you can see the paragraphs gracefully wrap around the floated image. Now imagine how this would look with some actual content in here, rather than just this boring placeholder text that goes on and on, but actually conveys no tangible information at. It simply takes up space and should not really be read.
And yet, here you are, still persevering in reading this placeholder text, hoping for some more insights, or some hidden easter egg of content. A joke, perhaps. Unfortunately, there’s none of that here.
html
class
clearfix
class
col-md-6 float-md-end mb-3 ms-md-3
A paragraph of placeholder text. We’re using it here to show the use of the clearfix class. We’re adding quite a few meaningless phrases here to demonstrate how the columns interact here with the floated image.
As you can see the paragraphs gracefully wrap around the floated image. Now imagine how this would look with some actual content in here, rather than just this boring placeholder text that goes on and on, but actually conveys no tangible information at. It simply takes up space and should not really be read.
And yet, here you are, still persevering in reading this placeholder text, hoping for some more insights, or some hidden easter egg of content. A joke, perhaps. Unfortunately, there’s none of that here.

--- 041_examples_dashboard-rtl.txt ---
لوحة القيادة
مشاركة
تصدير
هذا الأسبوع
عنوان القسم
عنوان
عنوان
عنوان
عنوان
1,001
بيانات
عشوائية
تثري
الجدول
1,002
تثري
مبهة
تصميم
تنسيق
1,003
عشوائية
غنية
قيمة
مفيدة
1,003
معلومات
تثري
توضيحية
عشوائية
1,004
الجدول
بيانات
تنسيق
قيمة
1,005
قيمة
مبهة
الجدول
تثري
1,006
قيمة
توضيحية
غنية
عشوائية
1,007
تثري
مفيدة
معلومات
مبهة
1,008
بيانات
عشوائية
تثري
الجدول
1,009
تثري
مبهة
تصميم
تنسيق
1,010
عشوائية
غنية
قيمة
مفيدة
1,011
معلومات
تثري
توضيحية
عشوائية
1,012
الجدول
تثري
تنسيق
قيمة
1,013
قيمة
مبهة
الجدول
تصميم
1,014
قيمة
توضيحية
غنية
عشوائية
1,015
بيانات
مفيدة
معلومات
الجدول

--- 130_examples_badges.txt ---
Toggle theme
Light
Dark
Auto
Primary
Secondary
Success
Danger
Warning
Info
Light
Dark
Primary
Secondary
Success
Danger
Warning
Info
Light
Dark
Primary
Secondary
Success
Danger
Warning
Info
Light
Dark
Primary
Secondary
Success
Danger
Warning
Info
Light
Dark
Primary 1
Primary 2
Primary 3
Primary
Secondary
Success
Danger
Warning
Info
Light
Dark

--- 007_components_alerts.txt ---
Examples
Alerts are available for any length of text, as well as an optional close button. For proper styling, use one of the eight
required
contextual classes (e.g.,
.alert-success
). For inline dismissal, use the
alerts JavaScript plugin
Heads up!
As of v5.3.0, the
alert-variant()
Sass mixin is deprecated. Alert variants now have their CSS variables overridden in
a Sass loop
A simple primary alert—check it out!
A simple secondary alert—check it out!
A simple success alert—check it out!
A simple danger alert—check it out!
A simple warning alert—check it out!
A simple info alert—check it out!
A simple light alert—check it out!
A simple dark alert—check it out!
html
class
alert alert-primary
role
alert
A simple primary alert—check it out!
class
alert alert-secondary
role
alert
A simple secondary alert—check it out!
class
alert alert-success
role
alert
A simple success alert—check it out!
class
alert alert-danger
role
alert
A simple danger alert—check it out!
class
alert alert-warning
role
alert
A simple warning alert—check it out!
class
alert alert-info
role
alert
A simple info alert—check it out!
class
alert alert-light
role
alert
A simple light alert—check it out!
class
alert alert-dark
role
alert
A simple dark alert—check it out!
Accessibility tip:
Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a
sufficient
color contrast
) or is included through alternative means, such as additional text hidden with the
.visually-hidden
class.
Live example
Click the button below to show an alert (hidden with inline styles to start), then dismiss (and destroy) it with the built-in close button.
Show live alert
html
liveAlertPlaceholder
button
type
button
class
btn btn-primary
liveAlertBtn
Show live alert
button
We use the following JavaScript to trigger our live alert demo:
site/src/assets/partials/snippets.js
const
alertPlaceholder
document
getElementById
'liveAlertPlaceholder'
const
appendAlert
message
type
const
wrapper
document
createElement
'div'
wrapper
innerHTML
<div class="alert alert-
type
alert-dismissible" role="alert">
<div>
message
</div>
' <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>'
'</div>'
join
alertPlaceholder
append
wrapper
const
alertTrigger
document
getElementById
'liveAlertBtn'
alertTrigger
alertTrigger
addEventListener
'click'
appendAlert
'Nice, you triggered this alert message!'
'success'
Link color
Use the
.alert-link
utility class to quickly provide matching colored links within any alert.
A simple primary alert with
an example link
. Give it a click if you like.
A simple secondary alert with
an example link
. Give it a click if you like.
A simple success alert with
an example link
. Give it a click if you like.
A simple danger alert with
an example link
. Give it a click if you like.
A simple warning alert with
an example link
. Give it a click if you like.
A simple info alert with
an example link
. Give it a click if you like.
A simple light alert with
an example link
. Give it a click if you like.
A simple dark alert with
an example link
. Give it a click if you like.
html
class
alert alert-primary
role
alert
A simple primary alert with
href
class
alert-link
an example link
. Give it a click if you like.
class
alert alert-secondary
role
alert
A simple secondary alert with
href
class
alert-link
an example link
. Give it a click if you like.
class
alert alert-success
role
alert
A simple success alert with
href
class
alert-link
an example link
. Give it a click if you like.
class
alert alert-danger
role
alert
A simple danger alert with
href
class
alert-link
an example link
. Give it a click if you like.
class
alert alert-warning
role
alert
A simple warning alert with
href
class
alert-link
an example link
. Give it a click if you like.
class
alert alert-info
role
alert
A simple info alert with
href
class
alert-link
an example link
. Give it a click if you like.
class
alert alert-light
role
alert
A simple light alert with
href
class
alert-link
an example link
. Give it a click if you like.
class
alert alert-dark
role
alert
A simple dark alert with
href
class
alert-link
an example link
. Give it a click if you like.
Additional content
Alerts can also contain additional HTML elements like headings, paragraphs and dividers.
Well done!
Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.
Whenever you need to, be sure to use margin utilities to keep things nice and tidy.
html
class
alert alert-success
role
alert
class
alert-heading
Well done!
Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.
class
mb-0
Whenever you need to, be sure to use margin utilities to keep things nice and tidy.
Icons
Similarly, you can use
flexbox utilities
to create alerts with icons. Depending on your icons and content, you may want to add more utilities or custom styles.
An example alert with an icon
html
class
alert alert-primary d-flex align-items-center
role
alert
xmlns
http://www.w3.org/2000/svg
class
bi flex-shrink-0 me-2
viewBox
0 0 16 16
role
aria-label
Warning:
path
M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z
An example alert with an icon
Need more than one icon for your alerts? Consider using more Bootstrap Icons and making a local SVG sprite like so to easily reference the same icons repeatedly.
An example alert with an icon
An example success alert with an icon
An example warning alert with an icon
An example danger alert with an icon
html
xmlns
http://www.w3.org/2000/svg
class
d-none
symbol
check-circle-fill
viewBox
0 0 16 16
path
M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z
symbol
symbol
info-fill
viewBox
0 0 16 16
path
M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z
symbol
symbol
exclamation-triangle-fill
viewBox
0 0 16 16
path
M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z
symbol
class
alert alert-primary d-flex align-items-center
role
alert
class
bi flex-shrink-0 me-2
role
aria-label
Info:
xlink:
href
#info-fill
An example alert with an icon
class
alert alert-success d-flex align-items-center
role
alert
class
bi flex-shrink-0 me-2
role
aria-label
Success:
xlink:
href
#check-circle-fill
An example success alert with an icon
class
alert alert-warning d-flex align-items-center
role
alert
class
bi flex-shrink-0 me-2
role
aria-label
Warning:
xlink:
href
#exclamation-triangle-fill
An example warning alert with an icon
class
alert alert-danger d-flex align-items-center
role
alert
class
bi flex-shrink-0 me-2
role
aria-label
Danger:
xlink:
href
#exclamation-triangle-fill
An example danger alert with an icon
Dismissing
Using the alert JavaScript plugin, it’s possible to dismiss any alert inline. Here’s how:
Be sure you’ve loaded the alert plugin, or the compiled Bootstrap JavaScript.
Add a
close button
and the
.alert-dismissible
class, which adds extra padding to the right of the alert and positions the close button.
On the close button, add the
data-bs-dismiss="alert"
attribute, which triggers the JavaScript functionality. Be sure to use the
<button>
element with it for proper behavior across all devices.
To animate alerts when dismissing them, be sure to add the
.fade
.show
classes.
You can see this in action with a live demo:
Holy guacamole!
You should check in on some of those fields below.
html
class
alert alert-warning alert-dismissible fade show
role
alert
strong
Holy guacamole!
strong
You should check in on some of those fields below.
button
type
button
class
btn-close
data-bs-dismiss
alert
aria-label
Close
button
When an alert is dismissed, the element is completely removed from the page structure. If a keyboard user dismisses the alert using the close button, their focus will suddenly be lost and, depending on the browser, reset to the start of the page/document. For this reason, we recommend including additional JavaScript that listens for the
closed.bs.alert
event and programmatically sets
focus()
to the most appropriate location in the page. If you’re planning to move focus to a non-interactive element that normally does not receive focus, make sure to add
tabindex="-1"
to the element.
Variables
Added in v5.2.0
As part of Bootstrap’s evolving CSS variables approach, alerts now use local CSS variables on
.alert
for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
scss/_alert.scss
#{$prefix}
alert-bg
transparent
#{$prefix}
alert-padding-x
#{$alert-padding-x}
#{$prefix}
alert-padding-y
#{$alert-padding-y}
#{$prefix}
alert-margin-bottom
#{$alert-margin-bottom}
#{$prefix}
alert-color
inherit
#{$prefix}
alert-border-color
transparent
#{$prefix}
alert-border
#{$alert-border-width}
solid
#{$prefix}
alert-border-color
#{$prefix}
alert-border-radius
#{$alert-border-radius}
#{$prefix}
alert-link-color
inherit
Sass variables
scss/_variables.scss
$alert-padding-y
$spacer
$alert-padding-x
$spacer
$alert-margin-bottom
1rem
$alert-border-radius
#{$prefix}
border-radius
$alert-link-font-weight
$font-weight-bold
$alert-border-width
#{$prefix}
border-width
$alert-dismissible-padding-r
$alert-padding-x
// 3x covers width of x plus default padding on either side
Sass mixins
Deprecated in v5.3.0
scss/mixins/_alert.scss
@mixin
alert-variant
$background
$border
$color
#{$prefix}
alert-color
#{$color}
#{$prefix}
alert-bg
#{$background}
#{$prefix}
alert-border-color
#{$border}
#{$prefix}
alert-link-color
shade-color
$color
$enable-gradients
background-image
#{$prefix}
gradient
.alert-link
color
#{$prefix}
alert-link-color
Sass loops
Loop that generates the modifier classes with an overriding of CSS variables.
scss/_alert.scss
// Generate contextual modifier classes for colorizing the alert
@each
$state
map-keys
$theme-colors
.alert-
#{$state}
#{$prefix}
alert-color
#{$prefix}
#{$state}
-text-emphasis
#{$prefix}
alert-bg
#{$prefix}
#{$state}
-bg-subtle
#{$prefix}
alert-border-color
#{$prefix}
#{$state}
-border-subtle
#{$prefix}
alert-link-color
#{$prefix}
#{$state}
-text-emphasis
JavaScript behavior
Initialize
Initialize elements as alerts
const
alertList
document
querySelectorAll
'.alert'
const
alerts
alertList
element
Alert
element
For the sole purpose of dismissing an alert, it isn’t necessary to initialize the component manually via the JS API. By making use of
data-bs-dismiss="alert"
, the component will be initialized automatically and properly dismissed.
See the
triggers
section for more details.
Triggers
Dismissal can be achieved with the
data-bs-dismiss
attribute on a button
within the alert
as demonstrated below:
button
type
button
class
btn-close
data-bs-dismiss
alert
aria-label
Close
button
or on a button
outside the alert
using the additional
data-bs-target
as demonstrated below:
button
type
button
class
btn-close
data-bs-dismiss
alert
data-bs-target
#my-alert
aria-label
Close
button
Note that closing an alert will remove it from the DOM.
Methods
You can create an alert instance with the alert constructor, for example:
const
bsAlert
Alert
'#myAlert'
This makes an alert listen for click events on descendant elements which have the
data-bs-dismiss="alert"
attribute. (Not necessary when using the data-api’s auto-initialization.)
Method
Description
close
Closes an alert by removing it from the DOM. If the
.fade
.show
classes are present on the element, the alert will fade out before it is removed.
dispose
Destroys an element’s alert. (Removes stored data on the DOM element)
getInstance
Static method which allows you to get the alert instance associated to a DOM element. For example:
getOrCreateInstance
Static method which returns an alert instance associated to a DOM element or create a new one in case it wasn’t initialized. You can use it like this:
Basic usage:
const
alert
Alert
getOrCreateInstance
'#myAlert'
alert
close
Events
Event
Description
close.bs.alert
Fires immediately when the
close
instance method is called.
closed.bs.alert
Fired when the alert has been closed and CSS transitions have completed.
const
myAlert
document
getElementById
'myAlert'
myAlert
addEventListener
'closed.bs.alert'
event
// do something, for instance, explicitly move focus to the most appropriate element,
// so it doesn’t get lost/reset to the start of the page
// document.getElementById('...').focus()

--- 111_helpers_vertical-rule.txt ---
How it works
Vertical rules are inspired by the
<hr>
element, allowing you to create vertical dividers in common layouts. They’re styled just like
<hr>
elements:
They’re
wide
They have
min-height
Their color is set via
currentColor
opacity
Customize them with additional styles as needed.
Example
html
class
Vertical rules scale their height in flex layouts:
html
class
d-flex
style
height
200px
class
With stacks
They can also be used in
stacks
First item
Second item
Third item
html
class
hstack gap-3
class
First item
class
p-2 ms-auto
Second item
class
class
Third item
Sass variables
Customize the vertical rule Sass variable to change its width.
scss/_variables.scss
$vr-border-width
#{$prefix}
border-width

--- 127_layout_grid.txt ---
Example
flexbox
and is fully responsive. Below is an example and an in-depth explanation for how the grid system comes together.
New to or unfamiliar with flexbox?
Read this CSS Tricks flexbox guide
for background, terminology, guidelines, and code snippets.
Column
Column
Column
html
class
container text-center
class
class
Column
class
Column
class
Column
The above example creates three equal-width columns across all devices and viewports using our predefined grid classes. Those columns are centered in the page with the parent
.container
How it works
Breaking it down, here’s how the grid system comes together:
Our grid supports
six responsive breakpoints
Breakpoints are based on
min-width
media queries, meaning they affect that breakpoint and all those above it (e.g.,
.col-sm-4
applies to
, and
). This means you can control container and column sizing and behavior by each breakpoint.
Containers center and horizontally pad your content.
.container
for a responsive pixel width,
.container-fluid
width: 100%
across all viewports and devices, or a responsive container (e.g.,
.container-md
) for a combination of fluid and pixel widths.
Rows are wrappers for columns.
Each column has horizontal
padding
(called a gutter) for controlling the space between them. This
padding
is then counteracted on the rows with negative margins to ensure the content in your columns is visually aligned down the left side. Rows also support modifier classes to
uniformly apply column sizing
gutter classes
to change the spacing of your content.
Columns are incredibly flexible.
There are 12 template columns available per row, allowing you to create different combinations of elements that span any number of columns. Column classes indicate the number of template columns to span (e.g.,
col-4
spans four).
width
s are set in percentages so you always have the same relative sizing.
Gutters are also responsive and customizable.
Gutter classes are available
across all breakpoints, with all the same sizes as our
margin and padding spacing
. Change horizontal gutters with
.gx-*
classes, vertical gutters with
.gy-*
, or all gutters with
.g-*
classes.
.g-0
is also available to remove gutters.
Sass variables, maps, and mixins power the grid.
If you don’t want to use the predefined grid classes in Bootstrap, you can use our
grid’s source Sass
to create your own with more semantic markup. We also include some CSS custom properties to consume these Sass variables for even greater flexibility for you.
Be aware of the limitations and
bugs around flexbox
, like the
inability to use some HTML elements as flex containers
Grid options
Extra small (xs)
Small (sm)
Medium (md)
Large (lg)
Extra large (xl)
Extra extra large (xxl)
As noted above, each of these breakpoints have their own container, unique class prefix, and modifiers. Here’s how the grid changes across these breakpoints:
<576px
≥576px
≥768px
≥992px
≥1200px
≥1400px
Container
max-width
None (auto)
540px
720px
960px
1140px
1320px
Class prefix
.col-
.col-sm-
.col-md-
.col-lg-
.col-xl-
.col-xxl-
# of columns
Gutter width
1.5rem (.75rem on left and right)
Custom gutters
Nestable
Column ordering
Auto-layout columns
Utilize breakpoint-specific column classes for easy column sizing without an explicit numbered class like
.col-sm-6
Equal-width
For example, here are two grid layouts that apply to every device and viewport, from
. Add any number of unit-less classes for each breakpoint you need and every column will be the same width.
1 of 2
2 of 2
1 of 3
2 of 3
3 of 3
html
class
container text-center
class
class
1 of 2
class
2 of 2
class
class
1 of 3
class
2 of 3
class
3 of 3
Setting one column width
Auto-layout for flexbox grid columns also means you can set the width of one column and have the sibling columns automatically resize around it. You may use predefined grid classes (as shown below), grid mixins, or inline widths. Note that the other columns will resize no matter the width of the center column.
1 of 3
2 of 3 (wider)
3 of 3
1 of 3
2 of 3 (wider)
3 of 3
html
class
container text-center
class
class
1 of 3
class
col-6
2 of 3 (wider)
class
3 of 3
class
class
1 of 3
class
col-5
2 of 3 (wider)
class
3 of 3
Variable width content
col-{breakpoint}-auto
classes to size columns based on the natural width of their content.
1 of 3
Variable width content
3 of 3
1 of 3
Variable width content
3 of 3
html
class
container text-center
class
row justify-content-md-center
class
col col-lg-2
1 of 3
class
col-md-auto
Variable width content
class
col col-lg-2
3 of 3
class
class
1 of 3
class
col-md-auto
Variable width content
class
col col-lg-2
3 of 3
Responsive classes
All breakpoints
For grids that are the same from the smallest of devices to the largest, use the
.col
.col-*
classes. Specify a numbered class when you need a particularly sized column; otherwise, feel free to stick to
.col
col-8
col-4
html
class
container text-center
class
class
class
class
class
class
class
col-8
col-8
class
col-4
col-4
Stacked to horizontal
Using a single set of
.col-sm-*
classes, you can create a basic grid system that starts out stacked and becomes horizontal at the small breakpoint (
col-sm-8
col-sm-4
col-sm
col-sm
col-sm
html
class
container text-center
class
class
col-sm-8
col-sm-8
class
col-sm-4
col-sm-4
class
class
col-sm
col-sm
class
col-sm
col-sm
class
col-sm
col-sm
Mix and match
Don’t want your columns to simply stack in some grid tiers? Use a combination of different classes for each tier as needed. See the example below for a better idea of how it all works.
.col-md-8
.col-6 .col-md-4
.col-6 .col-md-4
.col-6 .col-md-4
.col-6 .col-md-4
.col-6
.col-6
html
class
container text-center
<!-- Stack the columns on mobile by making one full-width and the other half-width -->
class
class
col-md-8
.col-md-8
class
col-6 col-md-4
.col-6 .col-md-4
<!-- Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop -->
class
class
col-6 col-md-4
.col-6 .col-md-4
class
col-6 col-md-4
.col-6 .col-md-4
class
col-6 col-md-4
.col-6 .col-md-4
<!-- Columns are always 50% wide, on mobile and desktop -->
class
class
col-6
.col-6
class
col-6
.col-6
Row columns
Use the responsive
.row-cols-*
classes to quickly set the number of columns that best render your content and layout. Whereas normal
.col-*
classes apply to the individual columns (e.g.,
.col-md-4
), the row columns classes are set on the parent
.row
as a shortcut. With
.row-cols-auto
you can give the columns their natural width.
Use these row columns classes to quickly create basic grid layouts or to control your card layouts.
Column
Column
Column
Column
html
class
container text-center
class
row row-cols-2
class
Column
class
Column
class
Column
class
Column
Column
Column
Column
Column
html
class
container text-center
class
row row-cols-3
class
Column
class
Column
class
Column
class
Column
Column
Column
Column
Column
html
class
container text-center
class
row row-cols-auto
class
Column
class
Column
class
Column
class
Column
Column
Column
Column
Column
html
class
container text-center
class
row row-cols-4
class
Column
class
Column
class
Column
class
Column
Column
Column
Column
Column
html
class
container text-center
class
row row-cols-4
class
Column
class
Column
class
col-6
Column
class
Column
Column
Column
Column
Column
html
class
container text-center
class
row row-cols-1 row-cols-sm-2 row-cols-md-4
class
Column
class
Column
class
Column
class
Column
You can also use the accompanying Sass mixin,
row-cols()
.element
// Three columns to start
@include
row-cols
// Five columns from medium breakpoint up
@include
media-breakpoint-up
@include
row-cols
Nesting
To nest your content with the default grid, add a new
.row
and set of
.col-sm-*
columns within an existing
.col-sm-*
column. Nested rows should include a set of columns that add up to 12 or fewer (it is not required that you use all 12 available columns).
Level 1: .col-sm-3
Level 2: .col-8 .col-sm-6
Level 2: .col-4 .col-sm-6
html
class
container text-center
class
class
col-sm-3
Level 1: .col-sm-3
class
col-sm-9
class
class
col-8 col-sm-6
Level 2: .col-8 .col-sm-6
class
col-4 col-sm-6
Level 2: .col-4 .col-sm-6
When using Bootstrap’s source Sass files, you have the option of using Sass variables and mixins to create custom, semantic, and responsive page layouts. Our predefined grid classes use these same variables and mixins to provide a whole suite of ready-to-use classes for fast responsive layouts.
Sass variables
Variables and maps determine the number of columns, the gutter width, and the media query point at which to begin floating columns. We use these to generate the predefined grid classes documented above, as well as for the custom mixins listed below.
$grid-columns
$grid-gutter-width
1.5rem
$grid-row-columns
scss/_variables.scss
$grid-breakpoints
576px
768px
992px
1200px
1400px
scss/_variables.scss
$container-max-widths
540px
720px
960px
1140px
1320px
Sass mixins
Mixins are used in conjunction with the grid variables to generate semantic CSS for individual grid columns.
// Creates a wrapper for a series of columns
@include
make-row
// Make the element grid-ready (applying everything but the width)
@include
make-col-ready
// Without optional size values, the mixin will create equal columns (similar to using .col)
@include
make-col
@include
make-col
$size
$columns
$grid-columns
// Offset with margins
@include
make-col-offset
$size
$columns
$grid-columns
Example usage
You can modify the variables to your own custom values, or just use the mixins with their default values. Here’s an example of using the default settings to create a two-column layout with a gap between.
.example-container
@include
make-container
// Make sure to define this width after the mixin to override
// `width: 100%` generated by `make-container()`
width
800px
.example-row
@include
make-row
.example-content-main
@include
make-col-ready
@include
media-breakpoint-up
@include
make-col
@include
media-breakpoint-up
@include
make-col
.example-content-secondary
@include
make-col-ready
@include
media-breakpoint-up
@include
make-col
@include
media-breakpoint-up
@include
make-col
Main content
Secondary content
html
class
example-container
class
example-row
class
example-content-main
Main content
class
example-content-secondary
Secondary content
Customizing the grid
Using our built-in grid Sass variables and maps, it’s possible to completely customize the predefined grid classes. Change the number of tiers, the media query dimensions, and the container widths—then recompile.
Columns and gutters
The number of grid columns can be modified via Sass variables.
$grid-columns
is used to generate the widths (in percent) of each individual column while
$grid-gutter-width
sets the width for the column gutters.
$grid-row-columns
is used to set the maximum number of columns of
.row-cols-*
, any number over this limit is ignored.
$grid-columns
!default
$grid-gutter-width
1.5rem
!default
$grid-row-columns
!default
Grid tiers
Moving beyond the columns themselves, you may also customize the number of grid tiers. If you wanted just four grid tiers, you’d update the
$grid-breakpoints
$container-max-widths
to something like this:
$grid-breakpoints
480px
768px
1024px
$container-max-widths
420px
720px
960px
When making any changes to the Sass variables or maps, you’ll need to save your changes and recompile. Doing so will output a brand-new set of predefined grid classes for column widths, offsets, and ordering. Responsive visibility utilities will also be updated to use the custom breakpoints. Make sure to set grid values in
(not
, or

--- 046_components_scrollspy.txt ---
How it works
Scrollspy toggles the
.active
class on anchor (
) elements when the element with the
referenced by the anchor’s
href
is scrolled into view. Scrollspy is best used in conjunction with a Bootstrap
nav component
list group
, but it will also work with any anchor elements in the current page. Here’s how it works.
To start, scrollspy requires two things: a navigation, list group, or a simple set of links, plus a scrollable container. The scrollable container can be the
<body>
or a custom element with a set
height
overflow-y: scroll
On the scrollable container, add
data-bs-spy="scroll"
data-bs-target="#navId"
where
navId
is the unique
of the associated navigation. If there is no focusable element inside the element, be sure to also include a
tabindex="0"
to ensure keyboard access.
As you scroll the “spied” container, an
.active
class is added and removed from anchor links within the associated navigation. Links must have resolvable
targets, otherwise they’re ignored. For example, a
<a href="#home">home</a>
must correspond to something in the DOM like
<div id="home"></div>
Target elements that are not visible will be ignored. See the
Non-visible elements
section below.
Examples
Navbar
Scroll the area below the navbar and watch the active class change. Open the dropdown menu and watch the dropdown items be highlighted as well.
First heading
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Second heading
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Third heading
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Fourth heading
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Fifth heading
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
navbar-example2
class
navbar bg-body-tertiary px-3 mb-3
class
navbar-brand
href
Navbar
class
nav nav-pills
class
nav-item
class
nav-link
href
#scrollspyHeading1
First
class
nav-item
class
nav-link
href
#scrollspyHeading2
Second
class
nav-item dropdown
class
nav-link dropdown-toggle
data-bs-toggle
dropdown
href
role
button
aria-expanded
false
Dropdown
class
dropdown-menu
class
dropdown-item
href
#scrollspyHeading3
Third
class
dropdown-item
href
#scrollspyHeading4
Fourth
class
dropdown-divider
class
dropdown-item
href
#scrollspyHeading5
Fifth
data-bs-spy
scroll
data-bs-target
#navbar-example2
data-bs-root-margin
0px 0px -40%
data-bs-smooth-scroll
true
class
scrollspy-example bg-body-tertiary p-3 rounded-2
tabindex
scrollspyHeading1
First heading
scrollspyHeading2
Second heading
scrollspyHeading3
Third heading
scrollspyHeading4
Fourth heading
scrollspyHeading5
Fifth heading
Nested nav
Scrollspy also works with nested
.nav
s. If a nested
.nav
.active
, its parents will also be
.active
. Scroll the area next to the navbar and watch the active class change.
Item 1
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Keep in mind that the JavaScript plugin tries to pick the right element among all that may be visible. Multiple visible scrollspy targets at the same time may cause some issues.
Item 1-1
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Keep in mind that the JavaScript plugin tries to pick the right element among all that may be visible. Multiple visible scrollspy targets at the same time may cause some issues.
Item 1-2
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Keep in mind that the JavaScript plugin tries to pick the right element among all that may be visible. Multiple visible scrollspy targets at the same time may cause some issues.
Item 2
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Keep in mind that the JavaScript plugin tries to pick the right element among all that may be visible. Multiple visible scrollspy targets at the same time may cause some issues.
Item 3
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Keep in mind that the JavaScript plugin tries to pick the right element among all that may be visible. Multiple visible scrollspy targets at the same time may cause some issues.
Item 3-1
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Keep in mind that the JavaScript plugin tries to pick the right element among all that may be visible. Multiple visible scrollspy targets at the same time may cause some issues.
Item 3-2
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Keep in mind that the JavaScript plugin tries to pick the right element among all that may be visible. Multiple visible scrollspy targets at the same time may cause some issues.
class
class
col-4
navbar-example3
class
h-100 flex-column align-items-stretch pe-4 border-end
class
nav nav-pills flex-column
class
nav-link
href
#item-1
Item 1
class
nav nav-pills flex-column
class
nav-link ms-3 my-1
href
#item-1-1
Item 1-1
class
nav-link ms-3 my-1
href
#item-1-2
Item 1-2
class
nav-link
href
#item-2
Item 2
class
nav-link
href
#item-3
Item 3
class
nav nav-pills flex-column
class
nav-link ms-3 my-1
href
#item-3-1
Item 3-1
class
nav-link ms-3 my-1
href
#item-3-2
Item 3-2
class
col-8
data-bs-spy
scroll
data-bs-target
#navbar-example3
data-bs-smooth-scroll
true
class
scrollspy-example-2
tabindex
item-1
Item 1
item-1-1
Item 1-1
item-1-2
Item 1-2
item-2
Item 2
item-3
Item 3
item-3-1
Item 3-1
item-3-2
Item 3-2
List group
Scrollspy also works with
.list-group
s. Scroll the area next to the list group and watch the active class change.
Item 1
Item 2
Item 3
Item 4
Item 1
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Item 2
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Item 3
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Item 4
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
class
class
col-4
list-example
class
list-group
class
list-group-item list-group-item-action
href
#list-item-1
Item 1
class
list-group-item list-group-item-action
href
#list-item-2
Item 2
class
list-group-item list-group-item-action
href
#list-item-3
Item 3
class
list-group-item list-group-item-action
href
#list-item-4
Item 4
class
col-8
data-bs-spy
scroll
data-bs-target
#list-example
data-bs-smooth-scroll
true
class
scrollspy-example
tabindex
list-item-1
Item 1
list-item-2
Item 2
list-item-3
Item 3
list-item-4
Item 4
Simple anchors
Scrollspy is not limited to nav components and list groups, so it will work on any
anchor elements in the current document. Scroll the area and watch the
.active
class change.
Item 1
Item 2
Item 3
Item 4
Item 5
Item 1
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Item 2
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Item 3
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Item 4
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
Item 5
This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It’s repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.
class
class
col-4
simple-list-example
class
d-flex flex-column gap-2 simple-list-example-scrollspy text-center
class
p-1 rounded
href
#simple-list-item-1
Item 1
class
p-1 rounded
href
#simple-list-item-2
Item 2
class
p-1 rounded
href
#simple-list-item-3
Item 3
class
p-1 rounded
href
#simple-list-item-4
Item 4
class
p-1 rounded
href
#simple-list-item-5
Item 5
class
col-8
data-bs-spy
scroll
data-bs-target
#simple-list-example
data-bs-offset
data-bs-smooth-scroll
true
class
scrollspy-example
tabindex
simple-list-item-1
Item 1
simple-list-item-2
Item 2
simple-list-item-3
Item 3
simple-list-item-4
Item 4
simple-list-item-5
Item 5
Non-visible elements
Target elements that aren’t visible will be ignored and their corresponding nav items won’t receive an
.active
class. Scrollspy instances initialized in a non-visible wrapper will ignore all target elements. Use the
refresh
method to check for observable elements once the wrapper becomes visible.
document
querySelectorAll
'#nav-tab>[data-bs-toggle="tab"]'
forEach
addEventListener
'shown.bs.tab'
const
target
getAttribute
'data-bs-target'
const
scrollElem
document
querySelector
target
[data-bs-spy="scroll"]
ScrollSpy
getOrCreateInstance
scrollElem
refresh
Usage
Via data attributes
To easily add scrollspy behavior to your topbar navigation, add
data-bs-spy="scroll"
to the element you want to spy on (most typically this would be the
<body>
). Then add the
data-bs-target
attribute with the
or class name of the parent element of any Bootstrap
.nav
component.
body
data-bs-spy
scroll
data-bs-target
#navbar-example
navbar-example
class
nav nav-tabs
role
tablist
body
Via JavaScript
const
scrollSpy
ScrollSpy
document
body
target
'#navbar-example'
Options
As options can be passed via data attributes or JavaScript, you can append an option name to
data-bs-
, as in
data-bs-animation="{value}"
. Make sure to change the case type of the option name from “
camelCase
” to “
kebab-case
” when passing the options via data attributes. For example, use
data-bs-custom-class="beautifier"
instead of
data-bs-customClass="beautifier"
As of Bootstrap 5.2.0, all components support an
experimental
reserved data attribute
data-bs-config
that can house simple component configuration as a JSON string. When an element has
data-bs-config='{"delay":0, "title":123}'
data-bs-title="456"
attributes, the final
title
value will be
and the separate data attributes will override values given on
data-bs-config
. In addition, existing data attributes are able to house JSON values like
data-bs-delay='{"show":0,"hide":150}'
The final configuration object is the merged result of
data-bs-config
data-bs-
, and
js object
where the latest given key-value overrides the others.
Name
Type
Default
Description
rootMargin
string
0px 0px -25%
Intersection Observer
rootMargin
valid units, when calculating scroll position.
smoothScroll
boolean
false
Enables smooth scrolling when a user clicks on a link that refers to ScrollSpy observables.
target
string, DOM element
null
Specifies element to apply Scrollspy plugin.
threshold
array
[0.1, 0.5, 1]
IntersectionObserver
threshold
valid input, when calculating scroll position.
Deprecated Options
Up until v5.1.3 we were using
offset
method
options, which are now deprecated and replaced by
rootMargin
To keep backwards compatibility, we will continue to parse a given
offset
rootMargin
, but this feature will be removed in
Methods
Method
Description
dispose
Destroys an element’s scrollspy. (Removes stored data on the DOM element)
getInstance
Static
method to get the scrollspy instance associated with a DOM element.
getOrCreateInstance
Static
method to get the scrollspy instance associated with a DOM element, or to create a new one in case it wasn’t initialized.
refresh
When adding or removing elements in the DOM, you’ll need to call the refresh method.
Here’s an example using the refresh method:
const
dataSpyList
document
querySelectorAll
'[data-bs-spy="scroll"]'
dataSpyList
forEach
dataSpyEl
ScrollSpy
getInstance
dataSpyEl
refresh
Events
Event
Description
activate.bs.scrollspy
This event fires on the scroll element whenever an anchor is activated by the scrollspy.
const
firstScrollSpyEl
document
querySelector
'[data-bs-spy="scroll"]'
firstScrollSpyEl
addEventListener
'activate.bs.scrollspy'
// do something...

--- 108_content_tables.txt ---
Overview
Due to the widespread use of
<table>
elements across third-party widgets like calendars and date pickers, Bootstrap’s tables are
opt-in
. Add the base class
.table
to any
<table>
, then extend with our optional modifier classes or custom styles. All table styles are not inherited in Bootstrap, meaning any nested tables can be styled independent from the parent.
Using the most basic table markup, here’s how
.table
-based tables look in Bootstrap.
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table
thead
scope
scope
First
scope
Last
scope
Handle
thead
tbody
scope
Mark
Otto
@mdo
scope
Jacob
Thornton
@fat
scope
John
@social
tbody
table
Variants
Use contextual classes to color tables, table rows or individual cells.
Heads up!
Because of the more complicated CSS used to generate our table variants, they most likely won’t see color mode adaptive styling until v6.
Class
Heading
Heading
Default
Cell
Cell
Primary
Cell
Cell
Secondary
Cell
Cell
Success
Cell
Cell
Danger
Cell
Cell
Warning
Cell
Cell
Info
Cell
Cell
Light
Cell
Cell
Dark
Cell
Cell
<!-- On tables -->
table
class
table-primary
table
table
class
table-secondary
table
table
class
table-success
table
table
class
table-danger
table
table
class
table-warning
table
table
class
table-info
table
table
class
table-light
table
table
class
table-dark
table
<!-- On rows -->
class
table-primary
class
table-secondary
class
table-success
class
table-danger
class
table-warning
class
table-info
class
table-light
class
table-dark
<!-- On cells (`td` or `th`) -->
class
table-primary
class
table-secondary
class
table-success
class
table-danger
class
table-warning
class
table-info
class
table-light
class
table-dark
Accessibility tip:
Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a
sufficient
color contrast
) or is included through alternative means, such as additional text hidden with the
.visually-hidden
class.
Accented tables
Striped rows
.table-striped
to add zebra-striping to any table row within the
<tbody>
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table table-striped
table
Striped columns
.table-striped-columns
to add zebra-striping to any table column.
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table table-striped-columns
table
These classes can also be added to table variants:
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table table-dark table-striped
table
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table table-dark table-striped-columns
table
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table table-success table-striped
table
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table table-success table-striped-columns
table
Hoverable rows
.table-hover
to enable a hover state on table rows within a
<tbody>
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table table-hover
table
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table table-dark table-hover
table
These hoverable rows can also be combined with the striped rows variant:
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table table-striped table-hover
table
Active tables
Highlight a table row or cell by adding a
.table-active
class.
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table
thead
thead
tbody
class
table-active
scope
John
class
table-active
@social
tbody
table
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table table-dark
thead
thead
tbody
class
table-active
scope
John
class
table-active
@social
tbody
table
How do the variants and accented tables work?
For the accented tables (
striped rows
striped columns
hoverable rows
, and
active tables
), we used some techniques to make these effects work for all our
table variants
We start by setting the background of a table cell with the
--bs-table-bg
custom property. All table variants then set that custom property to colorize the table cells. This way, we don’t get into trouble if semi-transparent colors are used as table backgrounds.
Then we add an inset box shadow on the table cells with
box-shadow: inset 0 0 0 9999px var(--bs-table-bg-state, var(--bs-table-bg-type, var(--bs-table-accent-bg)));
to layer on top of any specified
background-color
. It uses custom cascade to override the
box-shadow
, regardless the CSS specificity. Because we use a huge spread and no blur, the color will be monotone. Since
--bs-table-accent-bg
is set to
transparent
by default, we don’t have a default box shadow.
When either
.table-striped
.table-striped-columns
.table-hover
.table-active
classes are added, either
--bs-table-bg-type
--bs-table-bg-state
(by default set to
initial
) are set to a semitransparent color (
--bs-table-striped-bg
--bs-table-active-bg
--bs-table-hover-bg
) to colorize the background and override default
--bs-table-accent-bg
For each table variant, we generate a
--bs-table-accent-bg
color with the highest contrast depending on that color. For example, the accent color for
.table-primary
is darker while
.table-dark
has a lighter accent color.
Text and border colors are generated the same way, and their colors are inherited by default.
Behind the scenes it looks like this:
scss/mixins/_table-variants.scss
@mixin
table-variant
$state
$background
.table-
#{$state}
$color
color-contrast
opaque
$body-bg
$background
$hover-bg
$color
$background
percentage
$table-hover-bg-factor
$striped-bg
$color
$background
percentage
$table-striped-bg-factor
$active-bg
$color
$background
percentage
$table-active-bg-factor
$table-border-color
$color
$background
percentage
$table-border-factor
#{$prefix}
table-color
#{$color}
#{$prefix}
table-bg
#{$background}
#{$prefix}
table-border-color
#{$table-border-color}
#{$prefix}
table-striped-bg
#{$striped-bg}
#{$prefix}
table-striped-color
color-contrast
$striped-bg
#{$prefix}
table-active-bg
#{$active-bg}
#{$prefix}
table-active-color
color-contrast
$active-bg
#{$prefix}
table-hover-bg
#{$hover-bg}
#{$prefix}
table-hover-color
color-contrast
$hover-bg
color
#{$prefix}
table-color
border-color
#{$prefix}
table-border-color
Table borders
Bordered tables
.table-bordered
for borders on all sides of the table and cells.
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table table-bordered
table
Border color utilities
can be added to change colors:
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table table-bordered border-primary
table
Tables without borders
.table-borderless
for a table without borders.
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table table-borderless
table
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table table-dark table-borderless
table
Small tables
.table-sm
to make any
.table
more compact by cutting all cell
padding
in half.
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table table-sm
table
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table table-dark table-sm
table
Table group dividers
Add a thicker border, darker between table groups—
<thead>
<tbody>
, and
<tfoot>
—with
.table-group-divider
. Customize the color by changing the
border-top-color
(which we don’t currently provide a utility class for at this time).
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
html
table
class
table
thead
scope
scope
First
scope
Last
scope
Handle
thead
tbody
class
table-group-divider
scope
Mark
Otto
@mdo
scope
Jacob
Thornton
@fat
scope
John
@social
tbody
table
Vertical alignment
Table cells of
<thead>
are always vertical aligned to the bottom. Table cells in
<tbody>
inherit their alignment from
<table>
and are aligned to the top by default. Use the
vertical align
classes to re-align where needed.
Heading 1
Heading 2
Heading 3
Heading 4
This cell inherits
vertical-align: middle;
from the table
This cell inherits
vertical-align: middle;
from the table
This cell inherits
vertical-align: middle;
from the table
This here is some placeholder text, intended to take up quite a bit of vertical space, to demonstrate how the vertical alignment works in the preceding cells.
This cell inherits
vertical-align: bottom;
from the table row
This cell inherits
vertical-align: bottom;
from the table row
This cell inherits
vertical-align: bottom;
from the table row
This here is some placeholder text, intended to take up quite a bit of vertical space, to demonstrate how the vertical alignment works in the preceding cells.
This cell inherits
vertical-align: middle;
from the table
This cell inherits
vertical-align: middle;
from the table
This cell is aligned to the top.
This here is some placeholder text, intended to take up quite a bit of vertical space, to demonstrate how the vertical alignment works in the preceding cells.
class
table-responsive
table
class
table align-middle
thead
thead
tbody
class
align-bottom
class
align-top
This cell is aligned to the top.
tbody
table
Nesting
Border styles, active styles, and table variants are not inherited by nested tables.
First
Last
Handle
Mark
Otto
@mdo
Header
Header
Header
First
Last
First
Last
First
Last
John
@social
table
class
table table-striped table-bordered
thead
thead
tbody
colspan
table
class
table mb-0
table
tbody
table
How nesting works
To prevent
styles from leaking to nested tables, we use the child combinator (
) selector in our CSS. Since we need to target all the
s and
s in the
thead
tbody
, and
tfoot
, our selector would look pretty long without it. As such, we use the rather odd looking
.table > :not(caption) > * > *
selector to target all
s and
s of the
.table
, but none of any potential nested tables.
Note that if you add
<tr>
s as direct children of a table, those
<tr>
will be wrapped in a
<tbody>
by default, thus making our selectors work as intended.
Anatomy
Table head
Similar to tables and dark tables, use the modifier classes
.table-light
.table-dark
to make
<thead>
s appear light or dark gray.
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table
thead
class
table-light
thead
tbody
tbody
table
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table
thead
class
table-dark
thead
tbody
tbody
table
Table foot
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
Footer
Footer
Footer
Footer
table
class
table
thead
thead
tbody
tbody
tfoot
tfoot
table
Captions
<caption>
functions like a heading for a table. It helps users with screen readers to find a table and understand what it’s about and decide if they want to read it.
List of users
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
table
class
table table-sm
caption
List of users
caption
thead
thead
tbody
tbody
table
You can also put the
<caption>
on the top of the table with
.caption-top
List of users
First
Last
Handle
Mark
Otto
@mdo
Jacob
Thornton
@fat
John
@social
html
table
class
table caption-top
caption
List of users
caption
thead
scope
scope
First
scope
Last
scope
Handle
thead
tbody
scope
Mark
Otto
@mdo
scope
Jacob
Thornton
@fat
scope
John
@social
tbody
table
Responsive tables
Responsive tables allow tables to be scrolled horizontally with ease. Make any table responsive across all viewports by wrapping a
.table
with
.table-responsive
. Or, pick a maximum breakpoint with which to have a responsive table up to by using
.table-responsive{-sm|-md|-lg|-xl|-xxl}
Vertical clipping/truncation
Responsive tables make use of
overflow-y: hidden
, which clips off any content that goes beyond the bottom or top edges of the table. In particular, this can clip off dropdown menus and other third-party widgets.
Always responsive
Across every breakpoint, use
.table-responsive
for horizontally scrolling tables.
Heading
Heading
Heading
Heading
Heading
Heading
Heading
Heading
Heading
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
class
table-responsive
table
class
table
table
Breakpoint specific
.table-responsive{-sm|-md|-lg|-xl|-xxl}
as needed to create responsive tables up to a particular breakpoint. From that breakpoint and up, the table will behave normally and not scroll horizontally.
These tables may appear broken until their responsive styles apply at specific viewport widths.
Heading
Heading
Heading
Heading
Heading
Heading
Heading
Heading
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Heading
Heading
Heading
Heading
Heading
Heading
Heading
Heading
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Heading
Heading
Heading
Heading
Heading
Heading
Heading
Heading
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Heading
Heading
Heading
Heading
Heading
Heading
Heading
Heading
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Heading
Heading
Heading
Heading
Heading
Heading
Heading
Heading
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Heading
Heading
Heading
Heading
Heading
Heading
Heading
Heading
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
Cell
class
table-responsive
table
class
table
table
class
table-responsive-sm
table
class
table
table
class
table-responsive-md
table
class
table
table
class
table-responsive-lg
table
class
table
table
class
table-responsive-xl
table
class
table
table
class
table-responsive-xxl
table
class
table
table
Sass variables
scss/_variables.scss
$table-cell-padding-y
.5rem
$table-cell-padding-x
.5rem
$table-cell-padding-y-sm
.25rem
$table-cell-padding-x-sm
.25rem
$table-cell-vertical-align
$table-color
#{$prefix}
emphasis-color
$table-bg
#{$prefix}
body-bg
$table-accent-bg
transparent
$table-th-font-weight
null
$table-striped-color
$table-color
$table-striped-bg-factor
$table-striped-bg
rgba
#{$prefix}
emphasis-color-rgb
$table-striped-bg-factor
$table-active-color
$table-color
$table-active-bg-factor
$table-active-bg
rgba
#{$prefix}
emphasis-color-rgb
$table-active-bg-factor
$table-hover-color
$table-color
$table-hover-bg-factor
.075
$table-hover-bg
rgba
#{$prefix}
emphasis-color-rgb
$table-hover-bg-factor
$table-border-factor
$table-border-width
#{$prefix}
border-width
$table-border-color
#{$prefix}
border-color
$table-striped-order
$table-striped-columns-order
even
$table-group-separator-color
currentcolor
$table-caption-color
#{$prefix}
secondary-color
$table-bg-scale
-80%
Sass loops
scss/_variables.scss
$table-variants
"primary"
shift-color
$primary
$table-bg-scale
"secondary"
shift-color
$secondary
$table-bg-scale
"success"
shift-color
$success
$table-bg-scale
"info"
shift-color
$info
$table-bg-scale
"warning"
shift-color
$warning
$table-bg-scale
"danger"
shift-color
$danger
$table-bg-scale
"light"
$light
"dark"
$dark
Customizing
The factor variables (
$table-striped-bg-factor
$table-active-bg-factor
$table-hover-bg-factor
) are used to determine the contrast in table variants.
Apart from the light & dark table variants, theme colors are lightened by the
$table-bg-scale
variable.

--- 019_examples_album-rtl.txt ---
مثال الألبوم
وصف قصير حول الألبوم أدناه (محتوياته ، ومنشؤه ، وما إلى ذلك). اجعله قصير ولطيف، ولكن ليست قصير جدًا حتى لا يتخطى الناس هذا الألبوم تمامًا.
الدعوة الرئيسية للعمل
عمل ثانوي
Placeholder
صورة مصغرة
هذه بطاقة أوسع مع نص داعم أدناه كمقدمة طبيعية لمحتوى إضافي. هذا المحتوى أطول قليلاً.
تعديل
9 دقائق
Placeholder
صورة مصغرة
هذه بطاقة أوسع مع نص داعم أدناه كمقدمة طبيعية لمحتوى إضافي. هذا المحتوى أطول قليلاً.
تعديل
9 دقائق
Placeholder
صورة مصغرة
هذه بطاقة أوسع مع نص داعم أدناه كمقدمة طبيعية لمحتوى إضافي. هذا المحتوى أطول قليلاً.
تعديل
9 دقائق
Placeholder
صورة مصغرة
هذه بطاقة أوسع مع نص داعم أدناه كمقدمة طبيعية لمحتوى إضافي. هذا المحتوى أطول قليلاً.
تعديل
9 دقائق
Placeholder
صورة مصغرة
هذه بطاقة أوسع مع نص داعم أدناه كمقدمة طبيعية لمحتوى إضافي. هذا المحتوى أطول قليلاً.
تعديل
9 دقائق
Placeholder
صورة مصغرة
هذه بطاقة أوسع مع نص داعم أدناه كمقدمة طبيعية لمحتوى إضافي. هذا المحتوى أطول قليلاً.
تعديل
9 دقائق
Placeholder
صورة مصغرة
هذه بطاقة أوسع مع نص داعم أدناه كمقدمة طبيعية لمحتوى إضافي. هذا المحتوى أطول قليلاً.
تعديل
9 دقائق
Placeholder
صورة مصغرة
هذه بطاقة أوسع مع نص داعم أدناه كمقدمة طبيعية لمحتوى إضافي. هذا المحتوى أطول قليلاً.
تعديل
9 دقائق
Placeholder
صورة مصغرة
هذه بطاقة أوسع مع نص داعم أدناه كمقدمة طبيعية لمحتوى إضافي. هذا المحتوى أطول قليلاً.
تعديل
9 دقائق

--- 018_getting-started_parcel.txt ---
Want to skip to the end?
Download the source code and working demo for this guide from the
twbs/examples repository
. You can also
open the example in StackBlitz
but not run it because Parcel isn’t currently supported there.
What is Parcel?
Parcel
is a web application bundler designed to simplify the development process with a zero-configuration setup out of the box. It offers features found in more advanced bundlers while focusing on ease of use, making it ideal for developers seeking a quick start.
Setup
We’re building a Parcel project with Bootstrap from scratch, so there are some prerequisites and upfront steps before we can really get started. This guide requires you to have Node.js installed and some familiarity with the terminal.
Create a project folder and set up npm.
We'll create the
my-project
folder and initialize npm with the
argument to avoid it asking us all the interactive questions.
mkdir
my-project
my-project
init
Install Parcel.
Unlike our Webpack guide, there’s only a single build tool dependency here. Parcel will automatically install language transformers (like Sass) as it detects them. We use
--save-dev
to signal that this dependency is only for development use and not for production.
i --save-dev parcel
Install Bootstrap.
Now we can install Bootstrap. We'll also install Popper since our dropdowns, popovers, and tooltips depend on it for their positioning. If you don’t plan on using those components, you can omit Popper here.
--save
Now that we have all the necessary dependencies installed, we can get to work creating the project files and importing Bootstrap.
Project structure
We’ve already created the
my-project
folder and initialized npm. Now we'll also create our
folder, stylesheet, and JavaScript file to round out the project structure. Run the following from
my-project
, or manually create the folder and file structure shown below.
mkdir
src,src/js,src/scss
touch
src/index.html src/js/main.js src/scss/styles.scss
When you’re done, your complete project should look like this:
my-project/
├── src/
│ ├── js/
│ │ └── main.js
│ ├── scss/
│ │ └── styles.scss
│ └── index.html
├── package-lock.json
└── package.json
At this point, everything is in the right place, but Parcel needs an HTML page and npm script to start our server.
Configure Parcel
With dependencies installed and our project folder ready for us to start coding, we can now configure Parcel and run our project locally. Parcel itself requires no configuration file by design, but we do need an npm script and an HTML file to start our server.
Fill in the
src/index.html
file.
Parcel needs a page to render, so we use our
index.html
page to set up some basic HTML, including our CSS and JavaScript files.
doctype
html
html
lang
head
meta
charset
utf-8
meta
name
viewport
content
width=device-width, initial-scale=1
title
title
link
stylesheet
href
scss/styles.scss
script
type
module
js/main.js
script
head
body
class
container py-4 px-3 mx-auto
Hello, Bootstrap and Parcel!
button
class
btn btn-primary
Primary button
button
body
html
We’re including a little bit of Bootstrap styling here with the
div class="container"
<button>
so that we see when Bootstrap’s CSS is loaded by Parcel.
Parcel will automatically detect we’re using Sass and install the
Sass Parcel plugin
to support it. However, if you wish, you can also manually run
npm i --save-dev @parcel/transformer-sass
Add the Parcel npm scripts.
Open the
package.json
and add the following
start
script to the
scripts
object. We'll use this script to start our Parcel development server and render the HTML file we created after it’s compiled into the
dist
directory.
// ...
"scripts"
"start"
"parcel serve src/index.html --public-url / --dist-dir dist"
"test"
"echo \"Error: no test specified\" && exit 1"
// ...
And finally, we can start Parcel.
From the
my-project
folder in your terminal, run that newly added npm script:
start
In the next and final section to this guide, we'll import all of Bootstrap’s CSS and JavaScript.
Import Bootstrap
Importing Bootstrap into Parcel requires two imports, one into our
styles.scss
and one into our
main.js
Import Bootstrap’s CSS.
Add the following to
src/scss/styles.scss
to import all of Bootstrap’s source Sass.
// Import all of Bootstrap’s CSS
@import
"bootstrap/scss/bootstrap"
You can also import our stylesheets individually if you want.
Read our Sass import docs
for details.
Optional:
You may see Sass deprecation warnings with the latest versions of Dart Sass. These can silenced by adding the following configuration in a
.sassrc.js
file in the root folder with the following:
module
exports
silenceDeprecations
'import'
'mixed-decls'
'color-functions'
'global-builtin'
Import Bootstrap’s JS.
Add the following to
src/js/main.js
to import all of Bootstrap’s JS. Popper will be imported automatically through Bootstrap.
// Import all of Bootstrap’s JS
import
from
'bootstrap'
You can also import JavaScript plugins individually as needed to keep bundle sizes down:
import
Alert
from
'bootstrap/js/dist/alert'
// or, specify which plugins you need:
import
Tooltip
Toast
Popover
from
'bootstrap'
Read our JavaScript docs
for more information on how to use Bootstrap’s plugins.
And you’re done! 🎉
With Bootstrap’s source Sass and JS fully loaded, your local development server should now look like this:
Now you can start adding any Bootstrap components you want to use. Be sure to
check out the complete Parcel example project
for how to include additional custom Sass and optimize your build by importing only the parts of Bootstrap’s CSS and JS that you need.
See something wrong or out of date here? Please
open an issue on GitHub
. Need help troubleshooting?
Search or start a discussion
on GitHub.

--- 140_getting-started_vite.txt ---
Want to skip to the end?
Download the source code and working demo for this guide from the
twbs/examples repository
. You can also
open the example in StackBlitz
for live editing.
What is Vite?
Vite
is a modern frontend build tool designed for speed and simplicity. It provides an efficient and streamlined development experience, especially for modern JavaScript frameworks.
Setup
We’re building a Vite project with Bootstrap from scratch, so there are some prerequisites and upfront steps before we can really get started. This guide requires you to have Node.js installed and some familiarity with the terminal.
Create a project folder and set up npm.
We'll create the
my-project
folder and initialize npm with the
argument to avoid it asking us all the interactive questions.
mkdir
my-project
my-project
init
Install Vite.
Unlike our Webpack guide, there’s only a single build tool dependency here. We use
--save-dev
to signal that this dependency is only for development use and not for production.
i --save-dev vite
Install Bootstrap.
Now we can install Bootstrap. We'll also install Popper since our dropdowns, popovers, and tooltips depend on it for their positioning. If you don’t plan on using those components, you can omit Popper here.
--save
Install additional dependency.
In addition to Vite and Bootstrap, we need another dependency (Sass) to properly import and bundle Bootstrap’s CSS.
i --save-dev sass
Now that we have all the necessary dependencies installed and set up, we can get to work creating the project files and importing Bootstrap.
Project structure
We’ve already created the
my-project
folder and initialized npm. Now we'll also create our
folder, stylesheet, and JavaScript file to round out the project structure. Run the following from
my-project
, or manually create the folder and file structure shown below.
mkdir
src,src/js,src/scss
touch
src/index.html src/js/main.js src/scss/styles.scss vite.config.js
When you’re done, your complete project should look like this:
my-project/
├── src/
│ ├── js/
│ │ └── main.js
│ └── scss/
│ | └── styles.scss
| └── index.html
├── package-lock.json
├── package.json
└── vite.config.js
At this point, everything is in the right place, but Vite won’t work because we haven’t filled in our
vite.config.js
yet.
Configure Vite
With dependencies installed and our project folder ready for us to start coding, we can now configure Vite and run our project locally.
Open
vite.config.js
in your editor.
Since it’s blank, we'll need to add some boilerplate config to it so we can start our server. This part of the config tells Vite where to look for our project’s JavaScript and how the development server should behave (pulling from the
folder with hot reload).
import
resolve
from
'path'
export
default
root
resolve
__dirname
'src'
build
outDir
'../dist'
server
port
8080
// Optional: Silence Sass deprecation warnings. See note below.
preprocessorOptions
scss
silenceDeprecations
'import'
'mixed-decls'
'color-functions'
'global-builtin'
Note:
Sass deprecation warnings are shown when compiling source Sass files with the latest versions of Dart Sass. This does not prevent compilation or usage of Bootstrap. We’re
working on a long-term fix
, but in the meantime these deprecation notices can be ignored.
Next we fill in
src/index.html
This is the HTML page Vite will load in the browser to utilize the bundled CSS and JS we'll add to it in later steps.
doctype
html
html
lang
head
meta
charset
utf-8
meta
name
viewport
content
width=device-width, initial-scale=1
title
title
script
type
module
./js/main.js
script
head
body
class
container py-4 px-3 mx-auto
Hello, Bootstrap and Vite!
button
class
btn btn-primary
Primary button
button
body
html
We’re including a little bit of Bootstrap styling here with the
div class="container"
<button>
so that we see when Bootstrap’s CSS is loaded by Vite.
Now we need an npm script to run Vite.
Open
package.json
and add the
start
script shown below (you should already have the test script). We'll use this script to start our local Vite dev server.
// ...
"scripts"
"start"
"vite"
"test"
"echo \"Error: no test specified\" && exit 1"
// ...
And finally, we can start Vite.
From the
my-project
folder in your terminal, run that newly added npm script:
start
In the next and final section to this guide, we’ll import all of Bootstrap’s CSS and JavaScript.
Import Bootstrap
Import Bootstrap’s CSS.
Add the following to
src/scss/styles.scss
to import all of Bootstrap’s source Sass.
// Import all of Bootstrap’s CSS
@import
"bootstrap/scss/bootstrap"
You can also import our stylesheets individually if you want.
Read our Sass import docs
for details.
Next we load the CSS and import Bootstrap’s JavaScript.
Add the following to
src/js/main.js
to load the CSS and import all of Bootstrap’s JS. Popper will be imported automatically through Bootstrap.
// Import our custom CSS
import
'../scss/styles.scss'
// Import all of Bootstrap’s JS
import
from
'bootstrap'
You can also import JavaScript plugins individually as needed to keep bundle sizes down:
import
Alert
from
'bootstrap/js/dist/alert'
// or, specify which plugins you need:
import
Tooltip
Toast
Popover
from
'bootstrap'
Read our JavaScript docs
for more information on how to use Bootstrap’s plugins.
And you’re done! 🎉
With Bootstrap’s source Sass and JS fully loaded, your local development server should now look like this:
Now you can start adding any Bootstrap components you want to use. Be sure to
check out the complete Vite example project
for how to include additional custom Sass and optimize your build by importing only the parts of Bootstrap’s CSS and JS that you need.
See something wrong or out of date here? Please
open an issue on GitHub
. Need help troubleshooting?
Search or start a discussion
on GitHub.

--- 072_helpers_colored-links.txt ---
Link colors
You can use the
.link-*
classes to colorize links. Unlike the
.text-*
classes
, these classes have a
:hover
:focus
state. Some of the link styles use a relatively light foreground color, and should only be used on a dark background in order to have sufficient contrast.
Heads up!
.link-body-emphasis
is currently the only colored link that adapts to color modes. It’s treated as a special case until v6 arrives and we can more thoroughly rebuild our theme colors for color modes. Until then, it’s a unique, high-contrast link color with custom
:hover
:focus
styles. However, it still responds to the new link utilities.
Primary link
Secondary link
Success link
Danger link
Warning link
Info link
Light link
Dark link
Emphasis link
html
href
class
link-primary
Primary link
href
class
link-secondary
Secondary link
href
class
link-success
Success link
href
class
link-danger
Danger link
href
class
link-warning
Warning link
href
class
link-info
Info link
href
class
link-light
Light link
href
class
link-dark
Dark link
href
class
link-body-emphasis
Emphasis link
Accessibility tip:
Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a
sufficient
color contrast
) or is included through alternative means, such as additional text hidden with the
.visually-hidden
class.
Link utilities
Added in v5.3.0
Colored links can also be modified by our
link utilities
Primary link
Secondary link
Success link
Danger link
Warning link
Info link
Light link
Dark link
Emphasis link
html
href
class
link-primary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover
Primary link
href
class
link-secondary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover
Secondary link
href
class
link-success link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover
Success link
href
class
link-danger link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover
Danger link
href
class
link-warning link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover
Warning link
href
class
link-info link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover
Info link
href
class
link-light link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover
Light link
href
class
link-dark link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover
Dark link
href
class
link-body-emphasis link-offset-2 link-underline-opacity-25 link-underline-opacity-75-hover
Emphasis link

--- 150_content_figures.txt ---
Anytime you need to display a piece of content—like an image with an optional caption, consider using a
<figure>
Use the included
.figure
.figure-img
.figure-caption
classes to provide some baseline styles for the HTML5
<figure>
<figcaption>
elements. Images in figures have no explicit size, so be sure to add the
.img-fluid
class to your
<img>
to make it responsive.
Placeholder
400x300
A caption for the above image.
html
figure
class
figure
class
figure-img img-fluid rounded
figcaption
class
figure-caption
A caption for the above image.
figcaption
figure
Aligning the figure’s caption is easy with our
text utilities
Placeholder
400x300
A caption for the above image.
html
figure
class
figure
class
figure-img img-fluid rounded
figcaption
class
figure-caption text-end
A caption for the above image.
figcaption
figure
Sass variables
scss/_variables.scss
$figure-caption-font-size
$small-font-size
$figure-caption-color
#{$prefix}
secondary-color

--- 042_utilities_borders.txt ---
Border
Use border utilities to add or remove an element’s borders. Choose from all borders or one at a time.
Additive
Add borders to custom elements:
html
span
class
border
span
span
class
border-top
span
span
class
border-end
span
span
class
border-bottom
span
span
class
border-start
span
Subtractive
Or remove borders:
html
span
class
border border-0
span
span
class
border border-top-0
span
span
class
border border-end-0
span
span
class
border border-bottom-0
span
span
class
border border-start-0
span
Color
Border utilities like
.border-*
that generated from our original
$theme-colors
Sass map don’t yet respond to color modes, however, any
.border-*-subtle
utility will. This will be resolved in v6.
Change the border color using utilities built on our theme colors.
html
span
class
border border-primary
span
span
class
border border-primary-subtle
span
span
class
border border-secondary
span
span
class
border border-secondary-subtle
span
span
class
border border-success
span
span
class
border border-success-subtle
span
span
class
border border-danger
span
span
class
border border-danger-subtle
span
span
class
border border-warning
span
span
class
border border-warning-subtle
span
span
class
border border-info
span
span
class
border border-info-subtle
span
span
class
border border-light
span
span
class
border border-light-subtle
span
span
class
border border-dark
span
span
class
border border-dark-subtle
span
span
class
border border-black
span
span
class
border border-white
span
Or modify the default
border-color
of a component:
Email address
Dangerous heading
Changing border color and width
html
class
mb-4
label
exampleFormControlInput1
class
form-label
Email address
label
input
type
email
class
form-control border-success
exampleFormControlInput1
placeholder
name@example.com
class
h4 pb-2 mb-4 text-danger border-bottom border-danger
Dangerous heading
class
p-3 bg-info bg-opacity-10 border border-info border-start-0 rounded-end
Changing border color and width
Opacity
Added in v5.2.0
border-{color}
utilities are generated with Sass using CSS variables. This allows for real-time color changes without compilation and dynamic alpha transparency changes.
How it works
Consider our default
.border-success
utility.
.border-success
--bs-border-opacity
border-color
rgba
--bs-success-rgb
--bs-border-opacity
!important
We use an RGB version of our
--bs-success
(with the value of
25, 135, 84
) CSS variable and attached a second CSS variable,
--bs-border-opacity
, for the alpha transparency (with a default value
thanks to a local CSS variable). That means anytime you use
.border-success
now, your computed
color
value is
rgba(25, 135, 84, 1)
. The local CSS variable inside each
.border-*
class avoids inheritance issues so nested instances of the utilities don’t automatically have a modified alpha transparency.
Example
To change that opacity, override
--bs-border-opacity
via custom styles or inline styles.
This is default success border
This is 50% opacity success border
html
class
border border-success p-2 mb-2
This is default success border
class
border border-success p-2
style
--bs-border-opacity
This is 50% opacity success border
Or, choose from any of the
.border-opacity
utilities:
This is default success border
This is 75% opacity success border
This is 50% opacity success border
This is 25% opacity success border
This is 10% opacity success border
html
class
border border-success p-2 mb-2
This is default success border
class
border border-success p-2 mb-2 border-opacity-75
This is 75% opacity success border
class
border border-success p-2 mb-2 border-opacity-50
This is 50% opacity success border
class
border border-success p-2 mb-2 border-opacity-25
This is 25% opacity success border
class
border border-success p-2 border-opacity-10
This is 10% opacity success border
Width
html
span
class
border border-1
span
span
class
border border-2
span
span
class
border border-3
span
span
class
border border-4
span
span
class
border border-5
span
Radius
Add classes to an element to easily round its corners.
Example rounded image
75x75
Example top rounded image
75x75
Example right rounded image
75x75
Example bottom rounded image
75x75
Example left rounded image
75x75
html
class
rounded
class
rounded-top
class
rounded-end
class
rounded-bottom
class
rounded-start
Sizes
Use the scaling classes for larger or smaller rounded corners. Sizes range from
including
circle
pill
, and can be configured by modifying the utilities API.
Example non-rounded image
75x75
Example small rounded image
75x75
Example default rounded image
75x75
Example large rounded image
75x75
Example larger rounded image
75x75
Example extra large rounded image
75x75
Completely round image
75x75
Rounded pill image
150x75
html
class
rounded-0
class
rounded-1
class
rounded-2
class
rounded-3
class
rounded-4
class
rounded-5
class
rounded-circle
class
rounded-pill
Example small rounded image
75x75
Example default left rounded image
75x75
Example right completely round image
75x75
Example left rounded pill image
75x75
Example extra large bottom rounded image
75x75
html
class
rounded-bottom-1
class
rounded-start-2
class
rounded-end-circle
class
rounded-start-pill
class
rounded-5 rounded-top-0
Variables
Added in v5.2.0
scss/_root.scss
#{$prefix}
border-width
#{$border-width}
#{$prefix}
border-style
#{$border-style}
#{$prefix}
border-color
#{$border-color}
#{$prefix}
border-color-translucent
#{$border-color-translucent}
#{$prefix}
border-radius
#{$border-radius}
#{$prefix}
border-radius-sm
#{$border-radius-sm}
#{$prefix}
border-radius-lg
#{$border-radius-lg}
#{$prefix}
border-radius-xl
#{$border-radius-xl}
#{$prefix}
border-radius-xxl
#{$border-radius-xxl}
#{$prefix}
border-radius-2xl
#{$prefix}
border-radius-xxl
// Deprecated in v5.3.0 for consistency
#{$prefix}
border-radius-pill
#{$border-radius-pill}
Sass variables
scss/_variables.scss
$border-width
$border-widths
$border-style
solid
$border-color
$gray-300
$border-color-translucent
rgba
$black
.175
scss/_variables.scss
$border-radius
.375rem
$border-radius-sm
.25rem
$border-radius-lg
.5rem
$border-radius-xl
1rem
$border-radius-xxl
2rem
$border-radius-pill
50rem
Variables for setting
border-color
.border-*-subtle
utilities in light and dark mode:
scss/_variables.scss
$primary-border-subtle
tint-color
$primary
$secondary-border-subtle
tint-color
$secondary
$success-border-subtle
tint-color
$success
$info-border-subtle
tint-color
$info
$warning-border-subtle
tint-color
$warning
$danger-border-subtle
tint-color
$danger
$light-border-subtle
$gray-200
$dark-border-subtle
$gray-500
scss/_variables-dark.scss
$primary-border-subtle-dark
shade-color
$primary
$secondary-border-subtle-dark
shade-color
$secondary
$success-border-subtle-dark
shade-color
$success
$info-border-subtle-dark
shade-color
$info
$warning-border-subtle-dark
shade-color
$warning
$danger-border-subtle-dark
shade-color
$danger
$light-border-subtle-dark
$gray-700
$dark-border-subtle-dark
$gray-800
Sass maps
Color mode adaptive border colors are also available as a Sass map:
scss/_maps.scss
$theme-colors-border-subtle
"primary"
$primary-border-subtle
"secondary"
$secondary-border-subtle
"success"
$success-border-subtle
"info"
$info-border-subtle
"warning"
$warning-border-subtle
"danger"
$danger-border-subtle
"light"
$light-border-subtle
"dark"
$dark-border-subtle
scss/_maps.scss
$theme-colors-border-subtle-dark
"primary"
$primary-border-subtle-dark
"secondary"
$secondary-border-subtle-dark
"success"
$success-border-subtle-dark
"info"
$info-border-subtle-dark
"warning"
$warning-border-subtle-dark
"danger"
$danger-border-subtle-dark
"light"
$light-border-subtle-dark
"dark"
$dark-border-subtle-dark
Sass mixins
scss/mixins/_border-radius.scss
@mixin
border-radius
$radius
$border-radius
$fallback-border-radius
false
$enable-rounded
border-radius
valid-radius
$radius
@else if
$fallback-border-radius
!= false
border-radius
$fallback-border-radius
@mixin
border-top-radius
$radius
$border-radius
$enable-rounded
border-top-left-radius
valid-radius
$radius
border-top-right-radius
valid-radius
$radius
@mixin
border-end-radius
$radius
$border-radius
$enable-rounded
border-top-right-radius
valid-radius
$radius
border-bottom-right-radius
valid-radius
$radius
@mixin
border-bottom-radius
$radius
$border-radius
$enable-rounded
border-bottom-right-radius
valid-radius
$radius
border-bottom-left-radius
valid-radius
$radius
@mixin
border-start-radius
$radius
$border-radius
$enable-rounded
border-top-left-radius
valid-radius
$radius
border-bottom-left-radius
valid-radius
$radius
@mixin
border-top-start-radius
$radius
$border-radius
$enable-rounded
border-top-left-radius
valid-radius
$radius
@mixin
border-top-end-radius
$radius
$border-radius
$enable-rounded
border-top-right-radius
valid-radius
$radius
@mixin
border-bottom-end-radius
$radius
$border-radius
$enable-rounded
border-bottom-right-radius
valid-radius
$radius
@mixin
border-bottom-start-radius
$radius
$border-radius
$enable-rounded
border-bottom-left-radius
valid-radius
$radius
Sass utilities API
Border utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"border"
property
border
values
null
#{$prefix}
border-width
#{$prefix}
border-style
#{$prefix}
border-color
"border-top"
property
border-top
values
null
#{$prefix}
border-width
#{$prefix}
border-style
#{$prefix}
border-color
"border-end"
property
border-right
class
border-end
values
null
#{$prefix}
border-width
#{$prefix}
border-style
#{$prefix}
border-color
"border-bottom"
property
border-bottom
values
null
#{$prefix}
border-width
#{$prefix}
border-style
#{$prefix}
border-color
"border-start"
property
border-left
class
border-start
values
null
#{$prefix}
border-width
#{$prefix}
border-style
#{$prefix}
border-color
"border-color"
property
border-color
class
border
local-vars
"border-opacity"
values
$utilities-border-colors
"subtle-border-color"
property
border-color
class
border
values
$utilities-border-subtle
"border-width"
property
border-width
class
border
values
$border-widths
"border-opacity"
css-var
true
class
border-opacity
values
scss/_utilities.scss
"rounded"
property
border-radius
class
rounded
values
null
#{$prefix}
border-radius
#{$prefix}
border-radius-sm
#{$prefix}
border-radius
#{$prefix}
border-radius-lg
#{$prefix}
border-radius-xl
#{$prefix}
border-radius-xxl
circle
pill
#{$prefix}
border-radius-pill
"rounded-top"
property
border-top-left-radius border-top-right-radius
class
rounded-top
values
null
#{$prefix}
border-radius
#{$prefix}
border-radius-sm
#{$prefix}
border-radius
#{$prefix}
border-radius-lg
#{$prefix}
border-radius-xl
#{$prefix}
border-radius-xxl
circle
pill
#{$prefix}
border-radius-pill
"rounded-end"
property
border-top-right-radius border-bottom-right-radius
class
rounded-end
values
null
#{$prefix}
border-radius
#{$prefix}
border-radius-sm
#{$prefix}
border-radius
#{$prefix}
border-radius-lg
#{$prefix}
border-radius-xl
#{$prefix}
border-radius-xxl
circle
pill
#{$prefix}
border-radius-pill
"rounded-bottom"
property
border-bottom-right-radius border-bottom-left-radius
class
rounded-bottom
values
null
#{$prefix}
border-radius
#{$prefix}
border-radius-sm
#{$prefix}
border-radius
#{$prefix}
border-radius-lg
#{$prefix}
border-radius-xl
#{$prefix}
border-radius-xxl
circle
pill
#{$prefix}
border-radius-pill
"rounded-start"
property
border-bottom-left-radius border-top-left-radius
class
rounded-start
values
null
#{$prefix}
border-radius
#{$prefix}
border-radius-sm
#{$prefix}
border-radius
#{$prefix}
border-radius-lg
#{$prefix}
border-radius-xl
#{$prefix}
border-radius-xxl
circle
pill
#{$prefix}
border-radius-pill

--- 075_helpers_ratio.txt ---
About
Use the ratio helper to manage the aspect ratios of external content like
<iframe>
<embed>
<video>
s, and
<object>
s. These helpers also can be used on any standard HTML child element (e.g., a
<div>
<img>
). Styles are applied from the parent
.ratio
class directly to the child.
Aspect ratios are declared in a Sass map and included in each class via CSS variable, which also allows
custom aspect ratios
Pro-Tip!
You don’t need
frameborder="0"
on your
<iframe>
s as we override that for you in
Reboot
Example
Wrap any embed, like an
<iframe>
, in a parent element with
.ratio
and an aspect ratio class. The immediate child element is automatically sized thanks to our universal selector
.ratio > *
html
class
ratio ratio-16x9
iframe
https://www.youtube.com/embed/zpOULjyy-n8?rel=0
title
YouTube video
allowfullscreen
iframe
Aspect ratios
Aspect ratios can be customized with modifier classes. By default the following ratio classes are provided:
16x9
21x9
html
class
ratio ratio-1x1
class
ratio ratio-4x3
class
ratio ratio-16x9
16x9
class
ratio ratio-21x9
21x9
Custom ratios
Each
.ratio-*
class includes a CSS custom property (or CSS variable) in the selector. You can override this CSS variable to create custom aspect ratios on the fly with some quick math on your part.
For example, to create a 2x1 aspect ratio, set
--bs-aspect-ratio: 50%
on the
.ratio
html
class
ratio
style
--bs-aspect-ratio
This CSS variable makes it easy to modify the aspect ratio across breakpoints. The following is 4x3 to start, but changes to a custom 2x1 at the medium breakpoint.
.ratio-4x3
@include
media-breakpoint-up
--bs-aspect-ratio
// 2x1
4x3, then 2x1
html
class
ratio ratio-4x3
4x3, then 2x1
Sass maps
Within
_variables.scss
, you can change the aspect ratios you want to use. Here’s our default
$ratio-aspect-ratios
map. Modify the map as you like and recompile your Sass to put them to use.
scss/_variables.scss
$aspect-ratios
"1x1"
100%
"4x3"
calc
100%
"16x9"
calc
100%
"21x9"
calc
100%

--- 076_helpers_color-background.txt ---
Overview
Color and background helpers combine the power of our
.text-*
utilities
.bg-*
utilities
in one class. Using our Sass
color-contrast()
function, we automatically determine a contrasting
color
for a particular
background-color
Heads up!
There’s currently no support for a CSS-native
color-contrast
function, so we use our own via Sass. This means that customizing our theme colors via CSS variables may cause color contrast issues with these utilities.
Primary with contrasting color
Secondary with contrasting color
Success with contrasting color
Danger with contrasting color
Warning with contrasting color
Info with contrasting color
Light with contrasting color
Dark with contrasting color
html
class
text-bg-primary p-3
Primary with contrasting color
class
text-bg-secondary p-3
Secondary with contrasting color
class
text-bg-success p-3
Success with contrasting color
class
text-bg-danger p-3
Danger with contrasting color
class
text-bg-warning p-3
Warning with contrasting color
class
text-bg-info p-3
Info with contrasting color
class
text-bg-light p-3
Light with contrasting color
class
text-bg-dark p-3
Dark with contrasting color
Accessibility tip:
Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a
sufficient
color contrast
) or is included through alternative means, such as additional text hidden with the
.visually-hidden
class.
With components
Use them in place of combined
.text-*
.bg-*
classes, like on
badges
Primary
Info
html
span
class
badge text-bg-primary
Primary
span
span
class
badge text-bg-info
Info
span
Or on
cards
Header
Some quick example text to build on the card title and make up the bulk of the card’s content.
Header
Some quick example text to build on the card title and make up the bulk of the card’s content.
html
class
card text-bg-primary mb-3
style
max-width
18rem
class
card-header
Header
class
card-body
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
class
card text-bg-info mb-3
style
max-width
18rem
class
card-header
Header
class
card-body
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.

--- 089_components_carousel.txt ---
How it works
The carousel is a slideshow for cycling through a series of content, built with CSS 3D transforms and a bit of JavaScript. It works with a series of images, text, or custom markup. It also includes support for previous/next controls and indicators.
For performance reasons,
carousels must be manually initialized
using the
carousel constructor method
. Without initialization, some of the event listeners (specifically, the events needed touch/swipe support) will not be registered until a user has explicitly activated a control or indicator.
The only exception are
autoplaying carousels
with the
data-bs-ride="carousel"
attribute as these are initialized automatically on page load. If you’re using autoplaying carousels with the data attribute,
don’t explicitly initialize the same carousels with the constructor method.
Nested carousels are not supported. You should also be aware that carousels in general can often cause usability and accessibility challenges.
The animation effect of this component is dependent on the
prefers-reduced-motion
media query. See the
reduced motion section of our accessibility documentation
Basic examples
Here is a basic example of a carousel with three slides. Note the previous/next controls. We recommend using
<button>
elements, but you can also use
elements with
role="button"
Placeholder
First slide
Placeholder
Second slide
Placeholder
Third slide
Previous
Next
html
carouselExample
class
carousel slide
class
carousel-inner
class
carousel-item active
class
d-block w-100
class
carousel-item
class
d-block w-100
class
carousel-item
class
d-block w-100
button
class
carousel-control-prev
type
button
data-bs-target
#carouselExample
data-bs-slide
prev
span
class
carousel-control-prev-icon
aria-hidden
true
span
span
class
visually-hidden
Previous
span
button
button
class
carousel-control-next
type
button
data-bs-target
#carouselExample
data-bs-slide
next
span
class
carousel-control-next-icon
aria-hidden
true
span
span
class
visually-hidden
Next
span
button
Carousels don’t automatically normalize slide dimensions. As such, you may need to use additional utilities or custom styles to appropriately size content. While carousels support previous/next controls and indicators, they’re not explicitly required. Add and customize as you see fit.
You must add the
.active
class to one of the slides
, otherwise the carousel will not be visible. Also be sure to set a unique
on the
.carousel
for optional controls, especially if you’re using multiple carousels on a single page. Control and indicator elements must have a
data-bs-target
attribute (or
href
for links) that matches the
of the
.carousel
element.
Indicators
You can add indicators to the carousel, alongside the previous/next controls. The indicators let users jump directly to a particular slide.
Placeholder
First slide
Placeholder
Second slide
Placeholder
Third slide
Previous
Next
html
carouselExampleIndicators
class
carousel slide
class
carousel-indicators
button
type
button
data-bs-target
#carouselExampleIndicators
data-bs-slide-to
class
active
aria-current
true
aria-label
Slide 1
button
button
type
button
data-bs-target
#carouselExampleIndicators
data-bs-slide-to
aria-label
Slide 2
button
button
type
button
data-bs-target
#carouselExampleIndicators
data-bs-slide-to
aria-label
Slide 3
button
class
carousel-inner
class
carousel-item active
class
d-block w-100
class
carousel-item
class
d-block w-100
class
carousel-item
class
d-block w-100
button
class
carousel-control-prev
type
button
data-bs-target
#carouselExampleIndicators
data-bs-slide
prev
span
class
carousel-control-prev-icon
aria-hidden
true
span
span
class
visually-hidden
Previous
span
button
button
class
carousel-control-next
type
button
data-bs-target
#carouselExampleIndicators
data-bs-slide
next
span
class
carousel-control-next-icon
aria-hidden
true
span
span
class
visually-hidden
Next
span
button
Captions
You can add captions to your slides with the
.carousel-caption
element within any
.carousel-item
. They can be easily hidden on smaller viewports, as shown below, with optional
display utilities
. We hide them initially with
.d-none
and bring them back on medium-sized devices with
.d-md-block
Placeholder
First slide
First slide label
Some representative placeholder content for the first slide.
Placeholder
Second slide
Second slide label
Some representative placeholder content for the second slide.
Placeholder
Third slide
Third slide label
Some representative placeholder content for the third slide.
Previous
Next
html
carouselExampleCaptions
class
carousel slide
class
carousel-indicators
button
type
button
data-bs-target
#carouselExampleCaptions
data-bs-slide-to
class
active
aria-current
true
aria-label
Slide 1
button
button
type
button
data-bs-target
#carouselExampleCaptions
data-bs-slide-to
aria-label
Slide 2
button
button
type
button
data-bs-target
#carouselExampleCaptions
data-bs-slide-to
aria-label
Slide 3
button
class
carousel-inner
class
carousel-item active
class
d-block w-100
class
carousel-caption d-none d-md-block
First slide label
Some representative placeholder content for the first slide.
class
carousel-item
class
d-block w-100
class
carousel-caption d-none d-md-block
Second slide label
Some representative placeholder content for the second slide.
class
carousel-item
class
d-block w-100
class
carousel-caption d-none d-md-block
Third slide label
Some representative placeholder content for the third slide.
button
class
carousel-control-prev
type
button
data-bs-target
#carouselExampleCaptions
data-bs-slide
prev
span
class
carousel-control-prev-icon
aria-hidden
true
span
span
class
visually-hidden
Previous
span
button
button
class
carousel-control-next
type
button
data-bs-target
#carouselExampleCaptions
data-bs-slide
next
span
class
carousel-control-next-icon
aria-hidden
true
span
span
class
visually-hidden
Next
span
button
Crossfade
.carousel-fade
to your carousel to animate slides with a fade transition instead of a slide. Depending on your carousel content (e.g., text only slides), you may want to add
.bg-body
or some custom CSS to the
.carousel-item
s for proper crossfading.
Placeholder
First slide
Placeholder
Second slide
Placeholder
Third slide
Previous
Next
html
carouselExampleFade
class
carousel slide carousel-fade
class
carousel-inner
class
carousel-item active
class
d-block w-100
class
carousel-item
class
d-block w-100
class
carousel-item
class
d-block w-100
button
class
carousel-control-prev
type
button
data-bs-target
#carouselExampleFade
data-bs-slide
prev
span
class
carousel-control-prev-icon
aria-hidden
true
span
span
class
visually-hidden
Previous
span
button
button
class
carousel-control-next
type
button
data-bs-target
#carouselExampleFade
data-bs-slide
next
span
class
carousel-control-next-icon
aria-hidden
true
span
span
class
visually-hidden
Next
span
button
Autoplaying carousels
You can make your carousels autoplay on page load by setting the
ride
option to
carousel
. Autoplaying carousels automatically pause while hovered with the mouse. This behavior can be controlled with the
pause
option. In browsers that support the
Page Visibility API
, the carousel will stop cycling when the webpage is not visible to the user (such as when the browser tab is inactive, or when the browser window is minimized).
For accessibility reasons, we recommend avoiding the use of autoplaying carousels. If your page does include an autoplaying carousel, we recommend providing an additional button or control to explicitly pause/stop the carousel.
WCAG 2.2 Success Criterion 2.2.2 Pause, Stop, Hide
Placeholder
First slide
Placeholder
Second slide
Placeholder
Third slide
Previous
Next
html
carouselExampleAutoplaying
class
carousel slide
data-bs-ride
carousel
class
carousel-inner
class
carousel-item active
class
d-block w-100
class
carousel-item
class
d-block w-100
class
carousel-item
class
d-block w-100
button
class
carousel-control-prev
type
button
data-bs-target
#carouselExampleAutoplaying
data-bs-slide
prev
span
class
carousel-control-prev-icon
aria-hidden
true
span
span
class
visually-hidden
Previous
span
button
button
class
carousel-control-next
type
button
data-bs-target
#carouselExampleAutoplaying
data-bs-slide
next
span
class
carousel-control-next-icon
aria-hidden
true
span
span
class
visually-hidden
Next
span
button
When the
ride
option is set to
true
, rather than
carousel
, the carousel won’t automatically start to cycle on page load. Instead, it will only start after the first user interaction.
Placeholder
First slide
Placeholder
Second slide
Placeholder
Third slide
Previous
Next
html
carouselExampleRide
class
carousel slide
data-bs-ride
true
class
carousel-inner
class
carousel-item active
class
d-block w-100
class
carousel-item
class
d-block w-100
class
carousel-item
class
d-block w-100
button
class
carousel-control-prev
type
button
data-bs-target
#carouselExampleRide
data-bs-slide
prev
span
class
carousel-control-prev-icon
aria-hidden
true
span
span
class
visually-hidden
Previous
span
button
button
class
carousel-control-next
type
button
data-bs-target
#carouselExampleRide
data-bs-slide
next
span
class
carousel-control-next-icon
aria-hidden
true
span
span
class
visually-hidden
Next
span
button
Individual
.carousel-item
interval
data-bs-interval=""
to a
.carousel-item
to change the amount of time to delay between automatically cycling to the next item.
Placeholder
First slide
Placeholder
Second slide
Placeholder
Third slide
Previous
Next
html
carouselExampleInterval
class
carousel slide
data-bs-ride
carousel
class
carousel-inner
class
carousel-item active
data-bs-interval
10000
class
d-block w-100
class
carousel-item
data-bs-interval
2000
class
d-block w-100
class
carousel-item
class
d-block w-100
button
class
carousel-control-prev
type
button
data-bs-target
#carouselExampleInterval
data-bs-slide
prev
span
class
carousel-control-prev-icon
aria-hidden
true
span
span
class
visually-hidden
Previous
span
button
button
class
carousel-control-next
type
button
data-bs-target
#carouselExampleInterval
data-bs-slide
next
span
class
carousel-control-next-icon
aria-hidden
true
span
span
class
visually-hidden
Next
span
button
Autoplaying carousels without controls
Here’s a carousel with slides only. Note the presence of the
.d-block
.w-100
on carousel images to prevent browser default image alignment.
Placeholder
First slide
Placeholder
Second slide
Placeholder
Third slide
html
carouselExampleSlidesOnly
class
carousel slide
data-bs-ride
carousel
class
carousel-inner
class
carousel-item active
class
d-block w-100
class
carousel-item
class
d-block w-100
class
carousel-item
class
d-block w-100
Disable touch swiping
Carousels support swiping left/right on touchscreen devices to move between slides. This can be disabled by setting the
touch
option to
false
Placeholder
First slide
Placeholder
Second slide
Placeholder
Third slide
Previous
Next
html
carouselExampleControlsNoTouching
class
carousel slide
data-bs-touch
false
class
carousel-inner
class
carousel-item active
class
d-block w-100
class
carousel-item
class
d-block w-100
class
carousel-item
class
d-block w-100
button
class
carousel-control-prev
type
button
data-bs-target
#carouselExampleControlsNoTouching
data-bs-slide
prev
span
class
carousel-control-prev-icon
aria-hidden
true
span
span
class
visually-hidden
Previous
span
button
button
class
carousel-control-next
type
button
data-bs-target
#carouselExampleControlsNoTouching
data-bs-slide
next
span
class
carousel-control-next-icon
aria-hidden
true
span
span
class
visually-hidden
Next
span
button
Dark variant
Deprecated in v5.3.0
.carousel-dark
to the
.carousel
for darker controls, indicators, and captions. Controls are inverted compared to their default white fill with the
filter
CSS property. Captions and controls have additional Sass variables that customize the
color
background-color
Heads up!
Dark variants for components were deprecated in v5.3.0 with the introduction of color modes.
Instead of adding
.carousel-dark
, set
data-bs-theme="dark"
on the root element, a parent
wrapper, or the component itself.
Placeholder
First slide
First slide label
Some representative placeholder content for the first slide.
Placeholder
Second slide
Second slide label
Some representative placeholder content for the second slide.
Placeholder
Third slide
Third slide label
Some representative placeholder content for the third slide.
Previous
Next
html
carouselExampleDark
class
carousel carousel-dark slide
class
carousel-indicators
button
type
button
data-bs-target
#carouselExampleDark
data-bs-slide-to
class
active
aria-current
true
aria-label
Slide 1
button
button
type
button
data-bs-target
#carouselExampleDark
data-bs-slide-to
aria-label
Slide 2
button
button
type
button
data-bs-target
#carouselExampleDark
data-bs-slide-to
aria-label
Slide 3
button
class
carousel-inner
class
carousel-item active
data-bs-interval
10000
class
d-block w-100
class
carousel-caption d-none d-md-block
First slide label
Some representative placeholder content for the first slide.
class
carousel-item
data-bs-interval
2000
class
d-block w-100
class
carousel-caption d-none d-md-block
Second slide label
Some representative placeholder content for the second slide.
class
carousel-item
class
d-block w-100
class
carousel-caption d-none d-md-block
Third slide label
Some representative placeholder content for the third slide.
button
class
carousel-control-prev
type
button
data-bs-target
#carouselExampleDark
data-bs-slide
prev
span
class
carousel-control-prev-icon
aria-hidden
true
span
span
class
visually-hidden
Previous
span
button
button
class
carousel-control-next
type
button
data-bs-target
#carouselExampleDark
data-bs-slide
next
span
class
carousel-control-next-icon
aria-hidden
true
span
span
class
visually-hidden
Next
span
button
Custom transition
The transition duration of
.carousel-item
can be changed with the
$carousel-transition-duration
Sass variable before compiling or custom styles if you’re using the compiled CSS. If multiple transitions are applied, make sure the transform transition is defined first (e.g.
transition: transform 2s ease, opacity .5s ease-out
Sass variables
Variables for all carousels:
scss/_variables.scss
$carousel-control-color
$white
$carousel-control-width
$carousel-control-opacity
$carousel-control-hover-opacity
$carousel-control-transition
opacity .15s ease
$carousel-control-icon-filter
null
$carousel-indicator-width
30px
$carousel-indicator-height
$carousel-indicator-hit-area-height
10px
$carousel-indicator-spacer
$carousel-indicator-opacity
$carousel-indicator-active-bg
$white
$carousel-indicator-active-opacity
$carousel-indicator-transition
opacity .6s ease
$carousel-caption-width
$carousel-caption-color
$white
$carousel-caption-padding-y
1.25rem
$carousel-caption-spacer
1.25rem
$carousel-control-icon-width
2rem
$carousel-control-prev-icon-bg
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='#{$carousel-control-color}'><path d='M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0'/></svg>"
$carousel-control-next-icon-bg
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='#{$carousel-control-color}'><path d='M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708'/></svg>"
$carousel-transition-duration
$carousel-transition
transform
$carousel-transition-duration
ease-in-out
// Define transform transition first if using multiple transitions (e.g., `transform 2s ease, opacity .5s ease-out`)
Variables for the
dark carousel
scss/_variables.scss
$carousel-dark-indicator-active-bg
$black
// Deprecated in v5.3.4
$carousel-dark-caption-color
$black
// Deprecated in v5.3.4
$carousel-dark-control-icon-filter
invert
grayscale
// Deprecated in v5.3.4
Usage
Via data attributes
Use data attributes to easily control the position of the carousel.
data-bs-slide
accepts the keywords
prev
next
, which alters the slide position relative to its current position. Alternatively, use
data-bs-slide-to
to pass a raw slide index to the carousel
data-bs-slide-to="2"
, which shifts the slide position to a particular index beginning with
Via JavaScript
Call carousel manually with:
const
carousel
Carousel
'#myCarousel'
Options
As options can be passed via data attributes or JavaScript, you can append an option name to
data-bs-
, as in
data-bs-animation="{value}"
. Make sure to change the case type of the option name from “
camelCase
” to “
kebab-case
” when passing the options via data attributes. For example, use
data-bs-custom-class="beautifier"
instead of
data-bs-customClass="beautifier"
As of Bootstrap 5.2.0, all components support an
experimental
reserved data attribute
data-bs-config
that can house simple component configuration as a JSON string. When an element has
data-bs-config='{"delay":0, "title":123}'
data-bs-title="456"
attributes, the final
title
value will be
and the separate data attributes will override values given on
data-bs-config
. In addition, existing data attributes are able to house JSON values like
data-bs-delay='{"show":0,"hide":150}'
The final configuration object is the merged result of
data-bs-config
data-bs-
, and
js object
where the latest given key-value overrides the others.
Name
Type
Default
Description
interval
number
5000
The amount of time to delay between automatically cycling an item.
keyboard
boolean
true
Whether the carousel should react to keyboard events.
pause
string, boolean
"hover"
If set to
"hover"
, pauses the cycling of the carousel on
mouseenter
and resumes the cycling of the carousel on
mouseleave
. If set to
false
, hovering over the carousel won’t pause it. On touch-enabled devices, when set to
"hover"
, cycling will pause on
touchend
(once the user finished interacting with the carousel) for two intervals, before automatically resuming. This is in addition to the mouse behavior.
ride
string, boolean
false
If set to
true
, autoplays the carousel after the user manually cycles the first item. If set to
"carousel"
, autoplays the carousel on load.
touch
boolean
true
Whether the carousel should support left/right swipe interactions on touchscreen devices.
wrap
boolean
true
Whether the carousel should cycle continuously or have hard stops.
Methods
All API methods are asynchronous and start a transition.
They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored.
Learn more in our JavaScript docs.
You can create a carousel instance with the carousel constructor, and pass on any additional options. For example, to manually initialize an autoplaying carousel (assuming you’re not using the
data-bs-ride="carousel"
attribute in the markup itself) with a specific interval and with touch support disabled, you can use:
const
myCarouselElement
document
querySelector
'#myCarousel'
const
carousel
Carousel
myCarouselElement
interval
2000
touch
false
Method
Description
cycle
Starts cycling through the carousel items from left to right.
dispose
Destroys an element’s carousel. (Removes stored data on the DOM element)
getInstance
Static method which allows you to get the carousel instance associated to a DOM element. You can use it like this:
getOrCreateInstance
Static method which returns a carousel instance associated to a DOM element, or creates a new one in case it wasn’t initialized. You can use it like this:
next
Cycles to the next item.
Returns to the caller before the next item has been shown
(e.g., before the
slid.bs.carousel
event occurs).
nextWhenVisible
Don’t cycle carousel to next when the page, the carousel, or the carousel’s parent aren’t visible.
Returns to the caller before the target item has been shown
pause
Stops the carousel from cycling through items.
prev
Cycles to the previous item.
Returns to the caller before the previous item has been shown
(e.g., before the
slid.bs.carousel
event occurs).
Cycles the carousel to a particular frame (0 based, similar to an array).
Returns to the caller before the target item has been shown
(e.g., before the
slid.bs.carousel
event occurs).
Events
direction
: The direction in which the carousel is sliding (either
"left"
"right"
relatedTarget
: The DOM element that is being slid into place as the active item.
from
: The index of the current item
: The index of the next item
All carousel events are fired at the carousel itself (i.e. at the
<div class="carousel">
Event type
Description
slid.bs.carousel
Fired when the carousel has completed its slide transition.
slide.bs.carousel
Fires immediately when the
slide
instance method is invoked.
const
myCarousel
document
getElementById
'myCarousel'
myCarousel
addEventListener
'slide.bs.carousel'
event
// do something...

--- 110_utilities_opacity.txt ---
opacity
property sets the opacity level for an element. The opacity level describes the transparency level, where
is not transparent at all,
is 50% visible, and
is completely transparent.
Set the
opacity
of an element using
.opacity-{value}
utilities.
100%
class
opacity-100
class
opacity-75
class
opacity-50
class
opacity-25
class
opacity-0
Sass utilities API
Opacity utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"opacity"
property
opacity
values

--- 071_about_brand.txt ---
Have a need for Bootstrap’s brand resources? Great! We have only a few guidelines we follow, and in turn ask you to follow as well.
Logo
When referencing Bootstrap, use our logo mark. Do not modify our logos in any way. Do not use Bootstrap’s branding for your own open or closed source projects.
Our logo mark is also available in black and white. All rules for our primary logo apply to these as well.
Name
. No capital
Correct
Incorrect

--- 080_examples_sticky-footer.txt ---
Toggle theme
Light
Dark
Auto
Sticky footer
Pin a footer to the bottom of the viewport in desktop browsers with this custom HTML and CSS.
the sticky footer with a fixed navbar
if need be, too.

--- 121_components_button-group.txt ---
Basic example
Wrap a series of buttons with
.btn
.btn-group
Left
Middle
Right
html
class
btn-group
role
group
aria-label
Basic example
button
type
button
class
btn btn-primary
Left
button
button
type
button
class
btn btn-primary
Middle
button
button
type
button
class
btn btn-primary
Right
button
Button groups require an appropriate
role
attribute and explicit label to ensure assistive technologies like screen readers identify buttons as grouped and announce them. Use
role="group"
for button groups or
role="toolbar"
for button toolbars. Then use
aria-label
aria-labelledby
to label them.
These classes can also be added to groups of links, as an alternative to the
.nav
navigation components
Active link
Link
Link
html
class
btn-group
href
class
btn btn-primary active
aria-current
page
Active link
href
class
btn btn-primary
Link
href
class
btn btn-primary
Link
Mixed styles
Left
Middle
Right
html
class
btn-group
role
group
aria-label
Basic mixed styles example
button
type
button
class
btn btn-danger
Left
button
button
type
button
class
btn btn-warning
Middle
button
button
type
button
class
btn btn-success
Right
button
Outlined styles
Left
Middle
Right
html
class
btn-group
role
group
aria-label
Basic outlined example
button
type
button
class
btn btn-outline-primary
Left
button
button
type
button
class
btn btn-outline-primary
Middle
button
button
type
button
class
btn btn-outline-primary
Right
button
Checkbox and radio button groups
Combine button-like checkbox and radio
toggle buttons
into a seamless looking button group.
Checkbox 1
Checkbox 2
Checkbox 3
html
class
btn-group
role
group
aria-label
Basic checkbox toggle button group
input
type
checkbox
class
btn-check
btncheck1
autocomplete
label
class
btn btn-outline-primary
btncheck1
Checkbox 1
label
input
type
checkbox
class
btn-check
btncheck2
autocomplete
label
class
btn btn-outline-primary
btncheck2
Checkbox 2
label
input
type
checkbox
class
btn-check
btncheck3
autocomplete
label
class
btn btn-outline-primary
btncheck3
Checkbox 3
label
Radio 1
Radio 2
Radio 3
html
class
btn-group
role
group
aria-label
Basic radio toggle button group
input
type
radio
class
btn-check
name
btnradio
btnradio1
autocomplete
checked
label
class
btn btn-outline-primary
btnradio1
Radio 1
label
input
type
radio
class
btn-check
name
btnradio
btnradio2
autocomplete
label
class
btn btn-outline-primary
btnradio2
Radio 2
label
input
type
radio
class
btn-check
name
btnradio
btnradio3
autocomplete
label
class
btn btn-outline-primary
btnradio3
Radio 3
label
Button toolbar
Combine sets of button groups into button toolbars for more complex components. Use utility classes as needed to space out groups, buttons, and more.
html
class
btn-toolbar
role
toolbar
aria-label
Toolbar with button groups
class
btn-group me-2
role
group
aria-label
First group
button
type
button
class
btn btn-primary
button
button
type
button
class
btn btn-primary
button
button
type
button
class
btn btn-primary
button
button
type
button
class
btn btn-primary
button
class
btn-group me-2
role
group
aria-label
Second group
button
type
button
class
btn btn-secondary
button
button
type
button
class
btn btn-secondary
button
button
type
button
class
btn btn-secondary
button
class
btn-group
role
group
aria-label
Third group
button
type
button
class
btn btn-info
button
Feel free to mix input groups with button groups in your toolbars. Similar to the example above, you’ll likely need some utilities though to space things properly.
html
class
btn-toolbar mb-3
role
toolbar
aria-label
Toolbar with button groups
class
btn-group me-2
role
group
aria-label
First group
button
type
button
class
btn btn-outline-secondary
button
button
type
button
class
btn btn-outline-secondary
button
button
type
button
class
btn btn-outline-secondary
button
button
type
button
class
btn btn-outline-secondary
button
class
input-group
class
input-group-text
btnGroupAddon
input
type
text
class
form-control
placeholder
Input group example
aria-label
Input group example
aria-describedby
btnGroupAddon
class
btn-toolbar justify-content-between
role
toolbar
aria-label
Toolbar with button groups
class
btn-group
role
group
aria-label
First group
button
type
button
class
btn btn-outline-secondary
button
button
type
button
class
btn btn-outline-secondary
button
button
type
button
class
btn btn-outline-secondary
button
button
type
button
class
btn btn-outline-secondary
button
class
input-group
class
input-group-text
btnGroupAddon2
input
type
text
class
form-control
placeholder
Input group example
aria-label
Input group example
aria-describedby
btnGroupAddon2
Sizing
Instead of applying button sizing classes to every button in a group, just add
.btn-group-*
to each
.btn-group
, including each one when nesting multiple groups.
Left
Middle
Right
Left
Middle
Right
Left
Middle
Right
html
class
btn-group btn-group-lg
role
group
aria-label
Large button group
button
type
button
class
btn btn-outline-primary
Left
button
button
type
button
class
btn btn-outline-primary
Middle
button
button
type
button
class
btn btn-outline-primary
Right
button
class
btn-group
role
group
aria-label
Default button group
button
type
button
class
btn btn-outline-primary
Left
button
button
type
button
class
btn btn-outline-primary
Middle
button
button
type
button
class
btn btn-outline-primary
Right
button
class
btn-group btn-group-sm
role
group
aria-label
Small button group
button
type
button
class
btn btn-outline-primary
Left
button
button
type
button
class
btn btn-outline-primary
Middle
button
button
type
button
class
btn btn-outline-primary
Right
button
Nesting
Place a
.btn-group
within another
.btn-group
when you want dropdown menus mixed with a series of buttons.
Dropdown
Dropdown link
Dropdown link
html
class
btn-group
role
group
aria-label
Button group with nested dropdown
button
type
button
class
btn btn-primary
button
button
type
button
class
btn btn-primary
button
class
btn-group
role
group
button
type
button
class
btn btn-primary dropdown-toggle
data-bs-toggle
dropdown
aria-expanded
false
Dropdown
button
class
dropdown-menu
class
dropdown-item
href
Dropdown link
class
dropdown-item
href
Dropdown link
Vertical variation
Make a set of buttons appear vertically stacked rather than horizontally.
Split button dropdowns are not supported here.
Button
Button
Button
Button
html
class
btn-group-vertical
role
group
aria-label
Vertical button group
button
type
button
class
btn btn-primary
Button
button
button
type
button
class
btn btn-primary
Button
button
button
type
button
class
btn btn-primary
Button
button
button
type
button
class
btn btn-primary
Button
button
Dropdown
Dropdown link
Dropdown link
Button
Button
Dropdown
Dropdown link
Dropdown link
Dropdown
Dropdown link
Dropdown link
Dropdown
Dropdown link
Dropdown link
html
class
btn-group-vertical
role
group
aria-label
Vertical button group
class
btn-group
role
group
button
type
button
class
btn btn-primary dropdown-toggle
data-bs-toggle
dropdown
aria-expanded
false
Dropdown
button
class
dropdown-menu
class
dropdown-item
href
Dropdown link
class
dropdown-item
href
Dropdown link
button
type
button
class
btn btn-primary
Button
button
button
type
button
class
btn btn-primary
Button
button
class
btn-group dropstart
role
group
button
type
button
class
btn btn-primary dropdown-toggle
data-bs-toggle
dropdown
aria-expanded
false
Dropdown
button
class
dropdown-menu
class
dropdown-item
href
Dropdown link
class
dropdown-item
href
Dropdown link
class
btn-group dropend
role
group
button
type
button
class
btn btn-primary dropdown-toggle
data-bs-toggle
dropdown
aria-expanded
false
Dropdown
button
class
dropdown-menu
class
dropdown-item
href
Dropdown link
class
dropdown-item
href
Dropdown link
class
btn-group dropup
role
group
button
type
button
class
btn btn-primary dropdown-toggle
data-bs-toggle
dropdown
aria-expanded
false
Dropdown
button
class
dropdown-menu
class
dropdown-item
href
Dropdown link
class
dropdown-item
href
Dropdown link
Radio 1
Radio 2
Radio 3
html
class
btn-group-vertical
role
group
aria-label
Vertical radio toggle button group
input
type
radio
class
btn-check
name
vbtn-radio
vbtn-radio1
autocomplete
checked
label
class
btn btn-outline-danger
vbtn-radio1
Radio 1
label
input
type
radio
class
btn-check
name
vbtn-radio
vbtn-radio2
autocomplete
label
class
btn btn-outline-danger
vbtn-radio2
Radio 2
label
input
type
radio
class
btn-check
name
vbtn-radio
vbtn-radio3
autocomplete
label
class
btn btn-outline-danger
vbtn-radio3
Radio 3
label

--- 002_getting-started_browsers-devices.txt ---
Supported browsers
latest, stable releases
of all major browsers and platforms.
Alternative browsers which use the latest version of WebKit, Blink, or Gecko, whether directly or via the platform’s web view API, are not explicitly supported. However, Bootstrap should (in most cases) display and function correctly in these browsers as well. More specific support information is provided below.
You can find our supported range of browsers and their versions
in our
.browserslistrc file
# https://github.com/browserslist/browserslist#readme
>= 0.5%
last 2 major versions
not dead
Chrome >= 60
Firefox >= 60
Firefox ESR
iOS >= 12
Safari >= 12
not Explorer <= 11
not kaios <= 2.5 # fix floating label issues in Firefox (see https://github.com/postcss/autoprefixer/issues/1533)
We use
Autoprefixer
to handle intended browser support via CSS prefixes, which uses
Browserslist
to manage these browser versions. Consult their documentation for how to integrate these tools into your projects.
Mobile devices
Generally speaking, Bootstrap supports the latest versions of each major platform’s default browsers. Note that proxy browsers (such as Opera Mini, Opera Mobile’s Turbo mode, UC Browser Mini, Amazon Silk) are not supported.
Chrome
Firefox
Safari
Android Browser & WebView
Android
Supported
Supported
v6.0+
Supported
Supported
Supported
Desktop browsers
Similarly, the latest versions of most desktop browsers are supported.
Chrome
Firefox
Microsoft Edge
Opera
Safari
Supported
Supported
Supported
Supported
Supported
Windows
Supported
Supported
Supported
Supported
For Firefox, in addition to the latest normal stable release, we also support the latest
Extended Support Release (ESR)
version of Firefox.
Unofficially, Bootstrap should look and behave well enough in Chromium and Chrome for Linux, and Firefox for Linux, though they are not officially supported.
Internet Explorer
Internet Explorer is not supported.
If you require Internet Explorer support, please use Bootstrap v4.
Modals and dropdowns on mobile
Overflow and scrolling
Support for
overflow: hidden;
on the
<body>
element is quite limited in iOS and Android. To that end, when you scroll past the top or bottom of a modal in either of those devices’ browsers, the
<body>
content will begin to scroll. See
Chrome bug #175502
(fixed in Chrome v40) and
WebKit bug #153852
iOS text fields and scrolling
As of iOS 9.2, while a modal is open, if the initial touch of a scroll gesture is within the boundary of a textual
<input>
or a
<textarea>
, the
<body>
content underneath the modal will be scrolled instead of the modal itself. See
WebKit bug #153856
Navbar Dropdowns
.dropdown-backdrop
element isn’t used on iOS in the nav because of the complexity of z-indexing. Thus, to close dropdowns in navbars, you must directly click the dropdown element (or
any other element which will fire a click event in iOS
Browser zooming
Page zooming inevitably presents rendering artifacts in some components, both in Bootstrap and the rest of the web. Depending on the issue, we may be able to fix it (search first and then open an issue if need be). However, we tend to ignore these as they often have no direct solution other than hacky workarounds.
Validators
In order to provide the best possible experience to old and buggy browsers, Bootstrap uses
CSS browser hacks
in several places to target special CSS to certain browser versions in order to work around bugs in the browsers themselves. These hacks understandably cause CSS validators to complain that they are invalid. In a couple places, we also use bleeding-edge CSS features that aren’t yet fully standardized, but these are used purely for progressive enhancement.
These validation warnings don’t matter in practice since the non-hacky portion of our CSS does fully validate and the hacky portions don’t interfere with the proper functioning of the non-hacky portion, hence why we deliberately ignore these particular warnings.
Our HTML docs likewise have some trivial and inconsequential HTML validation warnings due to our inclusion of a workaround for
a certain Firefox bug

--- 024_components_card.txt ---
About
card
is a flexible and extensible content container. It includes options for headers and footers, a wide variety of content, contextual background colors, and powerful display options. If you’re familiar with Bootstrap 3, cards replace our old panels, wells, and thumbnails. Similar functionality to those components is available as modifier classes for cards.
Example
Cards are built with as little markup and styles as possible, but still manage to deliver a ton of control and customization. Built with flexbox, they offer easy alignment and mix well with other Bootstrap components. They have no
margin
by default, so use
spacing utilities
as needed.
Below is an example of a basic card with mixed content and a fixed width. Cards have no fixed width to start, so they’ll naturally fill the full width of its parent element. This is easily customized with our various
sizing options
Placeholder
Image cap
Card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
Go somewhere
html
class
card
style
width
18rem
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
href
class
btn btn-primary
Go somewhere
Content types
Cards support a wide variety of content, including images, text, list groups, links, and more. Below are examples of what’s supported.
Body
The building block of a card is the
.card-body
. Use it whenever you need a padded section within a card.
This is some text within a card body.
html
class
card
class
card-body
This is some text within a card body.
Titles, text, and links
Card titles are used by adding
.card-title
to a
<h*>
tag. In the same way, links are added and placed next to each other by adding
.card-link
to an
tag.
Subtitles are used by adding a
.card-subtitle
to a
<h*>
tag. If the
.card-title
and the
.card-subtitle
items are placed in a
.card-body
item, the card title and subtitle are aligned nicely.
Card title
Card subtitle
Some quick example text to build on the card title and make up the bulk of the card’s content.
Card link
Another link
html
class
card
style
width
18rem
class
card-body
class
card-title
Card title
class
card-subtitle mb-2 text-body-secondary
Card subtitle
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
href
class
card-link
Card link
href
class
card-link
Another link
Images
.card-img-top
.card-img-bottom
respectively set the top and bottom corners rounded to match the card’s borders. With
.card-text
, text can be added to the card. Text within
.card-text
can also be styled with the standard HTML tags.
Placeholder
Image cap
Some quick example text to build on the card title and make up the bulk of the card’s content.
html
class
card
style
width
18rem
class
card-img-top
class
card-body
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
List groups
Create lists of content in a card with a flush list group.
An item
A second item
A third item
html
class
card
style
width
18rem
class
list-group list-group-flush
class
list-group-item
An item
class
list-group-item
A second item
class
list-group-item
A third item
Featured
An item
A second item
A third item
html
class
card
style
width
18rem
class
card-header
Featured
class
list-group list-group-flush
class
list-group-item
An item
class
list-group-item
A second item
class
list-group-item
A third item
An item
A second item
A third item
Card footer
html
class
card
style
width
18rem
class
list-group list-group-flush
class
list-group-item
An item
class
list-group-item
A second item
class
list-group-item
A third item
class
card-footer
Card footer
Kitchen sink
Mix and match multiple content types to create the card you need, or throw everything in there. Shown below are image styles, blocks, text styles, and a list group—all wrapped in a fixed-width card.
Placeholder
Image cap
Card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
An item
A second item
A third item
Card link
Another link
html
class
card
style
width
18rem
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
class
list-group list-group-flush
class
list-group-item
An item
class
list-group-item
A second item
class
list-group-item
A third item
class
card-body
href
class
card-link
Card link
href
class
card-link
Another link
Header and footer
Add an optional header and/or footer within a card.
Featured
Special title treatment
With supporting text below as a natural lead-in to additional content.
Go somewhere
html
class
card
class
card-header
Featured
class
card-body
class
card-title
Special title treatment
class
card-text
With supporting text below as a natural lead-in to additional content.
href
class
btn btn-primary
Go somewhere
Card headers can be styled by adding
.card-header
<h*>
elements.
Featured
Special title treatment
With supporting text below as a natural lead-in to additional content.
Go somewhere
html
class
card
class
card-header
Featured
class
card-body
class
card-title
Special title treatment
class
card-text
With supporting text below as a natural lead-in to additional content.
href
class
btn btn-primary
Go somewhere
Quote
A well-known quote, contained in a blockquote element.
Someone famous in
Source Title
html
class
card
class
card-header
Quote
class
card-body
figure
blockquote
class
blockquote
A well-known quote, contained in a blockquote element.
blockquote
figcaption
class
blockquote-footer
Someone famous in
cite
title
Source Title
Source Title
cite
figcaption
figure
Featured
Special title treatment
With supporting text below as a natural lead-in to additional content.
Go somewhere
2 days ago
html
class
card text-center
class
card-header
Featured
class
card-body
class
card-title
Special title treatment
class
card-text
With supporting text below as a natural lead-in to additional content.
href
class
btn btn-primary
Go somewhere
class
card-footer text-body-secondary
2 days ago
Sizing
Cards assume no specific
width
to start, so they’ll be 100% wide unless otherwise stated. You can change this as needed with custom CSS, grid classes, grid Sass mixins, or utilities.
Using grid markup
Using the grid, wrap cards in columns and rows as needed.
Special title treatment
With supporting text below as a natural lead-in to additional content.
Go somewhere
Special title treatment
With supporting text below as a natural lead-in to additional content.
Go somewhere
html
class
class
col-sm-6 mb-3 mb-sm-0
class
card
class
card-body
class
card-title
Special title treatment
class
card-text
With supporting text below as a natural lead-in to additional content.
href
class
btn btn-primary
Go somewhere
class
col-sm-6
class
card
class
card-body
class
card-title
Special title treatment
class
card-text
With supporting text below as a natural lead-in to additional content.
href
class
btn btn-primary
Go somewhere
Using utilities
Use our handful of
available sizing utilities
to quickly set a card’s width.
Card title
With supporting text below as a natural lead-in to additional content.
Button
Card title
With supporting text below as a natural lead-in to additional content.
Button
html
class
card w-75 mb-3
class
card-body
class
card-title
Card title
class
card-text
With supporting text below as a natural lead-in to additional content.
href
class
btn btn-primary
Button
class
card w-50
class
card-body
class
card-title
Card title
class
card-text
With supporting text below as a natural lead-in to additional content.
href
class
btn btn-primary
Button
Using custom CSS
Use custom CSS in your stylesheets or as inline styles to set a width.
Special title treatment
With supporting text below as a natural lead-in to additional content.
Go somewhere
html
class
card
style
width
18rem
class
card-body
class
card-title
Special title treatment
class
card-text
With supporting text below as a natural lead-in to additional content.
href
class
btn btn-primary
Go somewhere
Text alignment
You can quickly change the text alignment of any card—in its entirety or specific parts—with our
text align classes
Special title treatment
With supporting text below as a natural lead-in to additional content.
Go somewhere
Special title treatment
With supporting text below as a natural lead-in to additional content.
Go somewhere
Special title treatment
With supporting text below as a natural lead-in to additional content.
Go somewhere
html
class
card mb-3
style
width
18rem
class
card-body
class
card-title
Special title treatment
class
card-text
With supporting text below as a natural lead-in to additional content.
href
class
btn btn-primary
Go somewhere
class
card text-center mb-3
style
width
18rem
class
card-body
class
card-title
Special title treatment
class
card-text
With supporting text below as a natural lead-in to additional content.
href
class
btn btn-primary
Go somewhere
class
card text-end
style
width
18rem
class
card-body
class
card-title
Special title treatment
class
card-text
With supporting text below as a natural lead-in to additional content.
href
class
btn btn-primary
Go somewhere
Navigation
Add some navigation to a card’s header (or block) with Bootstrap’s
nav components
Active
Link
Disabled
Special title treatment
With supporting text below as a natural lead-in to additional content.
Go somewhere
html
class
card text-center
class
card-header
class
nav nav-tabs card-header-tabs
class
nav-item
class
nav-link active
aria-current
true
href
Active
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link disabled
aria-disabled
true
Disabled
class
card-body
class
card-title
Special title treatment
class
card-text
With supporting text below as a natural lead-in to additional content.
href
class
btn btn-primary
Go somewhere
Active
Link
Disabled
Special title treatment
With supporting text below as a natural lead-in to additional content.
Go somewhere
html
class
card text-center
class
card-header
class
nav nav-pills card-header-pills
class
nav-item
class
nav-link active
href
Active
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link disabled
aria-disabled
true
Disabled
class
card-body
class
card-title
Special title treatment
class
card-text
With supporting text below as a natural lead-in to additional content.
href
class
btn btn-primary
Go somewhere
Images
Cards include a few options for working with images. Choose from appending “image caps” at either end of a card, overlaying images with card content, or simply embedding the image in a card.
Image caps
Similar to headers and footers, cards can include top and bottom “image caps”—images at the top or bottom of a card.
Placeholder
Image cap
Card title
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
Last updated 3 mins ago
Card title
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
Last updated 3 mins ago
Placeholder
Image cap
html
class
card mb-3
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
class
card-text
small
class
text-body-secondary
Last updated 3 mins ago
small
class
card
class
card-body
class
card-title
Card title
class
card-text
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
class
card-text
small
class
text-body-secondary
Last updated 3 mins ago
small
class
card-img-bottom
Image overlays
Turn an image into a card background and overlay your card’s text. Depending on the image, you may or may not need additional styles or utilities.
Placeholder
Card image
Card title
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
Last updated 3 mins ago
html
class
card text-bg-dark
class
card-img
class
card-img-overlay
class
card-title
Card title
class
card-text
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
class
card-text
small
Last updated 3 mins ago
small
Note that content should not be larger than the height of the image. If content is larger than the image the content will be displayed outside the image.
Horizontal
Using a combination of grid and utility classes, cards can be made horizontal in a mobile-friendly and responsive way. In the example below, we remove the grid gutters with
.g-0
and use
.col-md-*
classes to make the card horizontal at the
breakpoint. Further adjustments may be needed depending on your card content.
Placeholder
Image
Card title
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
Last updated 3 mins ago
html
class
card mb-3
style
max-width
540px
class
row g-0
class
col-md-4
class
img-fluid rounded-start
class
col-md-8
class
card-body
class
card-title
Card title
class
card-text
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
class
card-text
small
class
text-body-secondary
Last updated 3 mins ago
small
Card styles
Cards include various options for customizing their backgrounds, borders, and color.
Background and color
Added in v5.2.0
Set a
background-color
with contrasting foreground
color
with
.text-bg-{color}
helpers
. Previously it was required to manually pair your choice of
.text-{color}
.bg-{color}
utilities for styling, which you still may use if you prefer.
Header
Primary card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
Header
Secondary card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
Header
Success card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
Header
Danger card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
Header
Warning card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
Header
Info card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
Header
Light card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
Header
Dark card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
html
class
card text-bg-primary mb-3
style
max-width
18rem
class
card-header
Header
class
card-body
class
card-title
Primary card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
class
card text-bg-secondary mb-3
style
max-width
18rem
class
card-header
Header
class
card-body
class
card-title
Secondary card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
class
card text-bg-success mb-3
style
max-width
18rem
class
card-header
Header
class
card-body
class
card-title
Success card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
class
card text-bg-danger mb-3
style
max-width
18rem
class
card-header
Header
class
card-body
class
card-title
Danger card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
class
card text-bg-warning mb-3
style
max-width
18rem
class
card-header
Header
class
card-body
class
card-title
Warning card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
class
card text-bg-info mb-3
style
max-width
18rem
class
card-header
Header
class
card-body
class
card-title
Info card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
class
card text-bg-light mb-3
style
max-width
18rem
class
card-header
Header
class
card-body
class
card-title
Light card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
class
card text-bg-dark mb-3
style
max-width
18rem
class
card-header
Header
class
card-body
class
card-title
Dark card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
Accessibility tip:
Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a
sufficient
color contrast
) or is included through alternative means, such as additional text hidden with the
.visually-hidden
class.
Border
border utilities
to change just the
border-color
of a card. Note that you can put
.text-{color}
classes on the parent
.card
or a subset of the card’s contents as shown below.
Header
Primary card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
Header
Secondary card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
Header
Success card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
Header
Danger card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
Header
Warning card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
Header
Info card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
Header
Light card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
Header
Dark card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
html
class
card border-primary mb-3
style
max-width
18rem
class
card-header
Header
class
card-body text-primary
class
card-title
Primary card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
class
card border-secondary mb-3
style
max-width
18rem
class
card-header
Header
class
card-body text-secondary
class
card-title
Secondary card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
class
card border-success mb-3
style
max-width
18rem
class
card-header
Header
class
card-body text-success
class
card-title
Success card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
class
card border-danger mb-3
style
max-width
18rem
class
card-header
Header
class
card-body text-danger
class
card-title
Danger card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
class
card border-warning mb-3
style
max-width
18rem
class
card-header
Header
class
card-body
class
card-title
Warning card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
class
card border-info mb-3
style
max-width
18rem
class
card-header
Header
class
card-body
class
card-title
Info card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
class
card border-light mb-3
style
max-width
18rem
class
card-header
Header
class
card-body
class
card-title
Light card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
class
card border-dark mb-3
style
max-width
18rem
class
card-header
Header
class
card-body
class
card-title
Dark card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
Mixins utilities
You can also change the borders on the card header and footer as needed, and even remove their
background-color
with
.bg-transparent
Header
Success card title
Some quick example text to build on the card title and make up the bulk of the card’s content.
Footer
html
class
card border-success mb-3
style
max-width
18rem
class
card-header bg-transparent border-success
Header
class
card-body text-success
class
card-title
Success card title
class
card-text
Some quick example text to build on the card title and make up the bulk of the card’s content.
class
card-footer bg-transparent border-success
Footer
Card layout
In addition to styling the content within cards, Bootstrap includes a few options for laying out series of cards. For the time being,
these layout options are not yet responsive
Card groups
Use card groups to render cards as a single, attached element with equal width and height columns. Card groups start off stacked and use
display: flex;
to become attached with uniform dimensions starting at the
breakpoint.
Placeholder
Image cap
Card title
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
Last updated 3 mins ago
Placeholder
Image cap
Card title
This card has supporting text below as a natural lead-in to additional content.
Last updated 3 mins ago
Placeholder
Image cap
Card title
This is a wider card with supporting text below as a natural lead-in to additional content. This card has even longer content than the first to show that equal height action.
Last updated 3 mins ago
html
class
card-group
class
card
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
class
card-text
small
class
text-body-secondary
Last updated 3 mins ago
small
class
card
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This card has supporting text below as a natural lead-in to additional content.
class
card-text
small
class
text-body-secondary
Last updated 3 mins ago
small
class
card
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This is a wider card with supporting text below as a natural lead-in to additional content. This card has even longer content than the first to show that equal height action.
class
card-text
small
class
text-body-secondary
Last updated 3 mins ago
small
When using card groups with footers, their content will automatically line up.
Placeholder
Image cap
Card title
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
Last updated 3 mins ago
Placeholder
Image cap
Card title
This card has supporting text below as a natural lead-in to additional content.
Last updated 3 mins ago
Placeholder
Image cap
Card title
This is a wider card with supporting text below as a natural lead-in to additional content. This card has even longer content than the first to show that equal height action.
Last updated 3 mins ago
html
class
card-group
class
card
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
class
card-footer
small
class
text-body-secondary
Last updated 3 mins ago
small
class
card
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This card has supporting text below as a natural lead-in to additional content.
class
card-footer
small
class
text-body-secondary
Last updated 3 mins ago
small
class
card
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This is a wider card with supporting text below as a natural lead-in to additional content. This card has even longer content than the first to show that equal height action.
class
card-footer
small
class
text-body-secondary
Last updated 3 mins ago
small
Grid cards
Use the Bootstrap grid system and its
.row-cols
classes
to control how many grid columns (wrapped around your cards) you show per row. For example, here’s
.row-cols-1
laying out the cards on one column, and
.row-cols-md-2
splitting four cards to equal width across multiple rows, from the medium breakpoint up.
Placeholder
Image cap
Card title
This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
Placeholder
Image cap
Card title
This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
Placeholder
Image cap
Card title
This is a longer card with supporting text below as a natural lead-in to additional content.
Placeholder
Image cap
Card title
This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
html
class
row row-cols-1 row-cols-md-2 g-4
class
class
card
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
class
class
card
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
class
class
card
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This is a longer card with supporting text below as a natural lead-in to additional content.
class
class
card
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
Change it to
.row-cols-3
and you’ll see the fourth card wrap.
Placeholder
Image cap
Card title
This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
Placeholder
Image cap
Card title
This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
Placeholder
Image cap
Card title
This is a longer card with supporting text below as a natural lead-in to additional content.
Placeholder
Image cap
Card title
This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
html
class
row row-cols-1 row-cols-md-3 g-4
class
class
card
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
class
class
card
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
class
class
card
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This is a longer card with supporting text below as a natural lead-in to additional content.
class
class
card
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
When you need equal height, add
.h-100
to the cards. If you want equal heights by default, you can set
$card-height: 100%
in Sass.
Placeholder
Image cap
Card title
This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
Placeholder
Image cap
Card title
This is a short card.
Placeholder
Image cap
Card title
This is a longer card with supporting text below as a natural lead-in to additional content.
Placeholder
Image cap
Card title
This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
html
class
row row-cols-1 row-cols-md-3 g-4
class
class
card h-100
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
class
class
card h-100
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This is a short card.
class
class
card h-100
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This is a longer card with supporting text below as a natural lead-in to additional content.
class
class
card h-100
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
Just like with card groups, card footers will automatically line up.
Placeholder
Image cap
Card title
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
Last updated 3 mins ago
Placeholder
Image cap
Card title
This card has supporting text below as a natural lead-in to additional content.
Last updated 3 mins ago
Placeholder
Image cap
Card title
This is a wider card with supporting text below as a natural lead-in to additional content. This card has even longer content than the first to show that equal height action.
Last updated 3 mins ago
html
class
row row-cols-1 row-cols-md-3 g-4
class
class
card h-100
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
class
card-footer
small
class
text-body-secondary
Last updated 3 mins ago
small
class
class
card h-100
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This card has supporting text below as a natural lead-in to additional content.
class
card-footer
small
class
text-body-secondary
Last updated 3 mins ago
small
class
class
card h-100
class
card-img-top
class
card-body
class
card-title
Card title
class
card-text
This is a wider card with supporting text below as a natural lead-in to additional content. This card has even longer content than the first to show that equal height action.
class
card-footer
small
class
text-body-secondary
Last updated 3 mins ago
small
Masonry
we used a CSS-only technique to mimic the behavior of
Masonry
-like columns, but this technique came with lots of unpleasant
side effects
. If you want to have this type of layout in
, you can just make use of Masonry plugin.
Masonry is not included in Bootstrap
, but we’ve made a
demo example
to help you get started.
Variables
Added in v5.2.0
As part of Bootstrap’s evolving CSS variables approach, cards now use local CSS variables on
.card
for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
scss/_card.scss
#{$prefix}
card-spacer-y
#{$card-spacer-y}
#{$prefix}
card-spacer-x
#{$card-spacer-x}
#{$prefix}
card-title-spacer-y
#{$card-title-spacer-y}
#{$prefix}
card-title-color
#{$card-title-color}
#{$prefix}
card-subtitle-color
#{$card-subtitle-color}
#{$prefix}
card-border-width
#{$card-border-width}
#{$prefix}
card-border-color
#{$card-border-color}
#{$prefix}
card-border-radius
#{$card-border-radius}
#{$prefix}
card-box-shadow
#{$card-box-shadow}
#{$prefix}
card-inner-border-radius
#{$card-inner-border-radius}
#{$prefix}
card-cap-padding-y
#{$card-cap-padding-y}
#{$prefix}
card-cap-padding-x
#{$card-cap-padding-x}
#{$prefix}
card-cap-bg
#{$card-cap-bg}
#{$prefix}
card-cap-color
#{$card-cap-color}
#{$prefix}
card-height
#{$card-height}
#{$prefix}
card-color
#{$card-color}
#{$prefix}
card-bg
#{$card-bg}
#{$prefix}
card-img-overlay-padding
#{$card-img-overlay-padding}
#{$prefix}
card-group-margin
#{$card-group-margin}
Sass variables
scss/_variables.scss
$card-spacer-y
$spacer
$card-spacer-x
$spacer
$card-title-spacer-y
$spacer
$card-title-color
null
$card-subtitle-color
null
$card-border-width
#{$prefix}
border-width
$card-border-color
#{$prefix}
border-color-translucent
$card-border-radius
#{$prefix}
border-radius
$card-box-shadow
null
$card-inner-border-radius
subtract
$card-border-radius
$card-border-width
$card-cap-padding-y
$card-spacer-y
$card-cap-padding-x
$card-spacer-x
$card-cap-bg
rgba
#{$prefix}
body-color-rgb
$card-cap-color
null
$card-height
null
$card-color
null
$card-bg
#{$prefix}
body-bg
$card-img-overlay-padding
$spacer
$card-group-margin
$grid-gutter-width

--- 117_content_typography.txt ---
Global settings
textual utility classes
Use a
native font stack
that selects the best
font-family
for each OS and device.
For a more inclusive and accessible type scale, we use the browser’s default root
font-size
(typically 16px) so visitors can customize their browser defaults as needed.
Use the
$font-family-base
$font-size-base
, and
$line-height-base
attributes as our typographic base applied to the
<body>
Set the global link color via
$link-color
$body-bg
to set a
background-color
on the
<body>
#fff
by default).
These styles can be found within
_reboot.scss
, and the global variables are defined in
_variables.scss
. Make sure to set
$font-size-base
Headings
All HTML headings,
<h1>
through
<h6>
, are available.
Heading
Example
<h1></h1>
h1. Bootstrap heading
<h2></h2>
h2. Bootstrap heading
<h3></h3>
h3. Bootstrap heading
<h4></h4>
h4. Bootstrap heading
<h5></h5>
h5. Bootstrap heading
<h6></h6>
h6. Bootstrap heading
h1. Bootstrap heading
h2. Bootstrap heading
h3. Bootstrap heading
h4. Bootstrap heading
h5. Bootstrap heading
h6. Bootstrap heading
through
classes are also available, for when you want to match the font styling of a heading but cannot use the associated HTML element.
h1. Bootstrap heading
h2. Bootstrap heading
h3. Bootstrap heading
h4. Bootstrap heading
h5. Bootstrap heading
h6. Bootstrap heading
html
class
h1. Bootstrap heading
class
h2. Bootstrap heading
class
h3. Bootstrap heading
class
h4. Bootstrap heading
class
h5. Bootstrap heading
class
h6. Bootstrap heading
Customizing headings
Use the included utility classes to recreate the small secondary heading text from Bootstrap 3.
Fancy display heading
With faded secondary text
html
Fancy display heading
small
class
text-body-secondary
With faded secondary text
small
Display headings
Traditional heading elements are designed to work best in the meat of your page content. When you need a heading to stand out, consider using a
display heading
—a larger, slightly more opinionated heading style.
Display 1
Display 2
Display 3
Display 4
Display 5
Display 6
class
display-1
Display 1
class
display-2
Display 2
class
display-3
Display 3
class
display-4
Display 4
class
display-5
Display 5
class
display-6
Display 6
Display headings are configured via the
$display-font-sizes
Sass map and two variables,
$display-font-weight
$display-line-height
Display headings are customizable via two variables,
$display-font-family
$display-font-style
scss/_variables.scss
$display-font-sizes
5rem
4.5rem
4rem
3.5rem
3rem
2.5rem
$display-font-family
null
$display-font-style
null
$display-font-weight
$display-line-height
$headings-line-height
Lead
Make a paragraph stand out by adding
.lead
This is a lead paragraph. It stands out from regular paragraphs.
html
class
lead
This is a lead paragraph. It stands out from regular paragraphs.
Inline text elements
Styling for common inline HTML5 elements.
You can use the mark tag to
highlight
text.
This line of text is meant to be treated as deleted text.
This line of text is meant to be treated as no longer accurate.
This line of text is meant to be treated as an addition to the document.
This line of text will render as underlined.
This line of text is meant to be treated as fine print.
This line rendered as bold text.
This line rendered as italicized text.
html
You can use the mark tag to
mark
highlight
mark
text.
This line of text is meant to be treated as deleted text.
This line of text is meant to be treated as no longer accurate.
This line of text is meant to be treated as an addition to the document.
This line of text will render as underlined.
small
This line of text is meant to be treated as fine print.
small
strong
This line rendered as bold text.
strong
This line rendered as italicized text.
Beware that those tags should be used for semantic purpose:
<mark>
represents text which is marked or highlighted for reference or notation purposes.
<small>
represents side-comments and small print, like copyright and legal text.
represents element that are no longer relevant or no longer accurate.
represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation.
If you want to style your text, you should use the following classes instead:
.mark
will apply the same styles as
<mark>
.small
will apply the same styles as
<small>
.text-decoration-underline
will apply the same styles as
.text-decoration-line-through
will apply the same styles as
While not shown above, feel free to use
in HTML5.
is meant to highlight words or phrases without conveying additional importance, while
is mostly for voice, technical terms, etc.
Text utilities
Change text alignment, transform, style, weight, line-height, decoration and color with our
text utilities
color utilities
Abbreviations
Stylized implementation of HTML’s
<abbr>
element for abbreviations and acronyms to show the expanded version on hover. Abbreviations have a default underline and gain a help cursor to provide additional context on hover and to users of assistive technologies.
.initialism
to an abbreviation for a slightly smaller font-size.
attr
HTML
html
abbr
title
attribute
attr
abbr
abbr
title
HyperText Markup Language
class
initialism
HTML
abbr
Blockquotes
For quoting blocks of content from another source within your document. Wrap
<blockquote class="blockquote">
around any HTML as the quote.
A well-known quote, contained in a blockquote element.
html
blockquote
class
blockquote
A well-known quote, contained in a blockquote element.
blockquote
Naming a source
The HTML spec requires that blockquote attribution be placed outside the
<blockquote>
. When providing attribution, wrap your
<blockquote>
in a
<figure>
and use a
<figcaption>
or a block level element (e.g.,
) with the
.blockquote-footer
class. Be sure to wrap the name of the source work in
<cite>
as well.
A well-known quote, contained in a blockquote element.
Someone famous in
Source Title
html
figure
blockquote
class
blockquote
A well-known quote, contained in a blockquote element.
blockquote
figcaption
class
blockquote-footer
Someone famous in
cite
title
Source Title
Source Title
cite
figcaption
figure
Alignment
Use text utilities as needed to change the alignment of your blockquote.
A well-known quote, contained in a blockquote element.
Someone famous in
Source Title
html
figure
class
text-center
blockquote
class
blockquote
A well-known quote, contained in a blockquote element.
blockquote
figcaption
class
blockquote-footer
Someone famous in
cite
title
Source Title
Source Title
cite
figcaption
figure
A well-known quote, contained in a blockquote element.
Someone famous in
Source Title
html
figure
class
text-end
blockquote
class
blockquote
A well-known quote, contained in a blockquote element.
blockquote
figcaption
class
blockquote-footer
Someone famous in
cite
title
Source Title
Source Title
cite
figcaption
figure
Lists
Unstyled
Remove the default
list-style
and left margin on list items (immediate children only).
This only applies to immediate children list items
, meaning you will need to add the class for any nested lists as well.
This is a list.
It appears completely unstyled.
Structurally, it’s still a list.
However, this style only applies to immediate child elements.
Nested lists:
are unaffected by this style
will still show a bullet
and have appropriate left margin
This may still come in handy in some situations.
html
class
list-unstyled
This is a list.
It appears completely unstyled.
Structurally, it’s still a list.
However, this style only applies to immediate child elements.
Nested lists:
are unaffected by this style
will still show a bullet
and have appropriate left margin
This may still come in handy in some situations.
Inline
Remove a list’s bullets and apply some light
margin
with a combination of two classes,
.list-inline
.list-inline-item
This is a list item.
And another one.
But they’re displayed inline.
html
class
list-inline
class
list-inline-item
This is a list item.
class
list-inline-item
And another one.
class
list-inline-item
But they’re displayed inline.
Description list alignment
Align terms and descriptions horizontally by using our grid system’s predefined classes (or semantic mixins). For longer terms, you can optionally add a
.text-truncate
class to truncate the text with an ellipsis.
Description lists
A description list is perfect for defining terms.
Term
Definition for the term.
And some more placeholder definition text.
Another term
This definition is short, so no extra paragraphs or anything.
Truncated term is truncated
This can be useful when space is tight. Adds an ellipsis at the end.
Nesting
Nested definition list
I heard you like definition lists. Let me put a definition list inside your definition list.
html
class
class
col-sm-3
Description lists
class
col-sm-9
A description list is perfect for defining terms.
class
col-sm-3
Term
class
col-sm-9
Definition for the term.
And some more placeholder definition text.
class
col-sm-3
Another term
class
col-sm-9
This definition is short, so no extra paragraphs or anything.
class
col-sm-3 text-truncate
Truncated term is truncated
class
col-sm-9
This can be useful when space is tight. Adds an ellipsis at the end.
class
col-sm-3
Nesting
class
col-sm-9
class
class
col-sm-4
Nested definition list
class
col-sm-8
I heard you like definition lists. Let me put a definition list inside your definition list.
Responsive font sizes
In Bootstrap 5, we’ve enabled responsive font sizes by default, allowing text to scale more naturally across device and viewport sizes. Have a look at the
RFS page
to find out how this works.
Sass variables
Headings have some dedicated variables for sizing and spacing.
scss/_variables.scss
$headings-margin-bottom
$spacer
$headings-font-family
null
$headings-font-style
null
$headings-font-weight
$headings-line-height
$headings-color
inherit
Miscellaneous typography elements covered here and in
Reboot
also have dedicated variables.
scss/_variables.scss
$lead-font-size
$font-size-base
1.25
$lead-font-weight
$small-font-size
.875em
$sub-sup-font-size
.75em
// fusv-disable
$text-muted
#{$prefix}
secondary-color
// Deprecated in 5.3.0
// fusv-enable
$initialism-font-size
$small-font-size
$blockquote-margin-y
$spacer
$blockquote-font-size
$font-size-base
1.25
$blockquote-footer-color
$gray-600
$blockquote-footer-font-size
$small-font-size
$hr-margin-y
$spacer
$hr-color
inherit
// fusv-disable
$hr-bg-color
null
// Deprecated in v5.2.0
$hr-height
null
// Deprecated in v5.2.0
// fusv-enable
$hr-border-color
null
// Allows for inherited colors
$hr-border-width
#{$prefix}
border-width
$hr-opacity
// scss-docs-start vr-variables
$vr-border-width
#{$prefix}
border-width
// scss-docs-end vr-variables
$legend-margin-bottom
.5rem
$legend-font-size
1.5rem
$legend-font-weight
null
$dt-font-weight
$font-weight-bold
$list-inline-padding
.5rem
$mark-padding
.1875em
$mark-color
$body-color
$mark-bg
$yellow-100
Sass mixins
There are no dedicated mixins for typography, but Bootstrap does use
Responsive Font Sizing (RFS)

--- 104_utilities_visibility.txt ---
Set the
visibility
of elements with our visibility utilities. These utility classes do not modify the
display
value at all and do not affect layout –
.invisible
elements still take up space in the page.
Elements with the
.invisible
class will be hidden
both
visually and for assistive technology/screen reader users.
Apply
.visible
.invisible
as needed.
class
visible
class
invisible
// Class
.visible
visibility
visible
!important
.invisible
visibility
hidden
!important
Sass utilities API
Visibility utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"visibility"
property
visibility
class
null
values
visible
visible
invisible
hidden

--- 010_extend_approach.txt ---
While the getting started pages provide an introductory tour of the project and what it offers, this document focuses on
we do the things we do in Bootstrap. It explains our philosophy to building on the web so that others can learn from us, contribute with us, and help us improve.
See something that doesn’t sound right, or perhaps could be done better?
Open an issue
—we’d love to discuss it with you.
Summary
We'll dive into each of these more throughout, but at a high level, here’s what guides our approach.
Components should be responsive and mobile-first
Components should be built with a base class and extended via modifier classes
Component states should obey a common z-index scale
Whenever possible, prefer an HTML and CSS implementation over JavaScript
Whenever possible, use utilities over custom styles
Whenever possible, avoid enforcing strict HTML requirements (children selectors)
Responsive
mobile-first
. We use this term in our docs and largely agree with it, but at times it can be too broad. While not every component
must
be entirely responsive in Bootstrap, this responsive approach is about reducing CSS overrides by pushing you to add styles as the viewport becomes larger.
Across Bootstrap, you’ll see this most clearly in our media queries. In most cases, we use
min-width
queries that begin to apply at a specific breakpoint and carry up through the higher breakpoints. For example, a
.d-none
applies from
min-width: 0
to infinity. On the other hand, a
.d-md-none
applies from the medium breakpoint and up.
At times we'll use
max-width
when a component’s inherent complexity requires it. At times, these overrides are functionally and mentally clearer to implement and support than rewriting core functionality from our components. We strive to limit this approach, but will use it from time to time.
Classes
Aside from our Reboot, a cross-browser normalization stylesheet, all our styles aim to use classes as selectors. This means steering clear of type selectors (e.g.,
input[type="text"]
) and extraneous parent classes (e.g.,
.parent .child
) that make styles too specific to easily override.
As such, components should be built with a base class that houses common, not-to-be overridden property-value pairs. For example,
.btn
.btn-primary
. We use
.btn
for all the common styles like
display
padding
, and
border-width
. We then use modifiers like
.btn-primary
to add the color, background-color, border-color, etc.
Modifier classes should only be used when there are multiple properties or values to be changed across multiple variants. Modifiers are not always necessary, so be sure you’re actually saving lines of code and preventing unnecessary overrides when creating them. Good examples of modifiers are our theme color classes and size variants.
z-index scales
There are two
z-index
scales in Bootstrap—elements within a component and overlay components.
Component elements
Some components in Bootstrap are built with overlapping elements to prevent double borders without modifying the
border
property. For example, button groups, input groups, and pagination.
These components share a standard
z-index
scale of
through
is default (initial),
:hover
:active
.active
, and
:focus
This approach matches our expectations of highest user priority. If an element is focused, it’s in view and at the user’s attention. Active elements are second highest because they indicate state. Hover is third highest because it indicates user intent, but nearly
anything
can be hovered.
Overlay components
z-index
, dropdowns, fixed and sticky navbars, modals, tooltips, and popovers. These components have their own
z-index
scale that begins at
1000
. This starting number was chosen arbitrarily and serves as a small buffer between our styles and your project’s custom styles.
Each overlay component increases its
z-index
value slightly in such a way that common UI principles allow user focused or hovered elements to remain in view at all times. For example, a modal is document blocking (e.g., you cannot take any other action save for the modal’s action), so we put that above our navbars.
Learn more about this in our
z-index
layout page
HTML and CSS over JS
Whenever possible, we prefer to write HTML and CSS over JavaScript. In general, HTML and CSS are more prolific and accessible to more people of all different experience levels. HTML and CSS are also faster in your browser than JavaScript, and your browser generally provides a great deal of functionality for you.
This principle is our first-class JavaScript API using
data
attributes. You don’t need to write nearly any JavaScript to use our JavaScript plugins; instead, write HTML. Read more about this in
our JavaScript overview page
Lastly, our styles build on the fundamental behaviors of common web elements. Whenever possible, we prefer to use what the browser provides. For example, you can put a
.btn
class on nearly any element, but most elements don’t provide any semantic value or browser functionality. So instead, we use
<button>
s and
The same goes for more complex components. While we
could
write our own form validation plugin to add classes to a parent element based on an input’s state, thereby allowing us to style the text say red, we prefer using the
:valid
:invalid
pseudo-elements every browser provides us.
Utilities
Utility classes—formerly helpers in Bootstrap 3—are a powerful ally in combating CSS bloat and poor page performance. A utility class is typically a single, immutable property-value pairing expressed as a class (e.g.,
.d-block
represents
display: block;
). Their primary appeal is speed of use while writing HTML and limiting the amount of custom CSS you have to write.
Specifically regarding custom CSS, utilities can help combat increasing file size by reducing your most commonly repeated property-value pairs into single classes. This can have a dramatic effect at scale in your projects.
Flexible HTML
While not always possible, we strive to avoid being overly dogmatic in our HTML requirements for components. Thus, we focus on single classes in our CSS selectors and try to avoid immediate children selectors (
). This gives you more flexibility in your implementation and helps keep our CSS simpler and less specific.
Code conventions
Code Guide
(from Bootstrap co-creator, @mdo) documents how we write our HTML and CSS across Bootstrap. It specifies guidelines for general formatting, common sense defaults, property and attribute orders, and more.
We use
Stylelint
to enforce these standards and more in our Sass/CSS.
Our custom Stylelint config
is open source and available for others to use and extend.
We use
vnu-jar
to enforce standard and semantic HTML, as well as detecting common errors.

--- 131_examples_album.txt ---
Album example
Something short and leading about the collection below—its contents, the creator, etc. Make it short and sweet, but not too short so folks don’t simply skip over it entirely.
Main call to action
Secondary action
Placeholder
Thumbnail
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
View
Edit
9 mins
Placeholder
Thumbnail
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
View
Edit
9 mins
Placeholder
Thumbnail
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
View
Edit
9 mins
Placeholder
Thumbnail
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
View
Edit
9 mins
Placeholder
Thumbnail
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
View
Edit
9 mins
Placeholder
Thumbnail
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
View
Edit
9 mins
Placeholder
Thumbnail
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
View
Edit
9 mins
Placeholder
Thumbnail
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
View
Edit
9 mins
Placeholder
Thumbnail
This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
View
Edit
9 mins

--- 038_components_dropdowns.txt ---
Overview
Dropdowns are toggleable, contextual overlays for displaying lists of links and more. They’re made interactive with the included Bootstrap dropdown JavaScript plugin. They’re toggled by clicking, not by hovering; this is
an intentional design decision
Dropdowns are built on a third party library,
Popper
, which provides dynamic positioning and viewport detection. Be sure to include
popper.min.js
before Bootstrap’s JavaScript or use
which contains Popper. Popper isn’t used to position dropdowns in navbars though as dynamic positioning isn’t required.
Accessibility
ARIA
standard defines an actual
role="menu"
widget
, but this is specific to application-like menus which trigger actions or functions.
ARIA
menus can only contain menu items, checkbox menu items, radio button menu items, radio button groups, and sub-menus.
role
aria-
attributes required for true
ARIA
menus. Authors will have to include these more specific attributes themselves.
However, Bootstrap does add built-in support for most standard keyboard menu interactions, such as the ability to move through individual
.dropdown-item
elements using the cursor keys and close the menu with the
key.
Examples
Wrap the dropdown’s toggle (your button or link) and the dropdown menu within
.dropdown
, or another element that declares
position: relative;
. Ideally, you should use a
<button>
element as the dropdown trigger, but the plugin will work with
elements as well. The examples shown here use semantic
<ul>
elements where appropriate, but custom markup is supported.
Single button
Any single
.btn
can be turned into a dropdown toggle with some markup changes. Here’s how you can put them to work with
<button>
elements:
Dropdown button
Action
Another action
Something else here
html
class
dropdown
button
class
btn btn-secondary dropdown-toggle
type
button
data-bs-toggle
dropdown
aria-expanded
false
Dropdown button
button
class
dropdown-menu
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
While
<button>
is the recommended control for a dropdown toggle, there might be situations where you have to use an
element. If you do, we recommend adding a
role="button"
attribute to appropriately convey control’s purpose to assistive technologies such as screen readers.
Dropdown link
Action
Another action
Something else here
html
class
dropdown
class
btn btn-secondary dropdown-toggle
href
role
button
data-bs-toggle
dropdown
aria-expanded
false
Dropdown link
class
dropdown-menu
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
The best part is you can do this with any button variant, too:
Primary
Action
Another action
Something else here
Separated link
Secondary
Action
Another action
Something else here
Separated link
Success
Action
Another action
Something else here
Separated link
Info
Action
Another action
Something else here
Separated link
Warning
Action
Another action
Something else here
Separated link
Danger
Action
Another action
Something else here
Separated link
<!-- Example single danger button -->
class
btn-group
button
type
button
class
btn btn-danger dropdown-toggle
data-bs-toggle
dropdown
aria-expanded
false
Danger
button
class
dropdown-menu
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
class
dropdown-divider
class
dropdown-item
href
Separated link
Split button
Similarly, create split button dropdowns with virtually the same markup as single button dropdowns, but with the addition of
.dropdown-toggle-split
for proper spacing around the dropdown caret.
We use this extra class to reduce the horizontal
padding
on either side of the caret by 25% and remove the
margin-left
that’s added for regular button dropdowns. Those extra changes keep the caret centered in the split button and provide a more appropriately sized hit area next to the main button.
Primary
Toggle Dropdown
Action
Another action
Something else here
Separated link
Secondary
Toggle Dropdown
Action
Another action
Something else here
Separated link
Success
Toggle Dropdown
Action
Another action
Something else here
Separated link
Info
Toggle Dropdown
Action
Another action
Something else here
Separated link
Warning
Toggle Dropdown
Action
Another action
Something else here
Separated link
Danger
Toggle Dropdown
Action
Another action
Something else here
Separated link
<!-- Example split danger button -->
class
btn-group
button
type
button
class
btn btn-danger
Danger
button
button
type
button
class
btn btn-danger dropdown-toggle dropdown-toggle-split
data-bs-toggle
dropdown
aria-expanded
false
span
class
visually-hidden
Toggle Dropdown
span
button
class
dropdown-menu
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
class
dropdown-divider
class
dropdown-item
href
Separated link
Sizing
Button dropdowns work with buttons of all sizes, including default and split dropdown buttons.
Large button
Action
Another action
Something else here
Separated link
Large split button
Toggle Dropdown
Action
Another action
Something else here
Separated link
<!-- Large button groups (default and split) -->
class
btn-group
button
class
btn btn-secondary btn-lg dropdown-toggle
type
button
data-bs-toggle
dropdown
aria-expanded
false
Large button
button
class
dropdown-menu
class
btn-group
button
class
btn btn-secondary btn-lg
type
button
Large split button
button
button
type
button
class
btn btn-lg btn-secondary dropdown-toggle dropdown-toggle-split
data-bs-toggle
dropdown
aria-expanded
false
span
class
visually-hidden
Toggle Dropdown
span
button
class
dropdown-menu
Small button
Action
Another action
Something else here
Separated link
Small split button
Toggle Dropdown
Action
Another action
Something else here
Separated link
class
btn-group
button
class
btn btn-secondary btn-sm dropdown-toggle
type
button
data-bs-toggle
dropdown
aria-expanded
false
Small button
button
class
dropdown-menu
class
btn-group
button
class
btn btn-secondary btn-sm
type
button
Small split button
button
button
type
button
class
btn btn-sm btn-secondary dropdown-toggle dropdown-toggle-split
data-bs-toggle
dropdown
aria-expanded
false
span
class
visually-hidden
Toggle Dropdown
span
button
class
dropdown-menu
Dark dropdowns
Deprecated in v5.3.0
Opt into darker dropdowns to match a dark navbar or custom style by adding
.dropdown-menu-dark
onto an existing
.dropdown-menu
. No changes are required to the dropdown items.
Heads up!
Dark variants for components were deprecated in v5.3.0 with the introduction of color modes.
Instead of adding
.dropdown-menu-dark
, set
data-bs-theme="dark"
on the root element, a parent
wrapper, or the component itself.
Dropdown button
Action
Another action
Something else here
Separated link
html
class
dropdown
button
class
btn btn-secondary dropdown-toggle
type
button
data-bs-toggle
dropdown
aria-expanded
false
Dropdown button
button
class
dropdown-menu dropdown-menu-dark
class
dropdown-item active
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
class
dropdown-divider
class
dropdown-item
href
Separated link
And putting it to use in a navbar:
html
class
navbar navbar-expand-lg navbar-dark bg-dark
class
container-fluid
class
navbar-brand
href
Navbar
button
class
navbar-toggler
type
button
data-bs-toggle
collapse
data-bs-target
#navbarNavDarkDropdown
aria-controls
navbarNavDarkDropdown
aria-expanded
false
aria-label
span
class
navbar-toggler-icon
span
button
class
collapse navbar-collapse
navbarNavDarkDropdown
class
navbar-nav
class
nav-item dropdown
button
class
btn btn-dark dropdown-toggle
data-bs-toggle
dropdown
aria-expanded
false
Dropdown
button
class
dropdown-menu dropdown-menu-dark
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
Directions
Directions are flipped in RTL mode.
As such,
.dropstart
will appear on the right side.
Centered
Make the dropdown menu centered below the toggle with
.dropdown-center
on the parent element.
Centered dropdown
Action
Action two
Action three
html
class
dropdown-center
button
class
btn btn-secondary dropdown-toggle
type
button
data-bs-toggle
dropdown
aria-expanded
false
Centered dropdown
button
class
dropdown-menu
class
dropdown-item
href
Action
class
dropdown-item
href
Action two
class
dropdown-item
href
Action three
Dropup
Trigger dropdown menus above elements by adding
.dropup
to the parent element.
Dropup
Action
Another action
Something else here
Separated link
Split dropup
Toggle Dropdown
Action
Another action
Something else here
Separated link
<!-- Default dropup button -->
class
btn-group dropup
button
type
button
class
btn btn-secondary dropdown-toggle
data-bs-toggle
dropdown
aria-expanded
false
Dropup
button
class
dropdown-menu
<!-- Dropdown menu links -->
<!-- Split dropup button -->
class
btn-group dropup
button
type
button
class
btn btn-secondary
Split dropup
button
button
type
button
class
btn btn-secondary dropdown-toggle dropdown-toggle-split
data-bs-toggle
dropdown
aria-expanded
false
span
class
visually-hidden
Toggle Dropdown
span
button
class
dropdown-menu
<!-- Dropdown menu links -->
Dropup centered
Make the dropup menu centered above the toggle with
.dropup-center
on the parent element.
Centered dropup
Action
Action two
Action three
html
class
dropup-center dropup
button
class
btn btn-secondary dropdown-toggle
type
button
data-bs-toggle
dropdown
aria-expanded
false
Centered dropup
button
class
dropdown-menu
class
dropdown-item
href
Action
class
dropdown-item
href
Action two
class
dropdown-item
href
Action three
Dropend
Trigger dropdown menus at the right of the elements by adding
.dropend
to the parent element.
Dropend
Action
Another action
Something else here
Separated link
Split dropend
Toggle Dropend
Action
Another action
Something else here
Separated link
<!-- Default dropend button -->
class
btn-group dropend
button
type
button
class
btn btn-secondary dropdown-toggle
data-bs-toggle
dropdown
aria-expanded
false
Dropend
button
class
dropdown-menu
<!-- Dropdown menu links -->
<!-- Split dropend button -->
class
btn-group dropend
button
type
button
class
btn btn-secondary
Split dropend
button
button
type
button
class
btn btn-secondary dropdown-toggle dropdown-toggle-split
data-bs-toggle
dropdown
aria-expanded
false
span
class
visually-hidden
Toggle Dropend
span
button
class
dropdown-menu
<!-- Dropdown menu links -->
Dropstart
Trigger dropdown menus at the left of the elements by adding
.dropstart
to the parent element.
Dropstart
Action
Another action
Something else here
Separated link
Toggle Dropstart
Action
Another action
Something else here
Separated link
Split dropstart
<!-- Default dropstart button -->
class
btn-group dropstart
button
type
button
class
btn btn-secondary dropdown-toggle
data-bs-toggle
dropdown
aria-expanded
false
Dropstart
button
class
dropdown-menu
<!-- Dropdown menu links -->
<!-- Split dropstart button -->
class
btn-group dropstart
button
type
button
class
btn btn-secondary dropdown-toggle dropdown-toggle-split
data-bs-toggle
dropdown
aria-expanded
false
span
class
visually-hidden
Toggle Dropstart
span
button
class
dropdown-menu
<!-- Dropdown menu links -->
button
type
button
class
btn btn-secondary
Split dropstart
button
Menu items
You can use
<button>
elements as dropdown items.
Dropdown
Action
Another action
Something else here
html
class
dropdown
button
class
btn btn-secondary dropdown-toggle
type
button
data-bs-toggle
dropdown
aria-expanded
false
Dropdown
button
class
dropdown-menu
button
class
dropdown-item
type
button
Action
button
button
class
dropdown-item
type
button
Another action
button
button
class
dropdown-item
type
button
Something else here
button
You can also create non-interactive dropdown items with
.dropdown-item-text
. Feel free to style further with custom CSS or text utilities.
Dropdown item text
Action
Another action
Something else here
html
class
dropdown-menu
span
class
dropdown-item-text
Dropdown item text
span
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
Active
.active
to items in the dropdown to
style them as active
. To convey the active state to assistive technologies, use the
aria-current
attribute — using the
page
value for the current page, or
true
for the current item in a set.
Regular link
Active link
Another link
html
class
dropdown-menu
class
dropdown-item
href
Regular link
class
dropdown-item active
href
aria-current
true
Active link
class
dropdown-item
href
Another link
Disabled
.disabled
to items in the dropdown to
style them as disabled
Regular link
Disabled link
Another link
html
class
dropdown-menu
class
dropdown-item
href
Regular link
class
dropdown-item disabled
aria-disabled
true
Disabled link
class
dropdown-item
href
Another link
Menu alignment
By default, a dropdown menu is automatically positioned 100% from the top and along the left side of its parent. You can change this with the directional
.drop*
classes, but you can also control them with additional modifier classes.
.dropdown-menu-end
to a
.dropdown-menu
to right align the dropdown menu. Directions are mirrored when using Bootstrap in RTL, meaning
.dropdown-menu-end
will appear on the left side.
Heads up!
Dropdowns are positioned thanks to Popper except when they are contained in a navbar.
Right-aligned menu example
Action
Another action
Something else here
html
class
btn-group
button
type
button
class
btn btn-secondary dropdown-toggle
data-bs-toggle
dropdown
aria-expanded
false
Right-aligned menu example
button
class
dropdown-menu dropdown-menu-end
button
class
dropdown-item
type
button
Action
button
button
class
dropdown-item
type
button
Another action
button
button
class
dropdown-item
type
button
Something else here
button
Responsive alignment
If you want to use responsive alignment, disable dynamic positioning by adding the
data-bs-display="static"
attribute and use the responsive variation classes.
To align
right
the dropdown menu with the given breakpoint or larger, add
.dropdown-menu{-sm|-md|-lg|-xl|-xxl}-end
Left-aligned but right aligned when large screen
Action
Another action
Something else here
html
class
btn-group
button
type
button
class
btn btn-secondary dropdown-toggle
data-bs-toggle
dropdown
data-bs-display
static
aria-expanded
false
Left-aligned but right aligned when large screen
button
class
dropdown-menu dropdown-menu-lg-end
button
class
dropdown-item
type
button
Action
button
button
class
dropdown-item
type
button
Another action
button
button
class
dropdown-item
type
button
Something else here
button
To align
left
the dropdown menu with the given breakpoint or larger, add
.dropdown-menu-end
.dropdown-menu{-sm|-md|-lg|-xl|-xxl}-start
Right-aligned but left aligned when large screen
Action
Another action
Something else here
html
class
btn-group
button
type
button
class
btn btn-secondary dropdown-toggle
data-bs-toggle
dropdown
data-bs-display
static
aria-expanded
false
Right-aligned but left aligned when large screen
button
class
dropdown-menu dropdown-menu-end dropdown-menu-lg-start
button
class
dropdown-item
type
button
Action
button
button
class
dropdown-item
type
button
Another action
button
button
class
dropdown-item
type
button
Something else here
button
Note that you don’t need to add a
data-bs-display="static"
attribute to dropdown buttons in navbars, since Popper isn’t used in navbars.
Alignment options
Taking most of the options shown above, here’s a small kitchen sink demo of various dropdown alignment options in one place.
Dropdown
Menu item
Menu item
Menu item
Right-aligned menu
Menu item
Menu item
Menu item
Left-aligned, right-aligned lg
Menu item
Menu item
Menu item
Right-aligned, left-aligned lg
Menu item
Menu item
Menu item
Dropstart
Menu item
Menu item
Menu item
Dropend
Menu item
Menu item
Menu item
Dropup
Menu item
Menu item
Menu item
html
class
btn-group
button
class
btn btn-secondary dropdown-toggle
type
button
data-bs-toggle
dropdown
aria-expanded
false
Dropdown
button
class
dropdown-menu
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
btn-group
button
type
button
class
btn btn-secondary dropdown-toggle
data-bs-toggle
dropdown
aria-expanded
false
Right-aligned menu
button
class
dropdown-menu dropdown-menu-end
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
btn-group
button
type
button
class
btn btn-secondary dropdown-toggle
data-bs-toggle
dropdown
data-bs-display
static
aria-expanded
false
Left-aligned, right-aligned lg
button
class
dropdown-menu dropdown-menu-lg-end
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
btn-group
button
type
button
class
btn btn-secondary dropdown-toggle
data-bs-toggle
dropdown
data-bs-display
static
aria-expanded
false
Right-aligned, left-aligned lg
button
class
dropdown-menu dropdown-menu-end dropdown-menu-lg-start
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
btn-group dropstart
button
type
button
class
btn btn-secondary dropdown-toggle
data-bs-toggle
dropdown
aria-expanded
false
Dropstart
button
class
dropdown-menu
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
btn-group dropend
button
type
button
class
btn btn-secondary dropdown-toggle
data-bs-toggle
dropdown
aria-expanded
false
Dropend
button
class
dropdown-menu
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
btn-group dropup
button
type
button
class
btn btn-secondary dropdown-toggle
data-bs-toggle
dropdown
aria-expanded
false
Dropup
button
class
dropdown-menu
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
Menu content
Headers
Add a header to label sections of actions in any dropdown menu.
Dropdown header
Action
Another action
html
class
dropdown-menu
class
dropdown-header
Dropdown header
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
Dividers
Separate groups of related menu items with a divider.
Action
Another action
Something else here
Separated link
html
class
dropdown-menu
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
class
dropdown-divider
class
dropdown-item
href
Separated link
Text
Place any freeform text within a dropdown menu with text and use
spacing utilities
. Note that you’ll likely need additional sizing styles to constrain the menu width.
Some example text that’s free-flowing within the dropdown menu.
And this is more example text.
html
class
dropdown-menu p-4 text-body-secondary
style
max-width
200px
Some example text that’s free-flowing within the dropdown menu.
class
mb-0
And this is more example text.
Forms
Put a form within a dropdown menu, or make it into a dropdown menu, and use
margin or padding utilities
to give it the negative space you require.
Email address
Password
Remember me
Sign in
New around here? Sign up
Forgot password?
html
class
dropdown-menu
form
class
px-4 py-3
class
mb-3
label
exampleDropdownFormEmail1
class
form-label
Email address
label
input
type
email
class
form-control
exampleDropdownFormEmail1
placeholder
email@example.com
class
mb-3
label
exampleDropdownFormPassword1
class
form-label
Password
label
input
type
password
class
form-control
exampleDropdownFormPassword1
placeholder
Password
class
mb-3
class
form-check
input
type
checkbox
class
form-check-input
dropdownCheck
label
class
form-check-label
dropdownCheck
Remember me
label
button
type
submit
class
btn btn-primary
Sign in
button
form
class
dropdown-divider
class
dropdown-item
href
New around here? Sign up
class
dropdown-item
href
Forgot password?
Dropdown form
Email address
Password
Remember me
Sign in
html
class
dropdown
button
type
button
class
btn btn-primary dropdown-toggle
data-bs-toggle
dropdown
aria-expanded
false
data-bs-auto-close
outside
Dropdown form
button
form
class
dropdown-menu p-4
class
mb-3
label
exampleDropdownFormEmail2
class
form-label
Email address
label
input
type
email
class
form-control
exampleDropdownFormEmail2
placeholder
email@example.com
class
mb-3
label
exampleDropdownFormPassword2
class
form-label
Password
label
input
type
password
class
form-control
exampleDropdownFormPassword2
placeholder
Password
class
mb-3
class
form-check
input
type
checkbox
class
form-check-input
dropdownCheck2
label
class
form-check-label
dropdownCheck2
Remember me
label
button
type
submit
class
btn btn-primary
Sign in
button
form
Dropdown options
data-bs-offset
data-bs-reference
to change the location of the dropdown.
Offset
Action
Another action
Something else here
Reference
Toggle Dropdown
Action
Another action
Something else here
Separated link
html
class
d-flex
class
dropdown me-1
button
type
button
class
btn btn-secondary dropdown-toggle
data-bs-toggle
dropdown
aria-expanded
false
data-bs-offset
10,20
Offset
button
class
dropdown-menu
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
class
btn-group
button
type
button
class
btn btn-secondary
Reference
button
button
type
button
class
btn btn-secondary dropdown-toggle dropdown-toggle-split
data-bs-toggle
dropdown
aria-expanded
false
data-bs-reference
parent
span
class
visually-hidden
Toggle Dropdown
span
button
class
dropdown-menu
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
class
dropdown-divider
class
dropdown-item
href
Separated link
Auto close behavior
By default, the dropdown menu is closed when clicking inside or outside the dropdown menu. You can use the
autoClose
option to change this behavior of the dropdown.
Default dropdown
Menu item
Menu item
Menu item
Clickable inside
Menu item
Menu item
Menu item
Clickable outside
Menu item
Menu item
Menu item
Manual close
Menu item
Menu item
Menu item
html
class
btn-group
button
class
btn btn-secondary dropdown-toggle
type
button
data-bs-toggle
dropdown
data-bs-auto-close
true
aria-expanded
false
Default dropdown
button
class
dropdown-menu
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
btn-group
button
class
btn btn-secondary dropdown-toggle
type
button
data-bs-toggle
dropdown
data-bs-auto-close
inside
aria-expanded
false
Clickable inside
button
class
dropdown-menu
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
btn-group
button
class
btn btn-secondary dropdown-toggle
type
button
data-bs-toggle
dropdown
data-bs-auto-close
outside
aria-expanded
false
Clickable outside
button
class
dropdown-menu
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
btn-group
button
class
btn btn-secondary dropdown-toggle
type
button
data-bs-toggle
dropdown
data-bs-auto-close
false
aria-expanded
false
Manual close
button
class
dropdown-menu
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
class
dropdown-item
href
Menu item
Variables
Added in v5.2.0
As part of Bootstrap’s evolving CSS variables approach, dropdowns now use local CSS variables on
.dropdown-menu
for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
scss/_dropdown.scss
#{$prefix}
dropdown-zindex
#{$zindex-dropdown}
#{$prefix}
dropdown-min-width
#{$dropdown-min-width}
#{$prefix}
dropdown-padding-x
#{$dropdown-padding-x}
#{$prefix}
dropdown-padding-y
#{$dropdown-padding-y}
#{$prefix}
dropdown-spacer
#{$dropdown-spacer}
@include
$dropdown-font-size
#{$prefix}
dropdown-font-size
#{$prefix}
dropdown-color
#{$dropdown-color}
#{$prefix}
dropdown-bg
#{$dropdown-bg}
#{$prefix}
dropdown-border-color
#{$dropdown-border-color}
#{$prefix}
dropdown-border-radius
#{$dropdown-border-radius}
#{$prefix}
dropdown-border-width
#{$dropdown-border-width}
#{$prefix}
dropdown-inner-border-radius
#{$dropdown-inner-border-radius}
#{$prefix}
dropdown-divider-bg
#{$dropdown-divider-bg}
#{$prefix}
dropdown-divider-margin-y
#{$dropdown-divider-margin-y}
#{$prefix}
dropdown-box-shadow
#{$dropdown-box-shadow}
#{$prefix}
dropdown-link-color
#{$dropdown-link-color}
#{$prefix}
dropdown-link-hover-color
#{$dropdown-link-hover-color}
#{$prefix}
dropdown-link-hover-bg
#{$dropdown-link-hover-bg}
#{$prefix}
dropdown-link-active-color
#{$dropdown-link-active-color}
#{$prefix}
dropdown-link-active-bg
#{$dropdown-link-active-bg}
#{$prefix}
dropdown-link-disabled-color
#{$dropdown-link-disabled-color}
#{$prefix}
dropdown-item-padding-x
#{$dropdown-item-padding-x}
#{$prefix}
dropdown-item-padding-y
#{$dropdown-item-padding-y}
#{$prefix}
dropdown-header-color
#{$dropdown-header-color}
#{$prefix}
dropdown-header-padding-x
#{$dropdown-header-padding-x}
#{$prefix}
dropdown-header-padding-y
#{$dropdown-header-padding-y}
Dropdown items include at least one variable that is not set on
.dropdown
. This allows you to provide a new value while Bootstrap defaults to a fallback value.
--bs-dropdown-item-border-radius
Customization through CSS variables can be seen on the
.dropdown-menu-dark
class where we override specific values without adding duplicate CSS selectors.
scss/_dropdown.scss
#{$prefix}
dropdown-color
#{$dropdown-dark-color}
#{$prefix}
dropdown-bg
#{$dropdown-dark-bg}
#{$prefix}
dropdown-border-color
#{$dropdown-dark-border-color}
#{$prefix}
dropdown-box-shadow
#{$dropdown-dark-box-shadow}
#{$prefix}
dropdown-link-color
#{$dropdown-dark-link-color}
#{$prefix}
dropdown-link-hover-color
#{$dropdown-dark-link-hover-color}
#{$prefix}
dropdown-divider-bg
#{$dropdown-dark-divider-bg}
#{$prefix}
dropdown-link-hover-bg
#{$dropdown-dark-link-hover-bg}
#{$prefix}
dropdown-link-active-color
#{$dropdown-dark-link-active-color}
#{$prefix}
dropdown-link-active-bg
#{$dropdown-dark-link-active-bg}
#{$prefix}
dropdown-link-disabled-color
#{$dropdown-dark-link-disabled-color}
#{$prefix}
dropdown-header-color
#{$dropdown-dark-header-color}
Sass variables
Variables for all dropdowns:
scss/_variables.scss
$dropdown-min-width
10rem
$dropdown-padding-x
$dropdown-padding-y
.5rem
$dropdown-spacer
.125rem
$dropdown-font-size
$font-size-base
$dropdown-color
#{$prefix}
body-color
$dropdown-bg
#{$prefix}
body-bg
$dropdown-border-color
#{$prefix}
border-color-translucent
$dropdown-border-radius
#{$prefix}
border-radius
$dropdown-border-width
#{$prefix}
border-width
$dropdown-inner-border-radius
calc
#{$dropdown-border-radius}
#{$dropdown-border-width}
// stylelint-disable-line function-disallowed-list
$dropdown-divider-bg
$dropdown-border-color
$dropdown-divider-margin-y
$spacer
$dropdown-box-shadow
#{$prefix}
box-shadow
$dropdown-link-color
#{$prefix}
body-color
$dropdown-link-hover-color
$dropdown-link-color
$dropdown-link-hover-bg
#{$prefix}
tertiary-bg
$dropdown-link-active-color
$component-active-color
$dropdown-link-active-bg
$component-active-bg
$dropdown-link-disabled-color
#{$prefix}
tertiary-color
$dropdown-item-padding-y
$spacer
$dropdown-item-padding-x
$spacer
$dropdown-header-color
$gray-600
$dropdown-header-padding-x
$dropdown-item-padding-x
$dropdown-header-padding-y
$dropdown-padding-y
// fusv-disable
$dropdown-header-padding
$dropdown-header-padding-y
$dropdown-header-padding-x
// Deprecated in v5.2.0
// fusv-enable
Variables for the
dark dropdown
scss/_variables.scss
$dropdown-dark-color
$gray-300
$dropdown-dark-bg
$gray-800
$dropdown-dark-border-color
$dropdown-border-color
$dropdown-dark-divider-bg
$dropdown-divider-bg
$dropdown-dark-box-shadow
null
$dropdown-dark-link-color
$dropdown-dark-color
$dropdown-dark-link-hover-color
$white
$dropdown-dark-link-hover-bg
rgba
$white
$dropdown-dark-link-active-color
$dropdown-link-active-color
$dropdown-dark-link-active-bg
$dropdown-link-active-bg
$dropdown-dark-link-disabled-color
$gray-500
$dropdown-dark-header-color
$gray-500
Variables for the CSS-based carets that indicate a dropdown’s interactivity:
scss/_variables.scss
$caret-width
.3em
$caret-vertical-align
$caret-width
$caret-spacing
$caret-width
Sass mixins
Mixins are used to generate the CSS-based carets and can be found in
scss/mixins/_caret.scss
scss/mixins/_caret.scss
@mixin
caret-down
$width
$caret-width
border-top
$width
solid
border-right
$width
solid transparent
border-bottom
border-left
$width
solid transparent
@mixin
caret-up
$width
$caret-width
border-top
border-right
$width
solid transparent
border-bottom
$width
solid
border-left
$width
solid transparent
@mixin
caret-end
$width
$caret-width
border-top
$width
solid transparent
border-right
border-bottom
$width
solid transparent
border-left
$width
solid
@mixin
caret-start
$width
$caret-width
border-top
$width
solid transparent
border-right
$width
solid
border-bottom
$width
solid transparent
@mixin
caret
$direction
down
$width
$caret-width
$spacing
$caret-spacing
$vertical-align
$caret-vertical-align
$enable-caret
::after
display
inline-block
margin-left
$spacing
vertical-align
$vertical-align
content
$direction
== down
@include
caret-down
$width
@else if
$direction
== up
@include
caret-up
$width
@else if
$direction
== end
@include
caret-end
$width
$direction
== start
::after
display
none
::before
display
inline-block
margin-right
$spacing
vertical-align
$vertical-align
content
@include
caret-start
$width
:empty::after
margin-left
Usage
Via data attributes or JavaScript, the dropdown plugin toggles hidden content (dropdown menus) by toggling the
.show
class on the parent
.dropdown-menu
. The
data-bs-toggle="dropdown"
attribute is relied on for closing dropdown menus at an application level, so it’s a good idea to always use it.
On touch-enabled devices, opening a dropdown adds empty
mouseover
handlers to the immediate children of the
<body>
element. This admittedly ugly hack is necessary to work around a
quirk in iOs’ event delegation
, which would otherwise prevent a tap anywhere outside of the dropdown from triggering the code that closes the dropdown. Once the dropdown is closed, these additional empty
mouseover
handlers are removed.
Via data attributes
data-bs-toggle="dropdown"
to a link or button to toggle a dropdown.
class
dropdown
button
type
button
data-bs-toggle
dropdown
aria-expanded
false
Dropdown trigger
button
class
dropdown-menu
Via JavaScript
Dropdowns must have
data-bs-toggle="dropdown"
on their trigger element, regardless of whether you call your dropdown via JavaScript or use the data-api.
Call the dropdowns via JavaScript:
const
dropdownElementList
document
querySelectorAll
'.dropdown-toggle'
const
dropdownList
dropdownElementList
dropdownToggleEl
Dropdown
dropdownToggleEl
Options
As options can be passed via data attributes or JavaScript, you can append an option name to
data-bs-
, as in
data-bs-animation="{value}"
. Make sure to change the case type of the option name from “
camelCase
” to “
kebab-case
” when passing the options via data attributes. For example, use
data-bs-custom-class="beautifier"
instead of
data-bs-customClass="beautifier"
As of Bootstrap 5.2.0, all components support an
experimental
reserved data attribute
data-bs-config
that can house simple component configuration as a JSON string. When an element has
data-bs-config='{"delay":0, "title":123}'
data-bs-title="456"
attributes, the final
title
value will be
and the separate data attributes will override values given on
data-bs-config
. In addition, existing data attributes are able to house JSON values like
data-bs-delay='{"show":0,"hide":150}'
The final configuration object is the merged result of
data-bs-config
data-bs-
, and
js object
where the latest given key-value overrides the others.
Name
Type
Default
Description
autoClose
boolean, string
true
Configure the auto close behavior of the dropdown:
true
- the dropdown will be closed by clicking outside or inside the dropdown menu.
false
- the dropdown will be closed by clicking the toggle button and manually calling
hide
toggle
method. (Also will not be closed by pressing
key)
'inside'
- the dropdown will be closed (only) by clicking inside the dropdown menu.
'outside'
- the dropdown will be closed (only) by clicking outside the dropdown menu.
Note: the dropdown can always be closed with the
key.
boundary
string, element
'clippingParents'
Overflow constraint boundary of the dropdown menu (applies only to Popper’s preventOverflow modifier). By default it’s
clippingParents
and can accept an HTMLElement reference (via JavaScript only). For more information refer to Popper’s
detectOverflow docs
display
string
'dynamic'
By default, we use Popper for dynamic positioning. Disable this with
static
offset
array, string, function
[0, 2]
Offset of the dropdown relative to its target. You can pass a string in data attributes with comma separated values like:
data-bs-offset="10,20"
. When a function is used to determine the offset, it is called with an object containing the popper placement, the reference, and popper rects as its first argument. The triggering element DOM node is passed as the second argument. The function must return an array with two numbers:
skidding
distance
. For more information refer to Popper’s
offset docs
popperConfig
null, object, function
null
To change Bootstrap’s default Popper config, see
Popper’s configuration
. When a function is used to create the Popper configuration, it’s called with an object that contains the Bootstrap’s default Popper configuration. It helps you use and merge the default with your own configuration. The function must return a configuration object for Popper.
reference
string, element, object
'toggle'
Reference element of the dropdown menu. Accepts the values of
'toggle'
'parent'
, an HTMLElement reference or an object providing
getBoundingClientRect
. For more information refer to Popper’s
constructor docs
virtual element docs
Using function with
popperConfig
const
dropdown
Dropdown
element
popperConfig
defaultBsPopperConfig
// const newPopperConfig = {...}
// use defaultBsPopperConfig if needed...
// return newPopperConfig
Methods
Method
Description
dispose
Destroys an element’s dropdown. (Removes stored data on the DOM element)
getInstance
Static method which allows you to get the dropdown instance associated to a DOM element, you can use it like this:
getOrCreateInstance
Static method which returns a dropdown instance associated to a DOM element or create a new one in case it wasn’t initialized. You can use it like this:
hide
Hides the dropdown menu of a given navbar or tabbed navigation.
show
Shows the dropdown menu of a given navbar or tabbed navigation.
toggle
Toggles the dropdown menu of a given navbar or tabbed navigation.
update
Updates the position of an element’s dropdown.
Events
All dropdown events are fired at the toggling element and then bubbled up. So you can also add event listeners on the
.dropdown-menu
’s parent element.
hide.bs.dropdown
hidden.bs.dropdown
events have a
clickEvent
property (only when the original Event type is
click
) that contains an Event Object for the click event.
Event type
Description
hide.bs.dropdown
Fires immediately when the
hide
instance method has been called.
hidden.bs.dropdown
Fired when the dropdown has finished being hidden from the user and CSS transitions have completed.
show.bs.dropdown
Fires immediately when the
show
instance method is called.
shown.bs.dropdown
Fired when the dropdown has been made visible to the user and CSS transitions have completed.
const
myDropdown
document
getElementById
'myDropdown'
myDropdown
addEventListener
'show.bs.dropdown'
event
// do something...

--- 037_content_images.txt ---
Responsive images
Images in Bootstrap are made responsive with
.img-fluid
. This applies
max-width: 100%;
height: auto;
to the image so that it scales with the parent width.
Placeholder
Responsive image
html
class
img-fluid
Image thumbnails
In addition to our
border-radius utilities
, you can use
.img-thumbnail
to give an image a rounded 1px border appearance.
A generic square placeholder image with a white border around it, making it resemble a photograph taken with an old instant camera
200x200
html
class
img-thumbnail
Aligning images
Align images with the
helper float classes
text alignment classes
block
-level images can be centered using
.mx-auto
margin utility class
Placeholder
200x200
Placeholder
200x200
html
class
rounded float-start
class
rounded float-end
Placeholder
200x200
html
class
rounded mx-auto d-block
Placeholder
200x200
html
class
text-center
class
rounded
Picture
If you are using the
<picture>
element to specify multiple
<source>
elements for a specific
<img>
, make sure to add the
.img-*
classes to the
<img>
and not to the
<picture>
tag.
picture
source
srcset
type
image/svg+xml
class
img-fluid img-thumbnail
picture
Sass variables
Variables are available for image thumbnails.
scss/_variables.scss
$thumbnail-padding
.25rem
$thumbnail-bg
#{$prefix}
body-bg
$thumbnail-border-width
#{$prefix}
border-width
$thumbnail-border-color
#{$prefix}
border-color
$thumbnail-border-radius
#{$prefix}
border-radius
$thumbnail-box-shadow
#{$prefix}
box-shadow-sm

--- 106_about_translations.txt ---
Community members have translated Bootstrap’s documentation into various languages. None are officially supported and they may not always be up-to-date.
We don’t help organize or host translations, we just link to them.
Finished a new or better translation? Open a pull request to add it to our list.

--- 135_components_accordion.txt ---
How it works
The accordion uses
collapse
internally to make it collapsible.
The animation effect of this component is dependent on the
prefers-reduced-motion
media query. See the
reduced motion section of our accessibility documentation
Example
Click the accordions below to expand/collapse the accordion content.
To render an accordion that’s expanded by default:
add the
.show
class on the
.accordion-collapse
element.
drop the
.collapsed
class from the
.accordion-button
element and set its
aria-expanded
attribute to
true
Accordion Item #1
This is the first item’s accordion body.
It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It’s also worth noting that just about any HTML can go within the
.accordion-body
, though the transition does limit overflow.
Accordion Item #2
This is the second item’s accordion body.
It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It’s also worth noting that just about any HTML can go within the
.accordion-body
, though the transition does limit overflow.
Accordion Item #3
This is the third item’s accordion body.
It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It’s also worth noting that just about any HTML can go within the
.accordion-body
, though the transition does limit overflow.
html
class
accordion
accordionExample
class
accordion-item
class
accordion-header
button
class
accordion-button
type
button
data-bs-toggle
collapse
data-bs-target
#collapseOne
aria-expanded
true
aria-controls
collapseOne
Accordion Item #1
button
collapseOne
class
accordion-collapse collapse show
data-bs-parent
#accordionExample
class
accordion-body
strong
This is the first item’s accordion body.
strong
It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It’s also worth noting that just about any HTML can go within the
code
.accordion-body
code
, though the transition does limit overflow.
class
accordion-item
class
accordion-header
button
class
accordion-button collapsed
type
button
data-bs-toggle
collapse
data-bs-target
#collapseTwo
aria-expanded
false
aria-controls
collapseTwo
Accordion Item #2
button
collapseTwo
class
accordion-collapse collapse
data-bs-parent
#accordionExample
class
accordion-body
strong
This is the second item’s accordion body.
strong
It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It’s also worth noting that just about any HTML can go within the
code
.accordion-body
code
, though the transition does limit overflow.
class
accordion-item
class
accordion-header
button
class
accordion-button collapsed
type
button
data-bs-toggle
collapse
data-bs-target
#collapseThree
aria-expanded
false
aria-controls
collapseThree
Accordion Item #3
button
collapseThree
class
accordion-collapse collapse
data-bs-parent
#accordionExample
class
accordion-body
strong
This is the third item’s accordion body.
strong
It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It’s also worth noting that just about any HTML can go within the
code
.accordion-body
code
, though the transition does limit overflow.
Flush
.accordion-flush
to remove some borders and rounded corners to render accordions edge-to-edge with their parent container.
Accordion Item #1
Placeholder content for this accordion, which is intended to demonstrate the
.accordion-flush
class. This is the first item’s accordion body.
Accordion Item #2
Placeholder content for this accordion, which is intended to demonstrate the
.accordion-flush
class. This is the second item’s accordion body. Let’s imagine this being filled with some actual content.
Accordion Item #3
Placeholder content for this accordion, which is intended to demonstrate the
.accordion-flush
class. This is the third item’s accordion body. Nothing more exciting happening here in terms of content, but just filling up the space to make it look, at least at first glance, a bit more representative of how this would look in a real-world application.
html
class
accordion accordion-flush
accordionFlushExample
class
accordion-item
class
accordion-header
button
class
accordion-button collapsed
type
button
data-bs-toggle
collapse
data-bs-target
#flush-collapseOne
aria-expanded
false
aria-controls
flush-collapseOne
Accordion Item #1
button
flush-collapseOne
class
accordion-collapse collapse
data-bs-parent
#accordionFlushExample
class
accordion-body
Placeholder content for this accordion, which is intended to demonstrate the
code
.accordion-flush
code
class. This is the first item’s accordion body.
class
accordion-item
class
accordion-header
button
class
accordion-button collapsed
type
button
data-bs-toggle
collapse
data-bs-target
#flush-collapseTwo
aria-expanded
false
aria-controls
flush-collapseTwo
Accordion Item #2
button
flush-collapseTwo
class
accordion-collapse collapse
data-bs-parent
#accordionFlushExample
class
accordion-body
Placeholder content for this accordion, which is intended to demonstrate the
code
.accordion-flush
code
class. This is the second item’s accordion body. Let’s imagine this being filled with some actual content.
class
accordion-item
class
accordion-header
button
class
accordion-button collapsed
type
button
data-bs-toggle
collapse
data-bs-target
#flush-collapseThree
aria-expanded
false
aria-controls
flush-collapseThree
Accordion Item #3
button
flush-collapseThree
class
accordion-collapse collapse
data-bs-parent
#accordionFlushExample
class
accordion-body
Placeholder content for this accordion, which is intended to demonstrate the
code
.accordion-flush
code
class. This is the third item’s accordion body. Nothing more exciting happening here in terms of content, but just filling up the space to make it look, at least at first glance, a bit more representative of how this would look in a real-world application.
Always open
Omit the
data-bs-parent
attribute on each
.accordion-collapse
to make accordion items stay open when another item is opened.
Accordion Item #1
This is the first item’s accordion body.
It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It’s also worth noting that just about any HTML can go within the
.accordion-body
, though the transition does limit overflow.
Accordion Item #2
This is the second item’s accordion body.
It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It’s also worth noting that just about any HTML can go within the
.accordion-body
, though the transition does limit overflow.
Accordion Item #3
This is the third item’s accordion body.
It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It’s also worth noting that just about any HTML can go within the
.accordion-body
, though the transition does limit overflow.
html
class
accordion
accordionPanelsStayOpenExample
class
accordion-item
class
accordion-header
button
class
accordion-button
type
button
data-bs-toggle
collapse
data-bs-target
#panelsStayOpen-collapseOne
aria-expanded
true
aria-controls
panelsStayOpen-collapseOne
Accordion Item #1
button
panelsStayOpen-collapseOne
class
accordion-collapse collapse show
class
accordion-body
strong
This is the first item’s accordion body.
strong
It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It’s also worth noting that just about any HTML can go within the
code
.accordion-body
code
, though the transition does limit overflow.
class
accordion-item
class
accordion-header
button
class
accordion-button collapsed
type
button
data-bs-toggle
collapse
data-bs-target
#panelsStayOpen-collapseTwo
aria-expanded
false
aria-controls
panelsStayOpen-collapseTwo
Accordion Item #2
button
panelsStayOpen-collapseTwo
class
accordion-collapse collapse
class
accordion-body
strong
This is the second item’s accordion body.
strong
It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It’s also worth noting that just about any HTML can go within the
code
.accordion-body
code
, though the transition does limit overflow.
class
accordion-item
class
accordion-header
button
class
accordion-button collapsed
type
button
data-bs-toggle
collapse
data-bs-target
#panelsStayOpen-collapseThree
aria-expanded
false
aria-controls
panelsStayOpen-collapseThree
Accordion Item #3
button
panelsStayOpen-collapseThree
class
accordion-collapse collapse
class
accordion-body
strong
This is the third item’s accordion body.
strong
It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It’s also worth noting that just about any HTML can go within the
code
.accordion-body
code
, though the transition does limit overflow.
Accessibility
Please read the
collapse accessibility section
for more information.
Variables
Added in v5.2.0
As part of Bootstrap’s evolving CSS variables approach, accordions now use local CSS variables on
.accordion
for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
scss/_accordion.scss
#{$prefix}
accordion-color
#{$accordion-color}
#{$prefix}
accordion-bg
#{$accordion-bg}
#{$prefix}
accordion-transition
#{$accordion-transition}
#{$prefix}
accordion-border-color
#{$accordion-border-color}
#{$prefix}
accordion-border-width
#{$accordion-border-width}
#{$prefix}
accordion-border-radius
#{$accordion-border-radius}
#{$prefix}
accordion-inner-border-radius
#{$accordion-inner-border-radius}
#{$prefix}
accordion-btn-padding-x
#{$accordion-button-padding-x}
#{$prefix}
accordion-btn-padding-y
#{$accordion-button-padding-y}
#{$prefix}
accordion-btn-color
#{$accordion-button-color}
#{$prefix}
accordion-btn-bg
#{$accordion-button-bg}
#{$prefix}
accordion-btn-icon
escape-svg
$accordion-button-icon
#{$prefix}
accordion-btn-icon-width
#{$accordion-icon-width}
#{$prefix}
accordion-btn-icon-transform
#{$accordion-icon-transform}
#{$prefix}
accordion-btn-icon-transition
#{$accordion-icon-transition}
#{$prefix}
accordion-btn-active-icon
escape-svg
$accordion-button-active-icon
#{$prefix}
accordion-btn-focus-box-shadow
#{$accordion-button-focus-box-shadow}
#{$prefix}
accordion-body-padding-x
#{$accordion-body-padding-x}
#{$prefix}
accordion-body-padding-y
#{$accordion-body-padding-y}
#{$prefix}
accordion-active-color
#{$accordion-button-active-color}
#{$prefix}
accordion-active-bg
#{$accordion-button-active-bg}
Sass variables
scss/_variables.scss
$accordion-padding-y
1rem
$accordion-padding-x
1.25rem
$accordion-color
#{$prefix}
body-color
$accordion-bg
#{$prefix}
body-bg
$accordion-border-width
#{$prefix}
border-width
$accordion-border-color
#{$prefix}
border-color
$accordion-border-radius
#{$prefix}
border-radius
$accordion-inner-border-radius
subtract
$accordion-border-radius
$accordion-border-width
$accordion-body-padding-y
$accordion-padding-y
$accordion-body-padding-x
$accordion-padding-x
$accordion-button-padding-y
$accordion-padding-y
$accordion-button-padding-x
$accordion-padding-x
$accordion-button-color
#{$prefix}
body-color
$accordion-button-bg
#{$prefix}
accordion-bg
$accordion-transition
$btn-transition
border-radius .15s ease
$accordion-button-active-bg
#{$prefix}
primary-bg-subtle
$accordion-button-active-color
#{$prefix}
primary-text-emphasis
// fusv-disable
$accordion-button-focus-border-color
$input-focus-border-color
// Deprecated in v5.3.3
// fusv-enable
$accordion-button-focus-box-shadow
$btn-focus-box-shadow
$accordion-icon-width
1.25rem
$accordion-icon-color
$body-color
$accordion-icon-active-color
$primary-text-emphasis
$accordion-icon-transition
transform .2s ease-in-out
$accordion-icon-transform
rotate
-180deg
$accordion-button-icon
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='none' stroke='#{$accordion-icon-color}' stroke-linecap='round' stroke-linejoin='round'><path d='m2 5 6 6 6-6'/></svg>"
$accordion-button-active-icon
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='none' stroke='#{$accordion-icon-active-color}' stroke-linecap='round' stroke-linejoin='round'><path d='m2 5 6 6 6-6'/></svg>"
Usage
The collapse plugin utilizes a few classes to handle the heavy lifting:
.collapse
hides the content
.collapse.show
shows the content
.collapsing
is added when the transition starts, and removed when it finishes
These classes can be found in
_transitions.scss
Via data attributes
Just add
data-bs-toggle="collapse"
and a
data-bs-target
to the element to automatically assign control of one or more collapsible elements. The
data-bs-target
attribute accepts a CSS selector to apply the collapse to. Be sure to add the class
collapse
to the collapsible element. If you’d like it to default open, add the additional class
show
To add accordion group management to a collapsible area, add the data attribute
data-bs-parent="#selector"
Via JavaScript
Enable manually with:
const
accordionCollapseElementList
document
querySelectorAll
'#myAccordion .collapse'
const
accordionCollapseList
accordionCollapseElementList
accordionCollapseEl
Collapse
accordionCollapseEl
Options
As options can be passed via data attributes or JavaScript, you can append an option name to
data-bs-
, as in
data-bs-animation="{value}"
. Make sure to change the case type of the option name from “
camelCase
” to “
kebab-case
” when passing the options via data attributes. For example, use
data-bs-custom-class="beautifier"
instead of
data-bs-customClass="beautifier"
As of Bootstrap 5.2.0, all components support an
experimental
reserved data attribute
data-bs-config
that can house simple component configuration as a JSON string. When an element has
data-bs-config='{"delay":0, "title":123}'
data-bs-title="456"
attributes, the final
title
value will be
and the separate data attributes will override values given on
data-bs-config
. In addition, existing data attributes are able to house JSON values like
data-bs-delay='{"show":0,"hide":150}'
The final configuration object is the merged result of
data-bs-config
data-bs-
, and
js object
where the latest given key-value overrides the others.
Name
Type
Default
Description
parent
selector, DOM element
null
If parent is provided, then all collapsible elements under the specified parent will be closed when this collapsible item is shown. (similar to traditional accordion behavior - this is dependent on the
card
class). The attribute has to be set on the target collapsible area.
toggle
boolean
true
Toggles the collapsible element on invocation.
Methods
All API methods are asynchronous and start a transition.
They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored.
Learn more in our JavaScript docs.
Activates your content as a collapsible element. Accepts an optional options
object
You can create a collapse instance with the constructor, for example:
const
bsCollapse
Collapse
'#myCollapse'
toggle
false
Method
Description
dispose
Destroys an element’s collapse. (Removes stored data on the DOM element)
getInstance
Static method which allows you to get the collapse instance associated to a DOM element, you can use it like this:
getOrCreateInstance
Static method which returns a collapse instance associated to a DOM element or create a new one in case it wasn’t initialized. You can use it like this:
hide
Hides a collapsible element.
Returns to the caller before the collapsible element has actually been hidden
(e.g., before the
hidden.bs.collapse
event occurs).
show
Shows a collapsible element.
Returns to the caller before the collapsible element has actually been shown
(e.g., before the
shown.bs.collapse
event occurs).
toggle
Toggles a collapsible element to shown or hidden.
Returns to the caller before the collapsible element has actually been shown or hidden
(i.e. before the
shown.bs.collapse
hidden.bs.collapse
event occurs).
Events
Event type
Description
hide.bs.collapse
This event is fired immediately when the
hide
method has been called.
hidden.bs.collapse
This event is fired when a collapse element has been hidden from the user (will wait for CSS transitions to complete).
show.bs.collapse
This event fires immediately when the
show
instance method is called.
shown.bs.collapse
This event is fired when a collapse element has been made visible to the user (will wait for CSS transitions to complete).
const
myCollapsible
document
getElementById
'myCollapsible'
myCollapsible
addEventListener
'hidden.bs.collapse'
event
// do something...

--- 070_components_offcanvas.txt ---
How it works
Offcanvas is a sidebar component that can be toggled via JavaScript to appear from the left, right, top, or bottom edge of the viewport. Buttons or anchors are used as triggers that are attached to specific elements you toggle, and
data
attributes are used to invoke our JavaScript.
Offcanvas shares some of the same JavaScript code as modals. Conceptually, they are quite similar, but they are separate plugins.
Similarly, some
source Sass
variables for offcanvas’s styles and dimensions are inherited from the modal’s variables.
When shown, offcanvas includes a default backdrop that can be clicked to hide the offcanvas.
Similar to modals, only one offcanvas can be shown at a time.
Heads up!
Given how CSS handles animations, you cannot use
margin
translate
on an
.offcanvas
element. Instead, use the class as an independent wrapping element.
The animation effect of this component is dependent on the
prefers-reduced-motion
media query. See the
reduced motion section of our accessibility documentation
Examples
Offcanvas components
Below is an offcanvas example that is shown by default (via
.show
.offcanvas
). Offcanvas includes support for a header with a close button and an optional body class for some initial
padding
. We suggest that you include offcanvas headers with dismiss actions whenever possible, or provide an explicit dismiss action.
Offcanvas
Content for the offcanvas goes here. You can place just about any Bootstrap component or custom elements here.
html
class
offcanvas offcanvas-start show
tabindex
offcanvas
aria-labelledby
offcanvasLabel
class
offcanvas-header
class
offcanvas-title
offcanvasLabel
Offcanvas
button
type
button
class
btn-close
data-bs-dismiss
offcanvas
aria-label
Close
button
class
offcanvas-body
Content for the offcanvas goes here. You can place just about any Bootstrap component or custom elements here.
Live demo
Use the buttons below to show and hide an offcanvas element via JavaScript that toggles the
.show
class on an element with the
.offcanvas
class.
.offcanvas
hides content (default)
.offcanvas.show
shows content
You can use a link with the
href
attribute, or a button with the
data-bs-target
attribute. In both cases, the
data-bs-toggle="offcanvas"
is required.
Link with href
Button with data-bs-target
Offcanvas
Some text as placeholder. In real life you can have the elements you have chosen. Like, text, images, lists, etc.
Dropdown button
Action
Another action
Something else here
html
class
btn btn-primary
data-bs-toggle
offcanvas
href
#offcanvasExample
role
button
aria-controls
offcanvasExample
Link with href
button
class
btn btn-primary
type
button
data-bs-toggle
offcanvas
data-bs-target
#offcanvasExample
aria-controls
offcanvasExample
Button with data-bs-target
button
class
offcanvas offcanvas-start
tabindex
offcanvasExample
aria-labelledby
offcanvasExampleLabel
class
offcanvas-header
class
offcanvas-title
offcanvasExampleLabel
Offcanvas
button
type
button
class
btn-close
data-bs-dismiss
offcanvas
aria-label
Close
button
class
offcanvas-body
Some text as placeholder. In real life you can have the elements you have chosen. Like, text, images, lists, etc.
class
dropdown mt-3
button
class
btn btn-secondary dropdown-toggle
type
button
data-bs-toggle
dropdown
Dropdown button
button
class
dropdown-menu
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
Body scrolling
Scrolling the
<body>
element is disabled when an offcanvas and its backdrop are visible. Use the
data-bs-scroll
attribute to enable
<body>
scrolling.
Enable body scrolling
Offcanvas with body scrolling
Try scrolling the rest of the page to see this option in action.
html
button
class
btn btn-primary
type
button
data-bs-toggle
offcanvas
data-bs-target
#offcanvasScrolling
aria-controls
offcanvasScrolling
Enable body scrolling
button
class
offcanvas offcanvas-start
data-bs-scroll
true
data-bs-backdrop
false
tabindex
offcanvasScrolling
aria-labelledby
offcanvasScrollingLabel
class
offcanvas-header
class
offcanvas-title
offcanvasScrollingLabel
Offcanvas with body scrolling
button
type
button
class
btn-close
data-bs-dismiss
offcanvas
aria-label
Close
button
class
offcanvas-body
Try scrolling the rest of the page to see this option in action.
Body scrolling and backdrop
You can also enable
<body>
scrolling with a visible backdrop.
Enable both scrolling & backdrop
Backdrop with scrolling
Try scrolling the rest of the page to see this option in action.
html
button
class
btn btn-primary
type
button
data-bs-toggle
offcanvas
data-bs-target
#offcanvasWithBothOptions
aria-controls
offcanvasWithBothOptions
Enable both scrolling & backdrop
button
class
offcanvas offcanvas-start
data-bs-scroll
true
tabindex
offcanvasWithBothOptions
aria-labelledby
offcanvasWithBothOptionsLabel
class
offcanvas-header
class
offcanvas-title
offcanvasWithBothOptionsLabel
Backdrop with scrolling
button
type
button
class
btn-close
data-bs-dismiss
offcanvas
aria-label
Close
button
class
offcanvas-body
Try scrolling the rest of the page to see this option in action.
Static backdrop
When backdrop is set to static, the offcanvas will not close when clicking outside of it.
Toggle static offcanvas
Offcanvas
I will not close if you click outside of me.
html
button
class
btn btn-primary
type
button
data-bs-toggle
offcanvas
data-bs-target
#staticBackdrop
aria-controls
staticBackdrop
Toggle static offcanvas
button
class
offcanvas offcanvas-start
data-bs-backdrop
static
tabindex
staticBackdrop
aria-labelledby
staticBackdropLabel
class
offcanvas-header
class
offcanvas-title
staticBackdropLabel
Offcanvas
button
type
button
class
btn-close
data-bs-dismiss
offcanvas
aria-label
Close
button
class
offcanvas-body
I will not close if you click outside of me.
Dark offcanvas
Deprecated in v5.3.0
Added in v5.2.0
Change the appearance of offcanvases with utilities to better match them to different contexts like dark navbars. Here we add
.text-bg-dark
to the
.offcanvas
.btn-close-white
.btn-close
for proper styling with a dark offcanvas. If you have dropdowns within, consider also adding
.dropdown-menu-dark
.dropdown-menu
Heads up!
Dark variants for components were deprecated in v5.3.0 with the introduction of color modes. Instead of manually adding classes mentioned above, set
data-bs-theme="dark"
on the root element, a parent wrapper, or the component itself.
Offcanvas
Place offcanvas content here.
html
class
offcanvas offcanvas-start show text-bg-dark
tabindex
offcanvasDark
aria-labelledby
offcanvasDarkLabel
class
offcanvas-header
class
offcanvas-title
offcanvasDarkLabel
Offcanvas
button
type
button
class
btn-close btn-close-white
data-bs-dismiss
offcanvasDark
aria-label
Close
button
class
offcanvas-body
Place offcanvas content here.
Responsive
Added in v5.2.0
Responsive offcanvas classes hide content outside the viewport from a specified breakpoint and down. Above that breakpoint, the contents within will behave as usual. For example,
.offcanvas-lg
hides content in an offcanvas below the
breakpoint, but shows the content above the
breakpoint. Responsive offcanvas classes are available for each breakpoint.
.offcanvas
.offcanvas-sm
.offcanvas-md
.offcanvas-lg
.offcanvas-xl
.offcanvas-xxl
To make a responsive offcanvas, replace the
.offcanvas
base class with a responsive variant and ensure your close button has an explicit
data-bs-target
Toggle offcanvas
Resize your browser to show the responsive offcanvas toggle.
Responsive offcanvas
This is content within an
.offcanvas-lg
html
button
class
btn btn-primary d-lg-none
type
button
data-bs-toggle
offcanvas
data-bs-target
#offcanvasResponsive
aria-controls
offcanvasResponsive
Toggle offcanvas
button
class
alert alert-info d-none d-lg-block
Resize your browser to show the responsive offcanvas toggle.
class
offcanvas-lg offcanvas-end
tabindex
offcanvasResponsive
aria-labelledby
offcanvasResponsiveLabel
class
offcanvas-header
class
offcanvas-title
offcanvasResponsiveLabel
Responsive offcanvas
button
type
button
class
btn-close
data-bs-dismiss
offcanvas
data-bs-target
#offcanvasResponsive
aria-label
Close
button
class
offcanvas-body
class
mb-0
This is content within an
code
.offcanvas-lg
code
Placement
There’s no default placement for offcanvas components, so you must add one of the modifier classes below.
.offcanvas-start
places offcanvas on the left of the viewport (shown above)
.offcanvas-end
places offcanvas on the right of the viewport
.offcanvas-top
places offcanvas on the top of the viewport
.offcanvas-bottom
places offcanvas on the bottom of the viewport
Try the top, right, and bottom examples out below.
Toggle top offcanvas
Offcanvas top
html
button
class
btn btn-primary
type
button
data-bs-toggle
offcanvas
data-bs-target
#offcanvasTop
aria-controls
offcanvasTop
Toggle top offcanvas
button
class
offcanvas offcanvas-top
tabindex
offcanvasTop
aria-labelledby
offcanvasTopLabel
class
offcanvas-header
class
offcanvas-title
offcanvasTopLabel
Offcanvas top
button
type
button
class
btn-close
data-bs-dismiss
offcanvas
aria-label
Close
button
class
offcanvas-body
Toggle right offcanvas
Offcanvas right
html
button
class
btn btn-primary
type
button
data-bs-toggle
offcanvas
data-bs-target
#offcanvasRight
aria-controls
offcanvasRight
Toggle right offcanvas
button
class
offcanvas offcanvas-end
tabindex
offcanvasRight
aria-labelledby
offcanvasRightLabel
class
offcanvas-header
class
offcanvas-title
offcanvasRightLabel
Offcanvas right
button
type
button
class
btn-close
data-bs-dismiss
offcanvas
aria-label
Close
button
class
offcanvas-body
Toggle bottom offcanvas
Offcanvas bottom
html
button
class
btn btn-primary
type
button
data-bs-toggle
offcanvas
data-bs-target
#offcanvasBottom
aria-controls
offcanvasBottom
Toggle bottom offcanvas
button
class
offcanvas offcanvas-bottom
tabindex
offcanvasBottom
aria-labelledby
offcanvasBottomLabel
class
offcanvas-header
class
offcanvas-title
offcanvasBottomLabel
Offcanvas bottom
button
type
button
class
btn-close
data-bs-dismiss
offcanvas
aria-label
Close
button
class
offcanvas-body small
Accessibility
Since the offcanvas panel is conceptually a modal dialog, be sure to add
aria-labelledby="..."
—referencing the offcanvas title—to
.offcanvas
. Note that you don’t need to add
role="dialog"
since we already add it via JavaScript.
Variables
Added in v5.2.0
As part of Bootstrap’s evolving CSS variables approach, offcanvas now uses local CSS variables on
.offcanvas
for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
scss/_offcanvas.scss
#{$prefix}
offcanvas-zindex
#{$zindex-offcanvas}
#{$prefix}
offcanvas-width
#{$offcanvas-horizontal-width}
#{$prefix}
offcanvas-height
#{$offcanvas-vertical-height}
#{$prefix}
offcanvas-padding-x
#{$offcanvas-padding-x}
#{$prefix}
offcanvas-padding-y
#{$offcanvas-padding-y}
#{$prefix}
offcanvas-color
#{$offcanvas-color}
#{$prefix}
offcanvas-bg
#{$offcanvas-bg-color}
#{$prefix}
offcanvas-border-width
#{$offcanvas-border-width}
#{$prefix}
offcanvas-border-color
#{$offcanvas-border-color}
#{$prefix}
offcanvas-box-shadow
#{$offcanvas-box-shadow}
#{$prefix}
offcanvas-transition
transform
$offcanvas-transition-duration
ease-in-out
#{$prefix}
offcanvas-title-line-height
#{$offcanvas-title-line-height}
Sass variables
scss/_variables.scss
$offcanvas-padding-y
$modal-inner-padding
$offcanvas-padding-x
$modal-inner-padding
$offcanvas-horizontal-width
400px
$offcanvas-vertical-height
30vh
$offcanvas-transition-duration
$offcanvas-border-color
$modal-content-border-color
$offcanvas-border-width
$modal-content-border-width
$offcanvas-title-line-height
$modal-title-line-height
$offcanvas-bg-color
#{$prefix}
body-bg
$offcanvas-color
#{$prefix}
body-color
$offcanvas-box-shadow
$modal-content-box-shadow-xs
$offcanvas-backdrop-bg
$modal-backdrop-bg
$offcanvas-backdrop-opacity
$modal-backdrop-opacity
Usage
The offcanvas plugin utilizes a few classes and attributes to handle the heavy lifting:
.offcanvas
hides the content
.offcanvas.show
shows the content
.offcanvas-start
hides the offcanvas on the left
.offcanvas-end
hides the offcanvas on the right
.offcanvas-top
hides the offcanvas on the top
.offcanvas-bottom
hides the offcanvas on the bottom
Add a dismiss button with the
data-bs-dismiss="offcanvas"
attribute, which triggers the JavaScript functionality. Be sure to use the
<button>
element with it for proper behavior across all devices.
Via data attributes
Toggle
data-bs-toggle="offcanvas"
and a
data-bs-target
href
to the element to automatically assign control of one offcanvas element. The
data-bs-target
attribute accepts a CSS selector to apply the offcanvas to. Be sure to add the class
offcanvas
to the offcanvas element. If you’d like it to default open, add the additional class
show
Dismiss
Dismissal can be achieved with the
data-bs-dismiss
attribute on a button
within the offcanvas
as demonstrated below:
button
type
button
class
btn-close
data-bs-dismiss
offcanvas
aria-label
Close
button
or on a button
outside the offcanvas
using the additional
data-bs-target
as demonstrated below:
button
type
button
class
btn-close
data-bs-dismiss
offcanvas
data-bs-target
#my-offcanvas
aria-label
Close
button
While both ways to dismiss an offcanvas are supported, keep in mind that dismissing from outside an offcanvas does not match the
ARIA Authoring Practices Guide dialog (modal) pattern
. Do this at your own risk.
Via JavaScript
Enable manually with:
const
offcanvasElementList
document
querySelectorAll
'.offcanvas'
const
offcanvasList
offcanvasElementList
offcanvasEl
Offcanvas
offcanvasEl
Options
As options can be passed via data attributes or JavaScript, you can append an option name to
data-bs-
, as in
data-bs-animation="{value}"
. Make sure to change the case type of the option name from “
camelCase
” to “
kebab-case
” when passing the options via data attributes. For example, use
data-bs-custom-class="beautifier"
instead of
data-bs-customClass="beautifier"
As of Bootstrap 5.2.0, all components support an
experimental
reserved data attribute
data-bs-config
that can house simple component configuration as a JSON string. When an element has
data-bs-config='{"delay":0, "title":123}'
data-bs-title="456"
attributes, the final
title
value will be
and the separate data attributes will override values given on
data-bs-config
. In addition, existing data attributes are able to house JSON values like
data-bs-delay='{"show":0,"hide":150}'
The final configuration object is the merged result of
data-bs-config
data-bs-
, and
js object
where the latest given key-value overrides the others.
Name
Type
Default
Description
backdrop
boolean or the string
static
true
Apply a backdrop on body while offcanvas is open. Alternatively, specify
static
for a backdrop which doesn’t close the offcanvas when clicked.
keyboard
boolean
true
Closes the offcanvas when escape key is pressed.
scroll
boolean
false
Allow body scrolling while offcanvas is open.
Methods
All API methods are asynchronous and start a transition.
They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored.
Learn more in our JavaScript docs.
Activates your content as an offcanvas element. Accepts an optional options
object
You can create an offcanvas instance with the constructor, for example:
const
bsOffcanvas
Offcanvas
'#myOffcanvas'
Method
Description
dispose
Destroys an element’s offcanvas.
getInstance
Static
method which allows you to get the offcanvas instance associated with a DOM element.
getOrCreateInstance
Static
method which allows you to get the offcanvas instance associated with a DOM element, or create a new one in case it wasn’t initialized.
hide
Hides an offcanvas element.
Returns to the caller before the offcanvas element has actually been hidden
(i.e. before the
hidden.bs.offcanvas
event occurs).
show
Shows an offcanvas element.
Returns to the caller before the offcanvas element has actually been shown
(i.e. before the
shown.bs.offcanvas
event occurs).
toggle
Toggles an offcanvas element to shown or hidden.
Returns to the caller before the offcanvas element has actually been shown or hidden
(i.e. before the
shown.bs.offcanvas
hidden.bs.offcanvas
event occurs).
Events
Event type
Description
hide.bs.offcanvas
This event is fired immediately when the
hide
method has been called.
hidden.bs.offcanvas
This event is fired when an offcanvas element has been hidden from the user (will wait for CSS transitions to complete).
hidePrevented.bs.offcanvas
This event is fired when the offcanvas is shown, its backdrop is
static
and a click outside of the offcanvas is performed. The event is also fired when the escape key is pressed and the
keyboard
option is set to
false
show.bs.offcanvas
This event fires immediately when the
show
instance method is called.
shown.bs.offcanvas
This event is fired when an offcanvas element has been made visible to the user (will wait for CSS transitions to complete).
const
myOffcanvas
document
getElementById
'myOffcanvas'
myOffcanvas
addEventListener
'hidden.bs.offcanvas'
event
// do something...

--- 113_customize_color.txt ---
Colors
Added in v5.3.0
secondary
tertiary
text and background colors, plus
{color}-bg-subtle
{color}-border-subtle
, and
{color}-text-emphasis
for our theme colors. These new colors are available through Sass and CSS variables (but not our color maps or utility classes) with the express goal of making it easier to customize across multiple colors modes like light and dark. These new variables are globally set on
:root
and are adapted for our new dark color mode while our original theme colors remain unchanged.
Colors ending in
-rgb
provide the
red, green, blue
values for use in
rgb()
rgba()
color modes. For example,
rgba(var(--bs-secondary-bg-rgb), .5)
Heads up!
There’s some potential confusion with our new secondary and tertiary colors, and our existing secondary theme color, as well as our light and dark theme colors. Expect this to be ironed out in v6.
Description
Swatch
Variables
Body —
Default foreground (color) and background, including components.
--bs-body-color
--bs-body-color-rgb
--bs-body-bg
--bs-body-bg-rgb
Secondary —
Use the
color
option for lighter text. Use the
option for dividers and to indicate disabled component states.
--bs-secondary-color
--bs-secondary-color-rgb
--bs-secondary-bg
--bs-secondary-bg-rgb
Tertiary —
Use the
color
option for even lighter text. Use the
option to style backgrounds for hover states, accents, and wells.
--bs-tertiary-color
--bs-tertiary-color-rgb
--bs-tertiary-bg
--bs-tertiary-bg-rgb
Emphasis —
For higher contrast text. Not applicable for backgrounds.
--bs-emphasis-color
--bs-emphasis-color-rgb
Border —
For component borders, dividers, and rules. Use
--bs-border-color-translucent
to blend with backgrounds with an
rgba()
value.
--bs-border-color
--bs-border-color-rgb
Primary —
Main theme color, used for hyperlinks, focus styles, and component and form active states.
--bs-primary
--bs-primary-rgb
--bs-primary-bg-subtle
--bs-primary-border-subtle
Text
--bs-primary-text-emphasis
Success —
Theme color used for positive or successful actions and information.
--bs-success
--bs-success-rgb
--bs-success-bg-subtle
--bs-success-border-subtle
Text
--bs-success-text-emphasis
Danger —
Theme color used for errors and dangerous actions.
--bs-danger
--bs-danger-rgb
--bs-danger-bg-subtle
--bs-danger-border-subtle
Text
--bs-danger-text-emphasis
Warning —
Theme color used for non-destructive warning messages.
--bs-warning
--bs-warning-rgb
--bs-warning-bg-subtle
--bs-warning-border-subtle
Text
--bs-warning-text-emphasis
Info —
Theme color used for neutral and informative content.
--bs-info
--bs-info-rgb
--bs-info-bg-subtle
--bs-info-border-subtle
Text
--bs-info-text-emphasis
Light —
Additional theme option for less contrasting colors.
--bs-light
--bs-light-rgb
--bs-light-bg-subtle
--bs-light-border-subtle
Text
--bs-light-text-emphasis
Dark —
Additional theme option for higher contrasting colors.
--bs-dark
--bs-dark-rgb
--bs-dark-bg-subtle
--bs-dark-border-subtle
Text
--bs-dark-text-emphasis
Using the new colors
These new colors are accessible via CSS variables and utility classes—like
--bs-primary-bg-subtle
.bg-primary-subtle
—allowing you to compose your own CSS rules with the variables, or to quickly apply styles via classes. The utilities are built with the color’s associated CSS variables, and since we customize those CSS variables for dark mode, they are also adaptive to color mode by default.
Example element with utilities
html
class
p-3 text-primary-emphasis bg-primary-subtle border border-primary-subtle rounded-3
Example element with utilities
Theme colors
We use a subset of all colors to create a smaller color palette for generating color schemes, also available as Sass variables and a Sass map in Bootstrap’s
scss/_variables.scss
file.
Primary
Secondary
Success
Danger
Warning
Info
Light
Dark
All these colors are available as a Sass map,
$theme-colors
scss/_variables.scss
$theme-colors
"primary"
$primary
"secondary"
$secondary
"success"
$success
"info"
$info
"warning"
$warning
"danger"
$danger
"light"
$light
"dark"
$dark
Check out
our Sass maps and loops docs
for how to modify these colors.
All colors
All Bootstrap colors are available as Sass variables and a Sass map in
scss/_variables.scss
file. To avoid increased file sizes, we don’t create text or background color classes for each of these variables. Instead, we choose a subset of these colors for a
theme palette
Be sure to monitor contrast ratios as you customize colors. As shown below, we’ve added three contrast ratios to each of the main colors—one for the swatch’s current colors, one for against white, and one for against black.
$blue
#0d6efd
$blue-100
$blue-200
$blue-300
$blue-400
$blue-500
$blue-600
$blue-700
$blue-800
$blue-900
$indigo
#6610f2
$indigo-100
$indigo-200
$indigo-300
$indigo-400
$indigo-500
$indigo-600
$indigo-700
$indigo-800
$indigo-900
$purple
#6f42c1
$purple-100
$purple-200
$purple-300
$purple-400
$purple-500
$purple-600
$purple-700
$purple-800
$purple-900
$pink
#d63384
$pink-100
$pink-200
$pink-300
$pink-400
$pink-500
$pink-600
$pink-700
$pink-800
$pink-900
$red
#dc3545
$red-100
$red-200
$red-300
$red-400
$red-500
$red-600
$red-700
$red-800
$red-900
$orange
#fd7e14
$orange-100
$orange-200
$orange-300
$orange-400
$orange-500
$orange-600
$orange-700
$orange-800
$orange-900
$yellow
#ffc107
$yellow-100
$yellow-200
$yellow-300
$yellow-400
$yellow-500
$yellow-600
$yellow-700
$yellow-800
$yellow-900
$green
#198754
$green-100
$green-200
$green-300
$green-400
$green-500
$green-600
$green-700
$green-800
$green-900
$teal
#20c997
$teal-100
$teal-200
$teal-300
$teal-400
$teal-500
$teal-600
$teal-700
$teal-800
$teal-900
$cyan
#0dcaf0
$cyan-100
$cyan-200
$cyan-300
$cyan-400
$cyan-500
$cyan-600
$cyan-700
$cyan-800
$cyan-900
$gray-500
#adb5bd
$gray-100
$gray-200
$gray-300
$gray-400
$gray-500
$gray-600
$gray-700
$gray-800
$gray-900
$black
#000
$white
#fff
Notes on Sass
Sass cannot programmatically generate variables, so we manually created variables for every tint and shade ourselves. We specify the midpoint value (e.g.,
$blue-500
) and use custom color functions to tint (lighten) or shade (darken) our colors via Sass’s
mix()
color function.
Using
mix()
is not the same as
lighten()
darken()
—the former blends the specified color with white or black, while the latter only adjusts the lightness value of each color. The result is a much more complete suite of colors, as
shown in this CodePen demo
tint-color()
shade-color()
functions use
mix()
alongside our
$theme-color-interval
variable, which specifies a stepped percentage value for each mixed color we produce. See the
scss/_functions.scss
scss/_variables.scss
files for the full source code.
Color Sass maps
$colors
lists all our available base (
) colors
$theme-colors
lists all semantically named theme colors (shown below)
$grays
lists all tints and shades of gray
Within
scss/_variables.scss
, you’ll find Bootstrap’s color variables and Sass map. Here’s an example of the
$colors
Sass map:
scss/_variables.scss
$colors
"blue"
$blue
"indigo"
$indigo
"purple"
$purple
"pink"
$pink
"red"
$red
"orange"
$orange
"yellow"
$yellow
"green"
$green
"teal"
$teal
"cyan"
$cyan
"black"
$black
"white"
$white
"gray"
$gray-600
"gray-dark"
$gray-800
Add, remove, or modify values within the map to update how they’re used in many other components. Unfortunately at this time, not
every
component utilizes this Sass map. Future updates will strive to improve upon this. Until then, plan on making use of the
${color}
variables and this Sass map.
Example
Here’s how you can use these in your Sass:
.alpha
color
$purple
.beta
color
$yellow-300
background-color
$indigo-900
Color
background
utility classes are also available for setting
color
background-color
using the
color values.
Generating utilities
Added in v5.1.0
color
background-color
utilities for every color variable, but you can generate these yourself with our
utility API
and our extended Sass maps added in v5.1.0.
To start, make sure you’ve imported our functions, variables, mixins, and utilities.
Use our
map-merge-multiple()
function to quickly merge multiple Sass maps together in a new map.
Merge this new combined map to extend any utility with a
{color}-{level}
class name.
Here’s an example that generates text color utilities (e.g.,
.text-purple-500
) using the above steps.
@import
"bootstrap/scss/functions"
@import
"bootstrap/scss/variables"
@import
"bootstrap/scss/variables-dark"
@import
"bootstrap/scss/maps"
@import
"bootstrap/scss/mixins"
@import
"bootstrap/scss/utilities"
$all-colors
map-merge-multiple
$blues
$indigos
$purples
$pinks
$reds
$oranges
$yellows
$greens
$teals
$cyans
$utilities
map-merge
$utilities
"color"
map-merge
map-get
$utilities
"color"
values
map-merge
map-get
map-get
$utilities
"color"
"values"
$all-colors
@import
"bootstrap/scss/utilities/api"
This will generate new
.text-{color}-{level}
utilities for every color and level. You can do the same for any other utility and property as well.

--- 029_components_breadcrumb.txt ---
Example
Use an ordered or unordered list with linked list items to create a minimally styled breadcrumb. Use our utilities to add additional styles as desired.
html
aria-label
breadcrumb
class
breadcrumb
class
breadcrumb-item active
aria-current
page
Home
aria-label
breadcrumb
class
breadcrumb
class
breadcrumb-item
href
Home
class
breadcrumb-item active
aria-current
page
Library
aria-label
breadcrumb
class
breadcrumb
class
breadcrumb-item
href
Home
class
breadcrumb-item
href
Library
class
breadcrumb-item active
aria-current
page
Data
Dividers
Dividers are automatically added in CSS through
::before
content
. They can be changed by modifying a local CSS custom property
--bs-breadcrumb-divider
, or through the
$breadcrumb-divider
Sass variable — and
$breadcrumb-divider-flipped
for its RTL counterpart, if needed. We default to our Sass variable, which is set as a fallback to the custom property. This way, you get a global divider that you can override without recompiling CSS at any time.
html
style
--bs-breadcrumb-divider
aria-label
breadcrumb
class
breadcrumb
class
breadcrumb-item
href
Home
class
breadcrumb-item active
aria-current
page
Library
When modifying via Sass, the
quote
function is required to generate the quotes around a string. For example, using
as the divider, you can use this:
$breadcrumb-divider
quote
It’s also possible to use an
embedded SVG icon
. Apply it via our CSS custom property, or use the Sass variable.
Inlined SVG requires properly escaped characters.
Some reserved characters, such as
, must be URL-encoded or escaped. We do this with the
$breadcrumb-divider
variable using our
escape-svg()
Sass function
. When customizing the CSS variable, you must handle this yourself. Read
Kevin Weber’s explanations on CodePen
for more info.
html
style
--bs-breadcrumb-divider
&#34
data
image/svg+xml
%3Csvg xmlns=
'http://www.w3.org/2000/svg'
width=
height=
%3E%3Cpath d=
'M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z'
fill=
'%236c757d'
/%3E%3C/svg%3E&#34
aria-label
breadcrumb
class
breadcrumb
class
breadcrumb-item
href
Home
class
breadcrumb-item active
aria-current
page
Library
$breadcrumb-divider
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='8' height='8'><path d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='#{$breadcrumb-divider-color}'/></svg>"
You can also remove the divider setting
--bs-breadcrumb-divider: '';
(empty strings in CSS custom properties counts as a value), or setting the Sass variable to
$breadcrumb-divider: none;
html
style
--bs-breadcrumb-divider
aria-label
breadcrumb
class
breadcrumb
class
breadcrumb-item
href
Home
class
breadcrumb-item active
aria-current
page
Library
$breadcrumb-divider
none
Accessibility
Since breadcrumbs provide a navigation, it’s a good idea to add a meaningful label such as
aria-label="breadcrumb"
to describe the type of navigation provided in the
<nav>
element, as well as applying an
aria-current="page"
to the last item of the set to indicate that it represents the current page.
For more information, see the
ARIA Authoring Practices Guide breadcrumb pattern
Variables
Added in v5.2.0
As part of Bootstrap’s evolving CSS variables approach, breadcrumbs now use local CSS variables on
.breadcrumb
for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
scss/_breadcrumb.scss
#{$prefix}
breadcrumb-padding-x
#{$breadcrumb-padding-x}
#{$prefix}
breadcrumb-padding-y
#{$breadcrumb-padding-y}
#{$prefix}
breadcrumb-margin-bottom
#{$breadcrumb-margin-bottom}
@include
$breadcrumb-font-size
#{$prefix}
breadcrumb-font-size
#{$prefix}
breadcrumb-bg
#{$breadcrumb-bg}
#{$prefix}
breadcrumb-border-radius
#{$breadcrumb-border-radius}
#{$prefix}
breadcrumb-divider-color
#{$breadcrumb-divider-color}
#{$prefix}
breadcrumb-item-padding-x
#{$breadcrumb-item-padding-x}
#{$prefix}
breadcrumb-item-active-color
#{$breadcrumb-active-color}
Sass variables
scss/_variables.scss
$breadcrumb-font-size
null
$breadcrumb-padding-y
$breadcrumb-padding-x
$breadcrumb-item-padding-x
.5rem
$breadcrumb-margin-bottom
1rem
$breadcrumb-bg
null
$breadcrumb-divider-color
#{$prefix}
secondary-color
$breadcrumb-active-color
#{$prefix}
secondary-color
$breadcrumb-divider
quote
$breadcrumb-divider-flipped
$breadcrumb-divider
$breadcrumb-border-radius
null

--- 095_forms_layout.txt ---
Forms
Every group of form fields should reside in a
<form>
element. Bootstrap provides no default styling for the
<form>
element, but there are some powerful browser features that are provided by default.
New to browser forms? Consider reviewing
the MDN form docs
for an overview and complete list of available attributes.
<button>
s within a
<form>
default to
type="submit"
, so strive to be specific and always include a
type
Since Bootstrap applies
display: block
width: 100%
to almost all our form controls, forms will by default stack vertically. Additional classes can be used to vary this layout on a per-form basis.
Utilities
Margin utilities
are the easiest way to add some structure to forms. They provide basic grouping of labels, controls, optional form text, and form validation messaging. We recommend sticking to
margin-bottom
utilities, and using a single direction throughout the form for consistency.
Feel free to build your forms however you like, with
<fieldset>
<div>
s, or nearly any other element.
Example label
Another label
html
class
mb-3
label
formGroupExampleInput
class
form-label
Example label
label
input
type
text
class
form-control
formGroupExampleInput
placeholder
Example input placeholder
class
mb-3
label
formGroupExampleInput2
class
form-label
Another label
label
input
type
text
class
form-control
formGroupExampleInput2
placeholder
Another input placeholder
Form grid
More complex forms can be built using our grid classes. Use these for form layouts that require multiple columns, varied widths, and additional alignment options.
Requires the
$enable-grid-classes
Sass variable to be enabled
(on by default).
html
class
class
input
type
text
class
form-control
placeholder
First name
aria-label
First name
class
input
type
text
class
form-control
placeholder
Last name
aria-label
Last name
Gutters
By adding
gutter modifier classes
, you can have control over the gutter width in as well the inline as block direction.
Also requires the
$enable-grid-classes
Sass variable to be enabled
(on by default).
html
class
row g-3
class
input
type
text
class
form-control
placeholder
First name
aria-label
First name
class
input
type
text
class
form-control
placeholder
Last name
aria-label
Last name
More complex layouts can also be created with the grid system.
Email
Password
Address
Address 2
City
State
Choose...
Check me out
Sign in
html
form
class
row g-3
class
col-md-6
label
inputEmail4
class
form-label
Email
label
input
type
email
class
form-control
inputEmail4
class
col-md-6
label
inputPassword4
class
form-label
Password
label
input
type
password
class
form-control
inputPassword4
class
col-12
label
inputAddress
class
form-label
Address
label
input
type
text
class
form-control
inputAddress
placeholder
1234 Main St
class
col-12
label
inputAddress2
class
form-label
Address 2
label
input
type
text
class
form-control
inputAddress2
placeholder
Apartment, studio, or floor
class
col-md-6
label
inputCity
class
form-label
City
label
input
type
text
class
form-control
inputCity
class
col-md-4
label
inputState
class
form-label
State
label
select
inputState
class
form-select
option
selected
Choose...
option
option
option
select
class
col-md-2
label
inputZip
class
form-label
label
input
type
text
class
form-control
inputZip
class
col-12
class
form-check
input
class
form-check-input
type
checkbox
gridCheck
label
class
form-check-label
gridCheck
Check me out
label
class
col-12
button
type
submit
class
btn btn-primary
Sign in
button
form
Horizontal form
Create horizontal forms with the grid by adding the
.row
class to form groups and using the
.col-*-*
classes to specify the width of your labels and controls. Be sure to add
.col-form-label
to your
<label>
s as well so they’re vertically centered with their associated form controls.
At times, you maybe need to use margin or padding utilities to create that perfect alignment you need. For example, we’ve removed the
padding-top
on our stacked radio inputs label to better align the text baseline.
Email
Password
Radios
First radio
Second radio
Third disabled radio
Example checkbox
Sign in
html
form
class
row mb-3
label
inputEmail3
class
col-sm-2 col-form-label
Email
label
class
col-sm-10
input
type
email
class
form-control
inputEmail3
class
row mb-3
label
inputPassword3
class
col-sm-2 col-form-label
Password
label
class
col-sm-10
input
type
password
class
form-control
inputPassword3
fieldset
class
row mb-3
legend
class
col-form-label col-sm-2 pt-0
Radios
legend
class
col-sm-10
class
form-check
input
class
form-check-input
type
radio
name
gridRadios
gridRadios1
value
option1
checked
label
class
form-check-label
gridRadios1
First radio
label
class
form-check
input
class
form-check-input
type
radio
name
gridRadios
gridRadios2
value
option2
label
class
form-check-label
gridRadios2
Second radio
label
class
form-check disabled
input
class
form-check-input
type
radio
name
gridRadios
gridRadios3
value
option3
disabled
label
class
form-check-label
gridRadios3
Third disabled radio
label
fieldset
class
row mb-3
class
col-sm-10 offset-sm-2
class
form-check
input
class
form-check-input
type
checkbox
gridCheck1
label
class
form-check-label
gridCheck1
Example checkbox
label
button
type
submit
class
btn btn-primary
Sign in
button
form
Horizontal form label sizing
Be sure to use
.col-form-label-sm
.col-form-label-lg
to your
<label>
s or
<legend>
s to correctly follow the size of
.form-control-lg
.form-control-sm
Email
Email
Email
html
class
row mb-3
label
colFormLabelSm
class
col-sm-2 col-form-label col-form-label-sm
Email
label
class
col-sm-10
input
type
email
class
form-control form-control-sm
colFormLabelSm
placeholder
col-form-label-sm
class
row mb-3
label
colFormLabel
class
col-sm-2 col-form-label
Email
label
class
col-sm-10
input
type
email
class
form-control
colFormLabel
placeholder
col-form-label
class
label
colFormLabelLg
class
col-sm-2 col-form-label col-form-label-lg
Email
label
class
col-sm-10
input
type
email
class
form-control form-control-lg
colFormLabelLg
placeholder
col-form-label-lg
Column sizing
As shown in the previous examples, our grid system allows you to place any number of
.col
s within a
.row
. They’ll split the available width equally between them. You may also pick a subset of your columns to take up more or less space, while the remaining
.col
s equally split the rest, with specific column classes like
.col-sm-7
html
class
row g-3
class
col-sm-7
input
type
text
class
form-control
placeholder
City
aria-label
City
class
col-sm
input
type
text
class
form-control
placeholder
State
aria-label
State
class
col-sm
input
type
text
class
form-control
placeholder
aria-label
Auto-sizing
The example below uses a flexbox utility to vertically center the contents and changes
.col
.col-auto
so that your columns only take up as much space as needed. Put another way, the column sizes itself based on the contents.
Name
Username
Preference
Choose...
Three
Remember me
Submit
html
form
class
row gy-2 gx-3 align-items-center
class
col-auto
label
class
visually-hidden
autoSizingInput
Name
label
input
type
text
class
form-control
autoSizingInput
placeholder
Jane Doe
class
col-auto
label
class
visually-hidden
autoSizingInputGroup
Username
label
class
input-group
class
input-group-text
input
type
text
class
form-control
autoSizingInputGroup
placeholder
Username
class
col-auto
label
class
visually-hidden
autoSizingSelect
Preference
label
select
class
form-select
autoSizingSelect
option
selected
Choose...
option
option
value
option
option
value
option
option
value
Three
option
select
class
col-auto
class
form-check
input
class
form-check-input
type
checkbox
autoSizingCheck
label
class
form-check-label
autoSizingCheck
Remember me
label
class
col-auto
button
type
submit
class
btn btn-primary
Submit
button
form
You can then remix that once again with size-specific column classes.
Name
Username
Preference
Choose...
Three
Remember me
Submit
html
form
class
row gx-3 gy-2 align-items-center
class
col-sm-3
label
class
visually-hidden
specificSizeInputName
Name
label
input
type
text
class
form-control
specificSizeInputName
placeholder
Jane Doe
class
col-sm-3
label
class
visually-hidden
specificSizeInputGroupUsername
Username
label
class
input-group
class
input-group-text
input
type
text
class
form-control
specificSizeInputGroupUsername
placeholder
Username
class
col-sm-3
label
class
visually-hidden
specificSizeSelect
Preference
label
select
class
form-select
specificSizeSelect
option
selected
Choose...
option
option
value
option
option
value
option
option
value
Three
option
select
class
col-auto
class
form-check
input
class
form-check-input
type
checkbox
autoSizingCheck2
label
class
form-check-label
autoSizingCheck2
Remember me
label
class
col-auto
button
type
submit
class
btn btn-primary
Submit
button
form
Inline forms
Use the
.row-cols-*
classes to create responsive horizontal layouts. By adding
gutter modifier classes
, we'll have gutters in horizontal and vertical directions. On narrow mobile viewports, the
.col-12
helps stack the form controls and more. The
.align-items-center
aligns the form elements to the middle, making the
.form-check
align properly.
Username
Preference
Choose...
Three
Remember me
Submit
html
form
class
row row-cols-lg-auto g-3 align-items-center
class
col-12
label
class
visually-hidden
inlineFormInputGroupUsername
Username
label
class
input-group
class
input-group-text
input
type
text
class
form-control
inlineFormInputGroupUsername
placeholder
Username
class
col-12
label
class
visually-hidden
inlineFormSelectPref
Preference
label
select
class
form-select
inlineFormSelectPref
option
selected
Choose...
option
option
value
option
option
value
option
option
value
Three
option
select
class
col-12
class
form-check
input
class
form-check-input
type
checkbox
inlineFormCheck
label
class
form-check-label
inlineFormCheck
Remember me
label
class
col-12
button
type
submit
class
btn btn-primary
Submit
button
form

--- 009_examples_checkout-rtl.txt ---
نموذج إتمام الشراء
فيما يلي مثال على نموذج تم إنشاؤه بالكامل باستخدام عناصر تحكم النموذج في Bootstrap. لكل مجموعة نماذج مطلوبة حالة تحقق يمكن تشغيلها بمحاولة إرسال النموذج دون استكماله.
عربة التسوق
اسم المنتج
وصف مختصر
المنتج الثاني
وصف مختصر
البند الثالث
وصف مختصر
رمز ترويجي
EXAMPLECODE
مجموع (USD)
تحقق
عنوان الفوترة
الاسم الأول
يرجى إدخال اسم أول صحيح.
اسم العائلة
يرجى إدخال اسم عائلة صحيح.
اسم المستخدم
اسم المستخدم الخاص بك مطلوب.
البريد الإلكتروني
(اختياري)
يرجى إدخال عنوان بريد إلكتروني صحيح لتصلكم تحديثات الشحن.
العنوان
يرجى إدخال عنوان الشحن الخاص بك.
عنوان 2
(اختياري)
البلد
اختر...
الولايات المتحدة الأمريكية
يرجى اختيار بلد صحيح.
المنطقة
اختر...
كاليفورنيا
يرجى اختيار اسم منطقة صحيح.
الرمز البريدي
الرمز البريدي مطلوب.
عنوان الشحن هو نفس عنوان الفوترة الخاص بي
احفظ هذه المعلومات في المرة القادمة
طريقة الدفع
بطاقة ائتمان
PayPal
الاسم على البطاقة
الاسم الكامل كما هو معروض على البطاقة
الاسم على البطاقة مطلوب
رقم البطاقة
رقم بطاقة الائتمان مطلوب
تاريخ انتهاء الصلاحية
تاريخ انتهاء الصلاحية مطلوب
الرمز الثلاثي (CVV)
رمز الحماية مطلوب
الاستمرار بالدفع

--- 031_utilities_sizing.txt ---
Relative to the parent
Width and height utilities are generated from the utility API in
_utilities.scss
. Includes support for
100%
, and
auto
by default. Modify those values as you need to generate different utilities here.
Width 25%
Width 50%
Width 75%
Width 100%
Width auto
html
class
w-25 p-3
Width 25%
class
w-50 p-3
Width 50%
class
w-75 p-3
Width 75%
class
w-100 p-3
Width 100%
class
w-auto p-3
Width auto
Height 25%
Height 50%
Height 75%
Height 100%
Height auto
html
style
height
100px
class
h-25 d-inline-block
style
width
120px
Height 25%
class
h-50 d-inline-block
style
width
120px
Height 50%
class
h-75 d-inline-block
style
width
120px
Height 75%
class
h-100 d-inline-block
style
width
120px
Height 100%
class
h-auto d-inline-block
style
width
120px
Height auto
You can also use
max-width: 100%;
max-height: 100%;
utilities as needed.
Max-width 100%
html
style
width
height
100px
class
mw-100
style
width
200%
Max-width 100%
Max-height 100%
html
style
height
100px
class
mh-100
style
width
100px
height
200px
Max-height 100%
Relative to the viewport
You can also use utilities to set the width and height relative to the viewport.
class
min-vw-100
Min-width 100vw
class
min-vh-100
Min-height 100vh
class
vw-100
Width 100vw
class
vh-100
Height 100vh
Sass utilities API
Sizing utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"width"
property
width
class
values
100%
auto
auto
"max-width"
property
max-width
class
values
100%
"viewport-width"
property
width
class
values
100vw
"min-viewport-width"
property
min-width
class
min-vw
values
100vw
"height"
property
height
class
values
100%
auto
auto
"max-height"
property
max-height
class
values
100%
"viewport-height"
property
height
class
values
100vh
"min-viewport-height"
property
min-height
class
min-vh
values
100vh

--- 144_examples_features.txt ---
Features examples
Columns with icons
Featured title
Paragraph of text beneath the heading to explain the heading. We'll add onto it with another sentence and probably just keep going until we run out of words.
Call to action
Featured title
Paragraph of text beneath the heading to explain the heading. We'll add onto it with another sentence and probably just keep going until we run out of words.
Call to action
Featured title
Paragraph of text beneath the heading to explain the heading. We'll add onto it with another sentence and probably just keep going until we run out of words.
Call to action
Hanging icons
Featured title
Paragraph of text beneath the heading to explain the heading. We'll add onto it with another sentence and probably just keep going until we run out of words.
Primary button
Featured title
Paragraph of text beneath the heading to explain the heading. We'll add onto it with another sentence and probably just keep going until we run out of words.
Primary button
Featured title
Paragraph of text beneath the heading to explain the heading. We'll add onto it with another sentence and probably just keep going until we run out of words.
Primary button
Custom cards
Short title, long jacket
Earth
Much longer title that wraps to multiple lines
Pakistan
Another longer title belongs here
California
Icon grid
Featured title
Paragraph of text beneath the heading to explain the heading.
Featured title
Paragraph of text beneath the heading to explain the heading.
Featured title
Paragraph of text beneath the heading to explain the heading.
Featured title
Paragraph of text beneath the heading to explain the heading.
Featured title
Paragraph of text beneath the heading to explain the heading.
Featured title
Paragraph of text beneath the heading to explain the heading.
Featured title
Paragraph of text beneath the heading to explain the heading.
Featured title
Paragraph of text beneath the heading to explain the heading.
Features with title
Left-aligned title explaining these awesome features
Paragraph of text beneath the heading to explain the heading. We'll add onto it with another sentence and probably just keep going until we run out of words.
Primary button
Featured title
Paragraph of text beneath the heading to explain the heading.
Featured title
Paragraph of text beneath the heading to explain the heading.
Featured title
Paragraph of text beneath the heading to explain the heading.
Featured title
Paragraph of text beneath the heading to explain the heading.

--- 028_extend_icons.txt ---
While Bootstrap doesn’t include an icon set by default, we do have our own comprehensive icon library called Bootstrap Icons. Feel free to use them or any other icon set in your project. We’ve included details for Bootstrap Icons and other preferred icon sets below.
While most icon sets include multiple file formats, we prefer SVG implementations for their improved accessibility and vector support.
@mdo
and maintained by
the Bootstrap Team
. The beginnings of this icon set come from Bootstrap’s very own components—our forms, carousels, and more. Bootstrap has very few icon needs out of the box, so we didn’t need much. However, once we got going, we couldn’t stop making more.
Oh, and did we mention they’re completely open source? Licensed under MIT, just like Bootstrap, our icon set is available to everyone.
Learn more about Bootstrap Icons
, including how to install them and recommended usage.
Alternatives
We’ve tested and used these icon sets ourselves as preferred alternatives to Bootstrap Icons.
Font Awesome
Feather
Octicons
More options
While we haven’t tried these out ourselves, they do look promising and provide multiple formats, including SVG.
Bytesize
CoreUI Icons
Google Material icons
Ionicons
Dripicons
Ikons
Icons8
icofont
Tabler Icons

--- 027_about_team.txt ---
Mark Otto
@mdo
Jacob Thornton
@fat
XhmikosR
@xhmikosr
GeoSot
@geosot
Patrick H. Lauke
@patrickhlauke
Julien Déramond
@julien-deramond
Gaël Poupard
@ffoodd
Rohit Sharma
@rohit2sharma95
alpadev
@alpadev
Martijn Cuppens
@martijncuppens
Johann-S
@johann-s
Gleb Mazovetskiy
@glebm
Get involved with Bootstrap development by
opening an issue
or submitting a pull request. Read our
contributing guidelines
for information on how we develop.

--- 067_getting-started_download.txt ---
Compiled CSS and JS
Download ready-to-use compiled code for
to easily drop into your project, which includes:
Compiled and minified CSS bundles (see
CSS files comparison
Compiled and minified JavaScript plugins (see
JS files comparison
This doesn’t include documentation, source files, or any optional JavaScript dependencies like Popper.
Download
Source files
Compile Bootstrap with your own asset pipeline by downloading our source Sass, JavaScript, and documentation files. This option requires some additional tooling:
Sass compiler
for compiling Sass source files into CSS files
Autoprefixer
for CSS vendor prefixing
Should you require our full set of
build tools
, they are included for developing Bootstrap and its docs, but they’re likely unsuitable for your own purposes.
Download source
Examples
If you want to download and examine our
examples
, you can grab the already built examples:
Download Examples
CDN via jsDelivr
Skip the download with
jsDelivr
to deliver cached version of Bootstrap’s compiled CSS and JS to your project.
link
href
https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css
stylesheet
integrity
sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr
crossorigin
anonymous
script
https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js
integrity
sha384-ndDqU0Gzau9qJ1lfW4pNLlhNTkCfHzAVBReH9diLvGRem5+R9g2FzA8ZGN954O5Q
crossorigin
anonymous
script
If you’re using our compiled JavaScript and prefer to include Popper separately, add Popper before our JS, via a CDN preferably.
script
https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js
integrity
sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r
crossorigin
anonymous
script
script
https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.min.js
integrity
sha384-7qAoOXltbVP82dhxHAUje59V5r2YsVfBafyUDxEdApLPmcdhBPg1DKg1ERo0BZlK
crossorigin
anonymous
script
Alternative CDNs
We recommend
jsDelivr
and use it ourselves in our documentation. However, in some cases—like in some specific countries or environments—you may need to use other CDN providers like
cdnjs
unpkg
You’ll find the same files on these CDN providers, albeit with different URLs. With cdnjs, you can
use this direct Bootstrap package link
to copy and paste ready-to-use HTML snippets for each dist file from any version of Bootstrap.
If the SRI hashes differ for a given file, you shouldn’t use the files from that CDN, because it means that the file was modified by someone else.
Note that you should compare same length hashes, e.g.
sha384
with
sha384
, otherwise it’s expected for them to be different.
As such, you can use an online tool like
SRI Hash Generator
to make sure that the hashes are the same for a given file.
Alternatively, assuming you have OpenSSL installed, you can achieve the same from the CLI, for example:
openssl dgst
-sha384
-binary
openssl base64
Package managers
Pull in Bootstrap’s
source files
into nearly any project with some of the most popular package managers. No matter the package manager, Bootstrap will
require a
Sass compiler
Autoprefixer
for a setup that matches our official compiled versions.
Install Bootstrap in your Node.js powered apps with
the npm package
install
const bootstrap = require('bootstrap')
import bootstrap from 'bootstrap'
will load all of Bootstrap’s plugins onto a
object.
module itself exports all of our plugins. You can manually load Bootstrap’s plugins individually by loading the
/js/dist/*.js
files under the package’s top-level directory.
package.json
contains some additional metadata under the following keys:
sass
- path to Bootstrap’s main
Sass
source file
style
- path to Bootstrap’s non-minified CSS that’s been compiled using the default settings (no customization)
Get started with Bootstrap via npm with our starter project!
Head to the
Sass & JS example
template repository to see how to build and customize Bootstrap in your own npm project. Includes Sass compiler, Autoprefixer, Stylelint, PurgeCSS, and Bootstrap Icons.
yarn
Install Bootstrap in your Node.js powered apps with
the yarn package
yarn
Yarn 2+ (aka Yarn Berry) doesn’t support the
node_modules
directory by default
: using our
Sass & JS example
needs some adjustments:
yarn
config
nodeLinker node-modules
# Use the node_modules linker
touch
yarn.lock
# Create an empty yarn.lock file
yarn
install
# Install the dependencies
yarn
start
# Start the project
Install Bootstrap in your Bun or Node.js powered apps with
the Bun CLI
RubyGems
Install Bootstrap in your Ruby apps using
Bundler
recommended
) and
RubyGems
by adding the following line to your
Gemfile
'bootstrap'
'~> 5.3.7'
Alternatively, if you’re not using Bundler, you can install the gem by running this command:
install
See the gem’s README
for further details.
Composer
You can also install and manage Bootstrap’s Sass and JavaScript using
Composer
composer
require twbs/bootstrap:5.3.7
NuGet
If you develop in .NET Framework, you can also install and manage Bootstrap’s
Sass
and JavaScript using
NuGet
. Newer projects should use
libman
or another method as NuGet is designed for compiled code, not frontend assets.
Install-Package
Install-Package
sass
IntelliSense extension
Install the community-maintained
IntelliSense extension
for Visual Studio Code to get IntelliSense auto-completion for Bootstrap classes.
View in VS Code Marketplace

--- 050_components_close-button.txt ---
Example
Provide an option to dismiss or close a component with
.btn-close
. Default styling is limited, but highly customizable. Modify the Sass variables to replace the default
background-image
Be sure to include text for screen readers
, as we’ve done with
aria-label
html
button
type
button
class
btn-close
aria-label
Close
button
Disabled state
Disabled close buttons change their
opacity
. We’ve also applied
pointer-events: none
user-select: none
to preventing hover and active states from triggering.
html
button
type
button
class
btn-close
disabled
aria-label
Close
button
Dark variant
Deprecated in v5.3.0
Heads up!
As of v5.3.0, the
.btn-close-white
class is deprecated. Instead, use
data-bs-theme="dark"
to change the color mode of the close button.
data-bs-theme="dark"
to the
.btn-close
, or to its parent element, to invert the close button. This uses the
filter
property to invert the
background-image
without overriding its value.
html
data-bs-theme
dark
button
type
button
class
btn-close
aria-label
Close
button
button
type
button
class
btn-close
disabled
aria-label
Close
button
Variables
Added in v5.3.0
As part of Bootstrap’s evolving CSS variables approach, close button now uses local CSS variables on
.btn-close
for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
scss/_close.scss
#{$prefix}
btn-close-color
#{$btn-close-color}
#{$prefix}
btn-close-bg: #
escape-svg
$btn-close-bg
#{$prefix}
btn-close-opacity
#{$btn-close-opacity}
#{$prefix}
btn-close-hover-opacity
#{$btn-close-hover-opacity}
#{$prefix}
btn-close-focus-shadow
#{$btn-close-focus-shadow}
#{$prefix}
btn-close-focus-opacity
#{$btn-close-focus-opacity}
#{$prefix}
btn-close-disabled-opacity
#{$btn-close-disabled-opacity}
Sass variables
scss/_variables.scss
$btn-close-width
$btn-close-height
$btn-close-width
$btn-close-padding-x
.25em
$btn-close-padding-y
$btn-close-padding-x
$btn-close-color
$black
$btn-close-bg
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='#{$btn-close-color}'><path d='M.293.293a1 1 0 0 1 1.414 0L8 6.586 14.293.293a1 1 0 1 1 1.414 1.414L9.414 8l6.293 6.293a1 1 0 0 1-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L6.586 8 .293 1.707a1 1 0 0 1 0-1.414'/></svg>"
$btn-close-focus-shadow
$focus-ring-box-shadow
$btn-close-opacity
$btn-close-hover-opacity
$btn-close-focus-opacity
$btn-close-disabled-opacity
$btn-close-filter
null
$btn-close-white-filter
invert
grayscale
100%
brightness
200%
// Deprecated in v5.3.4

--- 056_utilities_text.txt ---
Text alignment
Easily realign text to components with text alignment classes. For start, end, and center alignment, responsive classes are available that use the same viewport width breakpoints as the grid system.
Start aligned text on all viewport sizes.
Center aligned text on all viewport sizes.
End aligned text on all viewport sizes.
End aligned text on viewports sized SM (small) or wider.
End aligned text on viewports sized MD (medium) or wider.
End aligned text on viewports sized LG (large) or wider.
End aligned text on viewports sized XL (extra large) or wider.
End aligned text on viewports sized XXL (extra extra large) or wider.
html
class
text-start
Start aligned text on all viewport sizes.
class
text-center
Center aligned text on all viewport sizes.
class
text-end
End aligned text on all viewport sizes.
class
text-sm-end
End aligned text on viewports sized SM (small) or wider.
class
text-md-end
End aligned text on viewports sized MD (medium) or wider.
class
text-lg-end
End aligned text on viewports sized LG (large) or wider.
class
text-xl-end
End aligned text on viewports sized XL (extra large) or wider.
class
text-xxl-end
End aligned text on viewports sized XXL (extra extra large) or wider.
Note that we don’t provide utility classes for justified text. While, aesthetically, justified text might look more appealing, it does make word-spacing more random and therefore harder to read.
Text wrapping and overflow
Wrap text with a
.text-wrap
class.
This text should wrap.
html
class
badge text-bg-primary text-wrap
style
width
6rem
This text should wrap.
Prevent text from wrapping with a
.text-nowrap
class.
This text should overflow the parent.
html
class
text-nowrap bg-body-secondary border
style
width
8rem
This text should overflow the parent.
Word break
Prevent long strings of text from breaking your components’ layout by using
.text-break
to set
word-wrap: break-word
word-break: break-word
. We use
word-wrap
instead of the more common
overflow-wrap
for wider browser support, and add the deprecated
word-break: break-word
to avoid issues with flex containers.
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
html
class
text-break
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
Note that
breaking words isn’t possible in Arabic
, which is the most used RTL language. Therefore
.text-break
is removed from our RTL compiled CSS.
Text transform
Transform text in components with our text capitalization classes:
text-lowercase
text-uppercase
text-capitalize
Lowercased text.
Uppercased text.
CapiTaliZed text.
html
class
text-lowercase
Lowercased text.
class
text-uppercase
Uppercased text.
class
text-capitalize
CapiTaliZed text.
Note how
.text-capitalize
only changes the first letter of each word, leaving the case of any other letters unaffected.
Font size
Quickly change the
font-size
of text. While our heading classes (e.g.,
) apply
font-size
font-weight
, and
line-height
, these utilities
only
apply
font-size
. Sizing for these utilities matches HTML’s heading elements, so as the number increases, their size decreases.
.fs-1 text
.fs-2 text
.fs-3 text
.fs-4 text
.fs-5 text
.fs-6 text
html
class
fs-1
.fs-1 text
class
fs-2
.fs-2 text
class
fs-3
.fs-3 text
class
fs-4
.fs-4 text
class
fs-5
.fs-5 text
class
fs-6
.fs-6 text
Customize your available
font-size
s by modifying the
$font-sizes
Sass map.
Font weight and italics
Quickly change the
font-weight
font-style
of text with these utilities.
font-style
utilities are abbreviated as
.fst-*
font-weight
utilities are abbreviated as
.fw-*
Bold text.
Bolder weight text (relative to the parent element).
Semibold weight text.
Medium weight text.
Normal weight text.
Light weight text.
Lighter weight text (relative to the parent element).
Italic text.
Text with normal font style
html
class
fw-bold
Bold text.
class
fw-bolder
Bolder weight text (relative to the parent element).
class
fw-semibold
Semibold weight text.
class
fw-medium
Medium weight text.
class
fw-normal
Normal weight text.
class
fw-light
Light weight text.
class
fw-lighter
Lighter weight text (relative to the parent element).
class
fst-italic
Italic text.
class
fst-normal
Text with normal font style
Line height
Change the line height with
.lh-*
utilities.
This is a long paragraph written to show how the line-height of an element is affected by our utilities. Classes are applied to the element itself or sometimes the parent element. These classes can be customized as needed with our utility API.
This is a long paragraph written to show how the line-height of an element is affected by our utilities. Classes are applied to the element itself or sometimes the parent element. These classes can be customized as needed with our utility API.
This is a long paragraph written to show how the line-height of an element is affected by our utilities. Classes are applied to the element itself or sometimes the parent element. These classes can be customized as needed with our utility API.
This is a long paragraph written to show how the line-height of an element is affected by our utilities. Classes are applied to the element itself or sometimes the parent element. These classes can be customized as needed with our utility API.
html
class
lh-1
This is a long paragraph written to show how the line-height of an element is affected by our utilities. Classes are applied to the element itself or sometimes the parent element. These classes can be customized as needed with our utility API.
class
lh-sm
This is a long paragraph written to show how the line-height of an element is affected by our utilities. Classes are applied to the element itself or sometimes the parent element. These classes can be customized as needed with our utility API.
class
lh-base
This is a long paragraph written to show how the line-height of an element is affected by our utilities. Classes are applied to the element itself or sometimes the parent element. These classes can be customized as needed with our utility API.
class
lh-lg
This is a long paragraph written to show how the line-height of an element is affected by our utilities. Classes are applied to the element itself or sometimes the parent element. These classes can be customized as needed with our utility API.
Monospace
Change a selection to our monospace font stack with
.font-monospace
This is in monospace
html
class
font-monospace
This is in monospace
Reset color
Reset a text or link’s color with
.text-reset
, so that it inherits the color from its parent.
Secondary body text with a
reset link
html
class
text-body-secondary
Secondary body text with a
href
class
text-reset
reset link
Text decoration
Decorate text in components with text decoration classes.
This text has a line underneath it.
This text has a line going through it.
This link has its text decoration removed
html
class
text-decoration-underline
This text has a line underneath it.
class
text-decoration-line-through
This text has a line going through it.
href
class
text-decoration-none
This link has its text decoration removed
Sass variables
Default type and font related Sass variables:
scss/_variables.scss
// stylelint-disable value-keyword-case
$font-family-sans-serif
system-ui
-apple-system
"Segoe UI"
Roboto
"Helvetica Neue"
"Noto Sans"
"Liberation Sans"
Arial
sans-serif
"Apple Color Emoji"
"Segoe UI Emoji"
"Segoe UI Symbol"
"Noto Color Emoji"
$font-family-monospace
SFMono-Regular
Menlo
Monaco
Consolas
"Liberation Mono"
"Courier New"
monospace
// stylelint-enable value-keyword-case
$font-family-base
#{$prefix}
font-sans-serif
$font-family-code
#{$prefix}
font-monospace
// $font-size-root affects the value of `rem`, which is used for as well font sizes, paddings, and margins
// $font-size-base affects the font size of the body text
$font-size-root
null
$font-size-base
1rem
// Assumes the browser default, typically `16px`
$font-size-sm
$font-size-base
.875
$font-size-lg
$font-size-base
1.25
$font-weight-lighter
lighter
$font-weight-light
$font-weight-normal
$font-weight-medium
$font-weight-semibold
$font-weight-bold
$font-weight-bolder
bolder
$font-weight-base
$font-weight-normal
$line-height-base
$line-height-sm
1.25
$line-height-lg
$h1-font-size
$font-size-base
$h2-font-size
$font-size-base
$h3-font-size
$font-size-base
1.75
$h4-font-size
$font-size-base
$h5-font-size
$font-size-base
1.25
$h6-font-size
$font-size-base
Sass maps
Font-size utilities are generated from this map, in combination with our utilities API.
scss/_variables.scss
$font-sizes
$h1-font-size
$h2-font-size
$h3-font-size
$h4-font-size
$h5-font-size
$h6-font-size
scss/_maps.scss
$theme-colors-text
"primary"
$primary-text-emphasis
"secondary"
$secondary-text-emphasis
"success"
$success-text-emphasis
"info"
$info-text-emphasis
"warning"
$warning-text-emphasis
"danger"
$danger-text-emphasis
"light"
$light-text-emphasis
"dark"
$dark-text-emphasis
Sass utilities API
Font and text utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"font-family"
property
font-family
class
font
values
monospace
#{$prefix}
font-monospace
"font-size"
true
property
font-size
class
values
$font-sizes
"font-style"
property
font-style
class
values
italic normal
"font-weight"
property
font-weight
class
values
lighter
$font-weight-lighter
light
$font-weight-light
normal
$font-weight-normal
medium
$font-weight-medium
semibold
$font-weight-semibold
bold
$font-weight-bold
bolder
$font-weight-bolder
"line-height"
property
line-height
class
values
$line-height-sm
base
$line-height-base
$line-height-lg
"text-align"
responsive
true
property
text-align
class
text
values
start
left
right
center
center
"text-decoration"
property
text-decoration
values
none underline line-through
"text-transform"
property
text-transform
class
text
values
lowercase uppercase capitalize
"white-space"
property
white-space
class
text
values
wrap
normal
nowrap
nowrap
"word-wrap"
property
word-wrap word-break
class
text
values
break
break-word
false

--- 008_getting-started_accessibility.txt ---
Overview and limitations
The overall accessibility of any project built with Bootstrap depends in large part on the author’s markup, additional styling, and scripting they’ve included. However, provided that these have been implemented correctly, it should be perfectly possible to create websites and applications with Bootstrap that fulfill
WCAG
(A/AA/AAA),
Section 508
, and similar accessibility standards and requirements.
Structural markup
Interactive components
ARIA
roles and attributes, these components should also be understandable and operable using assistive technologies (such as screen readers).
Because Bootstrap’s components are purposely designed to be fairly generic, authors may need to include further
ARIA
roles and attributes, as well as JavaScript behavior, to more accurately convey the precise nature and functionality of their component. This is usually noted in the documentation.
Color contrast
Some combinations of colors that currently make up Bootstrap’s default palette—used throughout the framework for things such as button variations, alert variations, form validation indicators—may lead to
insufficient
color contrast (below the recommended
WCAG 2.2 text color contrast ratio of 4.5:1
and the
WCAG 2.2 non-text color contrast ratio of 3:1
), particularly when used against a light background. Authors are encouraged to test their specific uses of color and, where necessary, manually modify/extend these default colors to ensure adequate color contrast ratios.
Visually hidden content
Content which should be visually hidden, but remain accessible to assistive technologies such as screen readers, can be styled using the
.visually-hidden
class. This can be useful in situations where additional visual information or cues (such as meaning denoted through the use of color) need to also be conveyed to non-visual users.
class
text-danger
span
class
visually-hidden
Danger:
span
This action is not reversible
For visually hidden interactive controls, such as traditional “skip” links, use the
.visually-hidden-focusable
class. This will ensure that the control becomes visible once focused (for sighted keyboard users).
Watch out, compared to the equivalent
.sr-only
.sr-only-focusable
classes in past versions, Bootstrap 5’s
.visually-hidden-focusable
is a standalone class, and must not be used in combination with the
.visually-hidden
class.
class
visually-hidden-focusable
href
#content
Reduced motion
prefers-reduced-motion
media feature
. In browsers/environments that allow the user to specify their preference for reduced motion, most CSS transition effects in Bootstrap (for instance, when a modal dialog is opened or closed, or the sliding animation in carousels) will be disabled, and meaningful animations (such as spinners) will be slowed down.
On browsers that support
prefers-reduced-motion
, and where the user has
explicitly signaled that they’d prefer reduced motion (i.e. where
prefers-reduced-motion: no-preference
), Bootstrap enables smooth scrolling using the
scroll-behavior
property.
Additional resources
Web Content Accessibility Guidelines (WCAG) 2.2
The A11Y Project
MDN accessibility documentation
Color Contrast Analyser (CCA)
"HTML Codesniffer" bookmarklet for identifying accessibility issues
Microsoft Accessibility Insights
Deque Axe testing tools
Introduction to Web Accessibility

--- 036_examples_jumbotrons.txt ---
Toggle theme
Light
Dark
Auto
Jumbotron with icon
This is a custom jumbotron featuring an SVG image at the top, some longer text that wraps early thanks to a responsive
.col-*
class, and a customized call to action.
Call to action
Secondary link
Placeholder jumbotron
This faded back jumbotron is useful for placeholder content. It's also a great way to add a bit of context to a page or section when no content is available and to encourage visitors to take a specific action.
Call to action
Full-width jumbotron
This takes the basic jumbotron above and makes its background edge-to-edge with a
.container
inside to align content. Similar to above, it's been recreated with built-in grid and utility classes.
Basic jumbotron
This is a simple Bootstrap jumbotron that sits within a
.container
, recreated with built-in utility classes.

--- 060_customize_options.txt ---
Customize Bootstrap with our built-in custom variables file and easily toggle global CSS preferences with new
$enable-*
Sass variables. Override a variable’s value and recompile with
npm run test
as needed.
You can find and customize these variables for key global options in Bootstrap’s
scss/_variables.scss
file.
Variable
Values
Description
$spacer
1rem
(default), or any value > 0
Specifies the default spacer value to programmatically generate our
spacer utilities
$enable-dark-mode
true
(default) or
false
Enables built-in
dark mode support
across the project and its components.
$enable-rounded
true
(default) or
false
Enables predefined
border-radius
styles on various components.
$enable-shadows
true
false
(default)
Enables predefined decorative
box-shadow
styles on various components. Does not affect
box-shadow
s used for focus states.
$enable-gradients
true
false
(default)
Enables predefined gradients via
background-image
styles on various components.
$enable-transitions
true
(default) or
false
Enables predefined
transition
s on various components.
$enable-reduced-motion
true
(default) or
false
Enables the
prefers-reduced-motion
media query
, which suppresses certain animations/transitions based on the users’ browser/operating system preferences.
$enable-grid-classes
true
(default) or
false
Enables the generation of CSS classes for the grid system (e.g.
.row
.col-md-1
, etc.).
$enable-cssgrid
true
false
(default)
Enables the experimental CSS Grid system (e.g.
.grid
.g-col-md-1
, etc.).
$enable-container-classes
true
(default) or
false
Enables the generation of CSS classes for layout containers. (New in v5.2.0)
$enable-caret
true
(default) or
false
Enables pseudo element caret on
.dropdown-toggle
$enable-button-pointers
true
(default) or
false
Add “hand” cursor to non-disabled button elements.
$enable-rfs
true
(default) or
false
Globally enables
$enable-validation-icons
true
(default) or
false
Enables
background-image
icons within textual inputs and some custom forms for validation states.
$enable-negative-margins
true
false
(default)
Enables the generation of
negative margin utilities
$enable-deprecation-messages
true
(default) or
false
Set to
false
to hide warnings when using any of the deprecated mixins and functions that are planned to be removed in
$enable-important-utilities
true
(default) or
false
Enables the
!important
suffix in utility classes.
$enable-smooth-scroll
true
(default) or
false
Applies
scroll-behavior: smooth
globally, except for users asking for reduced motion through
prefers-reduced-motion
media query

--- 122_utilities_display.txt ---
How it works
Change the value of the
display
property
with our responsive display utility classes. We purposely support only a subset of all possible values for
display
. Classes can be combined for various effects as you need.
Notation
Display utility classes that apply to all
breakpoints
, from
, have no breakpoint abbreviation in them. This is because those classes are applied from
min-width: 0;
and up, and thus are not bound by a media query. The remaining breakpoints, however, do include a breakpoint abbreviation.
As such, the classes are named using the format:
.d-{value}
.d-{breakpoint}-{value}
, and
Where
value
is one of:
none
inline
inline-block
block
grid
inline-grid
table
table-cell
table-row
flex
inline-flex
The display values can be altered by changing the
display
values defined in
$utilities
and recompiling the SCSS.
The media queries affect screen widths with the given breakpoint
or larger
. For example,
.d-lg-none
sets
display: none;
, and
screens.
Examples
d-inline
d-inline
html
class
d-inline p-2 text-bg-primary
d-inline
class
d-inline p-2 text-bg-dark
d-inline
d-block
d-block
html
span
class
d-block p-2 text-bg-primary
d-block
span
span
class
d-block p-2 text-bg-dark
d-block
span
Hiding elements
For faster mobile-friendly development, use responsive display classes for showing and hiding elements by device. Avoid creating entirely different versions of the same site, instead hide elements responsively for each screen size.
To hide elements simply use the
.d-none
class or one of the
.d-{sm,md,lg,xl,xxl}-none
classes for any responsive screen variation.
To show an element only on a given interval of screen sizes you can combine one
.d-*-none
class with a
.d-*-*
class, for example
.d-none .d-md-block .d-xl-none
will hide the element for all screen sizes except on medium and large devices.
Screen size
Class
Hidden on all
.d-none
Hidden only on xs
.d-none .d-sm-block
Hidden only on sm
.d-sm-none .d-md-block
Hidden only on md
.d-md-none .d-lg-block
Hidden only on lg
.d-lg-none .d-xl-block
Hidden only on xl
.d-xl-none .d-xxl-block
Hidden only on xxl
.d-xxl-none
Visible on all
.d-block
Visible only on xs
.d-block .d-sm-none
Visible only on sm
.d-none .d-sm-block .d-md-none
Visible only on md
.d-none .d-md-block .d-lg-none
Visible only on lg
.d-none .d-lg-block .d-xl-none
Visible only on xl
.d-none .d-xl-block .d-xxl-none
Visible only on xxl
.d-none .d-xxl-block
hide on lg and wider screens
hide on screens smaller than lg
html
class
d-lg-none
hide on lg and wider screens
class
d-none d-lg-block
hide on screens smaller than lg
Display in print
Change the
display
value of elements when printing with our print display utility classes. Includes support for the same
display
values as our responsive
.d-*
utilities.
.d-print-none
.d-print-inline
.d-print-inline-block
.d-print-block
.d-print-grid
.d-print-inline-grid
.d-print-table
.d-print-table-row
.d-print-table-cell
.d-print-flex
.d-print-inline-flex
The print and display classes can be combined.
Screen Only (Hide on print only)
Print Only (Hide on screen only)
Hide up to large on screen, but always show on print
html
class
d-print-none
Screen Only (Hide on print only)
class
d-none d-print-block
Print Only (Hide on screen only)
class
d-none d-lg-block d-print-block
Hide up to large on screen, but always show on print
Sass utilities API
Display utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"display"
responsive
true
print
true
property
display
class
values
inline inline-block block grid inline-grid table table-row table-cell flex inline-flex none

--- 142_customize_color-modes.txt ---
Try it yourself!
Download the source code and working demo for using Bootstrap with Stylelint, and the color modes from the
twbs/examples repository
. You can also
open the example in StackBlitz
Dark mode
With v5.3.0 you can implement your own color mode toggler (see below for an example from Bootstrap’s docs) and apply the different color modes as you see fit. We support a light mode (default) and now dark mode. Color modes can be toggled globally on the
<html>
element, or on specific components and elements, thanks to the
data-bs-theme
attribute.
Alternatively, you can also switch to a media query implementation thanks to our color mode mixin—see
the usage section for details
. Heads up though—this eliminates your ability to change themes on a per-component basis as shown below.
Example
For example, to change the color mode of a dropdown menu, add
data-bs-theme="light"
data-bs-theme="dark"
to the parent
.dropdown
. Now, no matter the global color mode, these dropdowns will display with the specified theme value.
Default dropdown
Action
Action
Another action
Something else here
Separated link
Dark dropdown
Action
Action
Another action
Something else here
Separated link
html
class
dropdown
data-bs-theme
light
button
class
btn btn-secondary dropdown-toggle
type
button
dropdownMenuButtonLight
data-bs-toggle
dropdown
aria-expanded
false
Default dropdown
button
class
dropdown-menu
aria-labelledby
dropdownMenuButtonLight
class
dropdown-item active
href
Action
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
class
dropdown-divider
class
dropdown-item
href
Separated link
class
dropdown
data-bs-theme
dark
button
class
btn btn-secondary dropdown-toggle
type
button
dropdownMenuButtonDark
data-bs-toggle
dropdown
aria-expanded
false
Dark dropdown
button
class
dropdown-menu
aria-labelledby
dropdownMenuButtonDark
class
dropdown-item active
href
Action
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
class
dropdown-divider
class
dropdown-item
href
Separated link
How it works
As shown above, color mode styles are controlled by the
data-bs-theme
attribute. This attribute can be applied to the
<html>
element, or to any other element or Bootstrap component. If applied to the
<html>
element, it will apply to everything. If applied to a component or element, it will be scoped to that specific component or element.
For each color mode you wish to support, you’ll need to add new overrides for the shared global CSS variables. We do this already in our
_root.scss
stylesheet for dark mode, with light mode being the default values. In writing color mode specific styles, use the mixin:
// Color mode variables in _root.scss
@include
color-mode
dark
// CSS variable overrides here...
We use a custom
_variables-dark.scss
to power those shared global CSS variable overrides for dark mode. This file isn’t required for your own custom color modes, but it’s required for our dark mode for two reasons. First, it’s better to have a single place to reset global colors. Second, some Sass variables had to be overridden for background images embedded in our CSS for accordions, form components, and more.
Usage
Enable dark mode
Enable the built in dark color mode across your entire project by adding the
data-bs-theme="dark"
attribute to the
<html>
element. This will apply the dark color mode to all components and elements, other than those with a specific
data-bs-theme
attribute applied. Building on the
quick start template
doctype
html
html
lang
data-bs-theme
dark
head
meta
charset
utf-8
meta
name
viewport
content
width=device-width, initial-scale=1
title
title
link
href
https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css
stylesheet
integrity
sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr
crossorigin
anonymous
head
body
Hello, world!
script
https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js
integrity
sha384-ndDqU0Gzau9qJ1lfW4pNLlhNTkCfHzAVBReH9diLvGRem5+R9g2FzA8ZGN954O5Q
crossorigin
anonymous
script
body
html
Learn more in the JavaScript section.
Building with Sass
Our new dark mode option is available to use for all users of Bootstrap, but it’s controlled via data attributes instead of media queries and does not automatically toggle your project’s color mode. You can disable our dark mode entirely via Sass by changing
$enable-dark-mode
false
We use a custom Sass mixin,
color-mode()
, to help you control
color modes are applied. By default, we use a
data
attribute approach, allowing you to create more user-friendly experiences where your visitors can choose to have an automatic dark mode or control their preference (like in our own docs here). This is also an easy and scalable way to add different themes and more custom color modes beyond light and dark.
In case you want to use media queries and only make color modes automatic, you can change the mixin’s default type via Sass variable. Consider the following snippet and its compiled CSS output.
$color-mode-type
data
@include
color-mode
dark
.element
color
--bs-primary-text-emphasis
background-color
--bs-primary-bg-subtle
Outputs to:
[data-bs-theme=dark] .element
color
--bs-primary-text-emphasis
background-color
--bs-primary-bg-subtle
And when setting to
media-query
$color-mode-type
media-query
@include
color-mode
dark
.element
color
--bs-primary-text-emphasis
background-color
--bs-primary-bg-subtle
Outputs to:
@media
prefers-color-scheme
dark
.element
color
--bs-primary-text-emphasis
background-color
--bs-primary-bg-subtle
Custom color modes
While the primary use case for color modes is light and dark mode, custom color modes are also possible. Create your own
data-bs-theme
selector with a custom value as the name of your color mode, then modify our Sass and CSS variables as needed. We opted to create a separate
_variables-dark.scss
stylesheet to house Bootstrap’s dark mode specific Sass variables, but that’s not required for you.
For example, you can create a “blue theme” with the selector
data-bs-theme="blue"
. In your custom Sass or CSS file, add the new selector and override any global or component CSS variables as needed. If you’re using Sass, you can also use Sass’s functions within your CSS variable overrides.
site/src/scss/_content.scss
[data-bs-theme="blue"]
--bs-body-color
--bs-white
--bs-body-color-rgb
to-rgb
$white
--bs-body-bg
--bs-blue
--bs-body-bg-rgb
to-rgb
$blue
--bs-tertiary-bg
#{$blue-600}
.dropdown-menu
--bs-dropdown-bg
$blue-500
$blue-600
--bs-dropdown-link-active-bg
#{$blue-700}
.btn-secondary
--bs-btn-bg
$gray-600
$blue-400
--bs-btn-border-color
rgba
$white
--bs-btn-hover-bg
darken
$gray-600
$blue-400
--bs-btn-hover-border-color
rgba
$white
--bs-btn-active-bg
darken
$gray-600
$blue-400
--bs-btn-active-border-color
rgba
$white
--bs-btn-focus-border-color
rgba
$white
--bs-btn-focus-box-shadow
0 0 0 .25rem
rgba
Example blue theme
Some paragraph text to show how the blue theme might look with written copy.
Dropdown button
Action
Action
Another action
Something else here
Separated link
data-bs-theme
blue
JavaScript
To allow visitors or users to toggle color modes, you’ll need to create a toggle element to control the
data-bs-theme
attribute on the root element,
<html>
. We’ve built a toggler in our documentation that initially defers to a user’s current system color mode, but provides an option to override that and pick a specific color mode.
Here’s a look at the JavaScript that powers it. Feel free to inspect our own documentation navbar to see how it’s implemented using HTML and CSS from our own components. It is suggested to include the JavaScript at the top of your page to reduce potential screen flickering during reloading of your site. Note that if you decide to use media queries for your color modes, your JavaScript may need to be modified or removed if you prefer an implicit control.
* Color mode toggler for Bootstrap's docs (https://getbootstrap.com/)
* Copyright 2011-2025 The Bootstrap Authors
* Licensed under the Creative Commons Attribution 3.0 Unported License.
'use strict'
const
getStoredTheme
localStorage
getItem
'theme'
const
setStoredTheme
theme
localStorage
setItem
'theme'
theme
const
getPreferredTheme
const
storedTheme
getStoredTheme
storedTheme
return
storedTheme
return
window
matchMedia
'(prefers-color-scheme: dark)'
matches
'dark'
'light'
const
setTheme
theme
theme
'auto'
document
documentElement
setAttribute
'data-bs-theme'
window
matchMedia
'(prefers-color-scheme: dark)'
matches
'dark'
'light'
else
document
documentElement
setAttribute
'data-bs-theme'
theme
setTheme
getPreferredTheme
const
showActiveTheme
theme
focus
false
const
themeSwitcher
document
querySelector
'#bd-theme'
themeSwitcher
return
const
themeSwitcherText
document
querySelector
'#bd-theme-text'
const
activeThemeIcon
document
querySelector
'.theme-icon-active use'
const
btnToActive
document
querySelector
[data-bs-theme-value="
theme
const
svgOfActiveBtn
btnToActive
querySelector
'svg use'
getAttribute
'href'
document
querySelectorAll
'[data-bs-theme-value]'
forEach
element
element
classList
remove
'active'
element
setAttribute
'aria-pressed'
'false'
btnToActive
classList
'active'
btnToActive
setAttribute
'aria-pressed'
'true'
activeThemeIcon
setAttribute
'href'
svgOfActiveBtn
const
themeSwitcherLabel
themeSwitcherText
textContent
btnToActive
dataset
bsThemeValue
themeSwitcher
setAttribute
'aria-label'
themeSwitcherLabel
focus
themeSwitcher
focus
window
matchMedia
'(prefers-color-scheme: dark)'
addEventListener
'change'
const
storedTheme
getStoredTheme
storedTheme
'light'
storedTheme
'dark'
setTheme
getPreferredTheme
window
addEventListener
'DOMContentLoaded'
showActiveTheme
getPreferredTheme
document
querySelectorAll
'[data-bs-theme-value]'
forEach
toggle
toggle
addEventListener
'click'
const
theme
toggle
getAttribute
'data-bs-theme-value'
setStoredTheme
theme
setTheme
theme
showActiveTheme
theme
true
Adding theme colors
Adding a new color in
$theme-colors
is not enough for some of our components like
alerts
list groups
. New colors must also be defined in
$theme-colors-text
$theme-colors-bg-subtle
, and
$theme-colors-border-subtle
for light theme; but also in
$theme-colors-text-dark
$theme-colors-bg-subtle-dark
, and
$theme-colors-border-subtle-dark
for dark theme.
This is a manual process because Sass cannot generate its own Sass variables from an existing variable or map. In future versions of Bootstrap, we'll revisit this setup to reduce the duplication.
// Required
@import
"functions"
@import
"variables"
@import
"variables-dark"
// Add a custom color to $theme-colors
$custom-colors
"custom-color"
#712cf9
$theme-colors
map-merge
$theme-colors
$custom-colors
@import
"maps"
@import
"mixins"
@import
"utilities"
// Add a custom color to new theme maps
// Light mode
$custom-colors-text
"custom-color"
#712cf9
$custom-colors-bg-subtle
"custom-color"
#e1d2fe
$custom-colors-border-subtle
"custom-color"
#bfa1fc
$theme-colors-text
map-merge
$theme-colors-text
$custom-colors-text
$theme-colors-bg-subtle
map-merge
$theme-colors-bg-subtle
$custom-colors-bg-subtle
$theme-colors-border-subtle
map-merge
$theme-colors-border-subtle
$custom-colors-border-subtle
// Dark mode
$custom-colors-text-dark
"custom-color"
#e1d2f2
$custom-colors-bg-subtle-dark
"custom-color"
#8951fa
$custom-colors-border-subtle-dark
"custom-color"
#e1d2f2
$theme-colors-text-dark
map-merge
$theme-colors-text-dark
$custom-colors-text-dark
$theme-colors-bg-subtle-dark
map-merge
$theme-colors-bg-subtle-dark
$custom-colors-bg-subtle-dark
$theme-colors-border-subtle-dark
map-merge
$theme-colors-border-subtle-dark
$custom-colors-border-subtle-dark
// Remainder of Bootstrap imports
@import
"root"
@import
"reboot"
// etc
Variables
Dozens of root level CSS variables are repeated as overrides for dark mode. These are scoped to the color mode selector, which defaults to
data-bs-theme
can be configured
to use a
prefers-color-scheme
media query. Use these variables as a guideline for generating your own new color modes.
scss/_root.scss
#{$prefix}
body-color
#{$body-color-dark}
#{$prefix}
body-color-rgb
to-rgb
$body-color-dark
#{$prefix}
body-bg
#{$body-bg-dark}
#{$prefix}
body-bg-rgb
to-rgb
$body-bg-dark
#{$prefix}
emphasis-color
#{$body-emphasis-color-dark}
#{$prefix}
emphasis-color-rgb
to-rgb
$body-emphasis-color-dark
#{$prefix}
secondary-color
#{$body-secondary-color-dark}
#{$prefix}
secondary-color-rgb
to-rgb
$body-secondary-color-dark
#{$prefix}
secondary-bg
#{$body-secondary-bg-dark}
#{$prefix}
secondary-bg-rgb
to-rgb
$body-secondary-bg-dark
#{$prefix}
tertiary-color
#{$body-tertiary-color-dark}
#{$prefix}
tertiary-color-rgb
to-rgb
$body-tertiary-color-dark
#{$prefix}
tertiary-bg
#{$body-tertiary-bg-dark}
#{$prefix}
tertiary-bg-rgb
to-rgb
$body-tertiary-bg-dark
@each
$color
$value
$theme-colors-text-dark
#{$prefix}
#{$color}
-text-emphasis
#{$value}
@each
$color
$value
$theme-colors-bg-subtle-dark
#{$prefix}
#{$color}
-bg-subtle
#{$value}
@each
$color
$value
$theme-colors-border-subtle-dark
#{$prefix}
#{$color}
-border-subtle
#{$value}
#{$prefix}
heading-color
#{$headings-color-dark}
#{$prefix}
link-color
#{$link-color-dark}
#{$prefix}
link-hover-color
#{$link-hover-color-dark}
#{$prefix}
link-color-rgb
to-rgb
$link-color-dark
#{$prefix}
link-hover-color-rgb
to-rgb
$link-hover-color-dark
#{$prefix}
code-color
#{$code-color-dark}
#{$prefix}
highlight-color
#{$mark-color-dark}
#{$prefix}
highlight-bg
#{$mark-bg-dark}
#{$prefix}
border-color
#{$border-color-dark}
#{$prefix}
border-color-translucent
#{$border-color-translucent-dark}
#{$prefix}
form-valid-color
#{$form-valid-color-dark}
#{$prefix}
form-valid-border-color
#{$form-valid-border-color-dark}
#{$prefix}
form-invalid-color
#{$form-invalid-color-dark}
#{$prefix}
form-invalid-border-color
#{$form-invalid-border-color-dark}
Sass variables
CSS variables for our dark color mode are partially generated from dark mode specific Sass variables in
_variables-dark.scss
. This also includes some custom overrides for changing the colors of embedded SVGs used throughout our components.
scss/_variables-dark.scss
// scss-docs-start theme-text-dark-variables
$primary-text-emphasis-dark
tint-color
$primary
$secondary-text-emphasis-dark
tint-color
$secondary
$success-text-emphasis-dark
tint-color
$success
$info-text-emphasis-dark
tint-color
$info
$warning-text-emphasis-dark
tint-color
$warning
$danger-text-emphasis-dark
tint-color
$danger
$light-text-emphasis-dark
$gray-100
$dark-text-emphasis-dark
$gray-300
// scss-docs-end theme-text-dark-variables
// scss-docs-start theme-bg-subtle-dark-variables
$primary-bg-subtle-dark
shade-color
$primary
$secondary-bg-subtle-dark
shade-color
$secondary
$success-bg-subtle-dark
shade-color
$success
$info-bg-subtle-dark
shade-color
$info
$warning-bg-subtle-dark
shade-color
$warning
$danger-bg-subtle-dark
shade-color
$danger
$light-bg-subtle-dark
$gray-800
$dark-bg-subtle-dark
$gray-800
$black
// scss-docs-end theme-bg-subtle-dark-variables
// scss-docs-start theme-border-subtle-dark-variables
$primary-border-subtle-dark
shade-color
$primary
$secondary-border-subtle-dark
shade-color
$secondary
$success-border-subtle-dark
shade-color
$success
$info-border-subtle-dark
shade-color
$info
$warning-border-subtle-dark
shade-color
$warning
$danger-border-subtle-dark
shade-color
$danger
$light-border-subtle-dark
$gray-700
$dark-border-subtle-dark
$gray-800
// scss-docs-end theme-border-subtle-dark-variables
$body-color-dark
$gray-300
$body-bg-dark
$gray-900
$body-secondary-color-dark
rgba
$body-color-dark
$body-secondary-bg-dark
$gray-800
$body-tertiary-color-dark
rgba
$body-color-dark
$body-tertiary-bg-dark
$gray-800
$gray-900
$body-emphasis-color-dark
$white
$border-color-dark
$gray-700
$border-color-translucent-dark
rgba
$white
$headings-color-dark
inherit
$link-color-dark
tint-color
$primary
$link-hover-color-dark
shift-color
$link-color-dark
$link-shade-percentage
$code-color-dark
tint-color
$code-color
$mark-color-dark
$body-color-dark
$mark-bg-dark
$yellow-800
// Forms
$form-select-indicator-color-dark
$body-color-dark
$form-select-indicator-dark
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'><path fill='none' stroke='#{$form-select-indicator-color-dark}' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/></svg>"
$form-switch-color-dark
rgba
$white
$form-switch-bg-image-dark
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'><circle r='3' fill='#{$form-switch-color-dark}'/></svg>"
// scss-docs-start form-validation-colors-dark
$form-valid-color-dark
$green-300
$form-valid-border-color-dark
$green-300
$form-invalid-color-dark
$red-300
$form-invalid-border-color-dark
$red-300
// scss-docs-end form-validation-colors-dark
// Accordion
$accordion-icon-color-dark
$primary-text-emphasis-dark
$accordion-icon-active-color-dark
$primary-text-emphasis-dark
$accordion-button-icon-dark
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='#{$accordion-icon-color-dark}'><path fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708'/></svg>"
$accordion-button-active-icon-dark
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='#{$accordion-icon-active-color-dark}'><path fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708'/></svg>"
Sass mixins
Styles for dark mode, and any custom color modes you create, can be scoped appropriately to the
data-bs-theme
attribute selector or media query with the customizable
color-mode()
mixin. See the
Sass usage section
for more details.
scss/mixins/_color-mode.scss
@mixin
color-mode
$mode
light
$root
false
$color-mode-type
== "media-query"
$root
== true
@media
prefers-color-scheme
$mode
:root
@content
@else
@media
prefers-color-scheme
$mode
@content
@else
[data-bs-theme="
#{$mode}
@content

--- 077_helpers_position.txt ---
Fixed top
Position an element at the top of the viewport, from edge to edge. Be sure you understand the ramifications of fixed position in your project; you may need to add additional CSS.
class
fixed-top
Fixed bottom
Position an element at the bottom of the viewport, from edge to edge. Be sure you understand the ramifications of fixed position in your project; you may need to add additional CSS.
class
fixed-bottom
Sticky top
Position an element at the top of the viewport, from edge to edge, but only after you scroll past it.
class
sticky-top
Responsive sticky top
Responsive variations also exist for
.sticky-top
utility.
class
sticky-sm-top
Stick to the top on viewports sized SM (small) or wider
class
sticky-md-top
Stick to the top on viewports sized MD (medium) or wider
class
sticky-lg-top
Stick to the top on viewports sized LG (large) or wider
class
sticky-xl-top
Stick to the top on viewports sized XL (extra-large) or wider
class
sticky-xxl-top
Stick to the top on viewports sized XXL (extra-extra-large) or wider
Sticky bottom
Position an element at the bottom of the viewport, from edge to edge, but only after you scroll past it.
class
sticky-bottom
Responsive sticky bottom
Responsive variations also exist for
.sticky-bottom
utility.
class
sticky-sm-bottom
Stick to the bottom on viewports sized SM (small) or wider
class
sticky-md-bottom
Stick to the bottom on viewports sized MD (medium) or wider
class
sticky-lg-bottom
Stick to the bottom on viewports sized LG (large) or wider
class
sticky-xl-bottom
Stick to the bottom on viewports sized XL (extra-large) or wider
class
sticky-xxl-bottom
Stick to the bottom on viewports sized XXL (extra-extra-large) or wider

--- 091_utilities_interactions.txt ---
Text selection
Change the way in which the content is selected when the user interacts with it.
This paragraph will be entirely selected when clicked by the user.
This paragraph has default select behavior.
This paragraph will not be selectable when clicked by the user.
html
class
user-select-all
This paragraph will be entirely selected when clicked by the user.
class
user-select-auto
This paragraph has default select behavior.
class
user-select-none
This paragraph will not be selectable when clicked by the user.
Pointer events
.pe-none
.pe-auto
classes to prevent or add element interactions.
This link
can not be clicked.
This link
can be clicked (this is default behavior).
This link
can not be clicked because the
pointer-events
property is inherited from its parent. However,
this link
has a
pe-auto
class and can be clicked.
html
href
class
pe-none
tabindex
aria-disabled
true
This link
can not be clicked.
href
class
pe-auto
This link
can be clicked (this is default behavior).
class
pe-none
href
tabindex
aria-disabled
true
This link
can not be clicked because the
code
pointer-events
code
property is inherited from its parent. However,
href
class
pe-auto
this link
has a
code
pe-auto
code
class and can be clicked.
.pe-none
class (and the
pointer-events
CSS property it sets) only prevents interactions with a pointer (mouse, stylus, touch). Links and controls with
.pe-none
are, by default, still focusable and actionable for keyboard users. To ensure that they are completely neutralized even for keyboard users, you may need to add further attributes such as
tabindex="-1"
(to prevent them from receiving keyboard focus) and
aria-disabled="true"
(to convey the fact they are effectively disabled to assistive technologies), and possibly use JavaScript to completely prevent them from being actionable.
If possible, the simpler solution is:
For form controls, add the
disabled
HTML attribute.
For links, remove the
href
attribute, making it a non-interactive anchor or placeholder link.
Sass utilities API
Interaction utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"user-select"
property
user-select
values
all auto none
"pointer-events"
property
pointer-events
class
values
none auto

--- 032_utilities_spacing.txt ---
Margin and padding
Assign responsive-friendly
margin
padding
values to an element or a subset of its sides with shorthand classes. Includes support for individual properties, all properties, and vertical and horizontal properties. Classes are built from a default Sass map ranging from
.25rem
3rem
Using the CSS Grid layout module?
Consider using
the gap utility
instead.
Notation
Spacing utilities that apply to all breakpoints, from
, have no breakpoint abbreviation in them. This is because those classes are applied from
min-width: 0
and up, and thus are not bound by a media query. The remaining breakpoints, however, do include a breakpoint abbreviation.
The classes are named using the format
{property}{sides}-{size}
{property}{sides}-{breakpoint}-{size}
, and
Where
property
is one of:
- for classes that set
margin
- for classes that set
padding
Where
sides
is one of:
- for classes that set
margin-top
padding-top
- for classes that set
margin-bottom
padding-bottom
- (start) for classes that set
margin-left
padding-left
in LTR,
margin-right
padding-right
in RTL
- (end) for classes that set
margin-right
padding-right
in LTR,
margin-left
padding-left
in RTL
- for classes that set both
*-left
*-right
- for classes that set both
*-top
*-bottom
blank - for classes that set a
margin
padding
on all 4 sides of the element
Where
size
is one of:
- for classes that eliminate the
margin
padding
by setting it to
- (by default) for classes that set the
margin
padding
$spacer * .25
- (by default) for classes that set the
margin
padding
$spacer * .5
- (by default) for classes that set the
margin
padding
$spacer
- (by default) for classes that set the
margin
padding
$spacer * 1.5
- (by default) for classes that set the
margin
padding
$spacer * 3
auto
- for classes that set the
margin
to auto
(You can add more sizes by adding entries to the
$spacers
Sass map variable.)
Examples
Here are some representative examples of these classes:
.mt-0
margin-top
!important
.ms-1
margin-left
$spacer
!important
.px-2
padding-left
$spacer
!important
padding-right
$spacer
!important
.p-3
padding
$spacer
!important
Horizontal centering
Additionally, Bootstrap also includes an
.mx-auto
class for horizontally centering fixed-width block level content—that is, content that has
display: block
and a
width
set—by setting the horizontal margins to
auto
Centered element
class
mx-auto p-2
style
width
200px
Centered element
Negative margin
In CSS,
margin
properties can utilize negative values (
padding
cannot). These negative margins are
disabled by default
, but can be enabled in Sass by setting
$enable-negative-margins: true
The syntax is nearly the same as the default, positive margin utilities, but with the addition of
before the requested size. Here’s an example class that’s the opposite of
.mt-1
.mt-n1
margin-top
-0.25rem
!important
When using
display: grid
display: flex
, you can make use of
utilities on the parent element. This can save on having to add margin utilities to individual children of a grid or flex container. Gap utilities are responsive by default, and are generated via our utilities API, based on the
$spacers
Sass map.
Grid item 1
Grid item 2
Grid item 3
Grid item 4
html
style
grid-template-columns
1fr 1fr
class
d-grid gap-3
class
Grid item 1
class
Grid item 2
class
Grid item 3
class
Grid item 4
Support includes responsive options for all of Bootstrap’s grid breakpoints, as well as six sizes from the
$spacers
map (
). There is no
.gap-auto
utility class as it’s effectively the same as
.gap-0
row-gap
row-gap
sets the vertical space between children items in the specified container.
Grid item 1
Grid item 2
Grid item 3
Grid item 4
html
style
grid-template-columns
1fr 1fr
class
d-grid gap-0 row-gap-3
class
Grid item 1
class
Grid item 2
class
Grid item 3
class
Grid item 4
column-gap
column-gap
sets the horizontal space between children items in the specified container.
Grid item 1
Grid item 2
Grid item 3
Grid item 4
html
style
grid-template-columns
1fr 1fr
class
d-grid gap-0 column-gap-3
class
Grid item 1
class
Grid item 2
class
Grid item 3
class
Grid item 4
Sass maps
Spacing utilities are declared via Sass map and then generated with our utilities API.
scss/_variables.scss
$spacer
1rem
$spacers
$spacer
$spacer
$spacer
$spacer
$spacer
Sass utilities API
Spacing utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"margin"
responsive
true
property
margin
class
values
map-merge
$spacers
auto
auto
"margin-x"
responsive
true
property
margin-right margin-left
class
values
map-merge
$spacers
auto
auto
"margin-y"
responsive
true
property
margin-top margin-bottom
class
values
map-merge
$spacers
auto
auto
"margin-top"
responsive
true
property
margin-top
class
values
map-merge
$spacers
auto
auto
"margin-end"
responsive
true
property
margin-right
class
values
map-merge
$spacers
auto
auto
"margin-bottom"
responsive
true
property
margin-bottom
class
values
map-merge
$spacers
auto
auto
"margin-start"
responsive
true
property
margin-left
class
values
map-merge
$spacers
auto
auto
// Negative margin utilities
"negative-margin"
responsive
true
property
margin
class
values
$negative-spacers
"negative-margin-x"
responsive
true
property
margin-right margin-left
class
values
$negative-spacers
"negative-margin-y"
responsive
true
property
margin-top margin-bottom
class
values
$negative-spacers
"negative-margin-top"
responsive
true
property
margin-top
class
values
$negative-spacers
"negative-margin-end"
responsive
true
property
margin-right
class
values
$negative-spacers
"negative-margin-bottom"
responsive
true
property
margin-bottom
class
values
$negative-spacers
"negative-margin-start"
responsive
true
property
margin-left
class
values
$negative-spacers
// Padding utilities
"padding"
responsive
true
property
padding
class
values
$spacers
"padding-x"
responsive
true
property
padding-right padding-left
class
values
$spacers
"padding-y"
responsive
true
property
padding-top padding-bottom
class
values
$spacers
"padding-top"
responsive
true
property
padding-top
class
values
$spacers
"padding-end"
responsive
true
property
padding-right
class
values
$spacers
"padding-bottom"
responsive
true
property
padding-bottom
class
values
$spacers
"padding-start"
responsive
true
property
padding-left
class
values
$spacers
// Gap utility
"gap"
responsive
true
property
class
values
$spacers
"row-gap"
responsive
true
property
row-gap
class
row-gap
values
$spacers
"column-gap"
responsive
true
property
column-gap
class
column-gap
values
$spacers

--- 123_getting-started_webpack.txt ---
Want to skip to the end?
Download the source code and working demo for this guide from the
twbs/examples repository
. You can also
open the example in StackBlitz
for live editing.
What is Webpack?
Webpack
is a JavaScript module bundler that processes modules and their dependencies to generate static assets. It simplifies managing complex web applications with multiple files and dependencies.
Setup
We’re building a Webpack project with Bootstrap from scratch, so there are some prerequisites and upfront steps before we can really get started. This guide requires you to have Node.js installed and some familiarity with the terminal.
Create a project folder and set up npm.
We'll create the
my-project
folder and initialize npm with the
argument to avoid it asking us all the interactive questions.
mkdir
my-project
my-project
init
Install Webpack.
Next we need to install our Webpack development dependencies:
webpack
for the core of Webpack,
webpack-cli
so we can run Webpack commands from the terminal, and
webpack-dev-server
so we can run a local development server. Additionally, we'll install
html-webpack-plugin
to be able to store our
index.html
directory instead of the default
dist
one. We use
--save-dev
to signal that these dependencies are only for development use and not for production.
i --save-dev webpack webpack-cli webpack-dev-server html-webpack-plugin
Install Bootstrap.
Now we can install Bootstrap. We'll also install Popper since our dropdowns, popovers, and tooltips depend on it for their positioning. If you don’t plan on using those components, you can omit Popper here.
--save
Install additional dependencies.
In addition to Webpack and Bootstrap, we need a few more dependencies to properly import and bundle Bootstrap’s CSS and JS with Webpack. These include Sass, some loaders, and Autoprefixer.
i --save-dev autoprefixer css-loader postcss-loader sass sass-loader style-loader
Now that we have all the necessary dependencies installed, we can get to work creating the project files and importing Bootstrap.
Project structure
We’ve already created the
my-project
folder and initialized npm. Now we'll also create our
dist
folders to round out the project structure. Run the following from
my-project
, or manually create the folder and file structure shown below.
mkdir
src,src/js,src/scss
touch
src/index.html src/js/main.js src/scss/styles.scss webpack.config.js
When you’re done, your complete project should look like this:
my-project/
├── src/
│ ├── js/
│ │ └── main.js
│ ├── scss/
│ │ └── styles.scss
│ └── index.html
├── package-lock.json
├── package.json
└── webpack.config.js
At this point, everything is in the right place, but Webpack won’t work because we haven’t filled in our
webpack.config.js
yet.
Configure Webpack
With dependencies installed and our project folder ready for us to start coding, we can now configure Webpack and run our project locally.
Open
webpack.config.js
in your editor.
Since it’s blank, we'll need to add some boilerplate config to it so we can start our server. This part of the config tells Webpack where to look for our project’s JavaScript, where to output the compiled code to (
dist
), and how the development server should behave (pulling from the
dist
folder with hot reload).
'use strict'
const
path
require
'path'
const
HtmlWebpackPlugin
require
'html-webpack-plugin'
module
exports
mode
'development'
entry
'./src/js/main.js'
output
filename
'main.js'
path
path
resolve
__dirname
'dist'
devServer
static
path
resolve
__dirname
'dist'
port
8080
true
plugins
HtmlWebpackPlugin
template
'./src/index.html'
Next we fill in our
src/index.html
This is the HTML page Webpack will load in the browser to utilize the bundled CSS and JS we'll add to it in later steps. Before we can do that, we have to give it something to render and include the
output
JS from the previous step.
doctype
html
html
lang
head
meta
charset
utf-8
meta
name
viewport
content
width=device-width, initial-scale=1
title
title
head
body
class
container py-4 px-3 mx-auto
Hello, Bootstrap and Webpack!
button
class
btn btn-primary
Primary button
button
body
html
We’re including a little bit of Bootstrap styling here with the
div class="container"
<button>
so that we see when Bootstrap’s CSS is loaded by Webpack.
Now we need an npm script to run Webpack.
Open
package.json
and add the
start
script shown below (you should already have the test script). We'll use this script to start our local Webpack dev server. You can also add a
build
script shown below to build your project.
// ...
"scripts"
"start"
"webpack serve"
"build"
"webpack build --mode=production"
"test"
"echo \"Error: no test specified\" && exit 1"
// ...
And finally, we can start Webpack.
From the
my-project
folder in your terminal, run that newly added npm script:
start
In the next and final section to this guide, we'll set up the Webpack loaders and import all of Bootstrap’s CSS and JavaScript.
Import Bootstrap
Importing Bootstrap into Webpack requires the loaders we installed in the first section. We’ve installed them with npm, but now Webpack needs to be configured to use them.
Set up the loaders in
webpack.config.js
Your configuration file is now complete and should match the snippet below. The only new part here is the
module
section.
'use strict'
const
path
require
'path'
const
autoprefixer
require
'autoprefixer'
const
HtmlWebpackPlugin
require
'html-webpack-plugin'
module
exports
mode
'development'
entry
'./src/js/main.js'
output
filename
'main.js'
path
path
resolve
__dirname
'dist'
devServer
static
path
resolve
__dirname
'dist'
port
8080
true
plugins
HtmlWebpackPlugin
template
'./src/index.html'
module
rules
test
\.(scss)$
// Adds CSS to the DOM by injecting a `<style>` tag
loader
'style-loader'
// Interprets `@import` and `url()` like `import/require()` and will resolve them
loader
'css-loader'
// Loader for webpack to process CSS with PostCSS
loader
'postcss-loader'
options
postcssOptions
plugins
autoprefixer
// Loads a SASS/SCSS file and compiles it to CSS
loader
'sass-loader'
options
sassOptions
// Optional: Silence Sass deprecation warnings. See note below.
silenceDeprecations
'mixed-decls'
'color-functions'
'global-builtin'
'import'
Here’s a recap of why we need all these loaders.
style-loader
injects the CSS into a
<style>
element in the
<head>
of the HTML page,
css-loader
helps with using
@import
url()
postcss-loader
is required for Autoprefixer, and
sass-loader
allows us to use Sass.
Note:
Sass deprecation warnings are shown when compiling source Sass files with the latest versions of Dart Sass. This does not prevent compilation or usage of Bootstrap. We’re
working on a long-term fix
, but in the meantime these deprecation notices can be ignored.
Now, let’s import Bootstrap’s CSS.
Add the following to
src/scss/styles.scss
to import all of Bootstrap’s source Sass.
// Import all of Bootstrap’s CSS
@import
"bootstrap/scss/bootstrap"
You can also import our stylesheets individually if you want.
Read our Sass import docs
for details.
Next we load the CSS and import Bootstrap’s JavaScript.
Add the following to
src/js/main.js
to load the CSS and import all of Bootstrap’s JS. Popper will be imported automatically through Bootstrap.
// Import our custom CSS
import
'../scss/styles.scss'
// Import all of Bootstrap’s JS
import
from
'bootstrap'
You can also import JavaScript plugins individually as needed to keep bundle sizes down:
import
Alert
from
'bootstrap/js/dist/alert'
// or, specify which plugins you need:
import
Tooltip
Toast
Popover
from
'bootstrap'
Read our JavaScript docs
for more information on how to use Bootstrap’s plugins.
And you’re done! 🎉
With Bootstrap’s source Sass and JS fully loaded, your local development server should now look like this:
Now you can start adding any Bootstrap components you want to use. Be sure to
check out the complete Webpack example project
for how to include additional custom Sass and optimize your build by importing only the parts of Bootstrap’s CSS and JS that you need.
Production optimizations
Depending on your setup, you may want to implement some additional security and speed optimizations useful for running the project in production. Note that these optimizations are not applied on
the Webpack example project
and are up to you to implement.
Extracting CSS
style-loader
we configured above conveniently emits CSS into the bundle so that manually loading a CSS file in
dist/index.html
isn’t necessary. This approach may not work with a strict Content Security Policy, however, and it may become a bottleneck in your application due to the large bundle size.
To separate the CSS so that we can load it directly from
dist/index.html
, use the
mini-css-extract-loader
Webpack plugin.
First, install the plugin:
install
--save-dev mini-css-extract-plugin
Then instantiate and use the plugin in the Webpack configuration:
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -3,6 +3,7 @@
const path = require('path')
const autoprefixer = require('autoprefixer')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const miniCssExtractPlugin = require('mini-css-extract-plugin')
module.exports = {
mode: 'development',
@@ -17,7 +18,8 @@ module.exports = {
hot: true
plugins: [
new HtmlWebpackPlugin({ template: './src/index.html' })
new HtmlWebpackPlugin({ template: './src/index.html' }),
new miniCssExtractPlugin()
module: {
rules: [
@@ -25,8 +27,8 @@ module.exports = {
test: /\.(scss)$/,
use: [
// Adds CSS to the DOM by injecting a `<style>` tag
loader: 'style-loader'
// Extracts CSS for each JS file that includes CSS
loader: miniCssExtractPlugin.loader
After running
npm run build
again, there will be a new file
dist/main.css
, which will contain all of the CSS imported by
src/js/main.js
. If you view
dist/index.html
in your browser now, the style will be missing, as it is now in
dist/main.css
. You can include the generated CSS in
dist/index.html
like this:
--- a/dist/index.html
+++ b/dist/index.html
@@ -3,6 +3,7 @@
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="./main.css">
<title>Bootstrap w/ Webpack</title>
</head>
<body>
Extracting SVG files
data:
URIs. If you define a Content Security Policy for your project that blocks
data:
URIs for images, then these SVG files will not load. You can get around this problem by extracting the inline SVG files using Webpack’s asset modules feature.
Configure Webpack to extract inline SVG files like this:
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -23,6 +23,14 @@ module.exports = {
module: {
rules: [
mimetype: 'image/svg+xml',
scheme: 'data',
type: 'asset/resource',
generator: {
filename: 'icons/[hash].svg'
test: /\.(scss)$/,
use: [
After running
npm run build
again, you’ll find the SVG files extracted into
dist/icons
and properly referenced from CSS.
See something wrong or out of date here? Please
open an issue on GitHub
. Need help troubleshooting?
Search or start a discussion
on GitHub.

--- 081_forms_floating-labels.txt ---
Example
Wrap a pair of
<input class="form-control">
<label>
elements in
.form-floating
to enable floating labels with Bootstrap’s textual form fields.
A non-empty
placeholder
attribute is required on each
<input>
as our CSS-only floating label implementation relies on the
:placeholder-shown
pseudo-element to detect when the input is empty. The placeholder text itself is not visible; only the
<label>
is shown to users.
Also note that the
<input>
must come first so we can utilize a sibling selector (i.e.,
Email address
Password
html
class
form-floating mb-3
input
type
email
class
form-control
floatingInput
placeholder
name@example.com
label
floatingInput
Email address
label
class
form-floating
input
type
password
class
form-control
floatingPassword
placeholder
Password
label
floatingPassword
Password
label
When there’s a
value
already defined,
<label>
s will automatically adjust to their floated position.
Input with value
html
form
class
form-floating
input
type
email
class
form-control
floatingInputValue
placeholder
name@example.com
value
test@example.com
label
floatingInputValue
Input with value
label
form
Form validation styles also work as expected.
Invalid input
html
form
class
form-floating
input
type
email
class
form-control is-invalid
floatingInputInvalid
placeholder
name@example.com
value
test@example.com
label
floatingInputInvalid
Invalid input
label
form
Textareas
By default,
<textarea>
s with
.form-control
will be the same height as
<input>
Comments
html
class
form-floating
textarea
class
form-control
placeholder
Leave a comment here
floatingTextarea
textarea
label
floatingTextarea
Comments
label
To set a custom height on your
<textarea>
, do not use the
rows
attribute. Instead, set an explicit
height
(either inline or via custom CSS).
Comments
html
class
form-floating
textarea
class
form-control
placeholder
Leave a comment here
floatingTextarea2
style
height
100px
textarea
label
floatingTextarea2
Comments
label
Selects
Other than
.form-control
, floating labels are only available on
.form-select
s. They work in the same way, but unlike
<input>
s, they’ll always show the
<label>
in its floated state.
Selects with
size
multiple
are not supported.
Open this select menu
Three
Works with selects
html
class
form-floating
select
class
form-select
floatingSelect
aria-label
Floating label select example
option
selected
Open this select menu
option
option
value
option
option
value
option
option
value
Three
option
select
label
floatingSelect
Works with selects
label
Disabled
Add the
disabled
boolean attribute on an input, a textarea or a select to give it a grayed out appearance, remove pointer events, and prevent focusing.
Email address
Comments
Disabled textarea with some text inside
Comments
Open this select menu
Three
Works with selects
html
class
form-floating mb-3
input
type
email
class
form-control
floatingInputDisabled
placeholder
name@example.com
disabled
label
floatingInputDisabled
Email address
label
class
form-floating mb-3
textarea
class
form-control
placeholder
Leave a comment here
floatingTextareaDisabled
disabled
textarea
label
floatingTextareaDisabled
Comments
label
class
form-floating mb-3
textarea
class
form-control
placeholder
Leave a comment here
floatingTextarea2Disabled
style
height
100px
disabled
Disabled textarea with some text inside
textarea
label
floatingTextarea2Disabled
Comments
label
class
form-floating
select
class
form-select
floatingSelectDisabled
aria-label
Floating label disabled select example
disabled
option
selected
Open this select menu
option
option
value
option
option
value
option
option
value
Three
option
select
label
floatingSelectDisabled
Works with selects
label
Readonly plaintext
Floating labels also support
.form-control-plaintext
, which can be helpful for toggling from an editable
<input>
to a plaintext value without affecting the page layout.
Empty input
Input with value
html
class
form-floating mb-3
input
type
email
readonly
class
form-control-plaintext
floatingEmptyPlaintextInput
placeholder
name@example.com
label
floatingEmptyPlaintextInput
Empty input
label
class
form-floating mb-3
input
type
email
readonly
class
form-control-plaintext
floatingPlaintextInput
placeholder
name@example.com
value
name@example.com
label
floatingPlaintextInput
Input with value
label
Input groups
Floating labels also support
.input-group
Username
html
class
input-group mb-3
span
class
input-group-text
span
class
form-floating
input
type
text
class
form-control
floatingInputGroup1
placeholder
Username
label
floatingInputGroup1
Username
label
When using
.input-group
.form-floating
along with form validation, the
-feedback
should be placed outside of the
.form-floating
, but inside of the
.input-group
. This means that the feedback will need to be shown using javascript.
Username
Please choose a username.
html
class
input-group has-validation
span
class
input-group-text
span
class
form-floating is-invalid
input
type
text
class
form-control is-invalid
floatingInputGroup2
placeholder
Username
required
label
floatingInputGroup2
Username
label
class
invalid-feedback
Please choose a username.
Layout
When working with the Bootstrap grid system, be sure to place form elements within column classes.
Email address
Open this select menu
Three
Works with selects
html
class
row g-2
class
col-md
class
form-floating
input
type
email
class
form-control
floatingInputGrid
placeholder
name@example.com
value
mdo@example.com
label
floatingInputGrid
Email address
label
class
col-md
class
form-floating
select
class
form-select
floatingSelectGrid
option
selected
Open this select menu
option
option
value
option
option
value
option
option
value
Three
option
select
label
floatingSelectGrid
Works with selects
label
Sass variables
scss/_variables.scss
$form-floating-height
3.5rem
$input-height-border
$form-floating-line-height
1.25
$form-floating-padding-x
$input-padding-x
$form-floating-padding-y
1rem
$form-floating-input-padding-t
1.625rem
$form-floating-input-padding-b
.625rem
$form-floating-label-height
1.5em
$form-floating-label-opacity
$form-floating-label-transform
scale
translateY
-.5rem
translateX
.15rem
$form-floating-label-disabled-color
$gray-600
$form-floating-transition
opacity .1s ease-in-out
transform .1s ease-in-out

--- 136_examples_navbars.txt ---
Matching .container-xl...
Navbar examples
This example is a quick exercise to illustrate how the navbar and its contents work. Some navbars extend the width of the viewport, others are confined within a
.container
. For positioning of navbars, checkout the
fixed top
examples.
At the smallest breakpoint, the collapse plugin is used to hide the links and show a menu button to toggle the collapsed content.
View navbar docs »

--- 044_getting-started_rfs.txt ---
What is RFS?
is a unit resizing engine which was initially developed to resize font sizes (hence its abbreviation for Responsive Font Sizes). Nowadays RFS is capable of rescaling most CSS properties with unit values like
margin
padding
border-radius
, or even
box-shadow
The mechanism automatically calculates the appropriate values based on the dimensions of the browser viewport. It will be compiled into
calc()
functions with a mix of
and viewport units to enable the responsive scaling behavior.
Using RFS
The mixins are included in Bootstrap and are available once you include Bootstrap’s
scss
. RFS can also be
installed standalone
if needed.
Using the mixins
rfs()
mixin has shorthands for
font-size
margin
margin-top
margin-right
margin-bottom
margin-left
padding
padding-top
padding-right
padding-bottom
, and
padding-left
. See the example below for source Sass and compiled CSS.
.title
@include
font-size
4rem
.title
font-size
calc
1.525rem + 3.3vw
@media
min-width
1200px
.title
font-size
4rem
Any other property can be passed to the
rfs()
mixin like this:
.selector
@include
4rem
border-radius
!important
can also just be added to whatever value you want:
.selector
@include
padding
2.5rem
!important
Using the functions
When you don’t want to use the includes, there are also two functions:
rfs-value()
converts a value into a
value if a
value is passed, in other cases it returns the same result.
rfs-fluid-value()
returns the fluid version of a value if the property needs rescaling.
In this example, we use one of Bootstrap’s built-in
responsive breakpoint mixins
to only apply styling below the
breakpoint.
.selector
@include
media-breakpoint-down
padding
rfs-fluid-value
2rem
font-size
rfs-fluid-value
1.125rem
@media
max-width
991.98px
.selector
padding
calc
1.325rem + 0.9vw
font-size
1.125rem
/* 1.125rem is small enough, so RFS won’t rescale this */
Extended documentation
RFS is a separate project under the Bootstrap organization. More about RFS and its configuration can be found on its
GitHub repository

--- 059_examples_dashboard.txt ---
Dashboard
Share
Export
This week
Section title
Header
Header
Header
Header
1,001
random
data
placeholder
text
1,002
placeholder
irrelevant
visual
layout
1,003
data
rich
dashboard
tabular
1,003
information
placeholder
illustrative
data
1,004
text
random
layout
dashboard
1,005
dashboard
irrelevant
text
placeholder
1,006
dashboard
illustrative
rich
data
1,007
placeholder
tabular
information
irrelevant
1,008
random
data
placeholder
text
1,009
placeholder
irrelevant
visual
layout
1,010
data
rich
dashboard
tabular
1,011
information
placeholder
illustrative
data
1,012
text
placeholder
layout
dashboard
1,013
dashboard
irrelevant
text
visual
1,014
dashboard
illustrative
rich
data
1,015
random
tabular
information
text

--- 116_components_collapse.txt ---
How it works
The collapse JavaScript plugin is used to show and hide content. Buttons or anchors are used as triggers that are mapped to specific elements you toggle. Collapsing an element will animate the
height
from its current value to
. Given how CSS handles animations, you cannot use
padding
on a
.collapse
element. Instead, use the class as an independent wrapping element.
The animation effect of this component is dependent on the
prefers-reduced-motion
media query. See the
reduced motion section of our accessibility documentation
Example
Click the buttons below to show and hide another element via class changes:
.collapse
hides content
.collapsing
is applied during transitions
.collapse.show
shows content
Generally, we recommend using a
<button>
with the
data-bs-target
attribute. While not recommended from a semantic point of view, you can also use an
link with the
href
attribute (and a
role="button"
). In both cases, the
data-bs-toggle="collapse"
is required.
Link with href
Button with data-bs-target
Some placeholder content for the collapse component. This panel is hidden by default but revealed when the user activates the relevant trigger.
html
class
d-inline-flex gap-1
class
btn btn-primary
data-bs-toggle
collapse
href
#collapseExample
role
button
aria-expanded
false
aria-controls
collapseExample
Link with href
button
class
btn btn-primary
type
button
data-bs-toggle
collapse
data-bs-target
#collapseExample
aria-expanded
false
aria-controls
collapseExample
Button with data-bs-target
button
class
collapse
collapseExample
class
card card-body
Some placeholder content for the collapse component. This panel is hidden by default but revealed when the user activates the relevant trigger.
Horizontal
The collapse plugin supports horizontal collapsing. Add the
.collapse-horizontal
modifier class to transition the
width
instead of
height
and set a
width
on the immediate child element. Feel free to write your own custom Sass, use inline styles, or use our
width utilities
Please note that while the example below has a
min-height
set to avoid excessive repaints in our docs, this is not explicitly required.
Only the
width
on the child element is required.
Toggle width collapse
This is some placeholder content for a horizontal collapse. It’s hidden by default and shown when triggered.
html
button
class
btn btn-primary
type
button
data-bs-toggle
collapse
data-bs-target
#collapseWidthExample
aria-expanded
false
aria-controls
collapseWidthExample
Toggle width collapse
button
style
min-height
120px
class
collapse collapse-horizontal
collapseWidthExample
class
card card-body
style
width
300px
This is some placeholder content for a horizontal collapse. It’s hidden by default and shown when triggered.
Multiple toggles and targets
<button>
element can show and hide multiple elements by referencing them with a selector in its
data-bs-target
href
attribute.
Conversely, multiple
<button>
elements can show and hide the same element if they each reference it with their
data-bs-target
href
attribute.
Toggle first element
Toggle second element
Toggle both elements
Some placeholder content for the first collapse component of this multi-collapse example. This panel is hidden by default but revealed when the user activates the relevant trigger.
Some placeholder content for the second collapse component of this multi-collapse example. This panel is hidden by default but revealed when the user activates the relevant trigger.
html
class
d-inline-flex gap-1
class
btn btn-primary
data-bs-toggle
collapse
href
#multiCollapseExample1
role
button
aria-expanded
false
aria-controls
multiCollapseExample1
Toggle first element
button
class
btn btn-primary
type
button
data-bs-toggle
collapse
data-bs-target
#multiCollapseExample2
aria-expanded
false
aria-controls
multiCollapseExample2
Toggle second element
button
button
class
btn btn-primary
type
button
data-bs-toggle
collapse
data-bs-target
.multi-collapse
aria-expanded
false
aria-controls
multiCollapseExample1 multiCollapseExample2
Toggle both elements
button
class
class
class
collapse multi-collapse
multiCollapseExample1
class
card card-body
Some placeholder content for the first collapse component of this multi-collapse example. This panel is hidden by default but revealed when the user activates the relevant trigger.
class
class
collapse multi-collapse
multiCollapseExample2
class
card card-body
Some placeholder content for the second collapse component of this multi-collapse example. This panel is hidden by default but revealed when the user activates the relevant trigger.
Accessibility
Be sure to add
aria-expanded
to the control element. This attribute explicitly conveys the current state of the collapsible element tied to the control to screen readers and similar assistive technologies. If the collapsible element is closed by default, the attribute on the control element should have a value of
aria-expanded="false"
. If you’ve set the collapsible element to be open by default using the
show
class, set
aria-expanded="true"
on the control instead. The plugin will automatically toggle this attribute on the control based on whether or not the collapsible element has been opened or closed (via JavaScript, or because the user triggered another control element also tied to the same collapsible element). If the control element’s HTML element is not a button (e.g., an
<div>
), the attribute
role="button"
should be added to the element.
If your control element is targeting a single collapsible element – i.e. the
data-bs-target
attribute is pointing to an
selector – you should add the
aria-controls
attribute to the control element, containing the
of the collapsible element. Modern screen readers and similar assistive technologies make use of this attribute to provide users with additional shortcuts to navigate directly to the collapsible element itself.
Note that Bootstrap’s current implementation does not cover the various
optional
keyboard interactions described in the
ARIA Authoring Practices Guide accordion pattern
- you will need to include these yourself with custom JavaScript.
Sass variables
scss/_variables.scss
$transition-collapse
height .35s ease
$transition-collapse-width
width .35s ease
Classes
Collapse transition classes can be found in
scss/_transitions.scss
as these are shared across multiple components (collapse and accordion).
scss/_transitions.scss
.collapse
show
display
none
.collapsing
height
overflow
hidden
@include
transition
$transition-collapse
.collapse-horizontal
width
height
auto
@include
transition
$transition-collapse-width
Usage
The collapse plugin utilizes a few classes to handle the heavy lifting:
.collapse
hides the content
.collapse.show
shows the content
.collapsing
is added when the transition starts, and removed when it finishes
These classes can be found in
_transitions.scss
Via data attributes
Just add
data-bs-toggle="collapse"
and a
data-bs-target
to the element to automatically assign control of one or more collapsible elements. The
data-bs-target
attribute accepts a CSS selector to apply the collapse to. Be sure to add the class
collapse
to the collapsible element. If you’d like it to default open, add the additional class
show
To add accordion-like group management to a collapsible area, add the data attribute
data-bs-parent="#selector"
. Refer to the
accordion page
for more information.
Via JavaScript
Enable manually with:
const
collapseElementList
document
querySelectorAll
'.collapse'
const
collapseList
collapseElementList
collapseEl
Collapse
collapseEl
Options
As options can be passed via data attributes or JavaScript, you can append an option name to
data-bs-
, as in
data-bs-animation="{value}"
. Make sure to change the case type of the option name from “
camelCase
” to “
kebab-case
” when passing the options via data attributes. For example, use
data-bs-custom-class="beautifier"
instead of
data-bs-customClass="beautifier"
As of Bootstrap 5.2.0, all components support an
experimental
reserved data attribute
data-bs-config
that can house simple component configuration as a JSON string. When an element has
data-bs-config='{"delay":0, "title":123}'
data-bs-title="456"
attributes, the final
title
value will be
and the separate data attributes will override values given on
data-bs-config
. In addition, existing data attributes are able to house JSON values like
data-bs-delay='{"show":0,"hide":150}'
The final configuration object is the merged result of
data-bs-config
data-bs-
, and
js object
where the latest given key-value overrides the others.
Name
Type
Default
Description
parent
selector, DOM element
null
If parent is provided, then all collapsible elements under the specified parent will be closed when this collapsible item is shown. (similar to traditional accordion behavior - this is dependent on the
card
class). The attribute has to be set on the target collapsible area.
toggle
boolean
true
Toggles the collapsible element on invocation.
Methods
All API methods are asynchronous and start a transition.
They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored.
Learn more in our JavaScript docs.
Activates your content as a collapsible element. Accepts an optional options
object
You can create a collapse instance with the constructor, for example:
const
bsCollapse
Collapse
'#myCollapse'
toggle
false
Method
Description
dispose
Destroys an element’s collapse. (Removes stored data on the DOM element)
getInstance
Static method which allows you to get the collapse instance associated to a DOM element, you can use it like this:
getOrCreateInstance
Static method which returns a collapse instance associated to a DOM element or create a new one in case it wasn’t initialized. You can use it like this:
hide
Hides a collapsible element.
Returns to the caller before the collapsible element has actually been hidden
(e.g., before the
hidden.bs.collapse
event occurs).
show
Shows a collapsible element.
Returns to the caller before the collapsible element has actually been shown
(e.g., before the
shown.bs.collapse
event occurs).
toggle
Toggles a collapsible element to shown or hidden.
Returns to the caller before the collapsible element has actually been shown or hidden
(i.e. before the
shown.bs.collapse
hidden.bs.collapse
event occurs).
Events
Event type
Description
hide.bs.collapse
This event is fired immediately when the
hide
method has been called.
hidden.bs.collapse
This event is fired when a collapse element has been hidden from the user (will wait for CSS transitions to complete).
show.bs.collapse
This event fires immediately when the
show
instance method is called.
shown.bs.collapse
This event is fired when a collapse element has been made visible to the user (will wait for CSS transitions to complete).
const
myCollapsible
document
getElementById
'myCollapsible'
myCollapsible
addEventListener
'hidden.bs.collapse'
event
// do something...

--- 049_forms_select.txt ---
Default
Custom
<select>
menus need only a custom class,
.form-select
to trigger the custom styles. Custom styles are limited to the
<select>
’s initial appearance and cannot modify the
<option>
s due to browser limitations.
Open this select menu
Three
html
select
class
form-select
aria-label
Default select example
option
selected
Open this select menu
option
option
value
option
option
value
option
option
value
Three
option
select
Sizing
You may also choose from small and large custom selects to match our similarly sized text inputs.
Open this select menu
Three
Open this select menu
Three
html
select
class
form-select form-select-lg mb-3
aria-label
Large select example
option
selected
Open this select menu
option
option
value
option
option
value
option
option
value
Three
option
select
select
class
form-select form-select-sm
aria-label
Small select example
option
selected
Open this select menu
option
option
value
option
option
value
option
option
value
Three
option
select
multiple
attribute is also supported:
Open this select menu
Three
html
select
class
form-select
multiple
aria-label
Multiple select example
option
selected
Open this select menu
option
option
value
option
option
value
option
option
value
Three
option
select
As is the
size
attribute:
Open this select menu
Three
html
select
class
form-select
size
aria-label
Size 3 select example
option
selected
Open this select menu
option
option
value
option
option
value
option
option
value
Three
option
select
Disabled
Add the
disabled
boolean attribute on a select to give it a grayed out appearance and remove pointer events.
Open this select menu
Three
html
select
class
form-select
aria-label
Disabled select example
disabled
option
selected
Open this select menu
option
option
value
option
option
value
option
option
value
Three
option
select
Sass variables
scss/_variables.scss
$form-select-padding-y
$input-padding-y
$form-select-padding-x
$input-padding-x
$form-select-font-family
$input-font-family
$form-select-font-size
$input-font-size
$form-select-indicator-padding
$form-select-padding-x
// Extra padding for background-image
$form-select-font-weight
$input-font-weight
$form-select-line-height
$input-line-height
$form-select-color
$input-color
$form-select-bg
$input-bg
$form-select-disabled-color
null
$form-select-disabled-bg
$input-disabled-bg
$form-select-disabled-border-color
$input-disabled-border-color
$form-select-bg-position
right
$form-select-padding-x
center
$form-select-bg-size
16px 12px
// In pixels because image dimensions
$form-select-indicator-color
$gray-800
$form-select-indicator
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'><path fill='none' stroke='#{$form-select-indicator-color}' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/></svg>"
$form-select-feedback-icon-padding-end
$form-select-padding-x
$form-select-indicator-padding
$form-select-feedback-icon-position
center right
$form-select-indicator-padding
$form-select-feedback-icon-size
$input-height-inner-half
$input-height-inner-half
$form-select-border-width
$input-border-width
$form-select-border-color
$input-border-color
$form-select-border-radius
$input-border-radius
$form-select-box-shadow
#{$prefix}
box-shadow-inset
$form-select-focus-border-color
$input-focus-border-color
$form-select-focus-width
$input-focus-width
$form-select-focus-box-shadow
0 0 0
$form-select-focus-width
$input-btn-focus-color
$form-select-padding-y-sm
$input-padding-y-sm
$form-select-padding-x-sm
$input-padding-x-sm
$form-select-font-size-sm
$input-font-size-sm
$form-select-border-radius-sm
$input-border-radius-sm
$form-select-padding-y-lg
$input-padding-y-lg
$form-select-padding-x-lg
$input-padding-x-lg
$form-select-font-size-lg
$input-font-size-lg
$form-select-border-radius-lg
$input-border-radius-lg
$form-select-transition
$input-transition

--- 114_examples_heroes.txt ---
Heroes examples
Centered hero
Quickly design and customize responsive mobile-first sites with Bootstrap, the world’s most popular front-end open source toolkit, featuring Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful JavaScript plugins.
Primary button
Secondary
Centered screenshot
Quickly design and customize responsive mobile-first sites with Bootstrap, the world’s most popular front-end open source toolkit, featuring Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful JavaScript plugins.
Primary button
Secondary
Responsive left-aligned hero with image
Quickly design and customize responsive mobile-first sites with Bootstrap, the world’s most popular front-end open source toolkit, featuring Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful JavaScript plugins.
Primary
Default
Vertically centered hero sign-up form
Below is an example form built entirely with Bootstrap’s form controls. Each required form group has a validation state that can be triggered by attempting to submit the form without completing it.
Email address
Password
Remember me
Sign up
By clicking Sign up, you agree to the terms of use.
Border hero with cropped image and shadows
Quickly design and customize responsive mobile-first sites with Bootstrap, the world’s most popular front-end open source toolkit, featuring Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful JavaScript plugins.
Primary
Default
Dark color hero
Quickly design and customize responsive mobile-first sites with Bootstrap, the world’s most popular front-end open source toolkit, featuring Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful JavaScript plugins.
Custom button
Secondary

--- 101_utilities_background.txt ---
Accessibility tip:
Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a
sufficient
color contrast
) or is included through alternative means, such as additional text hidden with the
.visually-hidden
class.
Background color
Similar to the contextual text color classes, set the background of an element to any contextual class. Background utilities
do not set
color
, so in some cases you’ll want to use
.text-*
color utilities
Background utilities like
.bg-*
that generated from our original
$theme-colors
Sass map don’t yet respond to color modes, however, any
.bg-*-subtle
utility will. This will be resolved in v6.
.bg-primary
.bg-primary-subtle
.bg-secondary
.bg-secondary-subtle
.bg-success
.bg-success-subtle
.bg-danger
.bg-danger-subtle
.bg-warning
.bg-warning-subtle
.bg-info
.bg-info-subtle
.bg-light
.bg-light-subtle
.bg-dark
.bg-dark-subtle
.bg-body-secondary
.bg-body-tertiary
.bg-body
.bg-black
.bg-white
.bg-transparent
html
class
p-3 mb-2 bg-primary text-white
.bg-primary
class
p-3 mb-2 bg-primary-subtle text-primary-emphasis
.bg-primary-subtle
class
p-3 mb-2 bg-secondary text-white
.bg-secondary
class
p-3 mb-2 bg-secondary-subtle text-secondary-emphasis
.bg-secondary-subtle
class
p-3 mb-2 bg-success text-white
.bg-success
class
p-3 mb-2 bg-success-subtle text-success-emphasis
.bg-success-subtle
class
p-3 mb-2 bg-danger text-white
.bg-danger
class
p-3 mb-2 bg-danger-subtle text-danger-emphasis
.bg-danger-subtle
class
p-3 mb-2 bg-warning text-dark
.bg-warning
class
p-3 mb-2 bg-warning-subtle text-warning-emphasis
.bg-warning-subtle
class
p-3 mb-2 bg-info text-dark
.bg-info
class
p-3 mb-2 bg-info-subtle text-info-emphasis
.bg-info-subtle
class
p-3 mb-2 bg-light text-dark
.bg-light
class
p-3 mb-2 bg-light-subtle text-light-emphasis
.bg-light-subtle
class
p-3 mb-2 bg-dark text-white
.bg-dark
class
p-3 mb-2 bg-dark-subtle text-dark-emphasis
.bg-dark-subtle
class
p-3 mb-2 bg-body-secondary
.bg-body-secondary
class
p-3 mb-2 bg-body-tertiary
.bg-body-tertiary
class
p-3 mb-2 bg-body text-body
.bg-body
class
p-3 mb-2 bg-black text-white
.bg-black
class
p-3 mb-2 bg-white text-dark
.bg-white
class
p-3 mb-2 bg-transparent text-body
.bg-transparent
Background gradient
By adding a
.bg-gradient
class, a linear gradient is added as background image to the backgrounds. This gradient starts with a semi-transparent white which fades out to the bottom.
Do you need a gradient in your custom CSS? Just add
background-image: var(--bs-gradient);
.bg-primary.bg-gradient
.bg-secondary.bg-gradient
.bg-success.bg-gradient
.bg-danger.bg-gradient
.bg-warning.bg-gradient
.bg-info.bg-gradient
.bg-light.bg-gradient
.bg-dark.bg-gradient
.bg-black.bg-gradient
Opacity
Added in v5.1.0
As of v5.1.0,
background-color
utilities are generated with Sass using CSS variables. This allows for real-time color changes without compilation and dynamic alpha transparency changes.
How it works
Consider our default
.bg-success
utility.
.bg-success
--bs-bg-opacity
background-color
rgba
--bs-success-rgb
--bs-bg-opacity
!important
We use an RGB version of our
--bs-success
(with the value of
25, 135, 84
) CSS variable and attached a second CSS variable,
--bs-bg-opacity
, for the alpha transparency (with a default value
thanks to a local CSS variable). That means anytime you use
.bg-success
now, your computed
color
value is
rgba(25, 135, 84, 1)
. The local CSS variable inside each
.bg-*
class avoids inheritance issues so nested instances of the utilities don’t automatically have a modified alpha transparency.
Example
To change that opacity, override
--bs-bg-opacity
via custom styles or inline styles.
This is default success background
This is 50% opacity success background
html
class
bg-success p-2 text-white
This is default success background
class
bg-success p-2
style
--bs-bg-opacity
This is 50% opacity success background
Or, choose from any of the
.bg-opacity
utilities:
This is default success background
This is 75% opacity success background
This is 50% opacity success background
This is 25% opacity success background
This is 10% opacity success background
html
class
bg-success p-2 text-white
This is default success background
class
bg-success p-2 text-white bg-opacity-75
This is 75% opacity success background
class
bg-success p-2 text-dark bg-opacity-50
This is 50% opacity success background
class
bg-success p-2 text-dark bg-opacity-25
This is 25% opacity success background
class
bg-success p-2 text-dark bg-opacity-10
This is 10% opacity success background
In addition to the following Sass functionality, consider reading about our included
CSS custom properties
(aka CSS variables) for colors and more.
Sass variables
Most
background-color
utilities are generated by our theme colors, reassigned from our generic color palette variables.
scss/_variables.scss
$blue
#0d6efd
$indigo
#6610f2
$purple
#6f42c1
$pink
#d63384
$red
#dc3545
$orange
#fd7e14
$yellow
#ffc107
$green
#198754
$teal
#20c997
$cyan
#0dcaf0
scss/_variables.scss
$primary
$blue
$secondary
$gray-600
$success
$green
$info
$cyan
$warning
$yellow
$danger
$red
$light
$gray-100
$dark
$gray-900
scss/_variables.scss
$gradient
linear-gradient
180deg
rgba
$white
rgba
$white
Grayscale colors are also available, but only a subset are used to generate any utilities.
scss/_variables.scss
$white
#fff
$gray-100
#f8f9fa
$gray-200
#e9ecef
$gray-300
#dee2e6
$gray-400
#ced4da
$gray-500
#adb5bd
$gray-600
#6c757d
$gray-700
#495057
$gray-800
#343a40
$gray-900
#212529
$black
#000
Variables for setting
background-color
.bg-*-subtle
utilities in light and dark mode:
scss/_variables.scss
$primary-bg-subtle
tint-color
$primary
$secondary-bg-subtle
tint-color
$secondary
$success-bg-subtle
tint-color
$success
$info-bg-subtle
tint-color
$info
$warning-bg-subtle
tint-color
$warning
$danger-bg-subtle
tint-color
$danger
$light-bg-subtle
$gray-100
$white
$dark-bg-subtle
$gray-400
scss/_variables-dark.scss
$primary-bg-subtle-dark
shade-color
$primary
$secondary-bg-subtle-dark
shade-color
$secondary
$success-bg-subtle-dark
shade-color
$success
$info-bg-subtle-dark
shade-color
$info
$warning-bg-subtle-dark
shade-color
$warning
$danger-bg-subtle-dark
shade-color
$danger
$light-bg-subtle-dark
$gray-800
$dark-bg-subtle-dark
$gray-800
$black
Sass maps
Theme colors are then put into a Sass map so we can loop over them to generate our utilities, component modifiers, and more.
scss/_variables.scss
$theme-colors
"primary"
$primary
"secondary"
$secondary
"success"
$success
"info"
$info
"warning"
$warning
"danger"
$danger
"light"
$light
"dark"
$dark
Grayscale colors are also available as a Sass map.
This map is not used to generate any utilities.
scss/_variables.scss
$grays
"100"
$gray-100
"200"
$gray-200
"300"
$gray-300
"400"
$gray-400
"500"
$gray-500
"600"
$gray-600
"700"
$gray-700
"800"
$gray-800
"900"
$gray-900
RGB colors are generated from a separate Sass map:
scss/_maps.scss
$theme-colors-rgb
map-loop
$theme-colors
to-rgb
"$value"
Background color opacities build on that with their own map that’s consumed by the utilities API:
scss/_maps.scss
$utilities-bg
map-merge
$utilities-colors
"black"
to-rgb
$black
"white"
to-rgb
$white
"body"
to-rgb
$body-bg
$utilities-bg-colors
map-loop
$utilities-bg
rgba-css-var
"$key"
"bg"
$utilities-bg-subtle
"primary-subtle"
#{$prefix}
primary-bg-subtle
"secondary-subtle"
#{$prefix}
secondary-bg-subtle
"success-subtle"
#{$prefix}
success-bg-subtle
"info-subtle"
#{$prefix}
info-bg-subtle
"warning-subtle"
#{$prefix}
warning-bg-subtle
"danger-subtle"
#{$prefix}
danger-bg-subtle
"light-subtle"
#{$prefix}
light-bg-subtle
"dark-subtle"
#{$prefix}
dark-bg-subtle
Color mode background colors are also available as a Sass map:
scss/_maps.scss
$theme-colors-bg-subtle
"primary"
$primary-bg-subtle
"secondary"
$secondary-bg-subtle
"success"
$success-bg-subtle
"info"
$info-bg-subtle
"warning"
$warning-bg-subtle
"danger"
$danger-bg-subtle
"light"
$light-bg-subtle
"dark"
$dark-bg-subtle
scss/_maps.scss
$theme-colors-bg-subtle-dark
"primary"
$primary-bg-subtle-dark
"secondary"
$secondary-bg-subtle-dark
"success"
$success-bg-subtle-dark
"info"
$info-bg-subtle-dark
"warning"
$warning-bg-subtle-dark
"danger"
$danger-bg-subtle-dark
"light"
$light-bg-subtle-dark
"dark"
$dark-bg-subtle-dark
Sass mixins
No mixins are used to generate our background utilities
, but we do have some additional mixins for other situations where you’d like to create your own gradients.
scss/mixins/_gradients.scss
@mixin
gradient-bg
$color
null
background-color
$color
$enable-gradients
background-image
#{$prefix}
gradient
scss/mixins/_gradients.scss
// Horizontal gradient, from left to right
// Creates two color stops, start and end, by specifying a color and position for each color stop.
@mixin
gradient-x
$start-color
$gray-700
$end-color
$gray-800
$start-percent
$end-percent
100%
background-image
linear-gradient
to right
$start-color
$start-percent
$end-color
$end-percent
// Vertical gradient, from top to bottom
// Creates two color stops, start and end, by specifying a color and position for each color stop.
@mixin
gradient-y
$start-color
$gray-700
$end-color
$gray-800
$start-percent
null
$end-percent
null
background-image
linear-gradient
to bottom
$start-color
$start-percent
$end-color
$end-percent
@mixin
gradient-directional
$start-color
$gray-700
$end-color
$gray-800
$deg
45deg
background-image
linear-gradient
$deg
$start-color
$end-color
@mixin
gradient-x-three-colors
$start-color
$blue
$mid-color
$purple
$color-stop
$end-color
$red
background-image
linear-gradient
to right
$start-color
$mid-color
$color-stop
$end-color
@mixin
gradient-y-three-colors
$start-color
$blue
$mid-color
$purple
$color-stop
$end-color
$red
background-image
linear-gradient
$start-color
$mid-color
$color-stop
$end-color
@mixin
gradient-radial
$inner-color
$gray-700
$outer-color
$gray-800
background-image
radial-gradient
circle
$inner-color
$outer-color
@mixin
gradient-striped
$color
rgba
$white
$angle
45deg
background-image
linear-gradient
$angle
$color
transparent 25%
transparent 50%
$color
$color
transparent 75%
transparent
Sass utilities API
Background utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"background-color"
property
background-color
class
local-vars
"bg-opacity"
values
map-merge
$utilities-bg-colors
"transparent"
transparent
"body-secondary"
rgba
#{$prefix}
secondary-bg-rgb
#{$prefix}
bg-opacity
"body-tertiary"
rgba
#{$prefix}
tertiary-bg-rgb
#{$prefix}
bg-opacity
"bg-opacity"
css-var
true
class
bg-opacity
values
"subtle-background-color"
property
background-color
class
values
$utilities-bg-subtle

--- 137_examples_navbar-bottom.txt ---
Toggle theme
Light
Dark
Auto
Bottom Navbar example
This example is a quick exercise to illustrate how the bottom navbar works.
View navbar docs »

--- 051_examples_navbar-static.txt ---
Navbar example
This example is a quick exercise to illustrate how the top-aligned navbar works. As you scroll, this navbar remains in its original position and moves with the rest of the page.
View navbar docs »

--- 097_examples_jumbotron.txt ---
Custom jumbotron
Using a series of utilities, you can create this jumbotron, just like the one in previous versions of Bootstrap. Check out the examples below for how you can remix and restyle it to your liking.
Example button
Change the background
Swap the background-color utility and add a `.text-*` color utility to mix up the jumbotron look. Then, mix and match with additional component themes and more.
Example button
Add borders
Or, keep it light and add a border for some added definition to the boundaries of your content. Be sure to look under the hood at the source HTML here as we've adjusted the alignment and sizing of both column's content for equal-height.
Example button

--- 139_getting-started_rtl.txt ---
Get familiar
We recommend getting familiar with Bootstrap first by reading through our
Getting Started Introduction page
. Once you’ve run through it, continue reading here for how to enable RTL.
You may also want to read up on
the RTLCSS project
, as it powers our approach to RTL.
and will evolve based on user feedback. Spotted something or have an improvement to suggest?
Open an issue
, we’d love to get your insights.
Required HTML
There are two strict requirements for enabling RTL in Bootstrap-powered pages.
dir="rtl"
on the
<html>
element.
Add an appropriate
lang
attribute, like
lang="ar"
, on the
<html>
element.
From there, you’ll need to include an RTL version of our CSS. For example, here’s the stylesheet for our compiled and minified CSS with RTL enabled:
link
stylesheet
href
https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.rtl.min.css
integrity
sha384-Xbg45MqvDIk1e563NLpGEulpX6AvL404DP+/iCgW9eFa2BqztiwTexswJo2jLMue
crossorigin
anonymous
Starter template
You can see the above requirements reflected in this modified RTL starter template.
doctype
html
html
lang
head
<!-- Required meta tags -->
meta
charset
utf-8
meta
name
viewport
content
width=device-width, initial-scale=1
<!-- Bootstrap CSS -->
link
stylesheet
href
https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.rtl.min.css
integrity
sha384-Xbg45MqvDIk1e563NLpGEulpX6AvL404DP+/iCgW9eFa2BqztiwTexswJo2jLMue
crossorigin
anonymous
title
مرحبًا بالعالم!
title
head
body
مرحبًا بالعالم!
<!-- Optional JavaScript; choose one of the two! -->
<!-- Option 1: Bootstrap Bundle with Popper -->
script
https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js
integrity
sha384-ndDqU0Gzau9qJ1lfW4pNLlhNTkCfHzAVBReH9diLvGRem5+R9g2FzA8ZGN954O5Q
crossorigin
anonymous
script
<!-- Option 2: Separate Popper and Bootstrap JS -->
<!--
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.min.js" integrity="sha384-7qAoOXltbVP82dhxHAUje59V5r2YsVfBafyUDxEdApLPmcdhBPg1DKg1ERo0BZlK" crossorigin="anonymous"></script>
body
html
RTL examples
Get started with one of our several
RTL examples
Approach
Our approach to building RTL support into Bootstrap comes with two important decisions that impact how we write and use our CSS:
First, we decided to build it with the
RTLCSS
project.
This gives us some powerful features for managing changes and overrides when moving from LTR to RTL. It also allows us to build two versions of Bootstrap from one codebase.
Second, we’ve renamed a handful of directional classes to adopt a logical properties approach.
Most of you have already interacted with logical properties thanks to our flex utilities—they replace direction properties like
left
right
in favor
start
. That makes the class names and values appropriate for LTR and RTL without any overhead.
For example, instead of
.ml-3
margin-left
, use
.ms-3
Working with RTL, through our source Sass or compiled CSS, shouldn’t be much different from our default LTR though.
Customize from source
When it comes to
customization
, the preferred way is to take advantage of variables, maps, and mixins. This approach works the same for RTL, even if it’s post-processed from the compiled files, thanks to
how RTLCSS works
Custom RTL values
Using
RTLCSS value directives
, you can make a variable output a different value for RTL. For example, to decrease the weight for
$font-weight-bold
throughout the codebase, you may use the
/*rtl: {value}*/
syntax:
$font-weight-bold
700 #
/* rtl:600 */
!default
Which would output to the following for our default CSS and RTL CSS:
/* bootstrap.css */
font-weight
/* rtl:600 */
/* bootstrap.rtl.css */
font-weight
Alternative font stack
In the case you’re using a custom font, be aware that not all fonts support the non-Latin alphabet. To switch from Pan-European to Arabic family, you may need to use
/*rtl:insert: {value}*/
in your font stack to modify the names of font families.
For example, to switch from
Helvetica Neue
font for LTR to
Helvetica Neue Arabic
for RTL, your Sass code could look like this:
$font-family-sans-serif
Helvetica Neue #
"/* rtl:insert:Arabic */"
// Cross-platform generic font family (default user interface font)
system-ui
// Safari for macOS and iOS (San Francisco)
-apple-system
// Chrome < 56 for macOS (San Francisco)
BlinkMacSystemFont
// Windows
"Segoe UI"
// Android
Roboto
// Basic web fallback
Arial
// Linux
"Noto Sans"
// Sans serif fallback
sans-serif
// Emoji fonts
"Apple Color Emoji"
"Segoe UI Emoji"
"Segoe UI Symbol"
"Noto Color Emoji"
!default
LTR and RTL at the same time
Need both LTR and RTL on the same page? Thanks to
RTLCSS String Maps
, this is pretty straightforward. Wrap your
@import
s with a class, and set a custom rename rule for RTLCSS:
/* rtl:begin:options: {
"autoRename": true,
"stringMap":[ {
"name": "ltr-rtl",
"priority": 100,
"search": ["ltr"],
"replace": ["rtl"],
"options": {
"scope": "*",
"ignoreCase": false
} */
.ltr
@import
"../node_modules/bootstrap/scss/bootstrap"
/*rtl:end:options*/
After running Sass then RTLCSS, each selector in your CSS files will be prepended by
.ltr
, and
.rtl
for RTL files. Now you’re able to use both files on the same page, and simply use
.ltr
.rtl
on your components wrappers to use one or the other direction.
Edge cases and known limitations
to consider when working with a combined LTR and RTL implementation:
When switching
.ltr
.rtl
, make sure you add
lang
attributes accordingly.
Loading both files can be a real performance bottleneck: consider some
optimization
, and maybe try to
load one of those files asynchronously
Nesting styles this way will prevent our
form-validation-state()
mixin from working as intended, thus require you tweak it a bit by yourself.
See #31223
Do you want to automate this process and address several edge cases involving both directions within a single stylesheet? Then, consider using
PostCSS RTLCSS
as a
PostCSS
plugin to process your source files. PostCSS RTLCSS uses
RTLCSS
behind the scenes to manage the direction flipping process, but it separates the flipped declarations into rules with a different prefix for LTR and RTL, something that allows you to have both directions within the same stylesheet file. By doing this, you can switch between LTR and RTL orientations by simply changing the
of the page (or even by modifying a specific class if you configure the plugin accordingly).
Important things to take into account
when using PostCSS RTLCSS to build a combined LTR and RTL implementation:
It is recommended that you add the
attribute to the
html
element. This way, the entire page will be affected when you change the direction. Also, make sure you add the
lang
attribute accordingly.
Having a single bundle with both directions will increase the size of the final stylesheet (on average, by 20%-30%): consider some
optimization
Take into account that PostCSS RTLCSS is not compatible with
/* rtl:remove */
directives because it doesn’t remove any CSS rule. You should replace your
/* rtl:remove */
/* rtl:begin:remove */
/* rtl:end:remove */
directives with
/* rtl:freeze */
/* rtl:begin:freeze */
/* rtl:end:freeze */
directives respectively. These directives will prefix the targeted rules or declarations with the current direction but will not create an RTL counterpart (same result as the
remove
ones in RTLCSS).
The breadcrumb case
breadcrumb separator
is the only case requiring its own brand-new variable— namely
$breadcrumb-divider-flipped
—defaulting to
$breadcrumb-divider
Additional resources
RTLCSS
RTL Styling 101

--- 035_customize_sass.txt ---
Utilize our source Sass files to take advantage of variables, maps, mixins, and more.
Sass deprecation warnings are shown when compiling source Sass files with the latest versions of Dart Sass. This does not prevent compilation or usage of Bootstrap. We’re
working on a long-term fix
, but in the meantime these deprecation notices can be ignored.
File structure
Whenever possible, avoid modifying Bootstrap’s core files. For Sass, that means creating your own stylesheet that imports Bootstrap so you can modify and extend it. Assuming you’re using a package manager like npm, you’ll have a file structure that looks like this:
your-project/
├── scss/
│ └── custom.scss
└── node_modules/
│ └── bootstrap/
│ ├── js/
│ └── scss/
└── index.html
If you’ve downloaded our source files and aren’t using a package manager, you’ll want to manually create something similar to that structure, keeping Bootstrap’s source files separate from your own.
your-project/
├── scss/
│ └── custom.scss
├── bootstrap/
│ ├── js/
│ └── scss/
└── index.html
Importing
In your
custom.scss
, you’ll import Bootstrap’s source Sass files. You have two options: include all of Bootstrap, or pick the parts you need. We encourage the latter, though be aware there are some requirements and dependencies across our components. You also will need to include some JavaScript for our plugins.
// Custom.scss
// Option A: Include all of Bootstrap
// Include any default variable overrides here (though functions won’t be available)
@import
"../node_modules/bootstrap/scss/bootstrap"
// Then add additional custom code here
// Custom.scss
// Option B: Include parts of Bootstrap
// 1. Include functions first (so you can manipulate colors, SVGs, calc, etc)
@import
"../node_modules/bootstrap/scss/functions"
// 2. Include any default variable overrides here
// 3. Include remainder of required Bootstrap stylesheets (including any separate color mode stylesheets)
@import
"../node_modules/bootstrap/scss/variables"
@import
"../node_modules/bootstrap/scss/variables-dark"
// 4. Include any default map overrides here
// 5. Include remainder of required parts
@import
"../node_modules/bootstrap/scss/maps"
@import
"../node_modules/bootstrap/scss/mixins"
@import
"../node_modules/bootstrap/scss/root"
// 6. Include any other optional stylesheet partials as desired; list below is not inclusive of all available stylesheets
@import
"../node_modules/bootstrap/scss/utilities"
@import
"../node_modules/bootstrap/scss/reboot"
@import
"../node_modules/bootstrap/scss/type"
@import
"../node_modules/bootstrap/scss/images"
@import
"../node_modules/bootstrap/scss/containers"
@import
"../node_modules/bootstrap/scss/grid"
@import
"../node_modules/bootstrap/scss/helpers"
// ...
// 7. Optionally include utilities API last to generate classes based on the Sass map in `_utilities.scss`
@import
"../node_modules/bootstrap/scss/utilities/api"
// 8. Add additional custom code here
With that setup in place, you can begin to modify any of the Sass variables and maps in your
custom.scss
. You can also start to add parts of Bootstrap under the
// Optional
section as needed. We suggest using the full import stack from our
file as your starting point.
Compiling
In order to use your custom Sass code as CSS in the browser, you need a Sass compiler. Sass ships as a CLI package, but you can also compile it with other build tools like
Gulp
Webpack
, or with GUI applications. Some IDEs also have Sass compilers built in or as downloadable extensions.
We like to use the CLI to compile our Sass, but you can use whichever method you prefer. From the command line, run the following:
# Install Sass globally
install
sass
# Watch your custom Sass for changes and compile it to CSS
sass
--watch
./scss/custom.scss ./css/custom.css
Learn more about your options at
sass-lang.com/install
compiling with VS Code
Using Bootstrap with another build tool?
Consider reading our guides for compiling with
Webpack
Parcel
, or
Vite
. We also have production-ready demos in
our examples repository on GitHub
Including
Once your CSS is compiled, you can include it in your HTML files. Inside your
index.html
you’ll want to include your compiled CSS file. Be sure to update the path to your compiled CSS file if you’ve changed it.
doctype
html
html
lang
head
meta
charset
utf-8
meta
name
viewport
content
width=device-width, initial-scale=1
title
Custom Bootstrap
title
link
href
/css/custom.css
stylesheet
head
body
Hello, world!
body
html
Variable defaults
Every Sass variable in Bootstrap includes the
!default
flag allowing you to override the variable’s default value in your own Sass without modifying Bootstrap’s source code. Copy and paste variables as needed, modify their values, and remove the
!default
flag. If a variable has already been assigned, then it won’t be re-assigned by the default values in Bootstrap.
You will find the complete list of Bootstrap’s variables in
scss/_variables.scss
. Some variables are set to
null
, these variables don’t output the property unless they are overridden in your configuration.
Variable overrides must come after our functions are imported, but before the rest of the imports.
Here’s an example that changes the
background-color
color
for the
<body>
when importing and compiling Bootstrap via npm:
// Required
@import
"../node_modules/bootstrap/scss/functions"
// Default variable overrides
$body-bg
#000
$body-color
#111
// Required
@import
"../node_modules/bootstrap/scss/variables"
@import
"../node_modules/bootstrap/scss/variables-dark"
@import
"../node_modules/bootstrap/scss/maps"
@import
"../node_modules/bootstrap/scss/mixins"
@import
"../node_modules/bootstrap/scss/root"
// Optional Bootstrap components here
@import
"../node_modules/bootstrap/scss/reboot"
@import
"../node_modules/bootstrap/scss/type"
// etc
Repeat as necessary for any variable in Bootstrap, including the global options below.
Get started with Bootstrap via npm with our starter project!
Head to the
Sass & JS example
template repository to see how to build and customize Bootstrap in your own npm project. Includes Sass compiler, Autoprefixer, Stylelint, PurgeCSS, and Bootstrap Icons.
Maps and loops
!default
flag and can be overridden and extended.
Some of our Sass maps are merged into empty ones by default. This is done to allow easy expansion of a given Sass map, but comes at the cost of making
removing
items from a map slightly more difficult.
Modify map
All variables in the
$theme-colors
map are defined as standalone variables. To modify an existing color in our
$theme-colors
map, add the following to your custom Sass file:
$primary
#0074d9
$danger
#ff4136
Later on, these variables are set in Bootstrap’s
$theme-colors
map:
$theme-colors
"primary"
$primary
"danger"
$danger
Add to map
Add new colors to
$theme-colors
, or any other map, by creating a new Sass map with your custom values and merging it with the original map. In this case, we'll create a new
$custom-colors
map and merge it with
$theme-colors
// Create your own map
$custom-colors
"custom-color"
#900
// Merge the maps
$theme-colors
map-merge
$theme-colors
$custom-colors
Remove from map
To remove colors from
$theme-colors
, or any other map, use
map-remove
. Be aware you must insert
$theme-colors
between our requirements just after its definition in
variables
and before its usage in
maps
// Required
@import
"../node_modules/bootstrap/scss/functions"
@import
"../node_modules/bootstrap/scss/variables"
@import
"../node_modules/bootstrap/scss/variables-dark"
$theme-colors
map-remove
$theme-colors
"info"
"light"
"dark"
@import
"../node_modules/bootstrap/scss/maps"
@import
"../node_modules/bootstrap/scss/mixins"
@import
"../node_modules/bootstrap/scss/root"
// Optional
@import
"../node_modules/bootstrap/scss/reboot"
@import
"../node_modules/bootstrap/scss/type"
// etc
Required keys
For example, we use the
primary
success
, and
danger
keys from
$theme-colors
for links, buttons, and form states. Replacing the values of these keys should present no issues, but removing them may cause Sass compilation issues. In these instances, you’ll need to modify the Sass code that makes use of those values.
Functions
Colors
Next to the
Sass maps
we have, theme colors can also be used as standalone variables, like
$primary
.custom-element
color
$gray-100
background-color
$dark
You can lighten or darken colors with Bootstrap’s
tint-color()
shade-color()
functions. These functions will mix colors with black or white, unlike Sass’ native
lighten()
darken()
functions which will change the lightness by a fixed amount, which often doesn’t lead to the desired effect.
shift-color()
combines these two functions by shading the color if the weight is positive and tinting the color if the weight is negative.
scss/_functions.scss
// Tint a color: mix a color with white
@function
tint-color
$color
$weight
@return
white
$color
$weight
// Shade a color: mix a color with black
@function
shade-color
$color
$weight
@return
black
$color
$weight
// Shade the color if the weight is positive, else tint it
@function
shift-color
$color
$weight
@return
$weight
shade-color
$color
$weight
tint-color
$color
$weight
In practice, you’d call the function and pass in the color and weight parameters.
.custom-element
color
tint-color
$primary
.custom-element-2
color
shade-color
$danger
.custom-element-3
color
shift-color
$success
background-color
shift-color
$success
-60%
Color contrast
In order to meet the
Web Content Accessibility Guidelines (WCAG)
contrast requirements, authors
must
provide a minimum
text color contrast of 4.5:1
and a minimum
non-text color contrast of 3:1
, with very few exceptions.
To help with this, we included the
color-contrast
function in Bootstrap. It uses the
WCAG contrast ratio algorithm
for calculating contrast thresholds based on
relative luminance
in an
sRGB
color space to automatically return a light (
#fff
), dark (
#212529
) or black (
#000
) contrast color based on the specified base color. This function is especially useful for mixins or loops where you’re generating multiple classes.
For example, to generate color swatches from our
$theme-colors
map:
@each
$color
$value
$theme-colors
.swatch-
#{$color}
color
color-contrast
$value
It can also be used for one-off contrast needs:
.custom-element
color
color-contrast
#000
// returns `color: #fff`
You can also specify a base color with our color map functions:
.custom-element
color
color-contrast
$dark
// returns `color: #fff`
Escape SVG
We use the
escape-svg
function to escape the
characters for SVG background images. When using the
escape-svg
function, data URIs must be quoted.
Add and Subtract functions
We use the
subtract
functions to wrap the CSS
calc
function. The primary purpose of these functions is to avoid errors when a “unitless”
value is passed into a
calc
expression. Expressions like
calc(10px - 0)
will return an error in all browsers, despite being mathematically correct.
Example where the calc is valid:
$border-radius
.25rem
$border-width
.element
// Output calc(.25rem - 1px) is valid
border-radius
calc
$border-radius
$border-width
.element
// Output the same calc(.25rem - 1px) as above
border-radius
subtract
$border-radius
$border-width
Example where the calc is invalid:
$border-radius
.25rem
$border-width
.element
// Output calc(.25rem - 0) is invalid
border-radius
calc
$border-radius
$border-width
.element
// Output .25rem
border-radius
subtract
$border-radius
$border-width
Mixins
scss/mixins/
directory has a ton of mixins that power parts of Bootstrap and can also be used across your own project.
Color schemes
A shorthand mixin for the
prefers-color-scheme
media query is available with support for
light
dark
color schemes. See
the color modes documentation
for information on our color mode mixin.
scss/mixins/_color-scheme.scss
@mixin
color-scheme
$name
@media
prefers-color-scheme
#{$name}
@content
.custom-element
@include
color-scheme
light
// Insert light mode styles here
@include
color-scheme
dark
// Insert dark mode styles here

--- 039_examples_sidebars.txt ---
Sidebars examples
Sidebar
Home
Dashboard
Orders
Products
Customers
New project...
Settings
Profile
Sign out
Sidebar
Home
Dashboard
Orders
Products
Customers
New project...
Settings
Profile
Sign out
Icon-only
New project...
Settings
Profile
Sign out
Collapsible
Home
Overview
Updates
Reports
Dashboard
Overview
Weekly
Monthly
Annually
Orders
Processed
Shipped
Returned
Account
New...
Profile
Settings
Sign out
List group
List group item heading
Some placeholder content in a paragraph below the heading and date.
List group item heading
Tues
Some placeholder content in a paragraph below the heading and date.
List group item heading
Some placeholder content in a paragraph below the heading and date.
List group item heading
Some placeholder content in a paragraph below the heading and date.
List group item heading
Tues
Some placeholder content in a paragraph below the heading and date.
List group item heading
Some placeholder content in a paragraph below the heading and date.
List group item heading
Some placeholder content in a paragraph below the heading and date.
List group item heading
Tues
Some placeholder content in a paragraph below the heading and date.
List group item heading
Some placeholder content in a paragraph below the heading and date.
List group item heading
Some placeholder content in a paragraph below the heading and date.
List group item heading
Tues
Some placeholder content in a paragraph below the heading and date.
List group item heading
Some placeholder content in a paragraph below the heading and date.

--- 033_utilities_shadows.txt ---
Examples
While shadows on components are disabled by default in Bootstrap and can be enabled via
$enable-shadows
, you can also quickly add or remove a shadow with our
box-shadow
utility classes. Includes support for
.shadow-none
and three default sizes (which have associated variables to match).
No shadow
Small shadow
Regular shadow
Larger shadow
html
class
shadow-none p-3 mb-5 bg-body-tertiary rounded
No shadow
class
shadow-sm p-3 mb-5 bg-body-tertiary rounded
Small shadow
class
shadow p-3 mb-5 bg-body-tertiary rounded
Regular shadow
class
shadow-lg p-3 mb-5 bg-body-tertiary rounded
Larger shadow
Sass variables
scss/_variables.scss
$box-shadow
0 .5rem 1rem
rgba
$black
$box-shadow-sm
0 .125rem .25rem
rgba
$black
.075
$box-shadow-lg
0 1rem 3rem
rgba
$black
.175
$box-shadow-inset
inset 0 1px 2px
rgba
$black
.075
Sass utilities API
Shadow utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"shadow"
property
box-shadow
class
shadow
values
null
#{$prefix}
box-shadow
#{$prefix}
box-shadow-sm
#{$prefix}
box-shadow-lg
none
none

--- 047_examples_navbars-offcanvas.txt ---
Navbar with offcanvas examples
This example shows how responsive offcanvas menus work within the navbar. For positioning of navbars, checkout the
fixed top
examples.
From the top down, you'll see a dark navbar, light navbar and a responsive navbar—each with offcanvases built in. Resize your browser window to the large breakpoint to see the toggle for the offcanvas.
Learn more about offcanvas navbars »

--- 068_examples_list-groups.txt ---
Toggle theme
Light
Dark
Auto
List group item heading
Some placeholder content in a paragraph.
Another title here
Some placeholder content in a paragraph that goes a little longer so it wraps to a new line.
Third heading
Some placeholder content in a paragraph.
First checkbox
With support text underneath to add more detail
Second checkbox
Some other text goes here
Third checkbox
And we end with another snippet of text
First radio
With support text underneath to add more detail
Second radio
Some other text goes here
Third radio
And we end with another snippet of text
Finish sales report
1:00–2:00pm
Weekly All Hands
2:00–2:30pm
Out of office
Tomorrow
Add new task...
Choose list...
First radio
With support text underneath to add more detail
Second radio
Some other text goes here
Third radio
And we end with another snippet of text
Fourth disabled radio
This option is disabled
First radio
With support text underneath to add more detail
Second radio
Some other text goes here
Third radio
And we end with another snippet of text
Fourth disabled radio
This option is disabled

--- 133_helpers_focus-ring.txt ---
.focus-ring
helper removes the default
outline
:focus
, replacing it with a
box-shadow
that can be more broadly customized. The new shadow is made up of a series of CSS variables, inherited from the
:root
level, that can be modified for any element or component.
Example
Click directly on the link below to see the focus ring in action, or into the example below and then press
Custom focus ring
html
href
class
d-inline-flex focus-ring py-1 px-2 text-decoration-none border rounded-2
Custom focus ring
Customize
Modify the styling of a focus ring with our CSS variables, Sass variables, utilities, or custom styles.
CSS variables
Modify the
--bs-focus-ring-*
CSS variables as needed to change the default appearance.
Green focus ring
html
href
class
d-inline-flex focus-ring py-1 px-2 text-decoration-none border rounded-2
style
--bs-focus-ring-color
rgba
--bs-success-rgb
Green focus ring
.focus-ring
sets styles via global CSS variables that can be overridden on any parent element, as shown above. These variables are generated from their Sass variable counterparts.
scss/_root.scss
#{$prefix}
focus-ring-width
#{$focus-ring-width}
#{$prefix}
focus-ring-opacity
#{$focus-ring-opacity}
#{$prefix}
focus-ring-color
#{$focus-ring-color}
By default, there is no
--bs-focus-ring-x
--bs-focus-ring-y
, or
--bs-focus-ring-blur
, but we provide CSS variables with fallbacks to initial
values. Modify them to change the default appearance.
Blurry offset focus ring
html
href
class
d-inline-flex focus-ring py-1 px-2 text-decoration-none border rounded-2
style
--bs-focus-ring-x
10px
--bs-focus-ring-y
10px
--bs-focus-ring-blur
Blurry offset focus ring
Sass variables
Customize the focus ring Sass variables to modify all usage of the focus ring styles across your Bootstrap-powered project.
scss/_variables.scss
$focus-ring-width
.25rem
$focus-ring-opacity
$focus-ring-color
rgba
$primary
$focus-ring-opacity
$focus-ring-blur
$focus-ring-box-shadow
$focus-ring-blur
$focus-ring-width
$focus-ring-color
Sass utilities API
In addition to
.focus-ring
, we have several
.focus-ring-*
utilities to modify the helper class defaults. Modify the color with any of our
theme colors
. Note that the light and dark variants may not be visible on all background colors given current color mode support.
Primary focus
Secondary focus
Success focus
Danger focus
Warning focus
Info focus
Light focus
Dark focus
html
href
class
d-inline-flex focus-ring focus-ring-primary py-1 px-2 text-decoration-none border rounded-2
Primary focus
href
class
d-inline-flex focus-ring focus-ring-secondary py-1 px-2 text-decoration-none border rounded-2
Secondary focus
href
class
d-inline-flex focus-ring focus-ring-success py-1 px-2 text-decoration-none border rounded-2
Success focus
href
class
d-inline-flex focus-ring focus-ring-danger py-1 px-2 text-decoration-none border rounded-2
Danger focus
href
class
d-inline-flex focus-ring focus-ring-warning py-1 px-2 text-decoration-none border rounded-2
Warning focus
href
class
d-inline-flex focus-ring focus-ring-info py-1 px-2 text-decoration-none border rounded-2
Info focus
href
class
d-inline-flex focus-ring focus-ring-light py-1 px-2 text-decoration-none border rounded-2
Light focus
href
class
d-inline-flex focus-ring focus-ring-dark py-1 px-2 text-decoration-none border rounded-2
Dark focus
Focus ring utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"focus-ring"
css-var
true
css-variable-name
focus-ring-color
class
focus-ring
values
map-loop
$theme-colors-rgb
rgba-css-var
"$key"
"focus-ring"

--- 078_components_popovers.txt ---
Overview
Things to know when using the popover plugin:
Popovers rely on the third party library
Popper
for positioning. You must include
popper.min.js
before
, or use one
which contains Popper.
Popovers require the
popover plugin
as a dependency.
Popovers are opt-in for performance reasons, so
you must initialize them yourself
Zero-length
title
content
values will never show a popover.
Specify
container: 'body'
to avoid rendering problems in more complex components (like our input groups, button groups, etc).
Triggering popovers on hidden elements will not work.
Popovers for
.disabled
disabled
elements must be triggered on a wrapper element.
When triggered from anchors that wrap across multiple lines, popovers will be centered between the anchors’ overall width. Use
.text-nowrap
on your
s to avoid this behavior.
Popovers must be hidden before their corresponding elements have been removed from the DOM.
Popovers can be triggered thanks to an element inside a shadow DOM.
By default, this component uses the built-in content sanitizer, which strips out any HTML elements that are not explicitly allowed. See the
sanitizer section in our JavaScript documentation
for more details.
The animation effect of this component is dependent on the
prefers-reduced-motion
media query. See the
reduced motion section of our accessibility documentation
Keep reading to see how popovers work with some examples.
Examples
Enable popovers
As mentioned above, you must initialize popovers before they can be used. One way to initialize all popovers on a page would be to select them by their
data-bs-toggle
attribute, like so:
const
popoverTriggerList
document
querySelectorAll
'[data-bs-toggle="popover"]'
const
popoverList
popoverTriggerList
popoverTriggerEl
Popover
popoverTriggerEl
Live demo
We use JavaScript similar to the snippet above to render the following live popover. Titles are set via
data-bs-title
and body content is set via
data-bs-content
Feel free to use either
title
data-bs-title
in your HTML. When
title
is used, Popper will replace it automatically with
data-bs-title
when the element is rendered.
Click to toggle popover
html
button
type
button
class
btn btn-lg btn-danger
data-bs-toggle
popover
data-bs-title
Popover title
data-bs-content
And here’s some amazing content. It’s very engaging. Right?
Click to toggle popover
button
Four directions
Four options are available: top, right, bottom, and left. Directions are mirrored when using Bootstrap in RTL. Set
data-bs-placement
to change the direction.
Popover on top
Popover on right
Popover on bottom
Popover on left
html
button
type
button
class
btn btn-secondary
data-bs-container
body
data-bs-toggle
popover
data-bs-placement
data-bs-content
Top popover
Popover on top
button
button
type
button
class
btn btn-secondary
data-bs-container
body
data-bs-toggle
popover
data-bs-placement
right
data-bs-content
Right popover
Popover on right
button
button
type
button
class
btn btn-secondary
data-bs-container
body
data-bs-toggle
popover
data-bs-placement
bottom
data-bs-content
Bottom popover
Popover on bottom
button
button
type
button
class
btn btn-secondary
data-bs-container
body
data-bs-toggle
popover
data-bs-placement
left
data-bs-content
Left popover
Popover on left
button
Custom
container
When you have some styles on a parent element that interfere with a popover, you’ll want to specify a custom
container
so that the popover’s HTML appears within that element instead. This is common in responsive tables, input groups, and the like.
const
popover
Popover
'.example-popover'
container
'body'
Another situation where you’ll want to set an explicit custom
container
are popovers inside a
modal dialog
, to make sure that the popover itself is appended to the modal. This is particularly important for popovers that contain interactive elements – modal dialogs will trap focus, so unless the popover is a child element of the modal, users won’t be able to focus or activate these interactive elements.
const
popover
Popover
'.example-popover'
container
'.modal-body'
Custom popovers
Added in v5.2.0
You can customize the appearance of popovers using
CSS variables
. We set a custom class with
data-bs-custom-class="custom-popover"
to scope our custom appearance and use it to override some of the local CSS variables.
site/src/scss/_component-examples.scss
.custom-popover
--bs-popover-max-width
200px
--bs-popover-border-color
--bd-violet-bg
--bs-popover-header-bg
--bd-violet-bg
--bs-popover-header-color
--bs-white
--bs-popover-body-padding-x
1rem
--bs-popover-body-padding-y
.5rem
Custom popover
html
button
type
button
class
btn btn-secondary
data-bs-toggle
popover
data-bs-placement
right
data-bs-custom-class
custom-popover
data-bs-title
Custom popover
data-bs-content
This popover is themed via CSS variables.
Custom popover
button
Dismiss on next click
Use the
focus
trigger to dismiss popovers on the user’s next click of an element other than the toggle element.
Dismissing on next click requires specific HTML for proper cross-browser and cross-platform behavior.
You can only use
elements, not
<button>
s, and you must include a
tabindex
Dismissible popover
html
tabindex
class
btn btn-lg btn-danger
role
button
data-bs-toggle
popover
data-bs-trigger
focus
data-bs-title
Dismissible popover
data-bs-content
And here’s some amazing content. It’s very engaging. Right?
Dismissible popover
const
popover
Popover
'.popover-dismiss'
trigger
'focus'
Disabled elements
Elements with the
disabled
attribute aren’t interactive, meaning users cannot hover or click them to trigger a popover (or tooltip). As a workaround, you’ll want to trigger the popover from a wrapper
<div>
<span>
, ideally made keyboard-focusable using
tabindex="0"
For disabled popover triggers, you may also prefer
data-bs-trigger="hover focus"
so that the popover appears as immediate visual feedback to your users as they may not expect to
click
on a disabled element.
Disabled button
html
span
class
d-inline-block
tabindex
data-bs-toggle
popover
data-bs-trigger
hover focus
data-bs-content
Disabled popover
button
class
btn btn-primary
type
button
disabled
Disabled button
button
span
Variables
Added in v5.2.0
As part of Bootstrap’s evolving CSS variables approach, popovers now use local CSS variables on
.popover
for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
scss/_popover.scss
#{$prefix}
popover-zindex
#{$zindex-popover}
#{$prefix}
popover-max-width
#{$popover-max-width}
@include
$popover-font-size
#{$prefix}
popover-font-size
#{$prefix}
popover-bg
#{$popover-bg}
#{$prefix}
popover-border-width
#{$popover-border-width}
#{$prefix}
popover-border-color
#{$popover-border-color}
#{$prefix}
popover-border-radius
#{$popover-border-radius}
#{$prefix}
popover-inner-border-radius
#{$popover-inner-border-radius}
#{$prefix}
popover-box-shadow
#{$popover-box-shadow}
#{$prefix}
popover-header-padding-x
#{$popover-header-padding-x}
#{$prefix}
popover-header-padding-y
#{$popover-header-padding-y}
@include
$popover-header-font-size
#{$prefix}
popover-header-font-size
#{$prefix}
popover-header-color
#{$popover-header-color}
#{$prefix}
popover-header-bg
#{$popover-header-bg}
#{$prefix}
popover-body-padding-x
#{$popover-body-padding-x}
#{$prefix}
popover-body-padding-y
#{$popover-body-padding-y}
#{$prefix}
popover-body-color
#{$popover-body-color}
#{$prefix}
popover-arrow-width
#{$popover-arrow-width}
#{$prefix}
popover-arrow-height
#{$popover-arrow-height}
#{$prefix}
popover-arrow-border
#{$prefix}
popover-border-color
Sass variables
scss/_variables.scss
$popover-font-size
$font-size-sm
$popover-bg
#{$prefix}
body-bg
$popover-max-width
276px
$popover-border-width
#{$prefix}
border-width
$popover-border-color
#{$prefix}
border-color-translucent
$popover-border-radius
#{$prefix}
border-radius-lg
$popover-inner-border-radius
calc
#{$popover-border-radius}
#{$popover-border-width}
// stylelint-disable-line function-disallowed-list
$popover-box-shadow
#{$prefix}
box-shadow
$popover-header-font-size
$font-size-base
$popover-header-bg
#{$prefix}
secondary-bg
$popover-header-color
$headings-color
$popover-header-padding-y
.5rem
$popover-header-padding-x
$spacer
$popover-body-color
#{$prefix}
body-color
$popover-body-padding-y
$spacer
$popover-body-padding-x
$spacer
$popover-arrow-width
1rem
$popover-arrow-height
.5rem
Usage
Enable popovers via JavaScript:
const
exampleEl
document
getElementById
'example'
const
popover
Popover
exampleEl
options
Keep popovers accessible to keyboard and assistive technology users
by only adding them to HTML elements that are traditionally keyboard-focusable and interactive (such as links or form controls). While other HTML elements can be made focusable by adding
tabindex="0"
, this can create annoying and confusing tab stops on non-interactive elements for keyboard users, and most assistive technologies currently do not announce popovers in this situation. Additionally, do not rely solely on
hover
as the trigger for your popovers as this will make them impossible to trigger for keyboard users.
Avoid adding an excessive amount of content in popovers with the
html
option. Once popovers are displayed, their content is tied to the trigger element with the
aria-describedby
attribute, causing all of the popover’s content to be announced to assistive technology users as one long, uninterrupted stream.
Popovers do not manage keyboard focus order, and their placement can be random in the DOM, so be careful when adding interactive elements (like forms or links), as it may lead to an illogical focus order or make the popover content itself completely unreachable for keyboard users. In cases where you must use these elements, consider using a modal dialog instead.
Options
As options can be passed via data attributes or JavaScript, you can append an option name to
data-bs-
, as in
data-bs-animation="{value}"
. Make sure to change the case type of the option name from “
camelCase
” to “
kebab-case
” when passing the options via data attributes. For example, use
data-bs-custom-class="beautifier"
instead of
data-bs-customClass="beautifier"
As of Bootstrap 5.2.0, all components support an
experimental
reserved data attribute
data-bs-config
that can house simple component configuration as a JSON string. When an element has
data-bs-config='{"delay":0, "title":123}'
data-bs-title="456"
attributes, the final
title
value will be
and the separate data attributes will override values given on
data-bs-config
. In addition, existing data attributes are able to house JSON values like
data-bs-delay='{"show":0,"hide":150}'
The final configuration object is the merged result of
data-bs-config
data-bs-
, and
js object
where the latest given key-value overrides the others.
Note that for security reasons the
sanitize
sanitizeFn
, and
allowList
options cannot be supplied using data attributes.
Name
Type
Default
Description
allowList
object
Default value
An object containing allowed tags and attributes. Those not explicitly allowed will be removed by
the content sanitizer
Exercise caution when adding to this list.
Refer to
OWASP’s Cross Site Scripting Prevention Cheat Sheet
for more information.
animation
boolean
true
Apply a CSS fade transition to the popover.
boundary
string, element
'clippingParents'
Overflow constraint boundary of the popover (applies only to Popper’s preventOverflow modifier). By default, it’s
'clippingParents'
and can accept an HTMLElement reference (via JavaScript only). For more information refer to Popper’s
detectOverflow docs
container
string, element, false
false
Appends the popover to a specific element. Example:
container: 'body'
. This option is particularly useful in that it allows you to position the popover in the flow of the document near the triggering element - which will prevent the popover from floating away from the triggering element during a window resize.
content
string, element, function
The popover’s text content. If a function is given, it will be called with its
this
reference set to the element that the popover is attached to.
customClass
string, function
Add classes to the popover when it is shown. Note that these classes will be added in addition to any classes specified in the template. To add multiple classes, separate them with spaces:
'class-1 class-2'
. You can also pass a function that should return a single string containing additional class names.
delay
number, object
Delay showing and hiding the popover (ms)—doesn’t apply to manual trigger type. If a number is supplied, delay is applied to both hide/show. Object structure is:
delay: { "show": 500, "hide": 100 }
fallbackPlacements
string, array
['top', 'right', 'bottom', 'left']
Define fallback placements by providing a list of placements in array (in order of preference). For more information refer to Popper’s
behavior docs
html
boolean
false
Allow HTML in the popover. If true, HTML tags in the popover’s
title
will be rendered in the popover. If false,
innerText
property will be used to insert content into the DOM. Prefer text when dealing with user-generated input to
prevent XSS attacks
offset
number, string, function
[0, 8]
Offset of the popover relative to its target. You can pass a string in data attributes with comma separated values like:
data-bs-offset="10,20"
. When a function is used to determine the offset, it is called with an object containing the popper placement, the reference, and popper rects as its first argument. The triggering element DOM node is passed as the second argument. The function must return an array with two numbers:
skidding
distance
. For more information refer to Popper’s
offset docs
placement
string, function
'right'
How to position the popover: auto, top, bottom, left, right. When
auto
is specified, it will dynamically reorient the popover. When a function is used to determine the placement, it is called with the popover DOM node as its first argument and the triggering element DOM node as its second. The
this
context is set to the popover instance.
popperConfig
null, object, function
null
To change Bootstrap’s default Popper config, see
Popper’s configuration
. When a function is used to create the Popper configuration, it’s called with an object that contains the Bootstrap’s default Popper configuration. It helps you use and merge the default with your own configuration. The function must return a configuration object for Popper.
sanitize
boolean
true
Enable
content sanitization
. If true, the
template
content
title
options will be sanitized.
Exercise caution when disabling content sanitization.
Refer to
OWASP’s Cross Site Scripting Prevention Cheat Sheet
for more information. Vulnerabilities caused solely by disabling content sanitization are not considered within scope for Bootstrap’s security model.
sanitizeFn
null, function
null
Provide an alternative
content sanitization
function. This can be useful if you prefer to use a dedicated library to perform sanitization.
selector
string, false
false
If a selector is provided, popover objects will be delegated to the specified targets. In practice, this is used to also apply popovers to dynamically added DOM elements (
jQuery.on
support). See
this issue
an informative example
Note
title
attribute must not be used as a selector.
template
string
'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
Base HTML to use when creating the popover. The popover’s
title
will be injected into the
.popover-header
. The popover’s
content
will be injected into the
.popover-body
.popover-arrow
will become the popover’s arrow. The outermost wrapper element should have the
.popover
class and
role="tooltip"
title
string, element, function
The popover title. If a function is given, it will be called with its
this
reference set to the element that the popover is attached to.
trigger
string
'click'
How popover is triggered: click, hover, focus, manual. You may pass multiple triggers; separate them with a space.
'manual'
indicates that the popover will be triggered programmatically via the
.popover('show')
.popover('hide')
.popover('toggle')
methods; this value cannot be combined with any other trigger.
'hover'
on its own will result in popovers that cannot be triggered via the keyboard, and should only be used if alternative methods for conveying the same information for keyboard users is present.
Data attributes for individual popovers
Options for individual popovers can alternatively be specified through the use of data attributes, as explained above.
Using function with
popperConfig
const
popover
Popover
element
popperConfig
defaultBsPopperConfig
// const newPopperConfig = {...}
// use defaultBsPopperConfig if needed...
// return newPopperConfig
Methods
All API methods are asynchronous and start a transition.
They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored.
Learn more in our JavaScript docs.
Method
Description
disable
Removes the ability for an element’s popover to be shown. The popover will only be able to be shown if it is re-enabled.
dispose
Hides and destroys an element’s popover (Removes stored data on the DOM element). Popovers that use delegation (which are created using
selector
option
) cannot be individually destroyed on descendant trigger elements.
enable
Gives an element’s popover the ability to be shown.
Popovers are enabled by default.
getInstance
Static
method which allows you to get the popover instance associated with a DOM element.
getOrCreateInstance
Static
method which allows you to get the popover instance associated with a DOM element, or create a new one in case it wasn’t initialized.
hide
Hides an element’s popover.
Returns to the caller before the popover has actually been hidden
(i.e. before the
hidden.bs.popover
event occurs). This is considered a “manual” triggering of the popover.
setContent
Gives a way to change the popover’s content after its initialization.
show
Reveals an element’s popover.
Returns to the caller before the popover has actually been shown
(i.e. before the
shown.bs.popover
event occurs). This is considered a “manual” triggering of the popover. Popovers whose title and content are both zero-length are never displayed.
toggle
Toggles an element’s popover.
Returns to the caller before the popover has actually been shown or hidden
(i.e. before the
shown.bs.popover
hidden.bs.popover
event occurs). This is considered a “manual” triggering of the popover.
toggleEnabled
Toggles the ability for an element’s popover to be shown or hidden.
update
Updates the position of an element’s popover.
// getOrCreateInstance example
const
popover
Popover
getOrCreateInstance
'#example'
// Returns a Bootstrap popover instance
// setContent example
popover
setContent
'.popover-header'
'another title'
'.popover-body'
'another content'
setContent
method accepts an
object
argument, where each property-key is a valid
string
selector within the popover template, and each related property-value can be
string
element
function
null
Events
Event
Description
hide.bs.popover
This event is fired immediately when the
hide
instance method has been called.
hidden.bs.popover
This event is fired when the popover has finished being hidden from the user (will wait for CSS transitions to complete).
inserted.bs.popover
This event is fired after the
show.bs.popover
event when the popover template has been added to the DOM.
show.bs.popover
This event fires immediately when the
show
instance method is called.
shown.bs.popover
This event is fired when the popover has been made visible to the user (will wait for CSS transitions to complete).
const
myPopoverTrigger
document
getElementById
'myPopover'
myPopoverTrigger
addEventListener
'hidden.bs.popover'
// do something...

--- 004_components_buttons.txt ---
Base class
.btn
class that sets up basic styles such as padding and content alignment. By default,
.btn
controls have a transparent border and background color, and lack any explicit focus and hover styles.
Base class
html
button
type
button
class
Base class
button
.btn
class is intended to be used in conjunction with our button variants, or to serve as a basis for your own custom styles.
If you are using the
.btn
class on its own, remember to at least define some explicit
:focus
and/or
:focus-visible
styles.
Variants
Primary
Secondary
Success
Danger
Warning
Info
Light
Dark
Link
html
button
type
button
class
btn btn-primary
Primary
button
button
type
button
class
btn btn-secondary
Secondary
button
button
type
button
class
btn btn-success
Success
button
button
type
button
class
btn btn-danger
Danger
button
button
type
button
class
btn btn-warning
Warning
button
button
type
button
class
btn btn-info
Info
button
button
type
button
class
btn btn-light
Light
button
button
type
button
class
btn btn-dark
Dark
button
button
type
button
class
btn btn-link
Link
button
Accessibility tip:
Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a
sufficient
color contrast
) or is included through alternative means, such as additional text hidden with the
.visually-hidden
class.
Disable text wrapping
If you don’t want the button text to wrap, you can add the
.text-nowrap
class to the button. In Sass, you can set
$btn-white-space: nowrap
to disable text wrapping for each button.
Button tags
.btn
classes are designed to be used with the
<button>
element. However, you can also use these classes on
<input>
elements (though some browsers may apply a slightly different rendering).
When using button classes on
elements that are used to trigger in-page functionality (like collapsing content), rather than linking to new pages or sections within the current page, these links should be given a
role="button"
to appropriately convey their purpose to assistive technologies such as screen readers.
Link
Button
html
class
btn btn-primary
href
role
button
Link
button
class
btn btn-primary
type
submit
Button
button
input
class
btn btn-primary
type
button
value
Input
input
class
btn btn-primary
type
submit
value
Submit
input
class
btn btn-primary
type
reset
value
Reset
Outline buttons
In need of a button, but not the hefty background colors they bring? Replace the default modifier classes with the
.btn-outline-*
ones to remove all background images and colors on any button.
Primary
Secondary
Success
Danger
Warning
Info
Light
Dark
html
button
type
button
class
btn btn-outline-primary
Primary
button
button
type
button
class
btn btn-outline-secondary
Secondary
button
button
type
button
class
btn btn-outline-success
Success
button
button
type
button
class
btn btn-outline-danger
Danger
button
button
type
button
class
btn btn-outline-warning
Warning
button
button
type
button
class
btn btn-outline-info
Info
button
button
type
button
class
btn btn-outline-light
Light
button
button
type
button
class
btn btn-outline-dark
Dark
button
Some of the button styles use a relatively light foreground color, and should only be used on a dark background in order to have sufficient contrast.
Sizes
Fancy larger or smaller buttons? Add
.btn-lg
.btn-sm
for additional sizes.
Large button
Large button
html
button
type
button
class
btn btn-primary btn-lg
Large button
button
button
type
button
class
btn btn-secondary btn-lg
Large button
button
Small button
Small button
html
button
type
button
class
btn btn-primary btn-sm
Small button
button
button
type
button
class
btn btn-secondary btn-sm
Small button
button
You can even roll your own custom sizing with CSS variables:
Custom button
html
button
type
button
class
btn btn-primary
style
--bs-btn-padding-y
.25rem
--bs-btn-padding-x
.5rem
--bs-btn-font-size
.75rem
Custom button
button
Disabled state
Make buttons look inactive by adding the
disabled
boolean attribute to any
<button>
element. Disabled buttons have
pointer-events: none
applied to, preventing hover and active states from triggering.
Primary button
Button
Primary button
Button
html
button
type
button
class
btn btn-primary
disabled
Primary button
button
button
type
button
class
btn btn-secondary
disabled
Button
button
button
type
button
class
btn btn-outline-primary
disabled
Primary button
button
button
type
button
class
btn btn-outline-secondary
disabled
Button
button
Disabled buttons using the
element behave a bit different:
s don’t support the
disabled
attribute, so you must add the
.disabled
class to make it visually appear disabled.
Some future-friendly styles are included to disable all
pointer-events
on anchor buttons.
Disabled buttons using
should include the
aria-disabled="true"
attribute to indicate the state of the element to assistive technologies.
Disabled buttons using
should not
include the
href
attribute.
Primary link
Link
html
class
btn btn-primary disabled
role
button
aria-disabled
true
Primary link
class
btn btn-secondary disabled
role
button
aria-disabled
true
Link
Link functionality caveat
To cover cases where you have to keep the
href
attribute on a disabled link, the
.disabled
class uses
pointer-events: none
to try to disable the link functionality of
s. Note that this CSS property is not yet standardized for HTML, but all modern browsers support it. In addition, even in browsers that do support
pointer-events: none
, keyboard navigation remains unaffected, meaning that sighted keyboard users and users of assistive technologies will still be able to activate these links. So to be safe, in addition to
aria-disabled="true"
, also include a
tabindex="-1"
attribute on these links to prevent them from receiving keyboard focus, and use custom JavaScript to disable their functionality altogether.
Primary link
Link
html
href
class
btn btn-primary disabled
tabindex
role
button
aria-disabled
true
Primary link
href
class
btn btn-secondary disabled
tabindex
role
button
aria-disabled
true
Link
Block buttons
Create responsive stacks of full-width, “block buttons” like those in Bootstrap 4 with a mix of our display and gap utilities. By using utilities instead of button-specific classes, we have much greater control over spacing, alignment, and responsive behaviors.
Button
Button
html
class
d-grid gap-2
button
class
btn btn-primary
type
button
Button
button
button
class
btn btn-primary
type
button
Button
button
Here we create a responsive variation, starting with vertically stacked buttons until the
breakpoint, where
.d-md-block
replaces the
.d-grid
class, thus nullifying the
gap-2
utility. Resize your browser to see them change.
Button
Button
html
class
d-grid gap-2 d-md-block
button
class
btn btn-primary
type
button
Button
button
button
class
btn btn-primary
type
button
Button
button
You can adjust the width of your block buttons with grid column width classes. For example, for a half-width “block button”, use
.col-6
. Center it horizontally with
.mx-auto
, too.
Button
Button
html
class
d-grid gap-2 col-6 mx-auto
button
class
btn btn-primary
type
button
Button
button
button
class
btn btn-primary
type
button
Button
button
Additional utilities can be used to adjust the alignment of buttons when horizontal. Here we’ve taken our previous responsive example and added some flex utilities and a margin utility on the button to right-align the buttons when they’re no longer stacked.
Button
Button
html
class
d-grid gap-2 d-md-flex justify-content-md-end
button
class
btn btn-primary me-md-2
type
button
Button
button
button
class
btn btn-primary
type
button
Button
button
Button plugin
The button plugin allows you to create simple on/off toggle buttons.
Visually, these toggle buttons are identical to the
checkbox toggle buttons
. However, they are conveyed differently by assistive technologies: the checkbox toggles will be announced by screen readers as “checked”/“not checked” (since, despite their appearance, they are fundamentally still checkboxes), whereas these toggle buttons will be announced as “button”/“button pressed”. The choice between these two approaches will depend on the type of toggle you are creating, and whether or not the toggle will make sense to users when announced as a checkbox or as an actual button.
Toggle states
data-bs-toggle="button"
to toggle a button’s
active
state. If you’re pre-toggling a button, you must manually add the
.active
class
aria-pressed="true"
to ensure that it is conveyed appropriately to assistive technologies.
Toggle button
Active toggle button
Disabled toggle button
Toggle button
Active toggle button
Disabled toggle button
html
class
d-inline-flex gap-1
button
type
button
class
data-bs-toggle
button
Toggle button
button
button
type
button
class
btn active
data-bs-toggle
button
aria-pressed
true
Active toggle button
button
button
type
button
class
disabled
data-bs-toggle
button
Disabled toggle button
button
class
d-inline-flex gap-1
button
type
button
class
btn btn-primary
data-bs-toggle
button
Toggle button
button
button
type
button
class
btn btn-primary active
data-bs-toggle
button
aria-pressed
true
Active toggle button
button
button
type
button
class
btn btn-primary
disabled
data-bs-toggle
button
Disabled toggle button
button
Toggle link
Active toggle link
Disabled toggle link
Toggle link
Active toggle link
Disabled toggle link
html
class
d-inline-flex gap-1
href
class
role
button
data-bs-toggle
button
Toggle link
href
class
btn active
role
button
data-bs-toggle
button
aria-pressed
true
Active toggle link
class
btn disabled
aria-disabled
true
role
button
data-bs-toggle
button
Disabled toggle link
class
d-inline-flex gap-1
href
class
btn btn-primary
role
button
data-bs-toggle
button
Toggle link
href
class
btn btn-primary active
role
button
data-bs-toggle
button
aria-pressed
true
Active toggle link
class
btn btn-primary disabled
aria-disabled
true
role
button
data-bs-toggle
button
Disabled toggle link
Methods
You can create a button instance with the button constructor, for example:
const
bsButton
Button
'#myButton'
Method
Description
dispose
Destroys an element’s button. (Removes stored data on the DOM element)
getInstance
Static method which allows you to get the button instance associated with a DOM element, you can use it like this:
getOrCreateInstance
Static method which returns a button instance associated with a DOM element or creates a new one in case it wasn’t initialized. You can use it like this:
toggle
Toggles push state. Gives the button the appearance that it has been activated.
For example, to toggle all buttons
document
querySelectorAll
'.btn'
forEach
buttonElement
const
button
Button
getOrCreateInstance
buttonElement
button
toggle
Variables
Added in v5.2.0
As part of Bootstrap’s evolving CSS variables approach, buttons now use local CSS variables on
.btn
for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
scss/_buttons.scss
#{$prefix}
btn-padding-x
#{$btn-padding-x}
#{$prefix}
btn-padding-y
#{$btn-padding-y}
#{$prefix}
btn-font-family
#{$btn-font-family}
@include
$btn-font-size
#{$prefix}
btn-font-size
#{$prefix}
btn-font-weight
#{$btn-font-weight}
#{$prefix}
btn-line-height
#{$btn-line-height}
#{$prefix}
btn-color
#{$btn-color}
#{$prefix}
btn-bg
transparent
#{$prefix}
btn-border-width
#{$btn-border-width}
#{$prefix}
btn-border-color
transparent
#{$prefix}
btn-border-radius
#{$btn-border-radius}
#{$prefix}
btn-hover-border-color
transparent
#{$prefix}
btn-box-shadow
#{$btn-box-shadow}
#{$prefix}
btn-disabled-opacity
#{$btn-disabled-opacity}
#{$prefix}
btn-focus-box-shadow
0 0 0
#{$btn-focus-width}
rgba
#{$prefix}
btn-focus-shadow-rgb
Each
.btn-*
modifier class updates the appropriate CSS variables to minimize additional CSS rules with our
button-variant()
button-outline-variant()
, and
button-size()
mixins.
Here’s an example of building a custom
.btn-*
modifier class as we do for the buttons unique to our docs by reassigning Bootstrap’s CSS variables with a mixture of our own CSS and Sass variables.
Custom button
site/src/scss/_buttons.scss
.btn-bd-primary
--bs-btn-font-weight
--bs-btn-color
--bs-white
--bs-btn-bg
--bd-violet-bg
--bs-btn-border-color
--bd-violet-bg
--bs-btn-hover-color
--bs-white
--bs-btn-hover-bg
shade-color
$bd-violet
--bs-btn-hover-border-color
shade-color
$bd-violet
--bs-btn-focus-shadow-rgb
--bd-violet-rgb
--bs-btn-active-color
--bs-btn-hover-color
--bs-btn-active-bg
shade-color
$bd-violet
--bs-btn-active-border-color
shade-color
$bd-violet
Sass variables
scss/_variables.scss
$btn-color
#{$prefix}
body-color
$btn-padding-y
$input-btn-padding-y
$btn-padding-x
$input-btn-padding-x
$btn-font-family
$input-btn-font-family
$btn-font-size
$input-btn-font-size
$btn-line-height
$input-btn-line-height
$btn-white-space
null
// Set to `nowrap` to prevent text wrapping
$btn-padding-y-sm
$input-btn-padding-y-sm
$btn-padding-x-sm
$input-btn-padding-x-sm
$btn-font-size-sm
$input-btn-font-size-sm
$btn-padding-y-lg
$input-btn-padding-y-lg
$btn-padding-x-lg
$input-btn-padding-x-lg
$btn-font-size-lg
$input-btn-font-size-lg
$btn-border-width
$input-btn-border-width
$btn-font-weight
$font-weight-normal
$btn-box-shadow
inset 0 1px 0
rgba
$white
0 1px 1px
rgba
$black
.075
$btn-focus-width
$input-btn-focus-width
$btn-focus-box-shadow
$input-btn-focus-box-shadow
$btn-disabled-opacity
$btn-active-box-shadow
inset 0 3px 5px
rgba
$black
.125
$btn-link-color
#{$prefix}
link-color
$btn-link-hover-color
#{$prefix}
link-hover-color
$btn-link-disabled-color
$gray-600
$btn-link-focus-shadow-rgb
to-rgb
color-contrast
$link-color
$link-color
// Allows for customizing button radius independently from global border radius
$btn-border-radius
#{$prefix}
border-radius
$btn-border-radius-sm
#{$prefix}
border-radius-sm
$btn-border-radius-lg
#{$prefix}
border-radius-lg
$btn-transition
color .15s ease-in-out
background-color .15s ease-in-out
border-color .15s ease-in-out
box-shadow .15s ease-in-out
$btn-hover-bg-shade-amount
$btn-hover-bg-tint-amount
$btn-hover-border-shade-amount
$btn-hover-border-tint-amount
$btn-active-bg-shade-amount
$btn-active-bg-tint-amount
$btn-active-border-shade-amount
$btn-active-border-tint-amount
Sass mixins
There are three mixins for buttons: button and button outline variant mixins (both based on
$theme-colors
), plus a button size mixin.
scss/mixins/_buttons.scss
@mixin
button-variant
$background
$border
$color
color-contrast
$background
$hover-background
$color
$color-contrast-light
shade-color
$background
$btn-hover-bg-shade-amount
tint-color
$background
$btn-hover-bg-tint-amount
$hover-border
$color
$color-contrast-light
shade-color
$border
$btn-hover-border-shade-amount
tint-color
$border
$btn-hover-border-tint-amount
$hover-color
color-contrast
$hover-background
$active-background
$color
$color-contrast-light
shade-color
$background
$btn-active-bg-shade-amount
tint-color
$background
$btn-active-bg-tint-amount
$active-border
$color
$color-contrast-light
shade-color
$border
$btn-active-border-shade-amount
tint-color
$border
$btn-active-border-tint-amount
$active-color
color-contrast
$active-background
$disabled-background
$background
$disabled-border
$border
$disabled-color
color-contrast
$disabled-background
#{$prefix}
btn-color
#{$color}
#{$prefix}
btn-bg
#{$background}
#{$prefix}
btn-border-color
#{$border}
#{$prefix}
btn-hover-color
#{$hover-color}
#{$prefix}
btn-hover-bg
#{$hover-background}
#{$prefix}
btn-hover-border-color
#{$hover-border}
#{$prefix}
btn-focus-shadow-rgb
to-rgb
$color
$border
#{$prefix}
btn-active-color
#{$active-color}
#{$prefix}
btn-active-bg
#{$active-background}
#{$prefix}
btn-active-border-color
#{$active-border}
#{$prefix}
btn-active-shadow
#{$btn-active-box-shadow}
#{$prefix}
btn-disabled-color
#{$disabled-color}
#{$prefix}
btn-disabled-bg
#{$disabled-background}
#{$prefix}
btn-disabled-border-color
#{$disabled-border}
scss/mixins/_buttons.scss
@mixin
button-outline-variant
$color
$color-hover
color-contrast
$color
$active-background
$color
$active-border
$color
$active-color
color-contrast
$active-background
#{$prefix}
btn-color
#{$color}
#{$prefix}
btn-border-color
#{$color}
#{$prefix}
btn-hover-color
#{$color-hover}
#{$prefix}
btn-hover-bg
#{$active-background}
#{$prefix}
btn-hover-border-color
#{$active-border}
#{$prefix}
btn-focus-shadow-rgb
to-rgb
$color
#{$prefix}
btn-active-color
#{$active-color}
#{$prefix}
btn-active-bg
#{$active-background}
#{$prefix}
btn-active-border-color
#{$active-border}
#{$prefix}
btn-active-shadow
#{$btn-active-box-shadow}
#{$prefix}
btn-disabled-color
#{$color}
#{$prefix}
btn-disabled-bg
transparent
#{$prefix}
btn-disabled-border-color
#{$color}
#{$prefix}
gradient
none
scss/mixins/_buttons.scss
@mixin
button-size
$padding-y
$padding-x
$font-size
$border-radius
#{$prefix}
btn-padding-y
#{$padding-y}
#{$prefix}
btn-padding-x
#{$padding-x}
@include
$font-size
#{$prefix}
btn-font-size
#{$prefix}
btn-border-radius
#{$border-radius}
Sass loops
Button variants (for regular and outline buttons) use their respective mixins with our
$theme-colors
map to generate the modifier classes in
scss/_buttons.scss
scss/_buttons.scss
@each
$color
$value
$theme-colors
.btn-
#{$color}
$color
== "light"
@include
button-variant
$value
$value
$hover-background
shade-color
$value
$btn-hover-bg-shade-amount
$hover-border
shade-color
$value
$btn-hover-border-shade-amount
$active-background
shade-color
$value
$btn-active-bg-shade-amount
$active-border
shade-color
$value
$btn-active-border-shade-amount
@else if
$color
== "dark"
@include
button-variant
$value
$value
$hover-background
tint-color
$value
$btn-hover-bg-tint-amount
$hover-border
tint-color
$value
$btn-hover-border-tint-amount
$active-background
tint-color
$value
$btn-active-bg-tint-amount
$active-border
tint-color
$value
$btn-active-border-tint-amount
@else
@include
button-variant
$value
$value
@each
$color
$value
$theme-colors
.btn-outline-
#{$color}
@include
button-outline-variant
$value

--- 085_components_modal.txt ---
How it works
Before getting started with Bootstrap’s modal component, be sure to read the following as our menu options have recently changed.
Modals are built with HTML, CSS, and JavaScript. They’re positioned over everything else in the document and remove scroll from the
<body>
so that modal content scrolls instead.
Clicking on the modal “backdrop” will automatically close the modal.
Modals use
position: fixed
, which can sometimes be a bit particular about its rendering. Whenever possible, place your modal HTML in a top-level position to avoid potential interference from other elements. You’ll likely run into issues when nesting a
.modal
within another fixed element.
Once again, due to
position: fixed
, there are some caveats with using modals on mobile devices.
See our browser support docs
for details.
Due to how HTML5 defines its semantics,
autofocus
HTML attribute
has no effect in Bootstrap modals. To achieve the same effect, use some custom JavaScript:
const
myModal
document
getElementById
'myModal'
const
myInput
document
getElementById
'myInput'
myModal
addEventListener
'shown.bs.modal'
myInput
focus
The animation effect of this component is dependent on the
prefers-reduced-motion
media query. See the
reduced motion section of our accessibility documentation
Keep reading for demos and usage guidelines.
Examples
Modal components
Below is a
static
modal example (meaning its
position
display
have been overridden). Included are the modal header, modal body (required for
padding
), and modal footer (optional). We ask that you include modal headers with dismiss actions whenever possible, or provide another explicit dismiss action.
Modal title
Modal body text goes here.
Close
Save changes
class
modal
tabindex
class
modal-dialog
class
modal-content
class
modal-header
class
modal-title
Modal title
button
type
button
class
btn-close
data-bs-dismiss
modal
aria-label
Close
button
class
modal-body
Modal body text goes here.
class
modal-footer
button
type
button
class
btn btn-secondary
data-bs-dismiss
modal
Close
button
button
type
button
class
btn btn-primary
Save changes
button
In the above static example, we use
<h5>
, to avoid issues with the heading hierarchy in the documentation page. Structurally, however, a modal dialog represents its own separate document/context, so the
.modal-title
should ideally be an
<h1>
. If necessary, you can use the
font size utilities
to control the heading’s appearance. All the following live examples use this approach.
Live demo
Toggle a working modal demo by clicking the button below. It will slide down and fade in from the top of the page.
Modal title
Woo-hoo, you’re reading this text in a modal!
Close
Save changes
Launch demo modal
<!-- Button trigger modal -->
button
type
button
class
btn btn-primary
data-bs-toggle
modal
data-bs-target
#exampleModal
Launch demo modal
button
<!-- Modal -->
class
modal fade
exampleModal
tabindex
aria-labelledby
exampleModalLabel
aria-hidden
true
class
modal-dialog
class
modal-content
class
modal-header
class
modal-title fs-5
exampleModalLabel
Modal title
button
type
button
class
btn-close
data-bs-dismiss
modal
aria-label
Close
button
class
modal-body
class
modal-footer
button
type
button
class
btn btn-secondary
data-bs-dismiss
modal
Close
button
button
type
button
class
btn btn-primary
Save changes
button
Static backdrop
When backdrop is set to static, the modal will not close when clicking outside of it. Click the button below to try it.
Modal title
I will not close if you click outside of me. Don’t even try to press escape key.
Close
Understood
Launch static backdrop modal
<!-- Button trigger modal -->
button
type
button
class
btn btn-primary
data-bs-toggle
modal
data-bs-target
#staticBackdrop
Launch static backdrop modal
button
<!-- Modal -->
class
modal fade
staticBackdrop
data-bs-backdrop
static
data-bs-keyboard
false
tabindex
aria-labelledby
staticBackdropLabel
aria-hidden
true
class
modal-dialog
class
modal-content
class
modal-header
class
modal-title fs-5
staticBackdropLabel
Modal title
button
type
button
class
btn-close
data-bs-dismiss
modal
aria-label
Close
button
class
modal-body
class
modal-footer
button
type
button
class
btn btn-secondary
data-bs-dismiss
modal
Close
button
button
type
button
class
btn btn-primary
Understood
button
Scrolling long content
When modals become too long for the user’s viewport or device, they scroll independent of the page itself. Try the demo below to see what we mean.
Modal title
This is some placeholder content to show the scrolling behavior for modals. Instead of repeating the text in the modal, we use an inline style to set a minimum height, thereby extending the length of the overall modal and demonstrating the overflow scrolling. When content becomes longer than the height of the viewport, scrolling will move the modal as needed.
Close
Save changes
Launch demo modal
You can also create a scrollable modal that allows scrolling the modal body by adding
.modal-dialog-scrollable
.modal-dialog
Modal title
This is some placeholder content to show the scrolling behavior for modals. We use repeated line breaks to demonstrate how content can exceed minimum inner height, thereby showing inner scrolling. When content becomes longer than the predefined max-height of modal, content will be cropped and scrollable within the modal.
This content should appear at the bottom after you scroll.
Close
Save changes
Launch demo modal
<!-- Scrollable modal -->
class
modal-dialog modal-dialog-scrollable
Vertically centered
.modal-dialog-centered
.modal-dialog
to vertically center the modal.
Modal title
This is a vertically centered modal.
Close
Save changes
Modal title
This is some placeholder content to show a vertically centered modal. We’ve added some extra copy here to show how vertically centering the modal works when combined with scrollable modals. We also use some repeated line breaks to quickly extend the height of the content, thereby triggering the scrolling. When content becomes longer than the predefined max-height of modal, content will be cropped and scrollable within the modal.
Just like that.
Close
Save changes
Vertically centered modal
Vertically centered scrollable modal
<!-- Vertically centered modal -->
class
modal-dialog modal-dialog-centered
<!-- Vertically centered scrollable modal -->
class
modal-dialog modal-dialog-centered modal-dialog-scrollable
Tooltips and popovers
Tooltips
popovers
can be placed within modals as needed. When modals are closed, any tooltips and popovers within are also automatically dismissed.
Modal title
Popover in a modal
This
button
triggers a popover on click.
Tooltips in a modal
This link
that link
have tooltips on hover.
Close
Save changes
Launch demo modal
class
modal-body
class
fs-5
Popover in a modal
This
button
class
btn btn-secondary
data-bs-toggle
popover
title
Popover title
data-bs-content
Popover body content is set in this attribute.
button
button
triggers a popover on click.
class
fs-5
Tooltips in a modal
href
data-bs-toggle
tooltip
title
Tooltip
This link
href
data-bs-toggle
tooltip
title
Tooltip
that link
have tooltips on hover.
Using the grid
Utilize the Bootstrap grid system within a modal by nesting
.container-fluid
within the
.modal-body
. Then, use the normal grid system classes as you would anywhere else.
Grids in modals
.col-md-4
.col-md-4 .ms-auto
.col-md-3 .ms-auto
.col-md-2 .ms-auto
.col-md-6 .ms-auto
Level 1: .col-sm-9
Level 2: .col-8 .col-sm-6
Level 2: .col-4 .col-sm-6
Close
Save changes
Launch demo modal
class
modal-body
class
container-fluid
class
class
col-md-4
.col-md-4
class
col-md-4 ms-auto
.col-md-4 .ms-auto
class
class
col-md-3 ms-auto
.col-md-3 .ms-auto
class
col-md-2 ms-auto
.col-md-2 .ms-auto
class
class
col-md-6 ms-auto
.col-md-6 .ms-auto
class
class
col-sm-9
Level 1: .col-sm-9
class
class
col-8 col-sm-6
Level 2: .col-8 .col-sm-6
class
col-4 col-sm-6
Level 2: .col-4 .col-sm-6
Varying modal content
Have a bunch of buttons that all trigger the same modal with slightly different contents? Use
event.relatedTarget
HTML
data-bs-*
attributes
to vary the contents of the modal depending on which button was clicked.
Below is a live demo followed by example HTML and JavaScript. For more information,
read the modal events docs
for details on
relatedTarget
Open modal for @mdo
Open modal for @fat
Open modal for @getbootstrap
New message
Recipient:
Message:
Close
Send message
html
button
type
button
class
btn btn-primary
data-bs-toggle
modal
data-bs-target
#exampleModal
data-bs-whatever
@mdo
Open modal for @mdo
button
button
type
button
class
btn btn-primary
data-bs-toggle
modal
data-bs-target
#exampleModal
data-bs-whatever
@fat
Open modal for @fat
button
button
type
button
class
btn btn-primary
data-bs-toggle
modal
data-bs-target
#exampleModal
data-bs-whatever
@getbootstrap
Open modal for @getbootstrap
button
class
modal fade
exampleModal
tabindex
aria-labelledby
exampleModalLabel
aria-hidden
true
class
modal-dialog
class
modal-content
class
modal-header
class
modal-title fs-5
exampleModalLabel
New message
button
type
button
class
btn-close
data-bs-dismiss
modal
aria-label
Close
button
class
modal-body
form
class
mb-3
label
recipient-name
class
col-form-label
Recipient:
label
input
type
text
class
form-control
recipient-name
class
mb-3
label
message-text
class
col-form-label
Message:
label
textarea
class
form-control
message-text
textarea
form
class
modal-footer
button
type
button
class
btn btn-secondary
data-bs-dismiss
modal
Close
button
button
type
button
class
btn btn-primary
Send message
button
site/src/assets/partials/snippets.js
const
exampleModal
document
getElementById
'exampleModal'
exampleModal
exampleModal
addEventListener
'show.bs.modal'
event
// Button that triggered the modal
const
button
event
relatedTarget
// Extract info from data-bs-* attributes
const
recipient
button
getAttribute
'data-bs-whatever'
// If necessary, you could initiate an Ajax request here
// and then do the updating in a callback.
// Update the modal's content.
const
modalTitle
exampleModal
querySelector
'.modal-title'
const
modalBodyInput
exampleModal
querySelector
'.modal-body input'
modalTitle
textContent
New message to
recipient
modalBodyInput
value
recipient
Toggle between modals
Toggle between multiple modals with some clever placement of the
data-bs-target
data-bs-toggle
attributes. For example, you could toggle a password reset modal from within an already open sign in modal.
Please note multiple modals cannot be open at the same time
—this method simply toggles between two separate modals.
Modal 1
Show a second modal and hide this one with the button below.
Open second modal
Modal 2
Hide this modal and show the first with the button below.
Back to first
Open first modal
html
class
modal fade
exampleModalToggle
aria-hidden
true
aria-labelledby
exampleModalToggleLabel
tabindex
class
modal-dialog modal-dialog-centered
class
modal-content
class
modal-header
class
modal-title fs-5
exampleModalToggleLabel
Modal 1
button
type
button
class
btn-close
data-bs-dismiss
modal
aria-label
Close
button
class
modal-body
Show a second modal and hide this one with the button below.
class
modal-footer
button
class
btn btn-primary
data-bs-target
#exampleModalToggle2
data-bs-toggle
modal
Open second modal
button
class
modal fade
exampleModalToggle2
aria-hidden
true
aria-labelledby
exampleModalToggleLabel2
tabindex
class
modal-dialog modal-dialog-centered
class
modal-content
class
modal-header
class
modal-title fs-5
exampleModalToggleLabel2
Modal 2
button
type
button
class
btn-close
data-bs-dismiss
modal
aria-label
Close
button
class
modal-body
Hide this modal and show the first with the button below.
class
modal-footer
button
class
btn btn-primary
data-bs-target
#exampleModalToggle
data-bs-toggle
modal
Back to first
button
button
class
btn btn-primary
data-bs-target
#exampleModalToggle
data-bs-toggle
modal
Open first modal
button
Change animation
$modal-fade-transform
variable determines the transform state of
.modal-dialog
before the modal fade-in animation, the
$modal-show-transform
variable determines the transform of
.modal-dialog
at the end of the modal fade-in animation.
If you want for example a zoom-in animation, you can set
$modal-fade-transform: scale(.8)
Remove animation
For modals that simply appear rather than fade in to view, remove the
.fade
class from your modal markup.
class
modal
tabindex
aria-labelledby
aria-hidden
true
Dynamic heights
If the height of a modal changes while it is open, you should call
myModal.handleUpdate()
to readjust the modal’s position in case a scrollbar appears.
Accessibility
Be sure to add
aria-labelledby="..."
, referencing the modal title, to
.modal
. Additionally, you may give a description of your modal dialog with
aria-describedby
.modal
. Note that you don’t need to add
role="dialog"
since we already add it via JavaScript.
Embedding YouTube videos
Embedding YouTube videos in modals requires additional JavaScript not in Bootstrap to automatically stop playback and more.
See this helpful Stack Overflow post
for more information.
Optional sizes
Modals have three optional sizes, available via modifier classes to be placed on a
.modal-dialog
. These sizes kick in at certain breakpoints to avoid horizontal scrollbars on narrower viewports.
Size
Class
Modal max-width
Small
.modal-sm
300px
Default
None
500px
Large
.modal-lg
800px
Extra large
.modal-xl
1140px
Our default modal without modifier class constitutes the “medium” size modal.
Extra large modal
Large modal
Small modal
class
modal-dialog modal-xl
class
modal-dialog modal-lg
class
modal-dialog modal-sm
Extra large modal
Large modal
Small modal
Fullscreen Modal
Another override is the option to pop up a modal that covers the user viewport, available via modifier classes that are placed on a
.modal-dialog
Class
Availability
.modal-fullscreen
Always
.modal-fullscreen-sm-down
576px
.modal-fullscreen-md-down
768px
.modal-fullscreen-lg-down
992px
.modal-fullscreen-xl-down
1200px
.modal-fullscreen-xxl-down
1400px
Full screen
Full screen below sm
Full screen below md
Full screen below lg
Full screen below xl
Full screen below xxl
<!-- Full screen modal -->
class
modal-dialog modal-fullscreen-sm-down
Full screen modal
Close
Full screen below sm
Close
Full screen below md
Close
Full screen below lg
Close
Full screen below xl
Close
Full screen below xxl
Close
Variables
Added in v5.2.0
As part of Bootstrap’s evolving CSS variables approach, modals now use local CSS variables on
.modal
.modal-backdrop
for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
scss/_modal.scss
#{$prefix}
modal-zindex
#{$zindex-modal}
#{$prefix}
modal-width
#{$modal-md}
#{$prefix}
modal-padding
#{$modal-inner-padding}
#{$prefix}
modal-margin
#{$modal-dialog-margin}
#{$prefix}
modal-color
#{$modal-content-color}
#{$prefix}
modal-bg
#{$modal-content-bg}
#{$prefix}
modal-border-color
#{$modal-content-border-color}
#{$prefix}
modal-border-width
#{$modal-content-border-width}
#{$prefix}
modal-border-radius
#{$modal-content-border-radius}
#{$prefix}
modal-box-shadow
#{$modal-content-box-shadow-xs}
#{$prefix}
modal-inner-border-radius
#{$modal-content-inner-border-radius}
#{$prefix}
modal-header-padding-x
#{$modal-header-padding-x}
#{$prefix}
modal-header-padding-y
#{$modal-header-padding-y}
#{$prefix}
modal-header-padding
#{$modal-header-padding}
// Todo in v6: Split this padding into x and y
#{$prefix}
modal-header-border-color
#{$modal-header-border-color}
#{$prefix}
modal-header-border-width
#{$modal-header-border-width}
#{$prefix}
modal-title-line-height
#{$modal-title-line-height}
#{$prefix}
modal-footer-gap
#{$modal-footer-margin-between}
#{$prefix}
modal-footer-bg
#{$modal-footer-bg}
#{$prefix}
modal-footer-border-color
#{$modal-footer-border-color}
#{$prefix}
modal-footer-border-width
#{$modal-footer-border-width}
scss/_modal.scss
#{$prefix}
backdrop-zindex
#{$zindex-modal-backdrop}
#{$prefix}
backdrop-bg
#{$modal-backdrop-bg}
#{$prefix}
backdrop-opacity
#{$modal-backdrop-opacity}
Sass variables
scss/_variables.scss
$modal-inner-padding
$spacer
$modal-footer-margin-between
.5rem
$modal-dialog-margin
.5rem
$modal-dialog-margin-y-sm-up
1.75rem
$modal-title-line-height
$line-height-base
$modal-content-color
#{$prefix}
body-color
$modal-content-bg
#{$prefix}
body-bg
$modal-content-border-color
#{$prefix}
border-color-translucent
$modal-content-border-width
#{$prefix}
border-width
$modal-content-border-radius
#{$prefix}
border-radius-lg
$modal-content-inner-border-radius
subtract
$modal-content-border-radius
$modal-content-border-width
$modal-content-box-shadow-xs
#{$prefix}
box-shadow-sm
$modal-content-box-shadow-sm-up
#{$prefix}
box-shadow
$modal-backdrop-bg
$black
$modal-backdrop-opacity
$modal-header-border-color
#{$prefix}
border-color
$modal-header-border-width
$modal-content-border-width
$modal-header-padding-y
$modal-inner-padding
$modal-header-padding-x
$modal-inner-padding
$modal-header-padding
$modal-header-padding-y
$modal-header-padding-x
// Keep this for backwards compatibility
$modal-footer-bg
null
$modal-footer-border-color
$modal-header-border-color
$modal-footer-border-width
$modal-header-border-width
$modal-sm
300px
$modal-md
500px
$modal-lg
800px
$modal-xl
1140px
$modal-fade-transform
translate
-50px
$modal-show-transform
none
$modal-transition
transform .3s ease-out
$modal-scale-transform
scale
1.02
Sass loops
Responsive fullscreen modals
are generated via the
$breakpoints
map and a loop in
scss/_modal.scss
scss/_modal.scss
@each
$breakpoint
map-keys
$grid-breakpoints
$infix
breakpoint-infix
$breakpoint
$grid-breakpoints
$postfix
$infix
$infix
"-down"
@include
media-breakpoint-down
$breakpoint
.modal-fullscreen
#{$postfix}
width
100vw
max-width
none
height
100%
margin
.modal-content
height
100%
border
@include
border-radius
.modal-header,
.modal-footer
@include
border-radius
.modal-body
overflow-y
auto
Usage
The modal plugin toggles your hidden content on demand, via data attributes or JavaScript. It also overrides default scrolling behavior and generates a
.modal-backdrop
to provide a click area for dismissing shown modals when clicking outside the modal.
Via data attributes
Toggle
Activate a modal without writing JavaScript. Set
data-bs-toggle="modal"
on a controller element, like a button, along with a
data-bs-target="#foo"
href="#foo"
to target a specific modal to toggle.
button
type
button
data-bs-toggle
modal
data-bs-target
#myModal
Launch modal
button
Dismiss
Dismissal can be achieved with the
data-bs-dismiss
attribute on a button
within the modal
as demonstrated below:
button
type
button
class
btn-close
data-bs-dismiss
modal
aria-label
Close
button
or on a button
outside the modal
using the additional
data-bs-target
as demonstrated below:
button
type
button
class
btn-close
data-bs-dismiss
modal
data-bs-target
#my-modal
aria-label
Close
button
While both ways to dismiss a modal are supported, keep in mind that dismissing from outside a modal does not match the
ARIA Authoring Practices Guide dialog (modal) pattern
. Do this at your own risk.
Via JavaScript
Create a modal with a single line of JavaScript:
const
myModal
Modal
document
getElementById
'myModal'
options
// or
const
myModalAlternative
Modal
'#myModal'
options
Options
As options can be passed via data attributes or JavaScript, you can append an option name to
data-bs-
, as in
data-bs-animation="{value}"
. Make sure to change the case type of the option name from “
camelCase
” to “
kebab-case
” when passing the options via data attributes. For example, use
data-bs-custom-class="beautifier"
instead of
data-bs-customClass="beautifier"
As of Bootstrap 5.2.0, all components support an
experimental
reserved data attribute
data-bs-config
that can house simple component configuration as a JSON string. When an element has
data-bs-config='{"delay":0, "title":123}'
data-bs-title="456"
attributes, the final
title
value will be
and the separate data attributes will override values given on
data-bs-config
. In addition, existing data attributes are able to house JSON values like
data-bs-delay='{"show":0,"hide":150}'
The final configuration object is the merged result of
data-bs-config
data-bs-
, and
js object
where the latest given key-value overrides the others.
Name
Type
Default
Description
backdrop
boolean,
’static'
true
Includes a modal-backdrop element. Alternatively, specify
static
for a backdrop which doesn’t close the modal when clicked.
focus
boolean
true
Puts the focus on the modal when initialized.
keyboard
boolean
true
Closes the modal when escape key is pressed.
Methods
All API methods are asynchronous and start a transition.
They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored.
Learn more in our JavaScript docs.
Passing options
Activates your content as a modal. Accepts an optional options
object
const
myModal
Modal
'#myModal'
keyboard
false
Method
Description
dispose
Destroys an element’s modal. (Removes stored data on the DOM element)
getInstance
Static
method which allows you to get the modal instance associated with a DOM element.
getOrCreateInstance
Static
method which allows you to get the modal instance associated with a DOM element, or create a new one in case it wasn’t initialized.
handleUpdate
Manually readjust the modal’s position if the height of a modal changes while it is open (i.e. in case a scrollbar appears).
hide
Manually hides a modal.
Returns to the caller before the modal has actually been hidden
(i.e. before the
hidden.bs.modal
event occurs).
show
Manually opens a modal.
Returns to the caller before the modal has actually been shown
(i.e. before the
shown.bs.modal
event occurs). Also, you can pass a DOM element as an argument that can be received in the modal events (as the
relatedTarget
property). (i.e.
const modalToggle = document.getElementById('toggleMyModal'); myModal.show(modalToggle)
toggle
Manually toggles a modal.
Returns to the caller before the modal has actually been shown or hidden
(i.e. before the
shown.bs.modal
hidden.bs.modal
event occurs).
Events
<div class="modal">
Event
Description
hide.bs.modal
This event is fired immediately when the
hide
instance method has been called. Can be prevented by calling
event.preventDefault()
. See
JavaScript events documentation
for more details on event prevention.
hidden.bs.modal
This event is fired when the modal has finished being hidden from the user (will wait for CSS transitions to complete).
hidePrevented.bs.modal
This event is fired when the modal is shown, its backdrop is
static
and a click outside of the modal is performed. The event is also fired when the escape key is pressed and the
keyboard
option is set to
false
show.bs.modal
This event fires immediately when the
show
instance method is called. If caused by a click, the clicked element is available as the
relatedTarget
property of the event.
shown.bs.modal
This event is fired when the modal has been made visible to the user (will wait for CSS transitions to complete). If caused by a click, the clicked element is available as the
relatedTarget
property of the event.
const
myModalEl
document
getElementById
'myModal'
myModalEl
addEventListener
'hidden.bs.modal'
event
// do something...

--- 087_utilities_link.txt ---
Link opacity
Change the alpha opacity of the link
rgba()
color value with utilities. Please be aware that changes to a color’s opacity can lead to links with
insufficient
contrast
Link opacity 10
Link opacity 25
Link opacity 50
Link opacity 75
Link opacity 100
html
class
link-opacity-10
href
Link opacity 10
class
link-opacity-25
href
Link opacity 25
class
link-opacity-50
href
Link opacity 50
class
link-opacity-75
href
Link opacity 75
class
link-opacity-100
href
Link opacity 100
You can even change the opacity level on hover.
Link hover opacity 10
Link hover opacity 25
Link hover opacity 50
Link hover opacity 75
Link hover opacity 100
html
class
link-opacity-10-hover
href
Link hover opacity 10
class
link-opacity-25-hover
href
Link hover opacity 25
class
link-opacity-50-hover
href
Link hover opacity 50
class
link-opacity-75-hover
href
Link hover opacity 75
class
link-opacity-100-hover
href
Link hover opacity 100
Link underlines
Underline color
Change the underline’s color independent of the link text color.
Primary underline
Secondary underline
Success underline
Danger underline
Warning underline
Info underline
Light underline
Dark underline
html
href
class
link-underline-primary
Primary underline
href
class
link-underline-secondary
Secondary underline
href
class
link-underline-success
Success underline
href
class
link-underline-danger
Danger underline
href
class
link-underline-warning
Warning underline
href
class
link-underline-info
Info underline
href
class
link-underline-light
Light underline
href
class
link-underline-dark
Dark underline
Underline offset
Change the underline’s distance from your text. Offset is set in
units to automatically scale with the element’s current
font-size
Default link
Offset 1 link
Offset 2 link
Offset 3 link
html
href
Default link
class
link-offset-1
href
Offset 1 link
class
link-offset-2
href
Offset 2 link
class
link-offset-3
href
Offset 3 link
Underline opacity
Change the underline’s opacity. Requires adding
.link-underline
to first set an
rgba()
color we use to then modify the alpha opacity.
Underline opacity 0
Underline opacity 10
Underline opacity 25
Underline opacity 50
Underline opacity 75
Underline opacity 100
html
class
link-offset-2 link-underline link-underline-opacity-0
href
Underline opacity 0
class
link-offset-2 link-underline link-underline-opacity-10
href
Underline opacity 10
class
link-offset-2 link-underline link-underline-opacity-25
href
Underline opacity 25
class
link-offset-2 link-underline link-underline-opacity-50
href
Underline opacity 50
class
link-offset-2 link-underline link-underline-opacity-75
href
Underline opacity 75
class
link-offset-2 link-underline link-underline-opacity-100
href
Underline opacity 100
Hover variants
Just like the
.link-opacity-*-hover
utilities,
.link-offset
.link-underline-opacity
utilities include
:hover
variants by default. Mix and match to create unique link styles.
Underline opacity 0
html
class
link-offset-2 link-offset-3-hover link-underline link-underline-opacity-0 link-underline-opacity-75-hover
href
Underline opacity 0
Colored links
Colored link helpers
have been updated to pair with our link utilities. Use the new utilities to modify the link opacity, underline opacity, and underline offset.
Primary link
Secondary link
Success link
Danger link
Warning link
Info link
Light link
Dark link
Emphasis link
html
href
class
link-primary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover
Primary link
href
class
link-secondary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover
Secondary link
href
class
link-success link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover
Success link
href
class
link-danger link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover
Danger link
href
class
link-warning link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover
Warning link
href
class
link-info link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover
Info link
href
class
link-light link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover
Light link
href
class
link-dark link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover
Dark link
href
class
link-body-emphasis link-offset-2 link-underline-opacity-25 link-underline-opacity-75-hover
Emphasis link
Accessibility tip:
Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a
sufficient
color contrast
) or is included through alternative means, such as additional text hidden with the
.visually-hidden
class.
In addition to the following Sass functionality, consider reading about our included
CSS custom properties
(aka CSS variables) for colors and more.
Sass utilities API
Link utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
scss/_utilities.scss
"link-opacity"
css-var
true
class
link-opacity
state
hover
values
"link-offset"
property
text-underline-offset
class
link-offset
state
hover
values
.125em
.25em
.375em
"link-underline"
property
text-decoration-color
class
link-underline
local-vars
"link-underline-opacity"
values
map-merge
$utilities-links-underline
null
rgba
#{$prefix}
link-color-rgb
#{$prefix}
link-underline-opacity
"link-underline-opacity"
css-var
true
class
link-underline-opacity
state
hover
values

--- 094_examples_pricing.txt ---
Free
10 users included
2 GB of storage
Email support
Help center access
Sign up for free
20 users included
10 GB of storage
Priority email support
Help center access
Get started
Enterprise
30 users included
15 GB of storage
Phone and email support
Help center access
Contact us
Compare plans
Free
Enterprise
Public
Private
Permissions
Sharing
Unlimited members
Extra security

--- 013_components_spinners.txt ---
About
For accessibility purposes, each loader here includes
role="status"
and a nested
<span class="visually-hidden">Loading...</span>
The animation effect of this component is dependent on the
prefers-reduced-motion
media query. See the
reduced motion section of our accessibility documentation
Border spinner
Use the border spinners for a lightweight loading indicator.
Loading...
html
class
spinner-border
role
status
span
class
visually-hidden
Loading...
span
Colors
The border spinner uses
currentColor
for its
border-color
, meaning you can customize the color with
text color utilities
. You can use any of our text color utilities on the standard spinner.
Loading...
Loading...
Loading...
Loading...
Loading...
Loading...
Loading...
Loading...
html
class
spinner-border text-primary
role
status
span
class
visually-hidden
Loading...
span
class
spinner-border text-secondary
role
status
span
class
visually-hidden
Loading...
span
class
spinner-border text-success
role
status
span
class
visually-hidden
Loading...
span
class
spinner-border text-danger
role
status
span
class
visually-hidden
Loading...
span
class
spinner-border text-warning
role
status
span
class
visually-hidden
Loading...
span
class
spinner-border text-info
role
status
span
class
visually-hidden
Loading...
span
class
spinner-border text-light
role
status
span
class
visually-hidden
Loading...
span
class
spinner-border text-dark
role
status
span
class
visually-hidden
Loading...
span
Why not use
border-color
utilities?
Each border spinner specifies a
transparent
border for at least one side, so
.border-{color}
utilities would override that.
Growing spinner
If you don’t fancy a border spinner, switch to the grow spinner. While it doesn’t technically spin, it does repeatedly grow!
Loading...
html
class
spinner-grow
role
status
span
class
visually-hidden
Loading...
span
Once again, this spinner is built with
currentColor
, so you can easily change its appearance with
text color utilities
. Here it is in blue, along with the supported variants.
Loading...
Loading...
Loading...
Loading...
Loading...
Loading...
Loading...
Loading...
html
class
spinner-grow text-primary
role
status
span
class
visually-hidden
Loading...
span
class
spinner-grow text-secondary
role
status
span
class
visually-hidden
Loading...
span
class
spinner-grow text-success
role
status
span
class
visually-hidden
Loading...
span
class
spinner-grow text-danger
role
status
span
class
visually-hidden
Loading...
span
class
spinner-grow text-warning
role
status
span
class
visually-hidden
Loading...
span
class
spinner-grow text-info
role
status
span
class
visually-hidden
Loading...
span
class
spinner-grow text-light
role
status
span
class
visually-hidden
Loading...
span
class
spinner-grow text-dark
role
status
span
class
visually-hidden
Loading...
span
Alignment
Spinners in Bootstrap are built with
currentColor
, and
display: inline-flex
. This means they can easily be resized, recolored, and quickly aligned.
Margin
margin utilities
like
.m-5
for easy spacing.
Loading...
html
class
spinner-border m-5
role
status
span
class
visually-hidden
Loading...
span
Placement
flexbox utilities
float utilities
, or
text alignment
utilities to place spinners exactly where you need them in any situation.
Flex
Loading...
html
class
d-flex justify-content-center
class
spinner-border
role
status
span
class
visually-hidden
Loading...
span
Loading...
html
class
d-flex align-items-center
strong
role
status
Loading...
strong
class
spinner-border ms-auto
aria-hidden
true
Floats
Loading...
html
class
clearfix
class
spinner-border float-end
role
status
span
class
visually-hidden
Loading...
span
Text align
Loading...
html
class
text-center
class
spinner-border
role
status
span
class
visually-hidden
Loading...
span
Size
.spinner-border-sm
.spinner-grow-sm
to make a smaller spinner that can quickly be used within other components.
Loading...
Loading...
html
class
spinner-border spinner-border-sm
role
status
span
class
visually-hidden
Loading...
span
class
spinner-grow spinner-grow-sm
role
status
span
class
visually-hidden
Loading...
span
Or, use custom CSS or inline styles to change the dimensions as needed.
Loading...
Loading...
html
class
spinner-border
style
width
3rem
height
3rem
role
status
span
class
visually-hidden
Loading...
span
class
spinner-grow
style
width
3rem
height
3rem
role
status
span
class
visually-hidden
Loading...
span
Buttons
Use spinners within buttons to indicate an action is currently processing or taking place. You may also swap the text out of the spinner element and utilize button text as needed.
Loading...
Loading...
html
button
class
btn btn-primary
type
button
disabled
span
class
spinner-border spinner-border-sm
aria-hidden
true
span
span
class
visually-hidden
role
status
Loading...
span
button
button
class
btn btn-primary
type
button
disabled
span
class
spinner-border spinner-border-sm
aria-hidden
true
span
span
role
status
Loading...
span
button
Loading...
Loading...
html
button
class
btn btn-primary
type
button
disabled
span
class
spinner-grow spinner-grow-sm
aria-hidden
true
span
span
class
visually-hidden
role
status
Loading...
span
button
button
class
btn btn-primary
type
button
disabled
span
class
spinner-grow spinner-grow-sm
aria-hidden
true
span
span
role
status
Loading...
span
button
Variables
Added in v5.2.0
As part of Bootstrap’s evolving CSS variables approach, spinners now use local CSS variables on
.spinner-border
.spinner-grow
for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
Border spinner variables:
scss/_spinners.scss
#{$prefix}
spinner-width
#{$spinner-width}
#{$prefix}
spinner-height
#{$spinner-height}
#{$prefix}
spinner-vertical-align
#{$spinner-vertical-align}
#{$prefix}
spinner-border-width
#{$spinner-border-width}
#{$prefix}
spinner-animation-speed
#{$spinner-animation-speed}
#{$prefix}
spinner-animation-name
spinner-border
Growing spinner variables:
scss/_spinners.scss
#{$prefix}
spinner-width
#{$spinner-width}
#{$prefix}
spinner-height
#{$spinner-height}
#{$prefix}
spinner-vertical-align
#{$spinner-vertical-align}
#{$prefix}
spinner-animation-speed
#{$spinner-animation-speed}
#{$prefix}
spinner-animation-name
spinner-grow
For both spinners, small spinner modifier classes are used to update the values of these CSS variables as needed. For example, the
.spinner-border-sm
class does the following:
scss/_spinners.scss
#{$prefix}
spinner-width
#{$spinner-width-sm}
#{$prefix}
spinner-height
#{$spinner-height-sm}
#{$prefix}
spinner-border-width
#{$spinner-border-width-sm}
Sass variables
scss/_variables.scss
$spinner-width
2rem
$spinner-height
$spinner-width
$spinner-vertical-align
-.125em
$spinner-border-width
.25em
$spinner-animation-speed
.75s
$spinner-width-sm
1rem
$spinner-height-sm
$spinner-width-sm
$spinner-border-width-sm
.2em
Keyframes
Used for creating the CSS animations for our spinners. Included in
scss/_spinners.scss
scss/_spinners.scss
@keyframes
spinner-border
transform
rotate
360deg
"/* rtl:ignore */"
scss/_spinners.scss
@keyframes
spinner-grow
transform
scale
opacity
transform
none

--- 053_customize_optimize.txt ---
Lean Sass imports
When using Sass in your asset pipeline, make sure you optimize Bootstrap by only
@import
ing the components you need. Your largest optimizations will likely come from the
Layout & Components
section of our
scss/bootstrap.scss
// Configuration
@import
"functions"
@import
"variables"
@import
"variables-dark"
@import
"maps"
@import
"mixins"
@import
"utilities"
// Layout & components
@import
"root"
@import
"reboot"
@import
"type"
@import
"images"
@import
"containers"
@import
"grid"
@import
"tables"
@import
"forms"
@import
"buttons"
@import
"transitions"
@import
"dropdown"
@import
"button-group"
@import
"nav"
@import
"navbar"
@import
"card"
@import
"accordion"
@import
"breadcrumb"
@import
"pagination"
@import
"badge"
@import
"alert"
@import
"progress"
@import
"list-group"
@import
"close"
@import
"toasts"
@import
"modal"
@import
"tooltip"
@import
"popover"
@import
"carousel"
@import
"spinners"
@import
"offcanvas"
@import
"placeholders"
// Helpers
@import
"helpers"
// Utilities
@import
"utilities/api"
If you’re not using a component, comment it out or delete it entirely. For example, if you’re not using the carousel, remove that import to save some file size in your compiled CSS. Keep in mind there are some dependencies across Sass imports that may make it more difficult to omit a file.
Lean JavaScript
), and even our primary dependency (Popper) with our bundle files (
). While you’re customizing via Sass, be sure to remove related JavaScript.
For instance, assuming you’re using your own JavaScript bundler like Webpack, Parcel, or Vite, you’d only import the JavaScript you plan on using. In the example below, we show how to just include our modal JavaScript:
// Import just what we need
// import 'bootstrap/js/dist/alert';
// import 'bootstrap/js/dist/button';
// import 'bootstrap/js/dist/carousel';
// import 'bootstrap/js/dist/collapse';
// import 'bootstrap/js/dist/dropdown';
import
'bootstrap/js/dist/modal'
// import 'bootstrap/js/dist/offcanvas';
// import 'bootstrap/js/dist/popover';
// import 'bootstrap/js/dist/scrollspy';
// import 'bootstrap/js/dist/tab';
// import 'bootstrap/js/dist/toast';
// import 'bootstrap/js/dist/tooltip';
This way, you’re not including any JavaScript you don’t intend to use for components like buttons, carousels, and tooltips. If you’re importing dropdowns, tooltips or popovers, be sure to list the Popper dependency in your
package.json
file.
Heads up!
Files in
use the
default export
. To use them, do the following:
import
Modal
from
'bootstrap/js/dist/modal'
const
modal
Modal
document
getElementById
'myModal'
Autoprefixer .browserslistrc
.browserslistrc
file, found in the root of the Bootstrap repo. Customizing this list of browsers and recompiling the Sass will automatically remove some CSS from your compiled CSS, if there are vendor prefixes unique to that browser or version.
Unused CSS
Help wanted with this section, please consider opening a PR. Thanks!
While we don’t have a prebuilt example for using
PurgeCSS
with Bootstrap, there are some helpful articles and walkthroughs that the community has written. Here are some options:
https://medium.com/dwarves-foundation/remove-unused-css-styles-from-bootstrap-using-purgecss-88395a2c5772
https://lukelowrey.com/automatically-removeunused-css-from-bootstrap-or-other-frameworks/
Lastly, this
CSS Tricks article on unused CSS
shows how to use PurgeCSS and other similar tools.
Minify and gzip
Whenever possible, be sure to compress all the code you serve to your visitors. If you’re using Bootstrap dist files, try to stick to the minified versions (indicated by the
.min.css
.min.js
extensions). If you’re building Bootstrap from the source with your own build system, be sure to implement your own minifiers for HTML, CSS, and JS.
Non-blocking files
While minifying and using compression might seem like enough, making your files non-blocking ones is also a big step in making your site well-optimized and fast enough.
If you are using a
Lighthouse
plugin in Google Chrome, you may have stumbled over FCP.
The First Contentful Paint
metric measures the time from when the page starts loading to when any part of the page’s content is rendered on the screen.
You can improve FCP by deferring non-critical JavaScript or CSS. What does that mean? Simply, JavaScript or stylesheets that don’t need to be present on the first paint of your page should be marked with
async
defer
attributes.
This ensures that the less important resources are loaded later and not blocking the first paint. On the other hand, critical resources can be included as inline scripts or styles.
If you want to learn more about this, there are already a lot of great articles about it:
https://developer.chrome.com/docs/lighthouse/performance/render-blocking-resources/
https://web.dev/articles/defer-non-critical-css
Always use HTTPS
Your website should only be available over HTTPS connections in production. HTTPS improves the security, privacy, and availability of all sites, and
there is no such thing as non-sensitive web traffic
. The steps to configure your website to be served exclusively over HTTPS vary widely depending on your architecture and web hosting provider, and thus are beyond the scope of these docs.
Sites served over HTTPS should also access all stylesheets, scripts, and other assets over HTTPS connections. Otherwise, you’ll be sending users
mixed active content
, leading to potential vulnerabilities where a site can be compromised by altering a dependency. This can lead to security issues and in-browser warnings displayed to users. Whether you’re getting Bootstrap from a CDN or serving it yourself, ensure that you only access it over HTTPS connections.

--- 021_examples_blog-rtl.txt ---
عنوان تدوينة مميزة أطول
عدة أسطر نصية متعددة تعبر عن التدوية، وذلك لإعلام القراء الجدد بسرعة وكفاءة حول أكثر الأشياء إثارة للاهتمام في محتويات هذه التدوينة.
أكمل القراءة...
العالم
مشاركة مميزة
نوفمبر 12
هذه بطاقة أوسع مع نص داعم أدناه كمقدمة طبيعية لمحتوى إضافي.
أكمل القراءة
Placeholder
صورة مصغرة
التصميم
عنوان الوظيفة
نوفمبر 11
هذه بطاقة أوسع مع نص داعم أدناه كمقدمة طبيعية لمحتوى إضافي.
أكمل القراءة
Placeholder
صورة مصغرة
من Firehose
مثال على تدوينة
1 يناير 2021 بواسطة
Mark
تعرض مشاركة المدونة هذه بضعة أنواع مختلفة من المحتوى الذي يتم دعمه وتصميمه باستخدام Bootstrap. النصوص الأساسية، الصور، والأكواد مدعومة بشكل كامل.
يشكِّل تأمين الغذاء في المستقبل قضية تؤرِّق حكومات العالَم والعلماء على حدٍّ سواء. فخلال القرن العشرين ازداد عدد سكان الأرض أربعة أضعاف، وتشير التقديرات إلى أن العدد سوف يصل إلى عشرة مليارات إنسان بحلول عام 2050م. وسوف تمثل هذه الزيادة الهائلة تحدياً كبيراً وضغطاً متصاعداً على قدرة الإنتاج الزراعي. الأمر الذي كان ولا بد من أن يدفع إلى تطوير تقنيات مبتكرة في تصنيع الغذاء غير الزراعة، منها تقنية مستقبلية تقوم على تصنيع الغذاء من الهواء.
تشغل الزراعة مساحات كبيرة من اليابسة، وتستهلك كميات هائلة من المياه، كما أن إنتاج الغذاء بواسطة الزراعة يسهم بنسبة عالية من انبعاثات غازات الاحتباس الحراري العالمية
تشغل الزراعة مساحات كبيرة من اليابسة، وتستهلك كميات هائلة من المياه. كما أن إنتاج الغذاء بواسطة الزراعة يسهم بنسبة عالية من انبعاثات غازات الاحتباس الحراري العالمية، وللمقارنة فإن هذه النسبة من الانبعاثات هي أكبر مما ينتجه قطاع النقل بكل ما فيه من سيارات وشاحنات وطائرات وقطارات.
عنوان
تحصل النباتات على غذائها بواسطة عملية تسمى البناء الضوئي، حيث تقوم النباتات بتحويل ضوء الشمس والماء وثاني أكسيد الكربون الموجود في الغلاف الجوي إلى غذاء وتطلق الأكسجين كمنتج ثانوي لهذا التفاعل الكيميائي. وتحدث هذه العملية في "البلاستيدات الخضراء". فالنباتات تستفيد من طاقة ضوء الشمس في تقسيم الماء إلى هيدروجين وأكسجين، وتحدث تفاعلات كيميائية أخرى ينتج عنها سكر الجلكوز الذي تستخدمه كمصدر للغذاء وينطلق الأكسجين من النباتات إلى الغلاف الجوي. وهذا يعني أن النباتات تحوِّل ثاني أكسيد الكربون إلى غذاء من خلال تفاعلات كيميائية معقَّدة. ويُعد البناء الضوئي من أهم التفاعلات الكيميائية على كوكب الأرض، فقد ساعد في الماضي على تطوُّر كوكبنا وظهور الحياة عليه. فالنباتات تستخدم ثاني أكسيد الكربون لصنع غذائها، وتطلق الأكسجين لتساعد الكائنات الأخرى على التنفس!
عنوان فرعي
ألهمت هذه العملية علماء وكالة الفضاء الأمريكية (ناسا) خلال الستينيات من القرن الماضي، لبحث فكرة إطعام روَّاد الفضاء في مهمات الفضاء الطويلة مثل السفر إلى المريخ. وكانت واحدة من الأفكار الواعدة تصنيع الغذاء عن طريق ثاني أكسيد الكربون الذي ينتجه روَّاد الفضاء، لكن ليس بواسطة النباتات بل عن طريق ميكروبات صغيرة وحيدة الخلية قادرة على حصد ثاني أكسيد الكربون لإنتاج كميات وفيرة من البروتين المغذي على شكل مسحوق عديم النكهة، كما يمكن استخدام المادة في صنع الأطعمة المألوفة لدينا.
Example code block
وخلافاً لما هو الحال في عالم النبات، فإن هذه الميكروبات لا تستخدم الضوء كما يحدث في عملية البناء الضوئي التي تستخدمها النباتات للحصول على الغذاء، أي لأنها قادرة على النمو في الظلام. تسمى هذه البكتريا "هيدروجينوتروف" (Hydrogenotrophs)، وهي تستخدم الهيدروجين كوقود لإنتاج الغذاء من ثاني أكسيد الكربون. فعندما يُنتج روَّاد الفضاء ثاني أكسيد الكربون، تلتقطه الميكروبات، ويتحوَّل مع مدخلات أخرى إلى غذاء غني بالكربون. وبهذه الطريقة سوف نحصل على دورة كربون مغلقة الحلقة.
عنوان فرعي
بعد مرور أكثر من نصف قرن على أبحاث ناسا، تعمل حالياً عدة شركات في قطاع البيولوجيا التركيبية من ضمنها إير بروتين (Air Protein) وسولار فودز (Solar Foods) على تطوير جيل جديد من المنتجات الغذائية المستدامة، من دون وجود بصمة كربونية. ولن تقتصر هذه المنتجات الغذائية على روَّاد الفضاء فحسب، بل سوف تمتد لتشمل جميع سكان الأرض، وسوف تُنتَج في فترة زمنية قصيرة، بدلاً من الشهور، ومن دون الاعتماد على الأراضي الزراعية. وهذا يعني الحصول على منتجات غذائية بشكل سريع جداً. كما سيصبح من الممكن تصنيع الغذاء بطريقة عمودية من خلال هذه الميكروبات، بدلاً من الطريقة الأفقية التقليدية الشبيهة بتقنية الزراعة العمودية الحديثة. وهذا يعني توفير منتجات غذائية أكبر من المساحة نفسها.
يتكوَّن الغذاء البشري من ثلاثة أنواع رئيسة، هي:
البروتينات
الكربوهيدرات
الدهون
وتتكوَّن البروتينات من الأحماض الأمينية، وهي مجموعة من المركبات العضوية يبلغ عددها في جسم الإنسان عشرين حمضاً أمينياً، من بينها تسعة أساسية يحصل عليها الجسم من الغذاء. وتتكوَّن الأحماض الأمينية بشكل أساس من:
الكربون
الهيدروجين
الأكسجين
النيتروجين
ومن الملاحظ أن النيتروجين يشكِّل نسبة %78 من الهواء، كما أن الهيدروجين نحصل عليه من خلال التحليل الكهربائي للماء، ومن الممكن نظرياً سحب الكربون من الهواء لتشكيل هذه الأحماض، ذلك أن الكربون هو العمود الفقري للأحماض الأمينية، كما أن الحياة على كوكب الأرض قائمة على الكربون لقدرته على تكوين سلاسل كربونية طويلة، وهذا ما تفعله الميكروبات بتصنيع أحماض أمينية من ثاني أكسيد الكربون من خلال مجموعة من التفاعلات الكيميائية المعقَّدة. وإضافة إلى صنع وجبات غنية بالبروتين، فهذه الميكروبات تنتج منتجات أخرى مثل الزيوت التي لها عديد من الاستخدامات.
تدوينة أخرى
23 ديسمبر 2020 بواسطة
Jacob
في الوقت الحالي، تدرس عدَّة شركات هذه الميكروبات بشكل أعمق، وتستزرعها من أجل الحصول على الغذاء. ففي عام 2019م، أعلن باحثون في شركة (Air Protein) الأمريكية نجاحهم في تحويل ثاني أكسيد الكربون الموجود في الهواء إلى لحوم صناعية مصنوعة من البروتين، التي لا تتطلَّب أي أرض زراعية، بل هي معتمدة بشكل أساسي على الهواء.
تم تصنيع اللحوم بأنواع عديدة
إذ استخدم هؤلاء الباحثون الهواء والطاقة المتجدِّدة كمدخلات في عملية مشابهة للتخمير، لإنتاج بروتين يحتوي على الأحماض الأمينية التسعة الأساسية وغني بالفيتامينات والمعادن، كما أنه خالٍ من الهرمونات والمضادات الحيوية والمبيدات الحشرية ومبيدات الأعشاب.
وتم تصنيع اللحوم بأنواع عديدة بما فيها الدواجن والأبقار والمأكولات البحرية، من دون حصول انبعاثات كربونية، على عكس تربية الأبقار التي تسهم في انبعاث غاز الميثان أحد غازات الاحتباس الحراري.
ميزة جديدة
14 ديسمبر 2020 بواسطة
Jacob
كما أن الشركة الفنلندية (Solar Foods) طوَّرت تقنية لإنتاج البروتين من الهواء، حيث تبدأ العملية بتقسيم الماء إلى مكوناته الهيدروجين والأكسجين عن طريق الكهرباء. فالهيدروجين يوفِّر الطاقة للبكتريا لتحويل ثاني أكسيد الكربون والنيتروجين الموجودين في الهواء إلى مادة عضوية غنية بالبروتين بشكل أكفأ من نمو النباتات باستخدام البناء الضوئي. وهذا البروتين يشبه دقيق القمح وقد أطلق عليه اسم "سولين" (Solein).
وتقوم الشركة حالياً بجمع البيانات حول المنتج الغذائي لتقديمه إلى الاتحاد الأوروبي بهدف الحصول على ترخيص غذائي، كما أنها تخطط لبدء الإنتاج التجاري في العام المقبل 2021م. وقد أوضحت الشركة أنها مهتمة بإنتاج أطعمة صديقة للبيئة من خلال استخدام المواد الأساسية: الكهرباء وثاني أكسيد الكربون، وهذه الأطعمة سوف تجنبنا الأثر السلبي البيئي للزراعة التقليدية الذي يشمل كل شيء من استخدام الأرض والمياه إلى الانبعاثات الناتجة من تسميد المحاصيل أو تربية الحيوانات.
وعلى هذا، فإن البروتينات المشتقة من الميكروبات سوف:
توفر حلاً ممكناً في ظل زيادة الطلب العالمي المستقبلي على الغذاء
تتوسع مصانع الغذاء في المستقبل لتكون أكفأ وأكثر استدامة
تصبح قادرة على توفير الغذاء لروَّاد الفضاء في سفرهم إلى المريخ وجميع سكان كوكب الأرض في عام 2050م
فتخيّل أن الميكروبات ستكون مصانع المستقبل، وأن غذاء المستقبل سيكون مصنوعاً من الهواء! وأن عام 2050م سيكون مختلفاً تماماً عن عالمنا اليوم. فهو عالم من دون زراعة ولا تربية حيوانات من أجل الغذاء! قد يبدو ذلك خيالياً لكنه ليس مستحيلاً!
أقبلت، فأقبلت معك الحياة بجميع صنوفها وألوانها: فالنبات ينبت، والأشجار تورق وتزهر، والهرة تموء، والقمري يسجع، والغنم يثغو، والبقر يخور، وكل أليف يدعو أليفه. كل شيء يشعر بالحياة وينسي هموم الحياة، ولا يذكر إلا سعادة الحياة، فإن كان الزمان جسدا فأنت روحه، وإن كان عمرا فأنت شبابه.
المشاركات الاخيرة
مثال على عنوان منشور المدونة
15 يناير 2024
هذا عنوان آخر للمدونة
14 يناير 2024
أطول عنوان منشور للمدونة: يحتوي هذا الخط على عدة أسطر!
13 يناير 2024
الأرشيف
مارس 2021
شباط 2021
يناير 2021
ديسمبر 2020
نوفمبر 2020
أكتوبر 2020
سبتمبر 2020
اغسطس 2020
يوليو 2020
يونيو 2020
مايو 2020
ابريل 2020
في مكان آخر
GitHub
Social
Facebook

--- 043_forms_form-control.txt ---
Example
Form controls are styled with a mix of Sass and CSS variables, allowing them to adapt to color modes and support any customization method.
Email address
Example textarea
html
class
mb-3
label
exampleFormControlInput1
class
form-label
Email address
label
input
type
email
class
form-control
exampleFormControlInput1
placeholder
name@example.com
class
mb-3
label
exampleFormControlTextarea1
class
form-label
Example textarea
label
textarea
class
form-control
exampleFormControlTextarea1
rows
textarea
Sizing
Set heights using classes like
.form-control-lg
.form-control-sm
html
input
class
form-control form-control-lg
type
text
placeholder
.form-control-lg
aria-label
.form-control-lg example
input
class
form-control
type
text
placeholder
Default input
aria-label
default input example
input
class
form-control form-control-sm
type
text
placeholder
.form-control-sm
aria-label
.form-control-sm example
Form text
Block-level or inline-level form text can be created using
.form-text
Form text should be explicitly associated with the form control it relates to using the
aria-describedby
attribute. This will ensure that assistive technologies—such as screen readers—will announce this form text when the user focuses or enters the control.
Form text below inputs can be styled with
.form-text
. If a block-level element will be used, a top margin is added for easy spacing from the inputs above.
Password
Your password must be 8-20 characters long, contain letters and numbers, and must not contain spaces, special characters, or emoji.
html
label
inputPassword5
class
form-label
Password
label
input
type
password
inputPassword5
class
form-control
aria-describedby
passwordHelpBlock
passwordHelpBlock
class
form-text
Your password must be 8-20 characters long, contain letters and numbers, and must not contain spaces, special characters, or emoji.
Inline text can use any typical inline HTML element (be it a
<span>
<small>
, or something else) with nothing more than the
.form-text
class.
Password
Must be 8-20 characters long.
html
class
row g-3 align-items-center
class
col-auto
label
inputPassword6
class
col-form-label
Password
label
class
col-auto
input
type
password
inputPassword6
class
form-control
aria-describedby
passwordHelpInline
class
col-auto
span
passwordHelpInline
class
form-text
Must be 8-20 characters long.
span
Disabled
Add the
disabled
boolean attribute on an input to give it a grayed out appearance, remove pointer events, and prevent focusing.
html
input
class
form-control
type
text
placeholder
Disabled input
aria-label
Disabled input example
disabled
input
class
form-control
type
text
value
Disabled readonly input
aria-label
Disabled input example
disabled
readonly
Readonly
Add the
readonly
boolean attribute on an input to prevent modification of the input’s value.
readonly
inputs can still be focused and selected, while
disabled
inputs cannot.
html
input
class
form-control
type
text
value
Readonly input here...
aria-label
readonly input example
readonly
Readonly plain text
If you want to have
<input readonly>
elements in your form styled as plain text, replace
.form-control
with
.form-control-plaintext
to remove the default form field styling and preserve the correct
margin
padding
Email
Password
html
class
mb-3 row
label
staticEmail
class
col-sm-2 col-form-label
Email
label
class
col-sm-10
input
type
text
readonly
class
form-control-plaintext
staticEmail
value
email@example.com
class
mb-3 row
label
inputPassword
class
col-sm-2 col-form-label
Password
label
class
col-sm-10
input
type
password
class
form-control
inputPassword
Email
Password
Confirm identity
html
form
class
row g-3
class
col-auto
label
staticEmail2
class
visually-hidden
Email
label
input
type
text
readonly
class
form-control-plaintext
staticEmail2
value
email@example.com
class
col-auto
label
inputPassword2
class
visually-hidden
Password
label
input
type
password
class
form-control
inputPassword2
placeholder
Password
class
col-auto
button
type
submit
class
btn btn-primary mb-3
Confirm identity
button
form
File input
Default file input example
Multiple files input example
Disabled file input example
Small file input example
Large file input example
html
class
mb-3
label
formFile
class
form-label
Default file input example
label
input
class
form-control
type
file
formFile
class
mb-3
label
formFileMultiple
class
form-label
Multiple files input example
label
input
class
form-control
type
file
formFileMultiple
multiple
class
mb-3
label
formFileDisabled
class
form-label
Disabled file input example
label
input
class
form-control
type
file
formFileDisabled
disabled
class
mb-3
label
formFileSm
class
form-label
Small file input example
label
input
class
form-control form-control-sm
formFileSm
type
file
label
formFileLg
class
form-label
Large file input example
label
input
class
form-control form-control-lg
formFileLg
type
file
Color
Set the
type="color"
and add
.form-control-color
to the
<input>
. We use the modifier class to set fixed
height
s and override some inconsistencies between browsers.
Color picker
html
label
exampleColorInput
class
form-label
Color picker
label
input
type
color
class
form-control form-control-color
exampleColorInput
value
#563d7c
title
Choose your color
Datalists
Datalists allow you to create a group of
<option>
s that can be accessed (and autocompleted) from within an
<input>
. These are similar to
<select>
elements, but come with more menu styling limitations and differences. While most browsers and operating systems include some support for
<datalist>
elements, their styling is inconsistent at best.
Learn more about
support for datalist elements
Datalist example
html
label
exampleDataList
class
form-label
Datalist example
label
input
class
form-control
list
datalistOptions
exampleDataList
placeholder
Type to search...
datalist
datalistOptions
option
value
San Francisco
option
value
New York
option
value
Seattle
option
value
Los Angeles
option
value
Chicago
datalist
Sass variables
$input-*
are shared across most of our form controls (and not buttons).
scss/_variables.scss
$input-padding-y
$input-btn-padding-y
$input-padding-x
$input-btn-padding-x
$input-font-family
$input-btn-font-family
$input-font-size
$input-btn-font-size
$input-font-weight
$font-weight-base
$input-line-height
$input-btn-line-height
$input-padding-y-sm
$input-btn-padding-y-sm
$input-padding-x-sm
$input-btn-padding-x-sm
$input-font-size-sm
$input-btn-font-size-sm
$input-padding-y-lg
$input-btn-padding-y-lg
$input-padding-x-lg
$input-btn-padding-x-lg
$input-font-size-lg
$input-btn-font-size-lg
$input-bg
#{$prefix}
body-bg
$input-disabled-color
null
$input-disabled-bg
#{$prefix}
secondary-bg
$input-disabled-border-color
null
$input-color
#{$prefix}
body-color
$input-border-color
#{$prefix}
border-color
$input-border-width
$input-btn-border-width
$input-box-shadow
#{$prefix}
box-shadow-inset
$input-border-radius
#{$prefix}
border-radius
$input-border-radius-sm
#{$prefix}
border-radius-sm
$input-border-radius-lg
#{$prefix}
border-radius-lg
$input-focus-bg
$input-bg
$input-focus-border-color
tint-color
$component-active-bg
$input-focus-color
$input-color
$input-focus-width
$input-btn-focus-width
$input-focus-box-shadow
$input-btn-focus-box-shadow
$input-placeholder-color
#{$prefix}
secondary-color
$input-plaintext-color
#{$prefix}
body-color
$input-height-border
calc
#{$input-border-width}
// stylelint-disable-line function-disallowed-list
$input-height-inner
$input-line-height
$input-padding-y
$input-height-inner-half
$input-line-height
.5em
$input-padding-y
$input-height-inner-quarter
$input-line-height
.25em
$input-padding-y
$input-height
$input-line-height
$input-padding-y
$input-height-border
false
$input-height-sm
$input-line-height
$input-padding-y-sm
$input-height-border
false
$input-height-lg
$input-line-height
$input-padding-y-lg
$input-height-border
false
$input-transition
border-color .15s ease-in-out
box-shadow .15s ease-in-out
$form-color-width
3rem
$form-label-*
$form-text-*
are for our
<label>
s and
.form-text
component.
scss/_variables.scss
$form-label-margin-bottom
.5rem
$form-label-font-size
null
$form-label-font-style
null
$form-label-font-weight
null
$form-label-color
null
scss/_variables.scss
$form-text-margin-top
.25rem
$form-text-font-size
$small-font-size
$form-text-font-style
null
$form-text-font-weight
null
$form-text-color
#{$prefix}
secondary-color
$form-file-*
are for file input.
scss/_variables.scss
$form-file-button-color
$input-color
$form-file-button-bg
#{$prefix}
tertiary-bg
$form-file-button-hover-bg
#{$prefix}
secondary-bg

--- 147_examples_sticky-footer-navbar.txt ---
Sticky footer with fixed navbar
Pin a footer to the bottom of the viewport in desktop browsers with this custom HTML and CSS. A fixed navbar has been added with
padding-top: 60px;
on the
main > .container
Back to
the default sticky footer
minus the navbar.

--- 128_examples_checkout.txt ---
Checkout form
Below is an example form built entirely with Bootstrap’s form controls. Each required form group has a validation state that can be triggered by attempting to submit the form without completing it.
Your cart
Product name
Brief description
Second product
Brief description
Third item
Brief description
Promo code
EXAMPLECODE
Total (USD)
Redeem
Billing address
First name
Valid first name is required.
Last name
Valid last name is required.
Username
Your username is required.
Email
(Optional)
Please enter a valid email address for shipping updates.
Address
Please enter your shipping address.
Address 2
(Optional)
Country
Choose...
United States
Please select a valid country.
State
Choose...
California
Please provide a valid state.
Zip code required.
Shipping address is the same as my billing address
Save this information for next time
Payment
Credit card
Debit card
PayPal
Name on card
Full name as displayed on card
Name on card is required
Credit card number
Credit card number is required
Expiration
Expiration date required
Security code required
Continue to checkout

--- 088_examples_blog.txt ---
Title of a longer featured blog post
Multiple lines of text that form the lede, informing new readers quickly and efficiently about what’s most interesting in this post’s contents.
Continue reading...
World
Featured post
Nov 12
This is a wider card with supporting text below as a natural lead-in to additional content.
Continue reading
Placeholder
Thumbnail
Design
Post title
Nov 11
This is a wider card with supporting text below as a natural lead-in to additional content.
Continue reading
Placeholder
Thumbnail
From the Firehose
Sample blog post
January 1, 2021 by
Mark
This blog post shows a few different types of content that’s supported and styled with Bootstrap. Basic typography, lists, tables, images, code, and more are all supported as expected.
This is some additional paragraph placeholder content. It has been written to fill the available space and show how a longer snippet of text affects the surrounding content. We'll repeat it often to keep the demonstration flowing, so be on the lookout for this exact same string of text.
Blockquotes
This is an example blockquote in action:
Quoted text goes here.
This is some additional paragraph placeholder content. It has been written to fill the available space and show how a longer snippet of text affects the surrounding content. We'll repeat it often to keep the demonstration flowing, so be on the lookout for this exact same string of text.
Example lists
This is some additional paragraph placeholder content. It's a slightly shorter version of the other highly repetitive body text used throughout. This is an example unordered list:
First list item
Second list item with a longer description
Third list item to close it out
And this is an ordered list:
First list item
Second list item with a longer description
Third list item to close it out
And this is a definition list:
HyperText Markup Language (HTML)
The language used to describe and define the content of a Web page
Cascading Style Sheets (CSS)
Used to describe the appearance of Web content
JavaScript (JS)
The programming language used to build advanced Web sites and applications
Inline HTML elements
HTML defines a long list of available inline tags, a complete list of which can be found on the
Mozilla Developer Network
To bold text
, use
<strong>
To italicize text
, use
<em>
Abbreviations, like
HTML
should use
<abbr>
, with an optional
title
attribute for the full phrase.
Citations, like
— Mark Otto
, should use
<cite>
Deleted
text should use
<del>
inserted
text should use
<ins>
Superscript
text
uses
<sup>
and subscript
text
uses
<sub>
Most of these elements are styled by browsers with few modifications on our part.
Heading
This is some additional paragraph placeholder content. It has been written to fill the available space and show how a longer snippet of text affects the surrounding content. We'll repeat it often to keep the demonstration flowing, so be on the lookout for this exact same string of text.
Sub-heading
This is some additional paragraph placeholder content. It has been written to fill the available space and show how a longer snippet of text affects the surrounding content. We'll repeat it often to keep the demonstration flowing, so be on the lookout for this exact same string of text.
Example code block
This is some additional paragraph placeholder content. It's a slightly shorter version of the other highly repetitive body text used throughout.
Another blog post
December 23, 2020 by
Jacob
This is some additional paragraph placeholder content. It has been written to fill the available space and show how a longer snippet of text affects the surrounding content. We'll repeat it often to keep the demonstration flowing, so be on the lookout for this exact same string of text.
Longer quote goes here, maybe with some
emphasized text
in the middle of it.
This is some additional paragraph placeholder content. It has been written to fill the available space and show how a longer snippet of text affects the surrounding content. We'll repeat it often to keep the demonstration flowing, so be on the lookout for this exact same string of text.
Example table
And don't forget about tables in these posts:
Name
Upvotes
Downvotes
Alice
Charlie
Totals
This is some additional paragraph placeholder content. It's a slightly shorter version of the other highly repetitive body text used throughout.
New feature
December 14, 2020 by
Chris
This is some additional paragraph placeholder content. It has been written to fill the available space and show how a longer snippet of text affects the surrounding content. We'll repeat it often to keep the demonstration flowing, so be on the lookout for this exact same string of text.
First list item
Second list item with a longer description
Third list item to close it out
This is some additional paragraph placeholder content. It's a slightly shorter version of the other highly repetitive body text used throughout.
About
Customize this section to tell your visitors a little bit about your publication, writers, content, or something else entirely. Totally up to you.
Recent posts
Example blog post title
January 15, 2024
This is another blog post title
January 14, 2024
Longer blog post title: This one has multiple lines!
January 13, 2024
Archives
March 2021
February 2021
January 2021
December 2020
November 2020
October 2020
September 2020
August 2020
July 2020
June 2020
May 2020
April 2020
Elsewhere
GitHub
Social
Facebook

--- 093_examples_buttons.txt ---
Toggle theme
Light
Dark
Auto
Primary
Secondary
Success
Danger
Warning
Info
Light
Dark
Link
Secondary action
Primary action
Primary icon
Secondary icon
Loading...
Loading...
Dismiss
Dismiss
Dismiss
Dismiss

--- 064_components_navbar.txt ---
How it works
Here’s what you need to know before getting started with the navbar:
Navbars require a wrapping
.navbar
with
.navbar-expand{-sm|-md|-lg|-xl|-xxl}
for responsive collapsing and
color scheme
classes.
Navbars and their contents are fluid by default. Change the
container
to limit their horizontal width in different ways.
Use our
spacing
flex
utility classes for controlling spacing and alignment within navbars.
Navbars are responsive by default, but you can easily modify them to change that. Responsive behavior depends on our Collapse JavaScript plugin.
Ensure accessibility by using a
<nav>
element or, if using a more generic element such as a
<div>
, add a
role="navigation"
to every navbar to explicitly identify it as a landmark region for users of assistive technologies.
Indicate the current item by using
aria-current="page"
for the current page or
aria-current="true"
for the current item in a set.
New in v5.2.0:
Navbars can be themed with CSS variables that are scoped to the
.navbar
base class.
.navbar-light
has been deprecated and
.navbar-dark
has been rewritten to override CSS variables instead of adding additional styles.
The animation effect of this component is dependent on the
prefers-reduced-motion
media query. See the
reduced motion section of our accessibility documentation
Supported content
Navbars come with built-in support for a handful of sub-components. Choose from the following as needed:
.navbar-brand
for your company, product, or project name.
.navbar-nav
for a full-height and lightweight navigation (including support for dropdowns).
.navbar-toggler
for use with our collapse plugin and other
navigation toggling
behaviors.
Flex and spacing utilities for any form controls and actions.
.navbar-text
for adding vertically centered strings of text.
.collapse.navbar-collapse
for grouping and hiding navbar contents by a parent breakpoint.
Add an optional
.navbar-nav-scroll
to set a
max-height
scroll expanded navbar content
Here’s an example of all the sub-components included in a responsive light-themed navbar that automatically collapses at the
(large) breakpoint.
html
class
navbar navbar-expand-lg bg-body-tertiary
class
container-fluid
class
navbar-brand
href
Navbar
button
class
navbar-toggler
type
button
data-bs-toggle
collapse
data-bs-target
#navbarSupportedContent
aria-controls
navbarSupportedContent
aria-expanded
false
aria-label
span
class
navbar-toggler-icon
span
button
class
collapse navbar-collapse
navbarSupportedContent
class
navbar-nav me-auto mb-2 mb-lg-0
class
nav-item
class
nav-link active
aria-current
page
href
Home
class
nav-item
class
nav-link
href
Link
class
nav-item dropdown
class
nav-link dropdown-toggle
href
role
button
data-bs-toggle
dropdown
aria-expanded
false
Dropdown
class
dropdown-menu
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-divider
class
dropdown-item
href
Something else here
class
nav-item
class
nav-link disabled
aria-disabled
true
Disabled
form
class
d-flex
role
search
input
class
form-control me-2
type
search
placeholder
Search
aria-label
Search
button
class
btn btn-outline-success
type
submit
Search
button
form
This example uses
background
bg-body-tertiary
) and
spacing
me-auto
mb-2
mb-lg-0
me-2
) utility classes.
Brand
.navbar-brand
can be applied to most elements, but an anchor works best, as some elements might require utility classes or custom styles.
Text
Add your text within an element with the
.navbar-brand
class.
html
<!-- As a link -->
class
navbar bg-body-tertiary
class
container-fluid
class
navbar-brand
href
Navbar
<!-- As a heading -->
class
navbar bg-body-tertiary
class
container-fluid
span
class
navbar-brand mb-0 h1
Navbar
span
Image
You can replace the text within the
.navbar-brand
with an
<img>
html
class
navbar bg-body-tertiary
class
container
class
navbar-brand
href
/docs/5.3/assets/brand/bootstrap-logo.svg
width
height
Image and text
You can also make use of some additional utilities to add an image and text at the same time. Note the addition of
.d-inline-block
.align-text-top
on the
<img>
html
class
navbar bg-body-tertiary
class
container-fluid
class
navbar-brand
href
/docs/5.3/assets/brand/bootstrap-logo.svg
Logo
width
height
class
d-inline-block align-text-top
Navbar navigation links build on our
.nav
options with their own modifier class and require the use of
toggler classes
for proper responsive styling.
Navigation in navbars will also grow to occupy as much horizontal space as possible
to keep your navbar contents securely aligned.
Add the
.active
class on
.nav-link
to indicate the current page.
Please note that you should also add the
aria-current
attribute on the active
.nav-link
html
class
navbar navbar-expand-lg bg-body-tertiary
class
container-fluid
class
navbar-brand
href
Navbar
button
class
navbar-toggler
type
button
data-bs-toggle
collapse
data-bs-target
#navbarNav
aria-controls
navbarNav
aria-expanded
false
aria-label
span
class
navbar-toggler-icon
span
button
class
collapse navbar-collapse
navbarNav
class
navbar-nav
class
nav-item
class
nav-link active
aria-current
page
href
Home
class
nav-item
class
nav-link
href
Features
class
nav-item
class
nav-link
href
Pricing
class
nav-item
class
nav-link disabled
aria-disabled
true
Disabled
And because we use classes for our navs, you can avoid the list-based approach entirely if you like.
html
class
navbar navbar-expand-lg bg-body-tertiary
class
container-fluid
class
navbar-brand
href
Navbar
button
class
navbar-toggler
type
button
data-bs-toggle
collapse
data-bs-target
#navbarNavAltMarkup
aria-controls
navbarNavAltMarkup
aria-expanded
false
aria-label
span
class
navbar-toggler-icon
span
button
class
collapse navbar-collapse
navbarNavAltMarkup
class
navbar-nav
class
nav-link active
aria-current
page
href
Home
class
nav-link
href
Features
class
nav-link
href
Pricing
class
nav-link disabled
aria-disabled
true
Disabled
You can also use dropdowns in your navbar. Dropdown menus require a wrapping element for positioning, so be sure to use separate and nested elements for
.nav-item
.nav-link
as shown below.
html
class
navbar navbar-expand-lg bg-body-tertiary
class
container-fluid
class
navbar-brand
href
Navbar
button
class
navbar-toggler
type
button
data-bs-toggle
collapse
data-bs-target
#navbarNavDropdown
aria-controls
navbarNavDropdown
aria-expanded
false
aria-label
span
class
navbar-toggler-icon
span
button
class
collapse navbar-collapse
navbarNavDropdown
class
navbar-nav
class
nav-item
class
nav-link active
aria-current
page
href
Home
class
nav-item
class
nav-link
href
Features
class
nav-item
class
nav-link
href
Pricing
class
nav-item dropdown
class
nav-link dropdown-toggle
href
role
button
data-bs-toggle
dropdown
aria-expanded
false
Dropdown link
class
dropdown-menu
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-item
href
Something else here
Forms
Place various form controls and components within a navbar:
html
class
navbar bg-body-tertiary
class
container-fluid
form
class
d-flex
role
search
input
class
form-control me-2
type
search
placeholder
Search
aria-label
Search
button
class
btn btn-outline-success
type
submit
Search
button
form
Immediate child elements of
.navbar
use flex layout and will default to
justify-content: space-between
. Use additional
flex utilities
as needed to adjust this behavior.
html
class
navbar bg-body-tertiary
class
container-fluid
class
navbar-brand
Navbar
form
class
d-flex
role
search
input
class
form-control me-2
type
search
placeholder
Search
aria-label
Search
button
class
btn btn-outline-success
type
submit
Search
button
form
Input groups work, too. If your navbar is an entire form, or mostly a form, you can use the
<form>
element as the container and save some HTML.
html
class
navbar bg-body-tertiary
form
class
container-fluid
class
input-group
span
class
input-group-text
basic-addon1
span
input
type
text
class
form-control
placeholder
Username
aria-label
Username
aria-describedby
basic-addon1
form
Various buttons are supported as part of these navbar forms, too. This is also a great reminder that vertical alignment utilities can be used to align different sized elements.
html
class
navbar bg-body-tertiary
form
class
container-fluid justify-content-start
button
class
btn btn-outline-success me-2
type
button
Main button
button
button
class
btn btn-sm btn-outline-secondary
type
button
Smaller button
button
form
Text
Navbars may contain bits of text with the help of
.navbar-text
. This class adjusts vertical alignment and horizontal spacing for strings of text.
html
class
navbar bg-body-tertiary
class
container-fluid
span
class
navbar-text
Navbar text with an inline element
span
Mix and match with other components and utilities as needed.
html
class
navbar navbar-expand-lg bg-body-tertiary
class
container-fluid
class
navbar-brand
href
Navbar w/ text
button
class
navbar-toggler
type
button
data-bs-toggle
collapse
data-bs-target
#navbarText
aria-controls
navbarText
aria-expanded
false
aria-label
span
class
navbar-toggler-icon
span
button
class
collapse navbar-collapse
navbarText
class
navbar-nav me-auto mb-2 mb-lg-0
class
nav-item
class
nav-link active
aria-current
page
href
Home
class
nav-item
class
nav-link
href
Features
class
nav-item
class
nav-link
href
Pricing
span
class
navbar-text
Navbar text with an inline element
span
Color schemes
New dark navbars in v5.3.0 —
We’ve deprecated
.navbar-dark
in favor of the new
data-bs-theme="dark"
. Add
data-bs-theme="dark"
to the
.navbar
to enable a component-specific color mode.
Learn more about our color modes.
New in v5.2.0 —
Navbar theming is now powered by CSS variables and
.navbar-light
has been deprecated. CSS variables are applied to
.navbar
, defaulting to the “light” appearance, and can be overridden with
.navbar-dark
Navbar themes are easier than ever thanks to Bootstrap’s combination of Sass and CSS variables. The default is our “light navbar” for use with light background colors, but you can also apply
data-bs-theme="dark"
to the
.navbar
parent for dark background colors. Then, customize with
.bg-*
and additional utilities.
class
navbar bg-dark border-bottom border-body
data-bs-theme
dark
<!-- Navbar content -->
class
navbar bg-primary
data-bs-theme
dark
<!-- Navbar content -->
class
navbar
style
background-color
#e3f2fd
data-bs-theme
light
<!-- Navbar content -->
Containers
Although it’s not required, you can wrap a navbar in a
.container
to center it on a page–though note that an inner container is still required. Or you can add a container inside the
.navbar
to only center the contents of a
fixed or static top navbar
html
class
container
class
navbar navbar-expand-lg bg-body-tertiary
class
container-fluid
class
navbar-brand
href
Navbar
Use any of the responsive containers to change how wide the content in your navbar is presented.
html
class
navbar navbar-expand-lg bg-body-tertiary
class
container-md
class
navbar-brand
href
Navbar
Placement
Use our
position utilities
to place navbars in non-static positions. Choose from fixed to the top, fixed to the bottom, stickied to the top (scrolls with the page until it reaches the top, then stays there), or stickied to the bottom (scrolls with the page until it reaches the bottom, then stays there).
Fixed navbars use
position: fixed
, meaning they’re pulled from the normal flow of the DOM and may require custom CSS (e.g.,
padding-top
on the
<body>
) to prevent overlap with other elements.
html
class
navbar bg-body-tertiary
class
container-fluid
class
navbar-brand
href
Default
html
class
navbar fixed-top bg-body-tertiary
class
container-fluid
class
navbar-brand
href
Fixed top
html
class
navbar fixed-bottom bg-body-tertiary
class
container-fluid
class
navbar-brand
href
Fixed bottom
html
class
navbar sticky-top bg-body-tertiary
class
container-fluid
class
navbar-brand
href
Sticky top
html
class
navbar sticky-bottom bg-body-tertiary
class
container-fluid
class
navbar-brand
href
Sticky bottom
Scrolling
.navbar-nav-scroll
to a
.navbar-nav
(or other navbar sub-component) to enable vertical scrolling within the toggleable contents of a collapsed navbar. By default, scrolling kicks in at
75vh
(or 75% of the viewport height), but you can override that with the local CSS custom property
--bs-navbar-height
or custom styles. At larger viewports when the navbar is expanded, content will appear as it does in a default navbar.
Please note that this behavior comes with a potential drawback of
overflow
—when setting
overflow-y: auto
(required to scroll the content here),
overflow-x
is the equivalent of
auto
, which will crop some horizontal content.
Here’s an example navbar using
.navbar-nav-scroll
with
style="--bs-scroll-height: 100px;"
, with some extra margin utilities for optimum spacing.
html
class
navbar navbar-expand-lg bg-body-tertiary
class
container-fluid
class
navbar-brand
href
Navbar scroll
button
class
navbar-toggler
type
button
data-bs-toggle
collapse
data-bs-target
#navbarScroll
aria-controls
navbarScroll
aria-expanded
false
aria-label
span
class
navbar-toggler-icon
span
button
class
collapse navbar-collapse
navbarScroll
class
navbar-nav me-auto my-2 my-lg-0 navbar-nav-scroll
style
--bs-scroll-height
100px
class
nav-item
class
nav-link active
aria-current
page
href
Home
class
nav-item
class
nav-link
href
Link
class
nav-item dropdown
class
nav-link dropdown-toggle
href
role
button
data-bs-toggle
dropdown
aria-expanded
false
Link
class
dropdown-menu
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-divider
class
dropdown-item
href
Something else here
class
nav-item
class
nav-link disabled
aria-disabled
true
Link
form
class
d-flex
role
search
input
class
form-control me-2
type
search
placeholder
Search
aria-label
Search
button
class
btn btn-outline-success
type
submit
Search
button
form
Responsive behaviors
Navbars can use
.navbar-toggler
.navbar-collapse
, and
.navbar-expand{-sm|-md|-lg|-xl|-xxl}
classes to determine when their content collapses behind a button. In combination with other utilities, you can easily choose when to show or hide particular elements.
For navbars that never collapse, add the
.navbar-expand
class on the navbar. For navbars that always collapse, don’t add any
.navbar-expand
class.
Toggler
Navbar togglers are left-aligned by default, but should they follow a sibling element like a
.navbar-brand
, they’ll automatically be aligned to the far right. Reversing your markup will reverse the placement of the toggler. Below are examples of different toggle styles.
With no
.navbar-brand
shown at the smallest breakpoint:
html
class
navbar navbar-expand-lg bg-body-tertiary
class
container-fluid
button
class
navbar-toggler
type
button
data-bs-toggle
collapse
data-bs-target
#navbarTogglerDemo01
aria-controls
navbarTogglerDemo01
aria-expanded
false
aria-label
span
class
navbar-toggler-icon
span
button
class
collapse navbar-collapse
navbarTogglerDemo01
class
navbar-brand
href
Hidden brand
class
navbar-nav me-auto mb-2 mb-lg-0
class
nav-item
class
nav-link active
aria-current
page
href
Home
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link disabled
aria-disabled
true
Disabled
form
class
d-flex
role
search
input
class
form-control me-2
type
search
placeholder
Search
aria-label
Search
button
class
btn btn-outline-success
type
submit
Search
button
form
With a brand name shown on the left and toggler on the right:
html
class
navbar navbar-expand-lg bg-body-tertiary
class
container-fluid
class
navbar-brand
href
Navbar
button
class
navbar-toggler
type
button
data-bs-toggle
collapse
data-bs-target
#navbarTogglerDemo02
aria-controls
navbarTogglerDemo02
aria-expanded
false
aria-label
span
class
navbar-toggler-icon
span
button
class
collapse navbar-collapse
navbarTogglerDemo02
class
navbar-nav me-auto mb-2 mb-lg-0
class
nav-item
class
nav-link active
aria-current
page
href
Home
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link disabled
aria-disabled
true
Disabled
form
class
d-flex
role
search
input
class
form-control me-2
type
search
placeholder
Search
aria-label
Search
button
class
btn btn-outline-success
type
submit
Search
button
form
With a toggler on the left and brand name on the right:
html
class
navbar navbar-expand-lg bg-body-tertiary
class
container-fluid
button
class
navbar-toggler
type
button
data-bs-toggle
collapse
data-bs-target
#navbarTogglerDemo03
aria-controls
navbarTogglerDemo03
aria-expanded
false
aria-label
span
class
navbar-toggler-icon
span
button
class
navbar-brand
href
Navbar
class
collapse navbar-collapse
navbarTogglerDemo03
class
navbar-nav me-auto mb-2 mb-lg-0
class
nav-item
class
nav-link active
aria-current
page
href
Home
class
nav-item
class
nav-link
href
Link
class
nav-item
class
nav-link disabled
aria-disabled
true
Disabled
form
class
d-flex
role
search
input
class
form-control me-2
type
search
placeholder
Search
aria-label
Search
button
class
btn btn-outline-success
type
submit
Search
button
form
External content
Sometimes you want to use the collapse plugin to trigger a container element for content that structurally sits outside of the
.navbar
. Because our plugin works on the
data-bs-target
matching, that’s easily done!
Collapsed content
Toggleable via the navbar brand.
html
class
collapse
navbarToggleExternalContent
data-bs-theme
dark
class
bg-dark p-4
class
text-body-emphasis h4
Collapsed content
span
class
text-body-secondary
Toggleable via the navbar brand.
span
class
navbar navbar-dark bg-dark
class
container-fluid
button
class
navbar-toggler
type
button
data-bs-toggle
collapse
data-bs-target
#navbarToggleExternalContent
aria-controls
navbarToggleExternalContent
aria-expanded
false
aria-label
span
class
navbar-toggler-icon
span
button
When you do this, we recommend including additional JavaScript to move the focus programmatically to the container when it is opened. Otherwise, keyboard users and users of assistive technologies will likely have a hard time finding the newly revealed content - particularly if the container that was opened comes
before
the toggler in the document’s structure. We also recommend making sure that the toggler has the
aria-controls
attribute, pointing to the
of the content container. In theory, this allows assistive technology users to jump directly from the toggler to the container it controls–but support for this is currently quite patchy.
Offcanvas
Transform your expanding and collapsing navbar into an offcanvas drawer with the
offcanvas component
. We extend both the offcanvas default styles and use our
.navbar-expand-*
classes to create a dynamic and flexible navigation sidebar.
In the example below, to create an offcanvas navbar that is always collapsed across all breakpoints, omit the
.navbar-expand-*
class entirely.
html
class
navbar bg-body-tertiary fixed-top
class
container-fluid
class
navbar-brand
href
Offcanvas navbar
button
class
navbar-toggler
type
button
data-bs-toggle
offcanvas
data-bs-target
#offcanvasNavbar
aria-controls
offcanvasNavbar
aria-label
span
class
navbar-toggler-icon
span
button
class
offcanvas offcanvas-end
tabindex
offcanvasNavbar
aria-labelledby
offcanvasNavbarLabel
class
offcanvas-header
class
offcanvas-title
offcanvasNavbarLabel
Offcanvas
button
type
button
class
btn-close
data-bs-dismiss
offcanvas
aria-label
Close
button
class
offcanvas-body
class
navbar-nav justify-content-end flex-grow-1 pe-3
class
nav-item
class
nav-link active
aria-current
page
href
Home
class
nav-item
class
nav-link
href
Link
class
nav-item dropdown
class
nav-link dropdown-toggle
href
role
button
data-bs-toggle
dropdown
aria-expanded
false
Dropdown
class
dropdown-menu
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-divider
class
dropdown-item
href
Something else here
form
class
d-flex mt-3
role
search
input
class
form-control me-2
type
search
placeholder
Search
aria-label
Search
button
class
btn btn-outline-success
type
submit
Search
button
form
To create an offcanvas navbar that expands into a normal navbar at a specific breakpoint like
, use
.navbar-expand-lg
class
navbar navbar-expand-lg bg-body-tertiary fixed-top
class
navbar-brand
href
Offcanvas navbar
button
class
navbar-toggler
type
button
data-bs-toggle
offcanvas
data-bs-target
#navbarOffcanvasLg
aria-controls
navbarOffcanvasLg
aria-label
span
class
navbar-toggler-icon
span
button
class
offcanvas offcanvas-end
tabindex
navbarOffcanvasLg
aria-labelledby
navbarOffcanvasLgLabel
When using offcanvas in a dark navbar, be aware that you may need to have a dark background on the offcanvas content to avoid the text becoming illegible. In the example below, we add
.navbar-dark
.bg-dark
to the
.navbar
.text-bg-dark
to the
.offcanvas
.dropdown-menu-dark
.dropdown-menu
, and
.btn-close-white
.btn-close
for proper styling with a dark offcanvas.
html
class
navbar navbar-dark bg-dark fixed-top
class
container-fluid
class
navbar-brand
href
Offcanvas dark navbar
button
class
navbar-toggler
type
button
data-bs-toggle
offcanvas
data-bs-target
#offcanvasDarkNavbar
aria-controls
offcanvasDarkNavbar
aria-label
span
class
navbar-toggler-icon
span
button
class
offcanvas offcanvas-end text-bg-dark
tabindex
offcanvasDarkNavbar
aria-labelledby
offcanvasDarkNavbarLabel
class
offcanvas-header
class
offcanvas-title
offcanvasDarkNavbarLabel
Dark offcanvas
button
type
button
class
btn-close btn-close-white
data-bs-dismiss
offcanvas
aria-label
Close
button
class
offcanvas-body
class
navbar-nav justify-content-end flex-grow-1 pe-3
class
nav-item
class
nav-link active
aria-current
page
href
Home
class
nav-item
class
nav-link
href
Link
class
nav-item dropdown
class
nav-link dropdown-toggle
href
role
button
data-bs-toggle
dropdown
aria-expanded
false
Dropdown
class
dropdown-menu dropdown-menu-dark
class
dropdown-item
href
Action
class
dropdown-item
href
Another action
class
dropdown-divider
class
dropdown-item
href
Something else here
form
class
d-flex mt-3
role
search
input
class
form-control me-2
type
search
placeholder
Search
aria-label
Search
button
class
btn btn-success
type
submit
Search
button
form
Variables
Added in v5.2.0
As part of Bootstrap’s evolving CSS variables approach, navbars now use local CSS variables on
.navbar
for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.
scss/_navbar.scss
#{$prefix}
navbar-padding-x
$navbar-padding-x
null
$navbar-padding-x
#{$prefix}
navbar-padding-y
#{$navbar-padding-y}
#{$prefix}
navbar-color
#{$navbar-light-color}
#{$prefix}
navbar-hover-color
#{$navbar-light-hover-color}
#{$prefix}
navbar-disabled-color
#{$navbar-light-disabled-color}
#{$prefix}
navbar-active-color
#{$navbar-light-active-color}
#{$prefix}
navbar-brand-padding-y
#{$navbar-brand-padding-y}
#{$prefix}
navbar-brand-margin-end
#{$navbar-brand-margin-end}
#{$prefix}
navbar-brand-font-size
#{$navbar-brand-font-size}
#{$prefix}
navbar-brand-color
#{$navbar-light-brand-color}
#{$prefix}
navbar-brand-hover-color
#{$navbar-light-brand-hover-color}
#{$prefix}
navbar-nav-link-padding-x
#{$navbar-nav-link-padding-x}
#{$prefix}
navbar-toggler-padding-y
#{$navbar-toggler-padding-y}
#{$prefix}
navbar-toggler-padding-x
#{$navbar-toggler-padding-x}
#{$prefix}
navbar-toggler-font-size
#{$navbar-toggler-font-size}
#{$prefix}
navbar-toggler-icon-bg
escape-svg
$navbar-light-toggler-icon-bg
#{$prefix}
navbar-toggler-border-color
#{$navbar-light-toggler-border-color}
#{$prefix}
navbar-toggler-border-radius
#{$navbar-toggler-border-radius}
#{$prefix}
navbar-toggler-focus-width
#{$navbar-toggler-focus-width}
#{$prefix}
navbar-toggler-transition
#{$navbar-toggler-transition}
Some additional CSS variables are also present on
.navbar-nav
scss/_navbar.scss
#{$prefix}
nav-link-padding-x
#{$prefix}
nav-link-padding-y
#{$nav-link-padding-y}
@include
$nav-link-font-size
#{$prefix}
nav-link-font-size
#{$prefix}
nav-link-font-weight
#{$nav-link-font-weight}
#{$prefix}
nav-link-color
#{$prefix}
navbar-color
#{$prefix}
nav-link-hover-color
#{$prefix}
navbar-hover-color
#{$prefix}
nav-link-disabled-color
#{$prefix}
navbar-disabled-color
Customization through CSS variables can be seen on the
.navbar-dark
class where we override specific values without adding duplicate CSS selectors.
scss/_navbar.scss
#{$prefix}
navbar-color
#{$navbar-dark-color}
#{$prefix}
navbar-hover-color
#{$navbar-dark-hover-color}
#{$prefix}
navbar-disabled-color
#{$navbar-dark-disabled-color}
#{$prefix}
navbar-active-color
#{$navbar-dark-active-color}
#{$prefix}
navbar-brand-color
#{$navbar-dark-brand-color}
#{$prefix}
navbar-brand-hover-color
#{$navbar-dark-brand-hover-color}
#{$prefix}
navbar-toggler-border-color
#{$navbar-dark-toggler-border-color}
#{$prefix}
navbar-toggler-icon-bg
escape-svg
$navbar-dark-toggler-icon-bg
Sass variables
Variables for all navbars:
scss/_variables.scss
$navbar-padding-y
$spacer
$navbar-padding-x
null
$navbar-nav-link-padding-x
.5rem
$navbar-brand-font-size
$font-size-lg
// Compute the navbar-brand padding-y so the navbar-brand will have the same height as navbar-text and nav-link
$nav-link-height
$font-size-base
$line-height-base
$nav-link-padding-y
$navbar-brand-height
$navbar-brand-font-size
$line-height-base
$navbar-brand-padding-y
$nav-link-height
$navbar-brand-height
$navbar-brand-margin-end
1rem
$navbar-toggler-padding-y
.25rem
$navbar-toggler-padding-x
.75rem
$navbar-toggler-font-size
$font-size-lg
$navbar-toggler-border-radius
$btn-border-radius
$navbar-toggler-focus-width
$btn-focus-width
$navbar-toggler-transition
box-shadow .15s ease-in-out
$navbar-light-color
rgba
#{$prefix}
emphasis-color-rgb
$navbar-light-hover-color
rgba
#{$prefix}
emphasis-color-rgb
$navbar-light-active-color
rgba
#{$prefix}
emphasis-color-rgb
$navbar-light-disabled-color
rgba
#{$prefix}
emphasis-color-rgb
$navbar-light-icon-color
rgba
$body-color
$navbar-light-toggler-icon-bg
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'><path stroke='#{$navbar-light-icon-color}' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/></svg>"
$navbar-light-toggler-border-color
rgba
#{$prefix}
emphasis-color-rgb
$navbar-light-brand-color
$navbar-light-active-color
$navbar-light-brand-hover-color
$navbar-light-active-color
Variables for the
dark navbar
scss/_variables.scss
$navbar-dark-color
rgba
$white
$navbar-dark-hover-color
rgba
$white
$navbar-dark-active-color
$white
$navbar-dark-disabled-color
rgba
$white
$navbar-dark-icon-color
$navbar-dark-color
$navbar-dark-toggler-icon-bg
"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'><path stroke='#{$navbar-dark-icon-color}' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/></svg>"
$navbar-dark-toggler-border-color
rgba
$white
$navbar-dark-brand-color
$navbar-dark-active-color
$navbar-dark-brand-hover-color
$navbar-dark-active-color
Sass loops
Responsive navbar expand/collapse classes
(e.g.,
.navbar-expand-lg
) are combined with the
$breakpoints
map and generated through a loop in
scss/_navbar.scss
scss/_navbar.scss
// Generate series of `.navbar-expand-*` responsive classes for configuring
// where your navbar collapses.
.navbar-expand
@each
$breakpoint
map-keys
$grid-breakpoints
$next
breakpoint-next
$breakpoint
$grid-breakpoints
$infix
breakpoint-infix
$next
$grid-breakpoints
// stylelint-disable-next-line scss/selector-no-union-class-name
#{$infix}
@include
media-breakpoint-up
$next
flex-wrap
nowrap
justify-content
flex-start
.navbar-nav
flex-direction
.dropdown-menu
position
absolute
.nav-link
padding-right
#{$prefix}
navbar-nav-link-padding-x
padding-left
#{$prefix}
navbar-nav-link-padding-x
.navbar-nav-scroll
overflow
visible
.navbar-collapse
display
flex
!important
// stylelint-disable-line declaration-no-important
flex-basis
auto
.navbar-toggler
display
none
.offcanvas
// stylelint-disable declaration-no-important
position
static
z-index
auto
flex-grow
width
auto
!important
height
auto
!important
visibility
visible
!important
background-color
transparent
!important
border
!important
transform
none
!important
@include
box-shadow
none
@include
transition
none
// stylelint-enable declaration-no-important
.offcanvas-header
display
none
.offcanvas-body
display
flex
flex-grow
padding
overflow-y
visible

--- 023_getting-started_contents.txt ---
Compiled Bootstrap
Once downloaded, unzip the compressed folder and you’ll see something like this:
├── css/
│ ├── bootstrap-grid.css
│ ├── bootstrap-grid.css.map
│ ├── bootstrap-grid.min.css
│ ├── bootstrap-grid.min.css.map
│ ├── bootstrap-grid.rtl.css
│ ├── bootstrap-grid.rtl.css.map
│ ├── bootstrap-grid.rtl.min.css
│ ├── bootstrap-grid.rtl.min.css.map
│ ├── bootstrap-reboot.css
│ ├── bootstrap-reboot.css.map
│ ├── bootstrap-reboot.min.css
│ ├── bootstrap-reboot.min.css.map
│ ├── bootstrap-reboot.rtl.css
│ ├── bootstrap-reboot.rtl.css.map
│ ├── bootstrap-reboot.rtl.min.css
│ ├── bootstrap-reboot.rtl.min.css.map
│ ├── bootstrap-utilities.css
│ ├── bootstrap-utilities.css.map
│ ├── bootstrap-utilities.min.css
│ ├── bootstrap-utilities.min.css.map
│ ├── bootstrap-utilities.rtl.css
│ ├── bootstrap-utilities.rtl.css.map
│ ├── bootstrap-utilities.rtl.min.css
│ ├── bootstrap-utilities.rtl.min.css.map
│ ├── bootstrap.css
│ ├── bootstrap.css.map
│ ├── bootstrap.min.css
│ ├── bootstrap.min.css.map
│ ├── bootstrap.rtl.css
│ ├── bootstrap.rtl.css.map
│ ├── bootstrap.rtl.min.css
│ └── bootstrap.rtl.min.css.map
└── js/
├── bootstrap.bundle.js
├── bootstrap.bundle.js.map
├── bootstrap.bundle.min.js
├── bootstrap.bundle.min.js.map
├── bootstrap.esm.js
├── bootstrap.esm.js.map
├── bootstrap.esm.min.js
├── bootstrap.esm.min.js.map
├── bootstrap.js
├── bootstrap.js.map
├── bootstrap.min.js
└── bootstrap.min.js.map
This is the most basic form of Bootstrap: compiled files for quick drop-in usage in nearly any web project. We provide compiled CSS and JS (
), as well as compiled and minified CSS and JS (
Source maps
) are available for use with certain browsers’ developer tools. Bundled JS files (
and minified
) include
Popper
CSS files
CSS files
Layout
Content
Components
Utilities
Included
Included
Included
Included
Only grid system
Only flex utilities
Included
Only Reboot
JS files
Similarly, we have options for including some or all of our compiled JavaScript.
JS Files
Popper
Included
The Bootstrap source code download includes the compiled CSS and JavaScript assets, along with source Sass, JavaScript, and documentation. More specifically, it includes the following and more:
├── dist/
│ ├── css/
│ └── js/
├── site/
│ └──content/
│ └── docs/
│ └── 5.3/
│ └── examples/
├── js/
└── scss/
scss/
are the source code for our CSS and JavaScript. The
dist/
folder includes everything listed in the compiled download section above. The
site/content/docs/
folder includes the source code for our hosted documentation, including our live examples of Bootstrap usage.
Beyond that, any other included file provides support for packages, license information, and development.