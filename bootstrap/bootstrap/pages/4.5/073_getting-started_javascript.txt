URL: https://getbootstrap.com/docs/4.5/getting-started/javascript
==================================================

View on GitHub
JavaScript
Bring Bootstrap to life with our optional JavaScript plugins built on jQuery. Learn about each plugin, our data and programmatic API options, and more.
Individual or compiled
Plugins can be included individually (using Bootstrap’s individual
js/dist/*.js
), or all at once using
or the minified
(don’t include both).
If you use a bundler (Webpack, Rollup…), you can use
/js/dist/*.js
files which are UMD ready.
Dependencies
Some plugins and CSS components depend on other plugins. If you include plugins individually, make sure to check for these dependencies in the docs. Also note that
all plugins depend on jQuery
(this means jQuery must be included
before
the plugin files).
Consult our
package.json
to see which versions of jQuery are supported.
Our dropdowns, popovers and tooltips also depend on
Popper.js
Data attributes
Nearly all Bootstrap plugins can be enabled and configured through HTML alone with data attributes (our preferred way of using JavaScript functionality). Be sure to
only use one set of data attributes on a single element
(e.g., you cannot trigger a tooltip and modal from the same button.)
However, in some situations it may be desirable to disable this functionality. To disable the data attribute API, unbind all events on the document namespaced with
data-api
like so:
document
.data-api
Alternatively, to target a specific plugin, just include the plugin’s name as a namespace along with the data-api namespace like this:
document
.alert.data-api
Selectors
Currently to query DOM elements we use the native methods
querySelector
querySelectorAll
for performance reasons, so you have to use
valid selectors
If you use special selectors, for example:
collapse:Example
be sure to escape them.
Events
show
) is triggered at the start of an event, and its past participle form (ex.
shown
) is triggered on the completion of an action.
All infinitive events provide
preventDefault()
functionality. This provides the ability to stop the execution of an action before it starts. Returning false from an event handler will also automatically call
preventDefault()
#myModal
show.bs.modal
function
data
return
preventDefault
// stops modal from being shown
Programmatic API
We also believe you should be able to use all Bootstrap plugins purely through the JavaScript API. All public APIs are single, chainable methods, and return the collection acted upon.
.btn.danger
button
toggle
addClass
All methods should accept an optional options object, a string which targets a particular method, or nothing (which initiates a plugin with default behavior):
#myModal
modal
// initialized with defaults
#myModal
modal
keyboard
false
// initialized with no keyboard
#myModal
modal
show
// initializes and invokes show immediately
Each plugin also exposes its raw constructor on a
Constructor
property:
$.fn.popover.Constructor
. If you’d like to get a particular plugin instance, retrieve it directly from an element:
$('[rel="popover"]').data('popover')
Asynchronous functions and transitions
All programmatic API methods are
asynchronous
and return to the caller once the transition is started but
before it ends
In order to execute an action once the transition is complete, you can listen to the corresponding event.
#myCollapse
shown.bs.collapse
function
// Action to execute once the collapsible area is expanded
In addition a method call on a
transitioning component will be ignored
#myCarousel
slid.bs.carousel
function
#myCarousel
carousel
// Will slide to the slide 2 as soon as the transition to slide 1 is finished
#myCarousel
carousel
// Will start sliding to the slide 1 and returns to the caller
#myCarousel
carousel
// !! Will be ignored, as the transition to the slide 1 is not finished !!
Default settings
You can change the default settings for a plugin by modifying the plugin’s
Constructor.Default
object:
// changes default for the modal plugin's `keyboard` option to false
modal
Constructor
Default
keyboard
false
No conflict
Sometimes it is necessary to use Bootstrap plugins with other UI frameworks. In these circumstances, namespace collisions can occasionally occur. If this happens, you may call
.noConflict
on the plugin you wish to revert the value of.
button
noConflict
// return $.fn.button to previously assigned value
// give $().bootstrapBtn the Bootstrap functionality
Version numbers
The version of each of Bootstrap’s jQuery plugins can be accessed via the
VERSION
property of the plugin’s constructor. For example, for the tooltip plugin:
tooltip
Constructor
VERSION
// => "4.5.3"
No special fallbacks when JavaScript is disabled
<noscript>
to explain the situation (and how to re-enable JavaScript) to your users, and/or add your own custom fallbacks.
Third-party libraries
like Prototype or jQuery UI. Despite
.noConflict
and namespaced events, there may be compatibility problems that you need to fix on your own.
Util
All Bootstrap’s JavaScript files depend on
util.js
and it has to be included alongside the other JavaScript files. If you’re using the compiled (or minified)
, there is no need to include this—it’s already there.
util.js
includes utility functions and a basic helper for
transitionEnd
events as well as a CSS transition emulator. It’s used by the other plugins to check for CSS transition support and to catch hanging transitions.
Sanitizer
Tooltips and Popovers use our built-in sanitizer to sanitize options which accept HTML.
The default
whiteList
value is the following:
ARIA_ATTRIBUTE_PATTERN
/^aria-
*$/i
DefaultWhitelist
// Global attributes allowed on any supplied element below.
class
lang
role
ARIA_ATTRIBUTE_PATTERN
target
href
title
area
code
srcset
title
width
height
small
span
strong
If you want to add new values to this default
whiteList
you can do the following:
myDefaultWhiteList
tooltip
Constructor
Default
whiteList
// To allow table elements
myDefaultWhiteList
table
// To allow td elements and data-option attributes on td elements
myDefaultWhiteList
data-option
// You can push your custom regex to validate your attributes.
// Be careful about your regular expressions being too lax
myCustomRegex
/^data-my-app-
myDefaultWhiteList
push
myCustomRegex
If you want to bypass our sanitizer because you prefer to use a dedicated library, for example
DOMPurify
, you should do the following:
#yourTooltip
tooltip
sanitizeFn
function
content
return
DOMPurify
sanitize
content