URL: https://getbootstrap.com/docs/4.1/components/popovers
==================================================

Popovers
Documentation and examples for adding Bootstrap popovers, like those found in iOS, to any element on your site.
Overview
Things to know when using the popover plugin:
Popovers rely on the 3rd party library
Popper.js
for positioning. You must include
popper.min.js
before bootstrap.js or use
which contains Popper.js in order for popovers to work!
Popovers require the
tooltip plugin
as a dependency.
If you’re building our JavaScript from source, it
requires
util.js
Popovers are opt-in for performance reasons, so
you must initialize them yourself
Zero-length
title
content
values will never show a popover.
Specify
container: 'body'
to avoid rendering problems in more complex components (like our input groups, button groups, etc).
Triggering popovers on hidden elements will not work.
Popovers for
.disabled
disabled
elements must be triggered on a wrapper element.
When triggered from anchors that wrap across multiple lines, popovers will be centered between the anchors’ overall width. Use
.text-nowrap
on your
s to avoid this behavior.
Popovers must be hidden before their corresponding elements have been removed from the DOM.
Keep reading to see how popovers work with some examples.
Example: Enable popovers everywhere
One way to initialize all popovers on a page would be to select them by their
data-toggle
attribute:
function
'[data-toggle="popover"]'
popover
Example: Using the
container
option
When you have some styles on a parent element that interfere with a popover, you’ll want to specify a custom
container
so that the popover’s HTML appears within that element instead.
function
'.example-popover'
popover
container
'body'
Example
Click to toggle popover
<button
type=
"button"
class=
"btn btn-lg btn-danger"
data-toggle=
"popover"
title=
"Popover title"
data-content=
"And here's some amazing content. It's very engaging. Right?"
Click to toggle popover
</button>
Four directions
Four options are available: top, right, bottom, and left aligned.
Popover on top
Popover on right
Popover on bottom
Popover on left
<button
type=
"button"
class=
"btn btn-secondary"
data-container=
"body"
data-toggle=
"popover"
data-placement=
"top"
data-content=
"Vivamus sagittis lacus vel augue laoreet rutrum faucibus."
Popover on top
</button>
<button
type=
"button"
class=
"btn btn-secondary"
data-container=
"body"
data-toggle=
"popover"
data-placement=
"right"
data-content=
"Vivamus sagittis lacus vel augue laoreet rutrum faucibus."
Popover on right
</button>
<button
type=
"button"
class=
"btn btn-secondary"
data-container=
"body"
data-toggle=
"popover"
data-placement=
"bottom"
data-content=
"Vivamus
sagittis lacus vel augue laoreet rutrum faucibus."
Popover on bottom
</button>
<button
type=
"button"
class=
"btn btn-secondary"
data-container=
"body"
data-toggle=
"popover"
data-placement=
"left"
data-content=
"Vivamus sagittis lacus vel augue laoreet rutrum faucibus."
Popover on left
</button>
Dismiss on next click
Use the
focus
trigger to dismiss popovers on the user’s next click of a different element than the toggle element.
Specific markup required for dismiss-on-next-click
For proper cross-browser and cross-platform behavior, you must use the
tag,
<button>
tag, and you also must include a
tabindex
attribute.
Dismissible popover
tabindex=
class=
"btn btn-lg btn-danger"
role=
"button"
data-toggle=
"popover"
data-trigger=
"focus"
title=
"Dismissible popover"
data-content=
"And here's some amazing content. It's very engaging. Right?"
Dismissible popover
</a>
'.popover-dismiss'
popover
trigger
'focus'
Disabled elements
Elements with the
disabled
attribute aren’t interactive, meaning users cannot hover or click them to trigger a popover (or tooltip). As a workaround, you’ll want to trigger the popover from a wrapper
<div>
<span>
and override the
pointer-events
on the disabled element.
For disabled popover triggers, you may also prefer
data-trigger="hover"
so that the popover appears as immediate visual feedback to your users as they may not expect to
click
on a disabled element.
Disabled button
<span
class=
"d-inline-block"
data-toggle=
"popover"
data-content=
"Disabled popover"
<button
class=
"btn btn-primary"
style=
"pointer-events: none;"
type=
"button"
disabled
Disabled button
</button>
</span>
Usage
Enable popovers via JavaScript:
'#example'
popover
options
Options
Options can be passed via data attributes or JavaScript. For data attributes, append the option name to
data-
, as in
data-animation=""
Name
Type
Default
Description
animation
boolean
true
Apply a CSS fade transition to the popover
container
string | element | false
false
Appends the popover to a specific element. Example:
container: 'body'
. This option is particularly useful in that it allows you to position the popover in the flow of the document near the triggering element - which will prevent the popover from floating away from the triggering element during a window resize.
content
string | element | function
Default content value if
data-content
attribute isn't present.
If a function is given, it will be called with its
this
reference set to the element that the popover is attached to.
delay
number | object
Delay showing and hiding the popover (ms) - does not apply to manual trigger type
If a number is supplied, delay is applied to both hide/show
Object structure is:
delay: { "show": 500, "hide": 100 }
html
boolean
false
Insert HTML into the popover. If false, jQuery's
text
method will be used to insert content into the DOM. Use text if you're worried about XSS attacks.
placement
string | function
'right'
How to position the popover - auto | top | bottom | left | right.
When
auto
is specified, it will dynamically reorient the popover.
When a function is used to determine the placement, it is called with the popover DOM node as its first argument and the triggering element DOM node as its second. The
this
context is set to the popover instance.
selector
string | false
false
If a selector is provided, popover objects will be delegated to the specified targets. In practice, this is used to enable dynamic HTML content to have popovers added. See
this
an informative example
template
string
'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
Base HTML to use when creating the popover.
The popover's
title
will be injected into the
.popover-header
The popover's
content
will be injected into the
.popover-body
.arrow
will become the popover's arrow.
The outermost wrapper element should have the
.popover
class.
title
string | element | function
Default title value if
title
attribute isn't present.
If a function is given, it will be called with its
this
reference set to the element that the popover is attached to.
trigger
string
'click'
How popover is triggered - click | hover | focus | manual. You may pass multiple triggers; separate them with a space.
manual
cannot be combined with any other trigger.
offset
number | string
Offset of the popover relative to its target. For more information refer to Popper.js's
offset docs
fallbackPlacement
string | array
'flip'
Allow to specify which position Popper will use on fallback. For more information refer to
Popper.js's
behavior docs
boundary
string | element
'scrollParent'
Overflow constraint boundary of the popover. Accepts the values of
'viewport'
'window'
'scrollParent'
, or an HTMLElement reference (JavaScript only). For more information refer to Popper.js's
preventOverflow docs
Data attributes for individual popovers
Options for individual popovers can alternatively be specified through the use of data attributes, as explained above.
Methods
Asynchronous methods and transitions
All API methods are
asynchronous
and start a
transition
. They return to the caller as soon as the transition is started but
before it ends
. In addition, a method call on a
transitioning component will be ignored
See our JavaScript documentation for more information.
$().popover(options)
Initializes popovers for an element collection.
.popover('show')
Reveals an element’s popover.
Returns to the caller before the popover has actually been shown
(i.e. before the
shown.bs.popover
event occurs). This is considered a “manual” triggering of the popover. Popovers whose both title and content are zero-length are never displayed.
'#element'
popover
'show'
.popover('hide')
Hides an element’s popover.
Returns to the caller before the popover has actually been hidden
(i.e. before the
hidden.bs.popover
event occurs). This is considered a “manual” triggering of the popover.
'#element'
popover
'hide'
.popover('toggle')
Toggles an element’s popover.
Returns to the caller before the popover has actually been shown or hidden
(i.e. before the
shown.bs.popover
hidden.bs.popover
event occurs). This is considered a “manual” triggering of the popover.
'#element'
popover
'toggle'
.popover('dispose')
Hides and destroys an element’s popover. Popovers that use delegation (which are created using
selector
option
) cannot be individually destroyed on descendant trigger elements.
'#element'
popover
'dispose'
.popover('enable')
Gives an element’s popover the ability to be shown.
Popovers are enabled by default.
'#element'
popover
'enable'
.popover('disable')
Removes the ability for an element’s popover to be shown. The popover will only be able to be shown if it is re-enabled.
'#element'
popover
'disable'
.popover('toggleEnabled')
Toggles the ability for an element’s popover to be shown or hidden.
'#element'
popover
'toggleEnabled'
.popover('update')
Updates the position of an element’s popover.
'#element'
popover
'update'
Events
Event Type
Description
show.bs.popover
This event fires immediately when the
show
instance method is called.
shown.bs.popover
This event is fired when the popover has been made visible to the user (will wait for CSS transitions to complete).
hide.bs.popover
This event is fired immediately when the
hide
instance method has been called.
hidden.bs.popover
This event is fired when the popover has finished being hidden from the user (will wait for CSS transitions to complete).
inserted.bs.popover
This event is fired after the
show.bs.popover
event when the popover template has been added to the DOM.
'#myPopover'
'hidden.bs.popover'
function
// do something…