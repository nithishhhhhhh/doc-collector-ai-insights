URL: https://getbootstrap.com/docs/5.2/getting-started/parcel
==================================================

Want to skip to the end?
Download the source code and working demo for this guide from the
twbs/examples repository
. You can also
open the example in StackBlitz
but not run it because Parcel isnâ€™t currently supported there.
Setup
Weâ€™re building a Parcel project with Bootstrap from scratch, so there are some prerequisites and up front steps before we can really get started. This guide requires you to have Node.js installed and some familiarity with the terminal.
Create a project folder and setup npm.
Weâ€™ll create the
my-project
folder and initialize npm with the
argument to avoid it asking us all the interactive questions.
mkdir my-project
my-project
npm init -y
Install Parcel.
Unlike our Webpack guide, thereâ€™s only a single build tool dependency here. Parcel will automatically install language transformers (like Sass) as it detects them. We use
--save-dev
to signal that this dependency is only for development use and not for production.
npm i --save-dev parcel
Install Bootstrap.
Now we can install Bootstrap. Weâ€™ll also install Popper since our dropdowns, popovers, and tooltips depend on it for their positioning. If you donâ€™t plan on using those components, you can omit Popper here.
npm i --save bootstrap @popperjs/core
Now that we have all the necessary dependencies installed, we can get to work creating the project files and importing Bootstrap.
Project structure
Weâ€™ve already created the
my-project
folder and initialized npm. Now weâ€™ll also create our
folder, stylesheet, and JavaScript file to round out the project structure. Run the following from
my-project
, or manually create the folder and file structure shown below.
mkdir
src,src/js,src/scss
touch src/index.html src/js/main.js src/scss/styles.scss
When youâ€™re done, your complete project should look like this:
my-project/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ js/
â”‚   â”‚   â””â”€â”€ main.js
â”‚   â”œâ”€â”€ scss/
â”‚   â”‚   â””â”€â”€ styles.scss
â”‚   â””â”€â”€ index.html
â”œâ”€â”€ package-lock.json
â””â”€â”€ package.json
At this point, everything is in the right place, but Parcel needs an HTML page and npm script to start our server.
Configure Parcel
With dependencies installed and our project folder ready for us to start coding, we can now configure Parcel and run our project locally. Parcel itself requires no configuration file by design, but we do need an npm script and an HTML file to start our server.
Fill in the
src/index.html
file.
Parcel needs a page to render, so we use our
index.html
page to set up some basic HTML, including our CSS and JavaScript files.
<!doctype html>
html
lang
"en"
head
meta
charset
"utf-8"
meta
name
"viewport"
content
"width=device-width, initial-scale=1"
title
title
link
"stylesheet"
href
"scss/styles.scss"
script
type
"module"
"js/main.js"
script
head
body
class
"container py-4 px-3 mx-auto"
Hello, Bootstrap and Parcel!
button
class
"btn btn-primary"
Primary button
button
body
html
Weâ€™re including a little bit of Bootstrap styling here with the
div class="container"
<button>
so that we see when Bootstrapâ€™s CSS is loaded by Webpack.
Parcel will automatically detect weâ€™re using Sass and install the
Sass Parcel plugin
to support it. However, if you wish, you can also manually run
npm i --save-dev @parcel/transformer-sass
Add the Parcel npm scripts.
Open the
package.json
and add the following
start
script to the
scripts
object. Weâ€™ll use this script to start our Parcel development server and render the HTML file we created after itâ€™s compiled into the
dist
directory.
// ...
"scripts"
"start"
"parcel serve src/index.html --public-url / --dist-dir dist"
"test"
"echo \"Error: no test specified\" && exit 1"
// ...
And finally, we can start Parcel.
From the
my-project
folder in your terminal, run that newly added npm script:
npm start
In the next and final section to this guide, weâ€™ll import all of Bootstrapâ€™s CSS and JavaScript.
Import Bootstrap
Importing Bootstrap into Parcel requires two imports, one into our
styles.scss
and one into our
main.js
Import Bootstrapâ€™s CSS.
Add the following to
src/scss/styles.scss
to import all of Bootstrapâ€™s source Sass.
// Import all of Bootstrap's CSS
@import
"~bootstrap/scss/bootstrap"
You can also import our stylesheets individually if you want.
Read our Sass import docs
for details.
Import Bootstrapâ€™s JS.
Add the following to
src/js/main.js
to import all of Bootstrapâ€™s JS. Popper will be imported automatically through Bootstrap.
// Import all of Bootstrap's JS
import
from
'bootstrap'
You can also import JavaScript plugins individually as needed to keep bundle sizes down:
import
Alert
from
'bootstrap/js/dist/alert'
// or, specify which plugins you need:
import
Tooltip
Toast
Popover
from
'bootstrap'
Read our JavaScript docs
for more information on how to use Bootstrapâ€™s plugins.
And youâ€™re done! ðŸŽ‰
With Bootstrapâ€™s source Sass and JS fully loaded, your local development server should now look like this.
Now you can start adding any Bootstrap components you want to use. Be sure to
check out the complete Parcel example project
for how to include additional custom Sass and optimize your build by importing only the parts of Bootstrapâ€™s CSS and JS that you need.
See something wrong or out of date here? Please
open an issue on GitHub
. Need help troubleshooting?
Search or start a discussion
on GitHub.