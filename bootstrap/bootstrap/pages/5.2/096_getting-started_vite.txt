URL: https://getbootstrap.com/docs/5.2/getting-started/vite
==================================================

Want to skip to the end?
Download the source code and working demo for this guide from the
twbs/examples repository
. You can also
open the example in StackBlitz
for live editing.
Setup
Weâ€™re building a Vite project with Bootstrap from scratch, so there are some prerequisites and up front steps before we can really get started. This guide requires you to have Node.js installed and some familiarity with the terminal.
Create a project folder and setup npm.
Weâ€™ll create the
my-project
folder and initialize npm with the
argument to avoid it asking us all the interactive questions.
mkdir my-project
my-project
npm init -y
Install Vite.
Unlike our Webpack guide, thereâ€™s only a single build tool dependency here. We use
--save-dev
to signal that this dependency is only for development use and not for production.
npm i --save-dev vite
Install Bootstrap.
Now we can install Bootstrap. Weâ€™ll also install Popper since our dropdowns, popovers, and tooltips depend on it for their positioning. If you donâ€™t plan on using those components, you can omit Popper here.
npm i --save bootstrap @popperjs/core
Install additional dependency.
In addition to Vite and Bootstrap, we need another dependency (Sass) to properly import and bundle Bootstrapâ€™s CSS.
npm i --save-dev sass
Now that we have all the necessary dependencies installed and setup, we can get to work creating the project files and importing Bootstrap.
Project structure
Weâ€™ve already created the
my-project
folder and initialized npm. Now weâ€™ll also create our
folder, stylesheet, and JavaScript file to round out the project structure. Run the following from
my-project
, or manually create the folder and file structure shown below.
mkdir
src,src/js,src/scss
touch src/index.html src/js/main.js src/scss/styles.scss vite.config.js
When youâ€™re done, your complete project should look like this:
my-project/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ js/
â”‚   â”‚   â””â”€â”€ main.js
â”‚   â””â”€â”€ scss/
â”‚   |   â””â”€â”€ styles.scss
|   â””â”€â”€ index.html
â”œâ”€â”€ package-lock.json
â”œâ”€â”€ package.json
â””â”€â”€ vite.config.js
At this point, everything is in the right place, but Vite wonâ€™t work because we havenâ€™t filled in our
vite.config.js
yet.
Configure Vite
With dependencies installed and our project folder ready for us to start coding, we can now configure Vite and run our project locally.
Open
vite.config.js
in your editor.
Since itâ€™s blank, weâ€™ll need to add some boilerplate config to it so we can start our server. This part of the config tells Vite where to look for our projectâ€™s JavaScript and how the development server should behave (pulling from the
folder with hot reload).
const
path
require
'path'
export
default
root
path
resolve
__dirname
'src'
server
port
8080
true
Next we fill in
src/index.html
This is the HTML page Vite will load in the browser to utilize the bundled CSS and JS weâ€™ll add to it in later steps.
<!doctype html>
html
lang
"en"
head
meta
charset
"utf-8"
meta
name
"viewport"
content
"width=device-width, initial-scale=1"
title
title
head
body
class
"container py-4 px-3 mx-auto"
Hello, Bootstrap and Vite!
button
class
"btn btn-primary"
Primary button
button
script
type
"module"
"./js/main.js"
script
body
html
Weâ€™re including a little bit of Bootstrap styling here with the
div class="container"
<button>
so that we see when Bootstrapâ€™s CSS is loaded by Vite.
Now we need an npm script to run Vite.
Open
package.json
and add the
start
script shown below (you should already have the test script). Weâ€™ll use this script to start our local Vite dev server.
// ...
"scripts"
"start"
"vite"
"test"
"echo \"Error: no test specified\" && exit 1"
// ...
And finally, we can start Vite.
From the
my-project
folder in your terminal, run that newly added npm script:
npm start
In the next and final section to this guide, weâ€™ll import all of Bootstrapâ€™s CSS and JavaScript.
Import Bootstrap
Set up Bootstrapâ€™s Sass import in
vite.config.js
Your configuration file is now complete and should match the snippet below. The only new part here is the
resolve
sectionâ€”we use this to add an alias to our source files inside
node_modules
to keep imports as simple as possible.
const
path
require
'path'
export
default
root
path
resolve
__dirname
'src'
resolve
alias
'~bootstrap'
path
resolve
__dirname
'node_modules/bootstrap'
server
port
8080
true
Now, letâ€™s import Bootstrapâ€™s CSS.
Add the following to
src/scss/styles.scss
to import all of Bootstrapâ€™s source Sass.
// Import all of Bootstrap's CSS
@import
"~bootstrap/scss/bootstrap"
You can also import our stylesheets individually if you want.
Read our Sass import docs
for details.
Next we load the CSS and import Bootstrapâ€™s JavaScript.
Add the following to
src/js/main.js
to load the CSS and import all of Bootstrapâ€™s JS. Popper will be imported automatically through Bootstrap.
// Import our custom CSS
import
'../scss/styles.scss'
// Import all of Bootstrap's JS
import
from
'bootstrap'
You can also import JavaScript plugins individually as needed to keep bundle sizes down:
import
Alert
from
'bootstrap/js/dist/alert'
// or, specify which plugins you need:
import
Tooltip
Toast
Popover
from
'bootstrap'
Read our JavaScript docs
for more information on how to use Bootstrapâ€™s plugins.
And youâ€™re done! ðŸŽ‰
With Bootstrapâ€™s source Sass and JS fully loaded, your local development server should now look like this.
Now you can start adding any Bootstrap components you want to use. Be sure to
check out the complete Vite example project
for how to include additional custom Sass and optimize your build by importing only the parts of Bootstrapâ€™s CSS and JS that you need.
See something wrong or out of date here? Please
open an issue on GitHub
. Need help troubleshooting?
Search or start a discussion
on GitHub.