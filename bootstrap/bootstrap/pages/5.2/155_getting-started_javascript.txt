URL: https://getbootstrap.com/docs/5.2/getting-started/javascript
==================================================

Individual or compiled
Plugins can be included individually (using Bootstrap’s individual
js/dist/*.js
), or all at once using
or the minified
(don’t include both).
If you use a bundler (Webpack, Parcel, Vite…), you can use
/js/dist/*.js
files which are UMD ready.
Usage with JavaScript frameworks
While the Bootstrap CSS can be used with any framework,
the Bootstrap JavaScript is not fully compatible with JavaScript frameworks like React, Vue, and Angular
which assume full knowledge of the DOM. Both Bootstrap and the framework may attempt to mutate the same DOM element, resulting in bugs like dropdowns that are stuck in the “open” position.
A better alternative for those using this type of frameworks is to use a framework-specific package
instead of
the Bootstrap JavaScript. Here are some of the most popular options:
React:
React Bootstrap
Vue:
(currently only supports Vue 2 and Bootstrap 4)
Angular:
ng-bootstrap
Using Bootstrap as a module
Try it yourself!
Download the source code and working demo for using Bootstrap as an ES module from the
twbs/examples repository
. You can also
open the example in StackBlitz
We provide a version of Bootstrap built as
) which allows you to use Bootstrap as a module in the browser, if your
targeted browsers support it
script
type
"module"
import
Toast
from
'bootstrap.esm.min.js'
Array
from
document
querySelectorAll
'.toast'
forEach
toastNode
Toast
toastNode
script
Compared to JS bundlers, using ESM in the browser requires you to use the full path and filename instead of the module name.
Read more about JS modules in the browser.
That’s why we use
'bootstrap.esm.min.js'
instead of
'bootstrap'
above. However, this is further complicated by our Popper dependency, which imports Popper into our JavaScript like so:
import
Popper
from
"@popperjs/core"
If you try this as-is, you’ll see an error in the console like the following:
Uncaught TypeError: Failed to resolve module specifier "@popperjs/core". Relative references must start with either "/", "./", or "../".
To fix this, you can use an
importmap
to resolve the arbitrary module names to complete paths. If your
targeted browsers
do not support
importmap
, you’ll need to use the
es-module-shims
project. Here’s how it works for Bootstrap and Popper:
<!doctype html>
html
lang
"en"
head
meta
charset
"utf-8"
meta
name
"viewport"
content
"width=device-width, initial-scale=1"
link
href
"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
"stylesheet"
integrity
"sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65"
crossorigin
"anonymous"
title
Hello, modularity!
title
head
body
Hello, modularity!
button
"popoverButton"
type
"button"
class
"btn btn-primary btn-lg"
class
"btn btn-lg btn-danger"
data-bs-toggle
"popover"
title
"ESM in Browser"
data-bs-content
"Bang!"
Custom popover
button
script
async
"https://cdn.jsdelivr.net/npm/es-module-shims@1/dist/es-module-shims.min.js"
crossorigin
"anonymous"
script
script
type
"importmap"
"imports"
"@popperjs/core"
"https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"
"bootstrap"
"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.esm.min.js"
script
script
type
"module"
import
from
'bootstrap'
Popover
document
getElementById
'popoverButton'
script
body
html
Dependencies
Some plugins and CSS components depend on other plugins. If you include plugins individually, make sure to check for these dependencies in the docs.
Our dropdowns, popovers, and tooltips also depend on
Popper
Data attributes
Nearly all Bootstrap plugins can be enabled and configured through HTML alone with data attributes (our preferred way of using JavaScript functionality). Be sure to
only use one set of data attributes on a single element
(e.g., you cannot trigger a tooltip and modal from the same button.)
As options can be passed via data attributes or JavaScript, you can append an option name to
data-bs-
, as in
data-bs-animation="{value}"
. Make sure to change the case type of the option name from “
camelCase
” to “
kebab-case
” when passing the options via data attributes. For example, use
data-bs-custom-class="beautifier"
instead of
data-bs-customClass="beautifier"
As of Bootstrap 5.2.0, all components support an
experimental
reserved data attribute
data-bs-config
that can house simple component configuration as a JSON string. When an element has
data-bs-config='{"delay":0, "title":123}'
data-bs-title="456"
attributes, the final
title
value will be
and the separate data attributes will override values given on
data-bs-config
. In addition, existing data attributes are able to house JSON values like
data-bs-delay='{"show":0,"hide":150}'
Selectors
We use the native
querySelector
querySelectorAll
methods to query DOM elements for performance reasons, so you must use
valid selectors
. If you use special selectors like
collapse:Example
, be sure to escape them.
Events
show
) is triggered at the start of an event, and its past participle form (ex.
shown
) is triggered on the completion of an action.
All infinitive events provide
preventDefault()
functionality. This provides the ability to stop the execution of an action before it starts. Returning false from an event handler will also automatically call
preventDefault()
const
myModal
document
querySelector
'#myModal'
myModal
addEventListener
'show.bs.modal'
event
data
return
event
preventDefault
// stops modal from being shown
Programmatic API
All constructors accept an optional options object or nothing (which initiates a plugin with its default behavior):
const
myModalEl
document
querySelector
'#myModal'
const
modal
Modal
myModalEl
// initialized with defaults
const
configObject
keyboard
false
const
modal1
Modal
myModalEl
configObject
// initialized with no keyboard
If you’d like to get a particular plugin instance, each plugin exposes a
getInstance
method. For example, to retrieve an instance directly from an element:
Popover
getInstance
myPopoverEl
This method will return
null
if an instance is not initiated over the requested element.
Alternatively,
getOrCreateInstance
can be used to get the instance associated with a DOM element, or create a new one in case it wasn’t initialized.
Popover
getOrCreateInstance
myPopoverEl
configObject
In case an instance wasn’t initialized, it may accept and use an optional configuration object as second argument.
CSS selectors in constructors
In addition to the
getInstance
getOrCreateInstance
methods, all plugin constructors can accept a DOM element or a valid
CSS selector
as the first argument. Plugin elements are found with the
querySelector
method since our plugins only support a single element.
const
modal
Modal
'#myModal'
const
dropdown
Dropdown
'[data-bs-toggle="dropdown"]'
const
offcanvas
Offcanvas
getInstance
'#myOffcanvas'
const
alert
Alert
getOrCreateInstance
'#myAlert'
Asynchronous functions and transitions
All programmatic API methods are
asynchronous
and return to the caller once the transition is started, but
before it ends
. In order to execute an action once the transition is complete, you can listen to the corresponding event.
const
myCollapseEl
document
querySelector
'#myCollapse'
myCollapseEl
addEventListener
'shown.bs.collapse'
event
// Action to execute once the collapsible area is expanded
In addition, a method call on a
transitioning component will be ignored
const
myCarouselEl
document
querySelector
'#myCarousel'
const
carousel
Carousel
getInstance
myCarouselEl
// Retrieve a Carousel instance
myCarouselEl
addEventListener
'slid.bs.carousel'
event
carousel
// Will slide to the slide 2 as soon as the transition to slide 1 is finished
carousel
// Will start sliding to the slide 1 and returns to the caller
carousel
// !! Will be ignored, as the transition to the slide 1 is not finished !!
dispose
method
While it may seem correct to use the
dispose
method immediately after
hide()
, it will lead to incorrect results. Here’s an example of the problem use:
const
myModal
document
querySelector
'#myModal'
myModal
hide
// it is asynchronous
myModal
addEventListener
'shown.bs.hidden'
event
myModal
dispose
Default settings
You can change the default settings for a plugin by modifying the plugin’s
Constructor.Default
object:
// changes default for the modal plugin's `keyboard` option to false
Modal
Default
keyboard
false
Methods and properties
Every Bootstrap plugin exposes the following methods and static properties.
Method
Description
dispose
Destroys an element’s modal. (Removes stored data on the DOM element)
getInstance
Static
method which allows you to get the modal instance associated with a DOM element.
getOrCreateInstance
Static
method which allows you to get the modal instance associated with a DOM element, or create a new one in case it wasn’t initialized.
Static property
Description
NAME
Returns the plugin name. (Example:
VERSION
The version of each of Bootstrap’s plugins can be accessed via the
VERSION
property of the plugin’s constructor (Example:
Sanitizer
Tooltips and Popovers use our built-in sanitizer to sanitize options which accept HTML.
The default
allowList
value is the following:
const
ARIA_ATTRIBUTE_PATTERN
/^aria-[\w-]*$/i
const
DefaultAllowlist
// Global attributes allowed on any supplied element below.
'class'
'dir'
'id'
'lang'
'role'
ARIA_ATTRIBUTE_PATTERN
'target'
'href'
'title'
'rel'
area
code
'src'
'srcset'
'alt'
'title'
'width'
'height'
small
span
strong
If you want to add new values to this default
allowList
you can do the following:
const
myDefaultAllowList
Tooltip
Default
allowList
// To allow table elements
myDefaultAllowList
table
// To allow td elements and data-bs-option attributes on td elements
myDefaultAllowList
'data-bs-option'
// You can push your custom regex to validate your attributes.
// Be careful about your regular expressions being too lax
const
myCustomRegex
/^data-my-app-[\w-]+/
myDefaultAllowList
push
myCustomRegex
If you want to bypass our sanitizer because you prefer to use a dedicated library, for example
DOMPurify
, you should do the following:
const
yourTooltipEl
document
querySelector
'#yourTooltip'
const
tooltip
Tooltip
yourTooltipEl
sanitizeFn
content
return
DOMPurify
sanitize
content
Optionally using jQuery
You don’t need jQuery in Bootstrap 5
, but it’s still possible to use our components with jQuery. If Bootstrap detects
jQuery
in the
window
object, it’ll add all of our components in jQuery’s plugin system. This allows you to do the following:
'[data-bs-toggle="tooltip"]'
tooltip
// to enable tooltips, with default configuration
'[data-bs-toggle="tooltip"]'
tooltip
boundary
'clippingParents'
customClass
'myClass'
// to initialize tooltips with given configuration
'#myTooltip'
tooltip
'show'
// to trigger `show` method
The same goes for our other components.
No conflict
Sometimes it is necessary to use Bootstrap plugins with other UI frameworks. In these circumstances, namespace collisions can occasionally occur. If this happens, you may call
.noConflict
on the plugin you wish to revert the value of.
const
button
noConflict
// return $.fn.button to previously assigned value
// give $().bootstrapBtn the Bootstrap functionality
.noConflict
and namespaced events, there may be compatibility problems that you need to fix on your own.
jQuery events
jQuery
is present in the
window
object and there is no
data-bs-no-jquery
attribute set on
<body>
. If jQuery is found, Bootstrap will emit events thanks to jQuery’s event system. So if you want to listen to Bootstrap’s events, you’ll have to use the jQuery methods (
.one
) instead of
addEventListener
'#myTab a'
'shown.bs.tab'
// do something...
Disabled JavaScript
<noscript>
to explain the situation (and how to re-enable JavaScript) to your users, and/or add your own custom fallbacks.