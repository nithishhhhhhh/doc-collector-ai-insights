URL: https://getbootstrap.com/docs/5.1/utilities/colors
==================================================

Colors
Colorize text with color utilities. If you want to colorize links, you can use the
.link-*
helper classes
which have
:hover
:focus
states.
.text-primary
.text-secondary
.text-success
.text-danger
.text-warning
.text-info
.text-light
.text-dark
.text-body
.text-muted
.text-white
.text-black-50
.text-white-50
class
"text-primary"
.text-primary
class
"text-secondary"
.text-secondary
class
"text-success"
.text-success
class
"text-danger"
.text-danger
class
"text-warning bg-dark"
.text-warning
class
"text-info bg-dark"
.text-info
class
"text-light bg-dark"
.text-light
class
"text-dark"
.text-dark
class
"text-body"
.text-body
class
"text-muted"
.text-muted
class
"text-white bg-dark"
.text-white
class
"text-black-50"
.text-black-50
class
"text-white-50 bg-dark"
.text-white-50
Deprecation:
With the addition of
.text-opacity-*
utilities and CSS variables for text utilities,
.text-black-50
.text-white-50
are deprecated as of v5.1.0. They’ll be removed in v6.0.0.
Conveying meaning to assistive technologies
Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies – such as screen readers. Ensure that information denoted by the color is either obvious from the content itself (e.g. the visible text), or is included through alternative means, such as additional text hidden with the
.visually-hidden
class.
Opacity
Added in v5.1.0
As of v5.1.0, text color utilities are generated with Sass using CSS variables. This allows for real-time color changes without compilation and dynamic alpha transparency changes.
How it works
Consider our default
.text-primary
utility.
text-primary
--bs-text-opacity
color
rgba
primary
text
opacity
!important
We use an RGB version of our
--bs-primary
(with the value of
13, 110, 253
) CSS variable and attached a second CSS variable,
--bs-text-opacity
, for the alpha transparency (with a default value
thanks to a local CSS variable). That means anytime you use
.text-primary
now, your computed
color
value is
rgba(13, 110, 253, 1)
. The local CSS variable inside each
.text-*
class avoids inheritance issues so nested instances of the utilities don’t automatically have a modified alpha transparency.
Example
To change that opacity, override
--bs-text-opacity
via custom styles or inline styles.
This is default primary text
This is 50% opacity primary text
class
"text-primary"
This is default primary text
class
"text-primary"
style
"--bs-text-opacity: .5;"
This is 50% opacity primary text
Or, choose from any of the
.text-opacity
utilities:
This is default primary text
This is 75% opacity primary text
This is 50% opacity primary text
This is 25% opacity primary text
class
"text-primary"
This is default primary text
class
"text-primary text-opacity-75"
This is 75% opacity primary text
class
"text-primary text-opacity-50"
This is 50% opacity primary text
class
"text-primary text-opacity-25"
This is 25% opacity primary text
Specificity
Sometimes contextual classes cannot be applied due to the specificity of another selector. In some cases, a sufficient workaround is to wrap your element’s content in a
<div>
or more semantic element with the desired class.
Sass
In addition to the following Sass functionality, consider reading about our included
CSS custom properties
(aka CSS variables) for colors and more.
Variables
Most
color
utilities are generated by our theme colors, reassigned from our generic color palette variables.
$blue
#0d6efd
$indigo
#6610f2
$purple
#6f42c1
$pink
#d63384
$red
#dc3545
$orange
#fd7e14
$yellow
#ffc107
$green
#198754
$teal
#20c997
$cyan
#0dcaf0
$primary
$blue
$secondary
$gray-600
$success
$green
$info
$cyan
$warning
$yellow
$danger
$red
$light
$gray-100
$dark
$gray-900
Grayscale colors are also available, but only a subset are used to generate any utilities.
$white
#fff
$gray-100
#f8f9fa
$gray-200
#e9ecef
$gray-300
#dee2e6
$gray-400
#ced4da
$gray-500
#adb5bd
$gray-600
#6c757d
$gray-700
#495057
$gray-800
#343a40
$gray-900
#212529
$black
#000
Theme colors are then put into a Sass map so we can loop over them to generate our utilities, component modifiers, and more.
$theme-colors
"primary"
$primary
"secondary"
$secondary
"success"
$success
"info"
$info
"warning"
$warning
"danger"
$danger
"light"
$light
"dark"
$dark
Grayscale colors are also available as a Sass map.
This map is not used to generate any utilities.
$grays
"100"
$gray-100
"200"
$gray-200
"300"
$gray-300
"400"
$gray-400
"500"
$gray-500
"600"
$gray-600
"700"
$gray-700
"800"
$gray-800
"900"
$gray-900
RGB colors are generated from a separate Sass map:
$theme-colors-rgb
map-loop
$theme-colors
to-rgb
"$value"
And color opacities build on that with their own map that’s consumed by the utilities API:
$utilities-text
map-merge
$utilities-colors
"black"
to-rgb
$black
"white"
to-rgb
$white
"body"
to-rgb
$body-color
$utilities-text-colors
map-loop
$utilities-text
rgba-css-var
"$key"
"text"
Utilities API
Color utilities are declared in our utilities API in
scss/_utilities.scss
Learn how to use the utilities API.
"color"
property
color
class
text
local-vars
"text-opacity"
values
map-merge
utilities-text-colors
"muted"
text-muted
"black-50"
rgba
black
deprecated
"white-50"
rgba
white
deprecated
"reset"
inherit
"text-opacity"
css-var
true
class
text-opacity
values