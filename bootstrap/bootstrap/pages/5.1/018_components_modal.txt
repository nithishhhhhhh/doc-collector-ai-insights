URL: https://getbootstrap.com/docs/5.1/components/modal
==================================================

How it works
Before getting started with Bootstrap’s modal component, be sure to read the following as our menu options have recently changed.
Modals are built with HTML, CSS, and JavaScript. They’re positioned over everything else in the document and remove scroll from the
<body>
so that modal content scrolls instead.
Clicking on the modal “backdrop” will automatically close the modal.
Modals use
position: fixed
, which can sometimes be a bit particular about its rendering. Whenever possible, place your modal HTML in a top-level position to avoid potential interference from other elements. You’ll likely run into issues when nesting a
.modal
within another fixed element.
Once again, due to
position: fixed
, there are some caveats with using modals on mobile devices.
See our browser support docs
for details.
Due to how HTML5 defines its semantics,
autofocus
HTML attribute
has no effect in Bootstrap modals. To achieve the same effect, use some custom JavaScript:
myModal
document
getElementById
'myModal'
myInput
document
getElementById
'myInput'
myModal
addEventListener
'shown.bs.modal'
function
myInput
focus
The animation effect of this component is dependent on the
prefers-reduced-motion
media query. See the
reduced motion section of our accessibility documentation
Keep reading for demos and usage guidelines.
Examples
Modal components
Below is a
static
modal example (meaning its
position
display
have been overridden). Included are the modal header, modal body (required for
padding
), and modal footer (optional). We ask that you include modal headers with dismiss actions whenever possible, or provide another explicit dismiss action.
Modal title
Modal body text goes here.
Close
Save changes
class
"modal"
tabindex
"-1"
class
"modal-dialog"
class
"modal-content"
class
"modal-header"
class
"modal-title"
Modal title
button
type
"button"
class
"btn-close"
data-bs-dismiss
"modal"
aria-label
"Close"
button
class
"modal-body"
Modal body text goes here.
class
"modal-footer"
button
type
"button"
class
"btn btn-secondary"
data-bs-dismiss
"modal"
Close
button
button
type
"button"
class
"btn btn-primary"
Save changes
button
Live demo
Toggle a working modal demo by clicking the button below. It will slide down and fade in from the top of the page.
Modal title
Woohoo, you're reading this text in a modal!
Close
Save changes
Launch demo modal
<!-- Button trigger modal -->
button
type
"button"
class
"btn btn-primary"
data-bs-toggle
"modal"
data-bs-target
"#exampleModal"
Launch demo modal
button
<!-- Modal -->
class
"modal fade"
"exampleModal"
tabindex
"-1"
aria-labelledby
"exampleModalLabel"
aria-hidden
"true"
class
"modal-dialog"
class
"modal-content"
class
"modal-header"
class
"modal-title"
"exampleModalLabel"
Modal title
button
type
"button"
class
"btn-close"
data-bs-dismiss
"modal"
aria-label
"Close"
button
class
"modal-body"
class
"modal-footer"
button
type
"button"
class
"btn btn-secondary"
data-bs-dismiss
"modal"
Close
button
button
type
"button"
class
"btn btn-primary"
Save changes
button
Static backdrop
When backdrop is set to static, the modal will not close when clicking outside it. Click the button below to try it.
Modal title
I will not close if you click outside me. Don't even try to press escape key.
Close
Understood
Launch static backdrop modal
<!-- Button trigger modal -->
button
type
"button"
class
"btn btn-primary"
data-bs-toggle
"modal"
data-bs-target
"#staticBackdrop"
Launch static backdrop modal
button
<!-- Modal -->
class
"modal fade"
"staticBackdrop"
data-bs-backdrop
"static"
data-bs-keyboard
"false"
tabindex
"-1"
aria-labelledby
"staticBackdropLabel"
aria-hidden
"true"
class
"modal-dialog"
class
"modal-content"
class
"modal-header"
class
"modal-title"
"staticBackdropLabel"
Modal title
button
type
"button"
class
"btn-close"
data-bs-dismiss
"modal"
aria-label
"Close"
button
class
"modal-body"
class
"modal-footer"
button
type
"button"
class
"btn btn-secondary"
data-bs-dismiss
"modal"
Close
button
button
type
"button"
class
"btn btn-primary"
Understood
button
Scrolling long content
When modals become too long for the user’s viewport or device, they scroll independent of the page itself. Try the demo below to see what we mean.
Modal title
This is some placeholder content to show the scrolling behavior for modals. Instead of repeating the text the modal, we use an inline style set a minimum height, thereby extending the length of the overall modal and demonstrating the overflow scrolling. When content becomes longer than the height of the viewport, scrolling will move the modal as needed.
Close
Save changes
Launch demo modal
You can also create a scrollable modal that allows scroll the modal body by adding
.modal-dialog-scrollable
.modal-dialog
Modal title
This is some placeholder content to show the scrolling behavior for modals. We use repeated line breaks to demonstrate how content can exceed minimum inner height, thereby showing inner scrolling. When content becomes longer than the predefined max-height of modal, content will be cropped and scrollable within the modal.
This content should appear at the bottom after you scroll.
Close
Save changes
Launch demo modal
<!-- Scrollable modal -->
class
"modal-dialog modal-dialog-scrollable"
Vertically centered
.modal-dialog-centered
.modal-dialog
to vertically center the modal.
Modal title
This is a vertically centered modal.
Close
Save changes
Modal title
This is some placeholder content to show a vertically centered modal. We've added some extra copy here to show how vertically centering the modal works when combined with scrollable modals. We also use some repeated line breaks to quickly extend the height of the content, thereby triggering the scrolling. When content becomes longer than the predefined max-height of modal, content will be cropped and scrollable within the modal.
Just like that.
Close
Save changes
Vertically centered modal
Vertically centered scrollable modal
<!-- Vertically centered modal -->
class
"modal-dialog modal-dialog-centered"
<!-- Vertically centered scrollable modal -->
class
"modal-dialog modal-dialog-centered modal-dialog-scrollable"
Tooltips and popovers
Tooltips
popovers
can be placed within modals as needed. When modals are closed, any tooltips and popovers within are also automatically dismissed.
Modal title
Popover in a modal
This
button
triggers a popover on click.
Tooltips in a modal
This link
that link
have tooltips on hover.
Close
Save changes
Launch demo modal
class
"modal-body"
Popover in a modal
This
href
role
"button"
class
"btn btn-secondary popover-test"
title
"Popover title"
data-bs-content
"Popover body content is set in this attribute."
button
triggers a popover on click.
Tooltips in a modal
href
class
"tooltip-test"
title
"Tooltip"
This link
href
class
"tooltip-test"
title
"Tooltip"
that link
have tooltips on hover.
Using the grid
Utilize the Bootstrap grid system within a modal by nesting
.container-fluid
within the
.modal-body
. Then, use the normal grid system classes as you would anywhere else.
Grids in modals
.col-md-4
.col-md-4 .ms-auto
.col-md-3 .ms-auto
.col-md-2 .ms-auto
.col-md-6 .ms-auto
Level 1: .col-sm-9
Level 2: .col-8 .col-sm-6
Level 2: .col-4 .col-sm-6
Close
Save changes
Launch demo modal
class
"modal-body"
class
"container-fluid"
class
"row"
class
"col-md-4"
.col-md-4
class
"col-md-4 ms-auto"
.col-md-4 .ms-auto
class
"row"
class
"col-md-3 ms-auto"
.col-md-3 .ms-auto
class
"col-md-2 ms-auto"
.col-md-2 .ms-auto
class
"row"
class
"col-md-6 ms-auto"
.col-md-6 .ms-auto
class
"row"
class
"col-sm-9"
Level 1: .col-sm-9
class
"row"
class
"col-8 col-sm-6"
Level 2: .col-8 .col-sm-6
class
"col-4 col-sm-6"
Level 2: .col-4 .col-sm-6
Varying modal content
Have a bunch of buttons that all trigger the same modal with slightly different contents? Use
event.relatedTarget
HTML
data-bs-*
attributes
to vary the contents of the modal depending on which button was clicked.
Below is a live demo followed by example HTML and JavaScript. For more information,
read the modal events docs
for details on
relatedTarget
Open modal for @mdo
Open modal for @fat
Open modal for @getbootstrap
New message
Recipient:
Message:
Close
Send message
button
type
"button"
class
"btn btn-primary"
data-bs-toggle
"modal"
data-bs-target
"#exampleModal"
data-bs-whatever
"@mdo"
Open modal for @mdo
button
button
type
"button"
class
"btn btn-primary"
data-bs-toggle
"modal"
data-bs-target
"#exampleModal"
data-bs-whatever
"@fat"
Open modal for @fat
button
button
type
"button"
class
"btn btn-primary"
data-bs-toggle
"modal"
data-bs-target
"#exampleModal"
data-bs-whatever
"@getbootstrap"
Open modal for @getbootstrap
button
class
"modal fade"
"exampleModal"
tabindex
"-1"
aria-labelledby
"exampleModalLabel"
aria-hidden
"true"
class
"modal-dialog"
class
"modal-content"
class
"modal-header"
class
"modal-title"
"exampleModalLabel"
New message
button
type
"button"
class
"btn-close"
data-bs-dismiss
"modal"
aria-label
"Close"
button
class
"modal-body"
form
class
"mb-3"
label
"recipient-name"
class
"col-form-label"
Recipient:
label
input
type
"text"
class
"form-control"
"recipient-name"
class
"mb-3"
label
"message-text"
class
"col-form-label"
Message:
label
textarea
class
"form-control"
"message-text"
textarea
form
class
"modal-footer"
button
type
"button"
class
"btn btn-secondary"
data-bs-dismiss
"modal"
Close
button
button
type
"button"
class
"btn btn-primary"
Send message
button
exampleModal
document
getElementById
'exampleModal'
exampleModal
addEventListener
'show.bs.modal'
function
event
// Button that triggered the modal
button
event
relatedTarget
// Extract info from data-bs-* attributes
recipient
button
getAttribute
'data-bs-whatever'
// If necessary, you could initiate an AJAX request here
// and then do the updating in a callback.
// Update the modal's content.
modalTitle
exampleModal
querySelector
'.modal-title'
modalBodyInput
exampleModal
querySelector
'.modal-body input'
modalTitle
textContent
'New message to '
recipient
modalBodyInput
value
recipient
Toggle between modals
Toggle between multiple modals with some clever placement of the
data-bs-target
data-bs-toggle
attributes. For example, you could toggle a password reset modal from within an already open sign in modal.
Please note multiple modals cannot be open at the same time
—this method simply toggles between two separate modals.
Modal 1
Show a second modal and hide this one with the button below.
Open second modal
Modal 2
Hide this modal and show the first with the button below.
Back to first
Open first modal
class
"modal fade"
"exampleModalToggle"
aria-hidden
"true"
aria-labelledby
"exampleModalToggleLabel"
tabindex
"-1"
class
"modal-dialog modal-dialog-centered"
class
"modal-content"
class
"modal-header"
class
"modal-title"
"exampleModalToggleLabel"
Modal 1
button
type
"button"
class
"btn-close"
data-bs-dismiss
"modal"
aria-label
"Close"
button
class
"modal-body"
Show a second modal and hide this one with the button below.
class
"modal-footer"
button
class
"btn btn-primary"
data-bs-target
"#exampleModalToggle2"
data-bs-toggle
"modal"
Open second modal
button
class
"modal fade"
"exampleModalToggle2"
aria-hidden
"true"
aria-labelledby
"exampleModalToggleLabel2"
tabindex
"-1"
class
"modal-dialog modal-dialog-centered"
class
"modal-content"
class
"modal-header"
class
"modal-title"
"exampleModalToggleLabel2"
Modal 2
button
type
"button"
class
"btn-close"
data-bs-dismiss
"modal"
aria-label
"Close"
button
class
"modal-body"
Hide this modal and show the first with the button below.
class
"modal-footer"
button
class
"btn btn-primary"
data-bs-target
"#exampleModalToggle"
data-bs-toggle
"modal"
Back to first
button
class
"btn btn-primary"
data-bs-toggle
"modal"
href
"#exampleModalToggle"
role
"button"
Open first modal
Change animation
$modal-fade-transform
variable determines the transform state of
.modal-dialog
before the modal fade-in animation, the
$modal-show-transform
variable determines the transform of
.modal-dialog
at the end of the modal fade-in animation.
If you want for example a zoom-in animation, you can set
$modal-fade-transform: scale(.8)
Remove animation
For modals that simply appear rather than fade in to view, remove the
.fade
class from your modal markup.
class
"modal"
tabindex
"-1"
aria-labelledby
"..."
aria-hidden
"true"
Dynamic heights
If the height of a modal changes while it is open, you should call
myModal.handleUpdate()
to readjust the modal’s position in case a scrollbar appears.
Accessibility
Be sure to add
aria-labelledby="..."
, referencing the modal title, to
.modal
. Additionally, you may give a description of your modal dialog with
aria-describedby
.modal
. Note that you don’t need to add
role="dialog"
since we already add it via JavaScript.
Embedding YouTube videos
Embedding YouTube videos in modals requires additional JavaScript not in Bootstrap to automatically stop playback and more.
See this helpful Stack Overflow post
for more information.
Optional sizes
Modals have three optional sizes, available via modifier classes to be placed on a
.modal-dialog
. These sizes kick in at certain breakpoints to avoid horizontal scrollbars on narrower viewports.
Size
Class
Modal max-width
Small
.modal-sm
300px
Default
None
500px
Large
.modal-lg
800px
Extra large
.modal-xl
1140px
Our default modal without modifier class constitutes the “medium” size modal.
Extra large modal
Large modal
Small modal
class
"modal-dialog modal-xl"
class
"modal-dialog modal-lg"
class
"modal-dialog modal-sm"
Extra large modal
Large modal
Small modal
Fullscreen Modal
Another override is the option to pop up a modal that covers the user viewport, available via modifier classes that are placed on a
.modal-dialog
Class
Availability
.modal-fullscreen
Always
.modal-fullscreen-sm-down
Below
576px
.modal-fullscreen-md-down
Below
768px
.modal-fullscreen-lg-down
Below
992px
.modal-fullscreen-xl-down
Below
1200px
.modal-fullscreen-xxl-down
Below
1400px
Full screen
Full screen below sm
Full screen below md
Full screen below lg
Full screen below xl
Full screen below xxl
<!-- Full screen modal -->
class
"modal-dialog modal-fullscreen-sm-down"
Full screen modal
Close
Full screen below sm
Close
Full screen below md
Close
Full screen below lg
Close
Full screen below xl
Close
Full screen below xxl
Close
Sass
Variables
$modal-inner-padding
$spacer
$modal-footer-margin-between
$modal-dialog-margin
$modal-dialog-margin-y-sm-up
$modal-title-line-height
$line-height-base
$modal-content-color
null
$modal-content-bg
$white
$modal-content-border-color
rgba
$black
$modal-content-border-width
$border-width
$modal-content-border-radius
$border-radius-lg
$modal-content-inner-border-radius
subtract
$modal-content-border-radius
$modal-content-border-width
$modal-content-box-shadow-xs
$box-shadow-sm
$modal-content-box-shadow-sm-up
$box-shadow
$modal-backdrop-bg
$black
$modal-backdrop-opacity
$modal-header-border-color
$border-color
$modal-footer-border-color
$modal-header-border-color
$modal-header-border-width
$modal-content-border-width
$modal-footer-border-width
$modal-header-border-width
$modal-header-padding-y
$modal-inner-padding
$modal-header-padding-x
$modal-inner-padding
$modal-header-padding
$modal-header-padding-y
$modal-header-padding-x
// Keep this for backwards compatibility
$modal-sm
$modal-md
$modal-lg
$modal-xl
1140
$modal-fade-transform
translate
$modal-show-transform
none
$modal-transition
transform
ease-out
$modal-scale-transform
scale
Loop
Responsive fullscreen modals
are generated via the
$breakpoints
map and a loop in
scss/_modal.scss
@each
$breakpoint
map-keys
$grid-breakpoints
$infix
breakpoint-infix
$breakpoint
$grid-breakpoints
$postfix
$infix
$infix
"-down"
@include
media-breakpoint-down
$breakpoint
.modal-fullscreen
$postfix
width
max-width
none
height
margin
.modal-content
height
border
@include
border-radius
.modal-header
@include
border-radius
.modal-body
overflow-y
auto
.modal-footer
@include
border-radius
Usage
The modal plugin toggles your hidden content on demand, via data attributes or JavaScript. It also overrides default scrolling behavior and generates a
.modal-backdrop
to provide a click area for dismissing shown modals when clicking outside the modal.
Via data attributes
Toggle
Activate a modal without writing JavaScript. Set
data-bs-toggle="modal"
on a controller element, like a button, along with a
data-bs-target="#foo"
href="#foo"
to target a specific modal to toggle.
button
type
"button"
data-bs-toggle
"modal"
data-bs-target
"#myModal"
Launch modal
button
Dismiss
Dismissal can be achieved with the
data
attribute on a button
within the modal
as demonstrated below:
button
type
"button"
class
"btn-close"
data-bs-dismiss
"modal"
aria-label
"Close"
button
or on a button
outside the modal
using the
data-bs-target
as demonstrated below:
button
type
"button"
class
"btn-close"
data-bs-dismiss
"modal"
data-bs-target
"#my-modal"
aria-label
"Close"
button
While both ways to dismiss a modal are supported, keep in mind that dismissing from outside a modal does not match
the WAI-ARIA modal dialog design pattern
. Do this at your own risk.
Via JavaScript
Create a modal with a single line of JavaScript:
myModal
Modal
document
getElementById
'myModal'
options
Options
Options can be passed via data attributes or JavaScript. For data attributes, append the option name to
data-bs-
, as in
data-bs-backdrop=""
Name
Type
Default
Description
backdrop
boolean or the string
'static'
true
Includes a modal-backdrop element. Alternatively, specify
static
for a backdrop which doesn't close the modal on click.
keyboard
boolean
true
Closes the modal when escape key is pressed
focus
boolean
true
Puts the focus on the modal when initialized.
Methods
Asynchronous methods and transitions
All API methods are
asynchronous
and start a
transition
. They return to the caller as soon as the transition is started but
before it ends
. In addition, a method call on a
transitioning component will be ignored
See our JavaScript documentation for more information
Passing options
Activates your content as a modal. Accepts an optional options
object
myModal
Modal
document
getElementById
'myModal'
keyboard
false
toggle
Manually toggles a modal.
Returns to the caller before the modal has actually been shown or hidden
(i.e. before the
shown.bs.modal
hidden.bs.modal
event occurs).
myModal
toggle
show
Manually opens a modal.
Returns to the caller before the modal has actually been shown
(i.e. before the
shown.bs.modal
event occurs).
myModal
show
Also, you can pass a DOM element as an argument that can be received in the modal events (as the
relatedTarget
property).
modalToggle
document
getElementById
'toggleMyModal'
// relatedTarget
myModal
show
modalToggle
hide
Manually hides a modal.
Returns to the caller before the modal has actually been hidden
(i.e. before the
hidden.bs.modal
event occurs).
myModal
hide
handleUpdate
Manually readjust the modal’s position if the height of a modal changes while it is open (i.e. in case a scrollbar appears).
myModal
handleUpdate
dispose
Destroys an element’s modal. (Removes stored data on the DOM element)
myModal
dispose
getInstance
Static
method which allows you to get the modal instance associated with a DOM element
myModalEl
document
getElementById
'myModal'
modal
Modal
getInstance
myModalEl
// Returns a Bootstrap modal instance
getOrCreateInstance
Static
method which allows you to get the modal instance associated with a DOM element, or create a new one in case it wasn’t initialized
myModalEl
document
querySelector
'#myModal'
modal
Modal
getOrCreateInstance
myModalEl
// Returns a Bootstrap modal instance
Events
<div class="modal">
Event type
Description
show.bs.modal
This event fires immediately when the
show
instance method is called. If caused by a click, the clicked element is available as the
relatedTarget
property of the event.
shown.bs.modal
This event is fired when the modal has been made visible to the user (will wait for CSS transitions to complete). If caused by a click, the clicked element is available as the
relatedTarget
property of the event.
hide.bs.modal
This event is fired immediately when the
hide
instance method has been called.
hidden.bs.modal
This event is fired when the modal has finished being hidden from the user (will wait for CSS transitions to complete).
hidePrevented.bs.modal
This event is fired when the modal is shown, its backdrop is
static
and a click outside the modal or an escape key press is performed with the keyboard option or
data-bs-keyboard
set to
false
myModalEl
document
getElementById
'myModal'
myModalEl
addEventListener
'hidden.bs.modal'
function
event
// do something...