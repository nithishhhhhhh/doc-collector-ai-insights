URL: https://getbootstrap.com/docs/4.6/layout/grid
==================================================

View on GitHub
Grid system
Use our powerful mobile-first flexbox grid to build layouts of all shapes and sizes thanks to a twelve column system, five default responsive tiers, Sass variables and mixins, and dozens of predefined classes.
How it works
flexbox
and is fully responsive. Below is an example and an in-depth look at how the grid comes together.
New to or unfamiliar with flexbox?
Read this CSS Tricks flexbox guide
for background, terminology, guidelines, and code snippets.
One of three columns
One of three columns
One of three columns
class
"container"
class
"row"
class
"col-sm"
One of three columns
class
"col-sm"
One of three columns
class
"col-sm"
One of three columns
The above example creates three equal-width columns on small, medium, large, and extra large devices using our predefined grid classes. Those columns are centered in the page with the parent
.container
Breaking it down, here’s how it works:
Containers provide a means to center and horizontally pad your site’s contents. Use
.container
for a responsive pixel width or
.container-fluid
width: 100%
across all viewport and device sizes.
Rows are wrappers for columns. Each column has horizontal
padding
(called a gutter) for controlling the space between them. This
padding
is then counteracted on the rows with negative margins. This way, all the content in your columns is visually aligned down the left side.
In a grid layout, content must be placed within columns and only columns may be immediate children of rows.
Thanks to flexbox, grid columns without a specified
width
will automatically layout as equal width columns. For example, four instances of
.col-sm
will each automatically be 25% wide from the small breakpoint and up. See the
auto-layout columns
section for more examples.
Column classes indicate the number of columns you’d like to use out of the possible 12 per row. So, if you want three equal-width columns across, you can use
.col-4
Column
width
s are set in percentages, so they’re always fluid and sized relative to their parent element.
Columns have horizontal
padding
to create the gutters between individual columns, however, you can remove the
margin
from rows and
padding
from columns with
.no-gutters
on the
.row
To make the grid responsive, there are five grid breakpoints, one for each
responsive breakpoint
: all breakpoints (extra small), small, medium, large, and extra large.
Grid breakpoints are based on minimum width media queries, meaning
they apply to that one breakpoint and all those above it
(e.g.,
.col-sm-4
applies to small, medium, large, and extra large devices, but not the first
breakpoint).
You can use predefined grid classes (like
.col-4
) or
Sass mixins
for more semantic markup.
Be aware of the limitations and
bugs around flexbox
, like the
inability to use some HTML elements as flex containers
Grid options
While Bootstrap uses
s or
s for defining most sizes,
s are used for grid breakpoints and container widths. This is because the viewport width is in pixels and does not change with the
font size
See how aspects of the Bootstrap grid system work across multiple devices with a handy table.
Extra small
<576px
Small
≥576px
Medium
≥768px
Large
≥992px
Extra large
≥1200px
Max container width
None (auto)
540px
720px
960px
1140px
Class prefix
.col-
.col-sm-
.col-md-
.col-lg-
.col-xl-
# of columns
Gutter width
30px (15px on each side of a column)
Nestable
Column ordering
Auto-layout columns
Utilize breakpoint-specific column classes for easy column sizing without an explicit numbered class like
.col-sm-6
Equal-width
For example, here are two grid layouts that apply to every device and viewport, from
. Add any number of unit-less classes for each breakpoint you need and every column will be the same width.
1 of 2
2 of 2
1 of 3
2 of 3
3 of 3
class
"container"
class
"row"
class
"col"
1 of 2
class
"col"
2 of 2
class
"row"
class
"col"
1 of 3
class
"col"
2 of 3
class
"col"
3 of 3
Equal-width multi-line
Create equal-width columns that span multiple lines by inserting a
.w-100
where you want the columns to break to a new line. Make the breaks responsive by mixing
.w-100
with some
responsive display utilities
There was a
Safari flexbox bug
that prevented this from working without an explicit
flex-basis
border
. There are workarounds for older browser versions, but they shouldn’t be necessary if your target browsers don’t fall into the buggy versions.
class
"container"
class
"row"
class
"col"
class
"col"
class
"w-100"
class
"col"
class
"col"
Setting one column width
Auto-layout for flexbox grid columns also means you can set the width of one column and have the sibling columns automatically resize around it. You may use predefined grid classes (as shown below), grid mixins, or inline widths. Note that the other columns will resize no matter the width of the center column.
1 of 3
2 of 3 (wider)
3 of 3
1 of 3
2 of 3 (wider)
3 of 3
class
"container"
class
"row"
class
"col"
1 of 3
class
"col-6"
2 of 3 (wider)
class
"col"
3 of 3
class
"row"
class
"col"
1 of 3
class
"col-5"
2 of 3 (wider)
class
"col"
3 of 3
Variable width content
col-{breakpoint}-auto
classes to size columns based on the natural width of their content.
1 of 3
Variable width content
3 of 3
1 of 3
Variable width content
3 of 3
class
"container"
class
"row justify-content-md-center"
class
"col col-lg-2"
1 of 3
class
"col-md-auto"
Variable width content
class
"col col-lg-2"
3 of 3
class
"row"
class
"col"
1 of 3
class
"col-md-auto"
Variable width content
class
"col col-lg-2"
3 of 3
Responsive classes
All breakpoints
For grids that are the same from the smallest of devices to the largest, use the
.col
.col-*
classes. Specify a numbered class when you need a particularly sized column; otherwise, feel free to stick to
.col
col-8
col-4
class
"container"
class
"row"
class
"col"
class
"col"
class
"col"
class
"col"
class
"row"
class
"col-8"
col-8
class
"col-4"
col-4
Stacked to horizontal
Using a single set of
.col-sm-*
classes, you can create a basic grid system that starts out stacked and becomes horizontal at the small breakpoint (
col-sm-8
col-sm-4
col-sm
col-sm
col-sm
class
"container"
class
"row"
class
"col-sm-8"
col-sm-8
class
"col-sm-4"
col-sm-4
class
"row"
class
"col-sm"
col-sm
class
"col-sm"
col-sm
class
"col-sm"
col-sm
Mix and match
Don’t want your columns to simply stack in some grid tiers? Use a combination of different classes for each tier as needed. See the example below for a better idea of how it all works.
.col-md-8
.col-6 .col-md-4
.col-6 .col-md-4
.col-6 .col-md-4
.col-6 .col-md-4
.col-6
.col-6
class
"container"
<!-- Stack the columns on mobile by making one full-width and the other half-width -->
class
"row"
class
"col-md-8"
.col-md-8
class
"col-6 col-md-4"
.col-6 .col-md-4
<!-- Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop -->
class
"row"
class
"col-6 col-md-4"
.col-6 .col-md-4
class
"col-6 col-md-4"
.col-6 .col-md-4
class
"col-6 col-md-4"
.col-6 .col-md-4
<!-- Columns are always 50% wide, on mobile and desktop -->
class
"row"
class
"col-6"
.col-6
class
"col-6"
.col-6
Gutters
Gutters can be responsively adjusted by breakpoint-specific padding and negative margin utility classes. To change the gutters in a given row, pair a negative margin utility on the
.row
and matching padding utilities on the
.col
s. The
.container
.container-fluid
parent may need to be adjusted too to avoid unwanted overflow, using again matching padding utility.
Here’s an example of customizing the Bootstrap grid at the large (
) breakpoint and above. We’ve increased the
.col
padding with
.px-lg-5
, counteracted that with
.mx-lg-n5
on the parent
.row
and then adjusted the
.container
wrapper with
.px-lg-5
Custom column padding
Custom column padding
class
"container px-lg-5"
class
"row mx-lg-n5"
class
"col py-3 px-lg-5 border bg-light"
Custom column padding
class
"col py-3 px-lg-5 border bg-light"
Custom column padding
Row columns
Use the responsive
.row-cols-*
classes to quickly set the number of columns that best render your content and layout. Whereas normal
.col-*
classes apply to the individual columns (e.g.,
.col-md-4
), the row columns classes are set on the parent
.row
as a shortcut.
Use these row columns classes to quickly create basic grid layouts or to control your card layouts.
Column
Column
Column
Column
class
"container"
class
"row row-cols-2"
class
"col"
Column
class
"col"
Column
class
"col"
Column
class
"col"
Column
Column
Column
Column
Column
class
"container"
class
"row row-cols-3"
class
"col"
Column
class
"col"
Column
class
"col"
Column
class
"col"
Column
Column
Column
Column
Column
class
"container"
class
"row row-cols-4"
class
"col"
Column
class
"col"
Column
class
"col"
Column
class
"col"
Column
Column
Column
Column
Column
class
"container"
class
"row row-cols-4"
class
"col"
Column
class
"col"
Column
class
"col-6"
Column
class
"col"
Column
Column
Column
Column
Column
class
"container"
class
"row row-cols-1 row-cols-sm-2 row-cols-md-4"
class
"col"
Column
class
"col"
Column
class
"col"
Column
class
"col"
Column
You can also use the accompanying Sass mixin,
row-cols()
.element
// Three columns to start
@include
row-cols
// Five columns from medium breakpoint up
@include
media-breakpoint-up
@include
row-cols
Alignment
Use flexbox alignment utilities to vertically and horizontally align columns.
Internet Explorer 10-11 do not support vertical alignment of flex items when the flex container has a
min-height
as shown below.
See Flexbugs #3 for more details.
Vertical alignment
One of three columns
One of three columns
One of three columns
One of three columns
One of three columns
One of three columns
One of three columns
One of three columns
One of three columns
class
"container"
class
"row align-items-start"
class
"col"
One of three columns
class
"col"
One of three columns
class
"col"
One of three columns
class
"row align-items-center"
class
"col"
One of three columns
class
"col"
One of three columns
class
"col"
One of three columns
class
"row align-items-end"
class
"col"
One of three columns
class
"col"
One of three columns
class
"col"
One of three columns
One of three columns
One of three columns
One of three columns
class
"container"
class
"row"
class
"col align-self-start"
One of three columns
class
"col align-self-center"
One of three columns
class
"col align-self-end"
One of three columns
Horizontal alignment
One of two columns
One of two columns
One of two columns
One of two columns
One of two columns
One of two columns
One of two columns
One of two columns
One of two columns
One of two columns
class
"container"
class
"row justify-content-start"
class
"col-4"
One of two columns
class
"col-4"
One of two columns
class
"row justify-content-center"
class
"col-4"
One of two columns
class
"col-4"
One of two columns
class
"row justify-content-end"
class
"col-4"
One of two columns
class
"col-4"
One of two columns
class
"row justify-content-around"
class
"col-4"
One of two columns
class
"col-4"
One of two columns
class
"row justify-content-between"
class
"col-4"
One of two columns
class
"col-4"
One of two columns
No gutters
The gutters between columns in our predefined grid classes can be removed with
.no-gutters
. This removes the negative
margin
s from
.row
and the horizontal
padding
from all immediate children columns.
Here’s the source code for creating these styles. Note that column overrides are scoped to only the first children columns and are targeted via
attribute selector
. While this generates a more specific selector, column padding can still be further customized with
spacing utilities
Need an edge-to-edge design?
Drop the parent
.container
.container-fluid
.no-gutters
margin-right
margin-left
.col
class
"col-"
padding-right
padding-left
In practice, here’s how it looks. Note you can continue to use this with all other predefined grid classes (including column widths, responsive tiers, reorders, and more).
.col-sm-6 .col-md-8
.col-6 .col-md-4
class
"row no-gutters"
class
"col-sm-6 col-md-8"
.col-sm-6 .col-md-8
class
"col-6 col-md-4"
.col-6 .col-md-4
Column wrapping
If more than 12 columns are placed within a single row, each group of extra columns will, as one unit, wrap onto a new line.
.col-9
.col-4
Since 9 + 4 = 13 > 12, this 4-column-wide div gets wrapped onto a new line as one contiguous unit.
.col-6
Subsequent columns continue along the new line.
class
"container"
class
"row"
class
"col-9"
.col-9
class
"col-4"
.col-4
Since 9 + 4 = 13
&gt;
12, this 4-column-wide div gets wrapped onto a new line as one contiguous unit.
class
"col-6"
.col-6
Subsequent columns continue along the new line.
Column breaks
Breaking columns to a new line in flexbox requires a small hack: add an element with
width: 100%
wherever you want to wrap your columns to a new line. Normally this is accomplished with multiple
.row
s, but not every implementation method can account for this.
.col-6 .col-sm-3
.col-6 .col-sm-3
.col-6 .col-sm-3
.col-6 .col-sm-3
class
"container"
class
"row"
class
"col-6 col-sm-3"
.col-6 .col-sm-3
class
"col-6 col-sm-3"
.col-6 .col-sm-3
<!-- Force next columns to break to new line -->
class
"w-100"
class
"col-6 col-sm-3"
.col-6 .col-sm-3
class
"col-6 col-sm-3"
.col-6 .col-sm-3
You may also apply this break at specific breakpoints with our
responsive display utilities
.col-6 .col-sm-4
.col-6 .col-sm-4
.col-6 .col-sm-4
.col-6 .col-sm-4
class
"container"
class
"row"
class
"col-6 col-sm-4"
.col-6 .col-sm-4
class
"col-6 col-sm-4"
.col-6 .col-sm-4
<!-- Force next columns to break to new line at md breakpoint and up -->
class
"w-100 d-none d-md-block"
class
"col-6 col-sm-4"
.col-6 .col-sm-4
class
"col-6 col-sm-4"
.col-6 .col-sm-4
Reordering
Order classes
.order-
classes for controlling the
visual order
of your content. These classes are responsive, so you can set the
order
by breakpoint (e.g.,
.order-1.order-md-2
). Includes support for
through
across all five grid tiers.
First in DOM, no order applied
Second in DOM, with a larger order
Third in DOM, with an order of 1
class
"container"
class
"row"
class
"col"
First in DOM, no order applied
class
"col order-12"
Second in DOM, with a larger order
class
"col order-1"
Third in DOM, with an order of 1
There are also responsive
.order-first
.order-last
classes that change the
order
of an element by applying
order: -1
order: 13
order: $columns + 1
), respectively. These classes can also be intermixed with the numbered
.order-*
classes as needed.
First in DOM, ordered last
Second in DOM, unordered
Third in DOM, ordered first
class
"container"
class
"row"
class
"col order-last"
First in DOM, ordered last
class
"col"
Second in DOM, unordered
class
"col order-first"
Third in DOM, ordered first
Offsetting columns
You can offset grid columns in two ways: our responsive
.offset-
grid classes and our
margin utilities
. Grid classes are sized to match columns while margins are more useful for quick layouts where the width of the offset is variable.
Offset classes
Move columns to the right using
.offset-md-*
classes. These classes increase the left margin of a column by
columns. For example,
.offset-md-4
moves
.col-md-4
over four columns.
.col-md-4
.col-md-4 .offset-md-4
.col-md-3 .offset-md-3
.col-md-3 .offset-md-3
.col-md-6 .offset-md-3
class
"container"
class
"row"
class
"col-md-4"
.col-md-4
class
"col-md-4 offset-md-4"
.col-md-4 .offset-md-4
class
"row"
class
"col-md-3 offset-md-3"
.col-md-3 .offset-md-3
class
"col-md-3 offset-md-3"
.col-md-3 .offset-md-3
class
"row"
class
"col-md-6 offset-md-3"
.col-md-6 .offset-md-3
In addition to column clearing at responsive breakpoints, you may need to reset offsets. See this in action in
the grid example
.col-sm-5 .col-md-6
.col-sm-5 .offset-sm-2 .col-md-6 .offset-md-0
.col-sm-6 .col-md-5 .col-lg-6
.col-sm-6 .col-md-5 .offset-md-2 .col-lg-6 .offset-lg-0
class
"container"
class
"row"
class
"col-sm-5 col-md-6"
.col-sm-5 .col-md-6
class
"col-sm-5 offset-sm-2 col-md-6 offset-md-0"
.col-sm-5 .offset-sm-2 .col-md-6 .offset-md-0
class
"row"
class
"col-sm-6 col-md-5 col-lg-6"
.col-sm-6 .col-md-5 .col-lg-6
class
"col-sm-6 col-md-5 offset-md-2 col-lg-6 offset-lg-0"
.col-sm-6 .col-md-5 .offset-md-2 .col-lg-6 .offset-lg-0
Margin utilities
With the move to flexbox in v4, you can use margin utilities like
.mr-auto
to force sibling columns away from one another.
.col-md-4
.col-md-4 .ml-auto
.col-md-3 .ml-md-auto
.col-md-3 .ml-md-auto
.col-auto .mr-auto
.col-auto
class
"container"
class
"row"
class
"col-md-4"
.col-md-4
class
"col-md-4 ml-auto"
.col-md-4 .ml-auto
class
"row"
class
"col-md-3 ml-md-auto"
.col-md-3 .ml-md-auto
class
"col-md-3 ml-md-auto"
.col-md-3 .ml-md-auto
class
"row"
class
"col-auto mr-auto"
.col-auto .mr-auto
class
"col-auto"
.col-auto
Nesting
To nest your content with the default grid, add a new
.row
and set of
.col-sm-*
columns within an existing
.col-sm-*
column. Nested rows should include a set of columns that add up to 12 or fewer (it is not required that you use all 12 available columns).
Level 1: .col-sm-9
Level 2: .col-8 .col-sm-6
Level 2: .col-4 .col-sm-6
class
"container"
class
"row"
class
"col-sm-9"
Level 1: .col-sm-9
class
"row"
class
"col-8 col-sm-6"
Level 2: .col-8 .col-sm-6
class
"col-4 col-sm-6"
Level 2: .col-4 .col-sm-6
Sass mixins
When using Bootstrap’s source Sass files, you have the option of using Sass variables and mixins to create custom, semantic, and responsive page layouts. Our predefined grid classes use these same variables and mixins to provide a whole suite of ready-to-use classes for fast responsive layouts.
Variables
Variables and maps determine the number of columns, the gutter width, and the media query point at which to begin floating columns. We use these to generate the predefined grid classes documented above, as well as for the custom mixins listed below.
$grid-columns
$grid-gutter-width
$grid-breakpoints
// Extra small screen / phone
// Small screen / phone
// Medium screen / tablet
// Large screen / desktop
// Extra large screen / wide desktop
1200
$container-max-widths
1140
Mixins
Mixins are used in conjunction with the grid variables to generate semantic CSS for individual grid columns.
// Creates a wrapper for a series of columns
@include
make-row
// Make the element grid-ready (applying everything but the width)
@include
make-col-ready
@include
make-col
$size
$columns
$grid-columns
// Get fancy by offsetting, or changing the sort order
@include
make-col-offset
$size
$columns
$grid-columns
Example usage
You can modify the variables to your own custom values, or just use the mixins with their default values. Here’s an example of using the default settings to create a two-column layout with a gap between.
.example-container
@include
make-container
// Make sure to define this width after the mixin to override
// `width: 100%` generated by `make-container()`
width
.example-row
@include
make-row
.example-content-main
@include
make-col-ready
@include
media-breakpoint-up
@include
make-col
@include
media-breakpoint-up
@include
make-col
.example-content-secondary
@include
make-col-ready
@include
media-breakpoint-up
@include
make-col
@include
media-breakpoint-up
@include
make-col
Main content
Secondary content
class
"example-container"
class
"example-row"
class
"example-content-main"
Main content
class
"example-content-secondary"
Secondary content
Customizing the grid
Using our built-in grid Sass variables and maps, it’s possible to completely customize the predefined grid classes. Change the number of tiers, the media query dimensions, and the container widths—then recompile.
Columns and gutters
The number of grid columns can be modified via Sass variables.
$grid-columns
is used to generate the widths (in percent) of each individual column while
$grid-gutter-width
sets the width for the column gutters.
$grid-columns
!default
$grid-gutter-width
!default
Grid tiers
Moving beyond the columns themselves, you may also customize the number of grid tiers. If you wanted just four grid tiers, you’d update the
$grid-breakpoints
$container-max-widths
to something like this:
$grid-breakpoints
1024
$container-max-widths
When making any changes to the Sass variables or maps, you’ll need to save your changes and recompile. Doing so will output a brand new set of predefined grid classes for column widths, offsets, and ordering. Responsive visibility utilities will also be updated to use the custom breakpoints. Make sure to set grid values in
(not
, or