URL: https://getbootstrap.com/docs/4.6/components/forms
==================================================

View on GitHub
Forms
Examples and usage guidelines for form control styles, layout options, and custom components for creating a wide variety of forms.
Overview
our Rebooted form styles
with classes. Use these classes to opt into their customized displays for a more consistent rendering across browsers and devices.
Be sure to use an appropriate
type
attribute on all inputs (e.g.,
email
for email address or
number
for numerical information) to take advantage of newer input controls like email verification, number selection, and more.
Here’s a quick example to demonstrate Bootstrap’s form styles. Keep reading for documentation on required classes, form layout, and more.
Email address
We'll never share your email with anyone else.
Password
Check me out
Submit
form
class
"form-group"
label
"exampleInputEmail1"
Email address
label
input
type
"email"
class
"form-control"
"exampleInputEmail1"
aria-describedby
"emailHelp"
small
"emailHelp"
class
"form-text text-muted"
We'll never share your email with anyone else.
small
class
"form-group"
label
"exampleInputPassword1"
Password
label
input
type
"password"
class
"form-control"
"exampleInputPassword1"
class
"form-group form-check"
input
type
"checkbox"
class
"form-check-input"
"exampleCheck1"
label
class
"form-check-label"
"exampleCheck1"
Check me out
label
button
type
"submit"
class
"btn btn-primary"
Submit
button
form
Form controls
Textual form controls—like
<input>
<select>
s, and
<textarea>
s—are styled with the
.form-control
class. Included are styles for general appearance, focus state, sizing, and more.
Be sure to explore our
custom forms
to further style
<select>
Email address
Example select
Example multiple select
Example textarea
form
class
"form-group"
label
"exampleFormControlInput1"
Email address
label
input
type
"email"
class
"form-control"
"exampleFormControlInput1"
placeholder
"name@example.com"
class
"form-group"
label
"exampleFormControlSelect1"
Example select
label
select
class
"form-control"
"exampleFormControlSelect1"
option
option
option
option
option
option
option
option
option
option
select
class
"form-group"
label
"exampleFormControlSelect2"
Example multiple select
label
select
multiple
class
"form-control"
"exampleFormControlSelect2"
option
option
option
option
option
option
option
option
option
option
select
class
"form-group"
label
"exampleFormControlTextarea1"
Example textarea
label
textarea
class
"form-control"
"exampleFormControlTextarea1"
rows
textarea
form
For file inputs, swap the
.form-control
.form-control-file
Example file input
form
class
"form-group"
label
"exampleFormControlFile1"
Example file input
label
input
type
"file"
class
"form-control-file"
"exampleFormControlFile1"
form
Sizing
Set heights using classes like
.form-control-lg
.form-control-sm
input
class
"form-control form-control-lg"
type
"text"
placeholder
".form-control-lg"
input
class
"form-control"
type
"text"
placeholder
"Default input"
input
class
"form-control form-control-sm"
type
"text"
placeholder
".form-control-sm"
Large select
Default select
Small select
select
class
"form-control form-control-lg"
option
Large select
option
select
select
class
"form-control"
option
Default select
option
select
select
class
"form-control form-control-sm"
option
Small select
option
select
Readonly
Add the
readonly
boolean attribute on an input to prevent modification of the input’s value. Read-only inputs appear lighter (just like disabled inputs), but retain the standard cursor.
input
class
"form-control"
type
"text"
placeholder
"Readonly input here..."
readonly
Readonly plain text
If you want to have
<input readonly>
elements in your form styled as plain text, use the
.form-control-plaintext
class to remove the default form field styling and preserve the correct margin and padding.
Email
Password
form
class
"form-group row"
label
"staticEmail"
class
"col-sm-2 col-form-label"
Email
label
class
"col-sm-10"
input
type
"text"
readonly
class
"form-control-plaintext"
"staticEmail"
value
"email@example.com"
class
"form-group row"
label
"inputPassword"
class
"col-sm-2 col-form-label"
Password
label
class
"col-sm-10"
input
type
"password"
class
"form-control"
"inputPassword"
form
Email
Password
Confirm identity
form
class
"form-inline"
class
"form-group mb-2"
label
"staticEmail2"
class
"sr-only"
Email
label
input
type
"text"
readonly
class
"form-control-plaintext"
"staticEmail2"
value
"email@example.com"
class
"form-group mx-sm-3 mb-2"
label
"inputPassword2"
class
"sr-only"
Password
label
input
type
"password"
class
"form-control"
"inputPassword2"
placeholder
"Password"
button
type
"submit"
class
"btn btn-primary mb-2"
Confirm identity
button
form
Range Inputs
Set horizontally scrollable range inputs using
.form-control-range
Example Range input
form
class
"form-group"
label
"formControlRange"
Example Range input
label
input
type
"range"
class
"form-control-range"
"formControlRange"
form
Checkboxes and radios
Default checkboxes and radios are improved upon with the help of
.form-check
a single class for both input types that improves the layout and behavior of their HTML elements
. Checkboxes are for selecting one or several options in a list, while radios are for selecting one option from many.
Disabled checkboxes and radios are supported. The
disabled
attribute will apply a lighter color to help indicate the input’s state.
Checkboxes and radio buttons support HTML-based form validation and provide concise, accessible labels. As such, our
<input>
s and
<label>
s are sibling elements as opposed to an
<input>
within a
<label>
. This is slightly more verbose as you must specify
attributes to relate the
<input>
<label>
Default (stacked)
By default, any number of checkboxes and radios that are immediate sibling will be vertically stacked and appropriately spaced with
.form-check
Default checkbox
Disabled checkbox
class
"form-check"
input
class
"form-check-input"
type
"checkbox"
value
"defaultCheck1"
label
class
"form-check-label"
"defaultCheck1"
Default checkbox
label
class
"form-check"
input
class
"form-check-input"
type
"checkbox"
value
"defaultCheck2"
disabled
label
class
"form-check-label"
"defaultCheck2"
Disabled checkbox
label
Default radio
Second default radio
Disabled radio
class
"form-check"
input
class
"form-check-input"
type
"radio"
name
"exampleRadios"
"exampleRadios1"
value
"option1"
checked
label
class
"form-check-label"
"exampleRadios1"
Default radio
label
class
"form-check"
input
class
"form-check-input"
type
"radio"
name
"exampleRadios"
"exampleRadios2"
value
"option2"
label
class
"form-check-label"
"exampleRadios2"
Second default radio
label
class
"form-check"
input
class
"form-check-input"
type
"radio"
name
"exampleRadios"
"exampleRadios3"
value
"option3"
disabled
label
class
"form-check-label"
"exampleRadios3"
Disabled radio
label
Inline
Group checkboxes or radios on the same horizontal row by adding
.form-check-inline
to any
.form-check
3 (disabled)
class
"form-check form-check-inline"
input
class
"form-check-input"
type
"checkbox"
"inlineCheckbox1"
value
"option1"
label
class
"form-check-label"
"inlineCheckbox1"
label
class
"form-check form-check-inline"
input
class
"form-check-input"
type
"checkbox"
"inlineCheckbox2"
value
"option2"
label
class
"form-check-label"
"inlineCheckbox2"
label
class
"form-check form-check-inline"
input
class
"form-check-input"
type
"checkbox"
"inlineCheckbox3"
value
"option3"
disabled
label
class
"form-check-label"
"inlineCheckbox3"
3 (disabled)
label
3 (disabled)
class
"form-check form-check-inline"
input
class
"form-check-input"
type
"radio"
name
"inlineRadioOptions"
"inlineRadio1"
value
"option1"
label
class
"form-check-label"
"inlineRadio1"
label
class
"form-check form-check-inline"
input
class
"form-check-input"
type
"radio"
name
"inlineRadioOptions"
"inlineRadio2"
value
"option2"
label
class
"form-check-label"
"inlineRadio2"
label
class
"form-check form-check-inline"
input
class
"form-check-input"
type
"radio"
name
"inlineRadioOptions"
"inlineRadio3"
value
"option3"
disabled
label
class
"form-check-label"
"inlineRadio3"
3 (disabled)
label
Without labels
.position-static
to inputs within
.form-check
that don’t have any label text. Remember to still provide some form of accessible name for assistive technologies (for instance, using
aria-label
class
"form-check"
input
class
"form-check-input position-static"
type
"checkbox"
"blankCheckbox"
value
"option1"
aria-label
"..."
class
"form-check"
input
class
"form-check-input position-static"
type
"radio"
name
"blankRadio"
"blankRadio1"
value
"option1"
aria-label
"..."
Layout
Since Bootstrap applies
display: block
width: 100%
to almost all our form controls, forms will by default stack vertically. Additional classes can be used to vary this layout on a per-form basis.
Form groups
.form-group
class is the easiest way to add some structure to forms. It provides a flexible class that encourages proper grouping of labels, controls, optional help text, and form validation messaging. By default it only applies
margin-bottom
, but it picks up additional styles in
.form-inline
as needed. Use it with
<fieldset>
<div>
s, or nearly any other element.
Example label
Another label
form
class
"form-group"
label
"formGroupExampleInput"
Example label
label
input
type
"text"
class
"form-control"
"formGroupExampleInput"
placeholder
"Example input placeholder"
class
"form-group"
label
"formGroupExampleInput2"
Another label
label
input
type
"text"
class
"form-control"
"formGroupExampleInput2"
placeholder
"Another input placeholder"
form
Form grid
More complex forms can be built using our grid classes. Use these for form layouts that require multiple columns, varied widths, and additional alignment options.
form
class
"row"
class
"col"
input
type
"text"
class
"form-control"
placeholder
"First name"
class
"col"
input
type
"text"
class
"form-control"
placeholder
"Last name"
form
Form row
You may also swap
.row
.form-row
, a variation of our standard grid row that overrides the default column gutters for tighter and more compact layouts.
form
class
"form-row"
class
"col"
input
type
"text"
class
"form-control"
placeholder
"First name"
class
"col"
input
type
"text"
class
"form-control"
placeholder
"Last name"
form
More complex layouts can also be created with the grid system.
Email
Password
Address
Address 2
City
State
Choose...
Check me out
Sign in
form
class
"form-row"
class
"form-group col-md-6"
label
"inputEmail4"
Email
label
input
type
"email"
class
"form-control"
"inputEmail4"
class
"form-group col-md-6"
label
"inputPassword4"
Password
label
input
type
"password"
class
"form-control"
"inputPassword4"
class
"form-group"
label
"inputAddress"
Address
label
input
type
"text"
class
"form-control"
"inputAddress"
placeholder
"1234 Main St"
class
"form-group"
label
"inputAddress2"
Address 2
label
input
type
"text"
class
"form-control"
"inputAddress2"
placeholder
"Apartment, studio, or floor"
class
"form-row"
class
"form-group col-md-6"
label
"inputCity"
City
label
input
type
"text"
class
"form-control"
"inputCity"
class
"form-group col-md-4"
label
"inputState"
State
label
select
"inputState"
class
"form-control"
option
selected
Choose...
option
option
option
select
class
"form-group col-md-2"
label
"inputZip"
label
input
type
"text"
class
"form-control"
"inputZip"
class
"form-group"
class
"form-check"
input
class
"form-check-input"
type
"checkbox"
"gridCheck"
label
class
"form-check-label"
"gridCheck"
Check me out
label
button
type
"submit"
class
"btn btn-primary"
Sign in
button
form
Horizontal form
Create horizontal forms with the grid by adding the
.row
class to form groups and using the
.col-*-*
classes to specify the width of your labels and controls. Be sure to add
.col-form-label
to your
<label>
s as well so they’re vertically centered with their associated form controls.
At times, you maybe need to use margin or padding utilities to create that perfect alignment you need. For example, we’ve removed the
padding-top
on our stacked radio inputs label to better align the text baseline.
Email
Password
Radios
First radio
Second radio
Third disabled radio
Example checkbox
Sign in
form
class
"form-group row"
label
"inputEmail3"
class
"col-sm-2 col-form-label"
Email
label
class
"col-sm-10"
input
type
"email"
class
"form-control"
"inputEmail3"
class
"form-group row"
label
"inputPassword3"
class
"col-sm-2 col-form-label"
Password
label
class
"col-sm-10"
input
type
"password"
class
"form-control"
"inputPassword3"
fieldset
class
"form-group row"
legend
class
"col-form-label col-sm-2 float-sm-left pt-0"
Radios
legend
class
"col-sm-10"
class
"form-check"
input
class
"form-check-input"
type
"radio"
name
"gridRadios"
"gridRadios1"
value
"option1"
checked
label
class
"form-check-label"
"gridRadios1"
First radio
label
class
"form-check"
input
class
"form-check-input"
type
"radio"
name
"gridRadios"
"gridRadios2"
value
"option2"
label
class
"form-check-label"
"gridRadios2"
Second radio
label
class
"form-check disabled"
input
class
"form-check-input"
type
"radio"
name
"gridRadios"
"gridRadios3"
value
"option3"
disabled
label
class
"form-check-label"
"gridRadios3"
Third disabled radio
label
fieldset
class
"form-group row"
class
"col-sm-10 offset-sm-2"
class
"form-check"
input
class
"form-check-input"
type
"checkbox"
"gridCheck1"
label
class
"form-check-label"
"gridCheck1"
Example checkbox
label
class
"form-group row"
class
"col-sm-10"
button
type
"submit"
class
"btn btn-primary"
Sign in
button
form
Horizontal form label sizing
Be sure to use
.col-form-label-sm
.col-form-label-lg
to your
<label>
s or
<legend>
s to correctly follow the size of
.form-control-lg
.form-control-sm
Email
Email
Email
form
class
"form-group row"
label
"colFormLabelSm"
class
"col-sm-2 col-form-label col-form-label-sm"
Email
label
class
"col-sm-10"
input
type
"email"
class
"form-control form-control-sm"
"colFormLabelSm"
placeholder
"col-form-label-sm"
class
"form-group row"
label
"colFormLabel"
class
"col-sm-2 col-form-label"
Email
label
class
"col-sm-10"
input
type
"email"
class
"form-control"
"colFormLabel"
placeholder
"col-form-label"
class
"form-group row"
label
"colFormLabelLg"
class
"col-sm-2 col-form-label col-form-label-lg"
Email
label
class
"col-sm-10"
input
type
"email"
class
"form-control form-control-lg"
"colFormLabelLg"
placeholder
"col-form-label-lg"
form
Column sizing
As shown in the previous examples, our grid system allows you to place any number of
.col
s within a
.row
.form-row
. They’ll split the available width equally between them. You may also pick a subset of your columns to take up more or less space, while the remaining
.col
s equally split the rest, with specific column classes like
.col-7
form
class
"form-row"
class
"col-7"
input
type
"text"
class
"form-control"
placeholder
"City"
class
"col"
input
type
"text"
class
"form-control"
placeholder
"State"
class
"col"
input
type
"text"
class
"form-control"
placeholder
"Zip"
form
Auto-sizing
The example below uses a flexbox utility to vertically center the contents and changes
.col
.col-auto
so that your columns only take up as much space as needed. Put another way, the column sizes itself based on the contents.
Name
Username
Remember me
Submit
form
class
"form-row align-items-center"
class
"col-auto"
label
class
"sr-only"
"inlineFormInput"
Name
label
input
type
"text"
class
"form-control mb-2"
"inlineFormInput"
placeholder
"Jane Doe"
class
"col-auto"
label
class
"sr-only"
"inlineFormInputGroup"
Username
label
class
"input-group mb-2"
class
"input-group-prepend"
class
"input-group-text"
input
type
"text"
class
"form-control"
"inlineFormInputGroup"
placeholder
"Username"
class
"col-auto"
class
"form-check mb-2"
input
class
"form-check-input"
type
"checkbox"
"autoSizingCheck"
label
class
"form-check-label"
"autoSizingCheck"
Remember me
label
class
"col-auto"
button
type
"submit"
class
"btn btn-primary mb-2"
Submit
button
form
You can then remix that once again with size-specific column classes.
Name
Username
Remember me
Submit
form
class
"form-row align-items-center"
class
"col-sm-3 my-1"
label
class
"sr-only"
"inlineFormInputName"
Name
label
input
type
"text"
class
"form-control"
"inlineFormInputName"
placeholder
"Jane Doe"
class
"col-sm-3 my-1"
label
class
"sr-only"
"inlineFormInputGroupUsername"
Username
label
class
"input-group"
class
"input-group-prepend"
class
"input-group-text"
input
type
"text"
class
"form-control"
"inlineFormInputGroupUsername"
placeholder
"Username"
class
"col-auto my-1"
class
"form-check"
input
class
"form-check-input"
type
"checkbox"
"autoSizingCheck2"
label
class
"form-check-label"
"autoSizingCheck2"
Remember me
label
class
"col-auto my-1"
button
type
"submit"
class
"btn btn-primary"
Submit
button
form
And of course
custom form controls
are supported.
Preference
Choose...
Three
Remember my preference
Submit
form
class
"form-row align-items-center"
class
"col-auto my-1"
label
class
"mr-sm-2 sr-only"
"inlineFormCustomSelect"
Preference
label
select
class
"custom-select mr-sm-2"
"inlineFormCustomSelect"
option
selected
Choose...
option
option
value
option
option
value
option
option
value
Three
option
select
class
"col-auto my-1"
class
"custom-control custom-checkbox mr-sm-2"
input
type
"checkbox"
class
"custom-control-input"
"customControlAutosizing"
label
class
"custom-control-label"
"customControlAutosizing"
Remember my preference
label
class
"col-auto my-1"
button
type
"submit"
class
"btn btn-primary"
Submit
button
form
Inline forms
Use the
.form-inline
class to display a series of labels, form controls, and buttons on a single horizontal row. Form controls within inline forms vary slightly from their default states.
Controls are
display: flex
, collapsing any HTML white space and allowing you to provide alignment control with
spacing
flexbox
utilities.
Controls and input groups receive
width: auto
to override the Bootstrap default
width: 100%
Controls
only appear inline in viewports that are at least 576px wide
to account for narrow viewports on mobile devices.
You may need to manually address the width and alignment of individual form controls with
spacing utilities
(as shown below). Lastly, be sure to always include a
<label>
with each form control, even if you need to hide it from non-screenreader visitors with
.sr-only
Name
Username
Remember me
Submit
form
class
"form-inline"
label
class
"sr-only"
"inlineFormInputName2"
Name
label
input
type
"text"
class
"form-control mb-2 mr-sm-2"
"inlineFormInputName2"
placeholder
"Jane Doe"
label
class
"sr-only"
"inlineFormInputGroupUsername2"
Username
label
class
"input-group mb-2 mr-sm-2"
class
"input-group-prepend"
class
"input-group-text"
input
type
"text"
class
"form-control"
"inlineFormInputGroupUsername2"
placeholder
"Username"
class
"form-check mb-2 mr-sm-2"
input
class
"form-check-input"
type
"checkbox"
"inlineFormCheck"
label
class
"form-check-label"
"inlineFormCheck"
Remember me
label
button
type
"submit"
class
"btn btn-primary mb-2"
Submit
button
form
Custom form controls and selects are also supported.
Preference
Choose...
Three
Remember my preference
Submit
form
class
"form-inline"
label
class
"my-1 mr-2"
"inlineFormCustomSelectPref"
Preference
label
select
class
"custom-select my-1 mr-sm-2"
"inlineFormCustomSelectPref"
option
selected
Choose...
option
option
value
option
option
value
option
option
value
Three
option
select
class
"custom-control custom-checkbox my-1 mr-sm-2"
input
type
"checkbox"
class
"custom-control-input"
"customControlInline"
label
class
"custom-control-label"
"customControlInline"
Remember my preference
label
button
type
"submit"
class
"btn btn-primary my-1"
Submit
button
form
Alternatives to hidden labels
Assistive technologies such as screen readers will have trouble with your forms if you don’t include a label for every input. For these inline forms, you can hide the labels using the
.sr-only
class. There are further alternative methods of providing a label for assistive technologies, such as the
aria-label
aria-labelledby
title
attribute. If none of these are present, assistive technologies may resort to using the
placeholder
attribute, if present, but note that use of
placeholder
as a replacement for other labelling methods is not advised.
Help text
Block-level help text in forms can be created using
.form-text
(previously known as
.help-block
in v3). Inline help text can be flexibly implemented using any inline HTML element and utility classes like
.text-muted
Associating help text with form controls
Help text should be explicitly associated with the form control it relates to using the
aria-describedby
attribute. This will ensure that assistive technologies—such as screen readers—will announce this help text when the user focuses or enters the control.
Help text below inputs can be styled with
.form-text
. This class includes
display: block
and adds some top margin for easy spacing from the inputs above.
Password
Your password must be 8-20 characters long, contain letters and numbers, and must not contain spaces, special characters, or emoji.
label
"inputPassword5"
Password
label
input
type
"password"
"inputPassword5"
class
"form-control"
aria-describedby
"passwordHelpBlock"
small
"passwordHelpBlock"
class
"form-text text-muted"
Your password must be 8-20 characters long, contain letters and numbers, and must not contain spaces, special characters, or emoji.
small
Inline text can use any typical inline HTML element (be it a
<small>
<span>
, or something else) with nothing more than a utility class.
Password
Must be 8-20 characters long.
form
class
"form-inline"
class
"form-group"
label
"inputPassword6"
Password
label
input
type
"password"
"inputPassword6"
class
"form-control mx-sm-3"
aria-describedby
"passwordHelpInline"
small
"passwordHelpInline"
class
"text-muted"
Must be 8-20 characters long.
small
form
Disabled forms
Add the
disabled
boolean attribute on an input to prevent user interactions and make it appear lighter.
input
class
"form-control"
"disabledInput"
type
"text"
placeholder
"Disabled input here..."
disabled
Add the
disabled
attribute to a
<fieldset>
to disable all the controls within.
Disabled fieldset example
Disabled input
Disabled select menu
Disabled select
Can't check this
Submit
form
fieldset
disabled
legend
Disabled fieldset example
legend
class
"form-group"
label
"disabledTextInput"
Disabled input
label
input
type
"text"
"disabledTextInput"
class
"form-control"
placeholder
"Disabled input"
class
"form-group"
label
"disabledSelect"
Disabled select menu
label
select
"disabledSelect"
class
"form-control"
option
Disabled select
option
select
class
"form-group"
class
"form-check"
input
class
"form-check-input"
type
"checkbox"
"disabledFieldsetCheck"
disabled
label
class
"form-check-label"
"disabledFieldsetCheck"
Can't check this
label
button
type
"submit"
class
"btn btn-primary"
Submit
button
fieldset
form
Caveat with anchors
Browsers treat all native form controls (
<input>
<select>
, and
<button>
elements) inside a
<fieldset disabled>
as disabled, preventing both keyboard and mouse interactions on them.
However, if your form also includes custom button-like elements such as
<a ... class="btn btn-*">
, these will only be given a style of
pointer-events: none
. As noted in the section about
disabled state for buttons
(and specifically in the sub-section for anchor elements), this CSS property is not yet standardized and isn’t fully supported in Internet Explorer 10. The anchor-based controls will also still be focusable and operable using the keyboard. You must manually modify these controls by adding
tabindex="-1"
to prevent them from receiving focus and
aria-disabled="disabled"
to signal their state to assistive technologies.
Cross-browser compatibility
While Bootstrap will apply these styles in all browsers, Internet Explorer 11 and below don’t fully support the
disabled
attribute on a
<fieldset>
. Use custom JavaScript to disable the fieldset in these browsers.
Validation
Provide valuable, actionable feedback to your users with HTML5 form validation–
available in all our supported browsers
. Choose from the browser default validation feedback, or implement custom messages with our built-in classes and starter JavaScript.
We are aware that currently the client-side custom validation styles and tooltips are not accessible, since they are not exposed to assistive technologies. While we work on a solution, we’d recommend either using the server-side option or the default browser validation method.
How it works
Here’s how form validation works with Bootstrap:
HTML form validation is applied via CSS’s two pseudo-classes,
:invalid
:valid
. It applies to
<input>
<select>
, and
<textarea>
elements.
:invalid
:valid
styles to parent
.was-validated
class, usually applied to the
<form>
. Otherwise, any required field without a value shows up as invalid on page load. This way, you may choose when to activate them (typically after form submission is attempted).
To reset the appearance of the form (for instance, in the case of dynamic form submissions using AJAX), remove the
.was-validated
class from the
<form>
again after submission.
As a fallback,
.is-invalid
.is-valid
classes may be used instead of the pseudo-classes for
server side validation
. They do not require a
.was-validated
parent class.
Due to constraints in how CSS works, we cannot (at present) apply styles to a
<label>
that comes before a form control in the DOM without the help of custom JavaScript.
All modern browsers support the
constraint validation API
, a series of JavaScript methods for validating form controls.
Feedback messages may utilize the
browser defaults
(different for each browser, and unstylable via CSS) or our custom feedback styles with additional HTML and CSS.
You may provide custom validity messages with
setCustomValidity
in JavaScript.
With that in mind, consider the following demos for our custom form validation styles, optional server side classes, and browser defaults.
Custom styles
For custom Bootstrap form validation messages, you’ll need to add the
novalidate
boolean attribute to your
<form>
. This disables the browser default feedback tooltips, but still provides access to the form validation APIs in JavaScript. Try to submit the form below; our JavaScript will intercept the submit button and relay feedback to you. When attempting to submit, you’ll see the
:invalid
:valid
styles applied to your form controls.
Custom feedback styles apply custom colors, borders, focus styles, and background icons to better communicate feedback. Background icons for
<select>
s are only available with
.custom-select
, and not
.form-control
First name
Looks good!
Last name
Looks good!
City
Please provide a valid city.
State
Choose...
Please select a valid state.
Please provide a valid zip.
Agree to terms and conditions
You must agree before submitting.
Submit form
form
class
"needs-validation"
novalidate
class
"form-row"
class
"col-md-6 mb-3"
label
"validationCustom01"
First name
label
input
type
"text"
class
"form-control"
"validationCustom01"
value
"Mark"
required
class
"valid-feedback"
Looks good!
class
"col-md-6 mb-3"
label
"validationCustom02"
Last name
label
input
type
"text"
class
"form-control"
"validationCustom02"
value
"Otto"
required
class
"valid-feedback"
Looks good!
class
"form-row"
class
"col-md-6 mb-3"
label
"validationCustom03"
City
label
input
type
"text"
class
"form-control"
"validationCustom03"
required
class
"invalid-feedback"
Please provide a valid city.
class
"col-md-3 mb-3"
label
"validationCustom04"
State
label
select
class
"custom-select"
"validationCustom04"
required
option
selected
disabled
value
Choose...
option
option
option
select
class
"invalid-feedback"
Please select a valid state.
class
"col-md-3 mb-3"
label
"validationCustom05"
label
input
type
"text"
class
"form-control"
"validationCustom05"
required
class
"invalid-feedback"
Please provide a valid zip.
class
"form-group"
class
"form-check"
input
class
"form-check-input"
type
"checkbox"
value
"invalidCheck"
required
label
class
"form-check-label"
"invalidCheck"
Agree to terms and conditions
label
class
"invalid-feedback"
You must agree before submitting.
button
class
"btn btn-primary"
type
"submit"
Submit form
button
form
script
// Example starter JavaScript for disabling form submissions if there are invalid fields
function
'use strict'
window
addEventListener
'load'
function
// Fetch all the forms we want to apply custom Bootstrap validation styles to
forms
document
getElementsByClassName
'needs-validation'
// Loop over them and prevent submission
validation
Array
prototype
filter
call
forms
function
form
form
addEventListener
'submit'
function
event
form
checkValidity
false
event
preventDefault
event
stopPropagation
form
classList
'was-validated'
false
false
})();
script
Browser defaults
Not interested in custom validation feedback messages or writing JavaScript to change form behaviors? All good, you can use the browser defaults. Try submitting the form below. Depending on your browser and OS, you’ll see a slightly different style of feedback.
While these feedback styles cannot be styled with CSS, you can still customize the feedback text through JavaScript.
First name
Last name
City
State
Choose...
Agree to terms and conditions
Submit form
form
class
"form-row"
class
"col-md-6 mb-3"
label
"validationDefault01"
First name
label
input
type
"text"
class
"form-control"
"validationDefault01"
value
"Mark"
required
class
"col-md-6 mb-3"
label
"validationDefault02"
Last name
label
input
type
"text"
class
"form-control"
"validationDefault02"
value
"Otto"
required
class
"form-row"
class
"col-md-6 mb-3"
label
"validationDefault03"
City
label
input
type
"text"
class
"form-control"
"validationDefault03"
required
class
"col-md-3 mb-3"
label
"validationDefault04"
State
label
select
class
"custom-select"
"validationDefault04"
required
option
selected
disabled
value
Choose...
option
option
option
select
class
"col-md-3 mb-3"
label
"validationDefault05"
label
input
type
"text"
class
"form-control"
"validationDefault05"
required
class
"form-group"
class
"form-check"
input
class
"form-check-input"
type
"checkbox"
value
"invalidCheck2"
required
label
class
"form-check-label"
"invalidCheck2"
Agree to terms and conditions
label
button
class
"btn btn-primary"
type
"submit"
Submit form
button
form
Server side
We recommend using client-side validation, but in case you require server-side validation, you can indicate invalid and valid form fields with
.is-invalid
.is-valid
. Note that
.invalid-feedback
is also supported with these classes.
For invalid fields, ensure that the invalid feedback/error message is associated with the relevant form field using
aria-describedby
. This attribute allows more than one
to be referenced, in case the field already points to additional form text.
First name
Looks good!
Last name
Looks good!
City
Please provide a valid city.
State
Choose...
Please select a valid state.
Please provide a valid zip.
Agree to terms and conditions
You must agree before submitting.
Submit form
form
class
"form-row"
class
"col-md-6 mb-3"
label
"validationServer01"
First name
label
input
type
"text"
class
"form-control is-valid"
"validationServer01"
value
"Mark"
required
class
"valid-feedback"
Looks good!
class
"col-md-6 mb-3"
label
"validationServer02"
Last name
label
input
type
"text"
class
"form-control is-valid"
"validationServer02"
value
"Otto"
required
class
"valid-feedback"
Looks good!
class
"form-row"
class
"col-md-6 mb-3"
label
"validationServer03"
City
label
input
type
"text"
class
"form-control is-invalid"
"validationServer03"
aria-describedby
"validationServer03Feedback"
required
"validationServer03Feedback"
class
"invalid-feedback"
Please provide a valid city.
class
"col-md-3 mb-3"
label
"validationServer04"
State
label
select
class
"custom-select is-invalid"
"validationServer04"
aria-describedby
"validationServer04Feedback"
required
option
selected
disabled
value
Choose...
option
option
option
select
"validationServer04Feedback"
class
"invalid-feedback"
Please select a valid state.
class
"col-md-3 mb-3"
label
"validationServer05"
label
input
type
"text"
class
"form-control is-invalid"
"validationServer05"
aria-describedby
"validationServer05Feedback"
required
"validationServer05Feedback"
class
"invalid-feedback"
Please provide a valid zip.
class
"form-group"
class
"form-check"
input
class
"form-check-input is-invalid"
type
"checkbox"
value
"invalidCheck3"
aria-describedby
"invalidCheck3Feedback"
required
label
class
"form-check-label"
"invalidCheck3"
Agree to terms and conditions
label
"invalidCheck3Feedback"
class
"invalid-feedback"
You must agree before submitting.
button
class
"btn btn-primary"
type
"submit"
Submit form
button
form
Supported elements
Validation styles are available for the following form controls and components:
<input>
s and
<textarea>
s with
.form-control
<select>
s with
.form-control
.custom-select
.form-check
.custom-checkbox
s and
.custom-radio
.custom-file
Textarea
Please enter a message in the textarea.
Check this custom checkbox
Example invalid feedback text
Toggle this custom radio
Or toggle this other custom radio
More example invalid feedback text
Choose...
Three
Example invalid custom select feedback
Choose file...
Example invalid custom file feedback
Example invalid input group feedback
Options
Choose...
Three
Example invalid input group feedback
Choose file...
Button
Example invalid input group feedback
form
class
"was-validated"
class
"mb-3"
label
"validationTextarea"
Textarea
label
textarea
class
"form-control is-invalid"
"validationTextarea"
placeholder
"Required example textarea"
required
textarea
class
"invalid-feedback"
Please enter a message in the textarea.
class
"custom-control custom-checkbox mb-3"
input
type
"checkbox"
class
"custom-control-input"
"customControlValidation1"
required
label
class
"custom-control-label"
"customControlValidation1"
Check this custom checkbox
label
class
"invalid-feedback"
Example invalid feedback text
class
"custom-control custom-radio"
input
type
"radio"
class
"custom-control-input"
"customControlValidation2"
name
"radio-stacked"
required
label
class
"custom-control-label"
"customControlValidation2"
Toggle this custom radio
label
class
"custom-control custom-radio mb-3"
input
type
"radio"
class
"custom-control-input"
"customControlValidation3"
name
"radio-stacked"
required
label
class
"custom-control-label"
"customControlValidation3"
Or toggle this other custom radio
label
class
"invalid-feedback"
More example invalid feedback text
class
"mb-3"
select
class
"custom-select"
required
option
value
Choose...
option
option
value
option
option
value
option
option
value
Three
option
select
class
"invalid-feedback"
Example invalid custom select feedback
class
"custom-file mb-3"
input
type
"file"
class
"custom-file-input"
"validatedCustomFile"
required
label
class
"custom-file-label"
"validatedCustomFile"
Choose file...
label
class
"invalid-feedback"
Example invalid custom file feedback
class
"mb-3"
class
"input-group is-invalid"
class
"input-group-prepend"
span
class
"input-group-text"
"validatedInputGroupPrepend"
span
input
type
"text"
class
"form-control is-invalid"
aria-describedby
"validatedInputGroupPrepend"
required
class
"invalid-feedback"
Example invalid input group feedback
class
"mb-3"
class
"input-group is-invalid"
class
"input-group-prepend"
label
class
"input-group-text"
"validatedInputGroupSelect"
Options
label
select
class
"custom-select"
"validatedInputGroupSelect"
required
option
value
Choose...
option
option
value
option
option
value
option
option
value
Three
option
select
class
"invalid-feedback"
Example invalid input group feedback
class
"input-group is-invalid"
class
"custom-file"
input
type
"file"
class
"custom-file-input"
"validatedInputGroupCustomFile"
required
label
class
"custom-file-label"
"validatedInputGroupCustomFile"
Choose file...
label
class
"input-group-append"
button
class
"btn btn-outline-secondary"
type
"button"
Button
button
class
"invalid-feedback"
Example invalid input group feedback
form
Tooltips
If your form layout allows it, you can swap the
.{valid|invalid}-feedback
classes for
.{valid|invalid}-tooltip
classes to display validation feedback in a styled tooltip. Be sure to have a parent with
position: relative
on it for tooltip positioning. In the example below, our column classes have this already, but your project may require an alternative setup.
First name
Looks good!
Last name
Looks good!
City
Please provide a valid city.
State
Choose...
Please select a valid state.
Please provide a valid zip.
Submit form
form
class
"needs-validation"
novalidate
class
"form-row"
class
"col-md-6 mb-3"
label
"validationTooltip01"
First name
label
input
type
"text"
class
"form-control"
"validationTooltip01"
value
"Mark"
required
class
"valid-tooltip"
Looks good!
class
"col-md-6 mb-3"
label
"validationTooltip02"
Last name
label
input
type
"text"
class
"form-control"
"validationTooltip02"
value
"Otto"
required
class
"valid-tooltip"
Looks good!
class
"form-row"
class
"col-md-6 mb-3"
label
"validationTooltip03"
City
label
input
type
"text"
class
"form-control"
"validationTooltip03"
required
class
"invalid-tooltip"
Please provide a valid city.
class
"col-md-3 mb-3"
label
"validationTooltip04"
State
label
select
class
"custom-select"
"validationTooltip04"
required
option
selected
disabled
value
Choose...
option
option
option
select
class
"invalid-tooltip"
Please select a valid state.
class
"col-md-3 mb-3"
label
"validationTooltip05"
label
input
type
"text"
class
"form-control"
"validationTooltip05"
required
class
"invalid-tooltip"
Please provide a valid zip.
button
class
"btn btn-primary"
type
"submit"
Submit form
button
form
Customizing
Validation states can be customized via Sass with the
$form-validation-states
map. Located in our
_variables.scss
file, this Sass map is looped over to generate the default
valid
invalid
validation states. Included is a nested map for customizing each state’s color and icon. While no other states are supported by browsers, those using custom styles can easily add more complex form feedback.
Please note that we do not recommend customizing these values without also modifying the
form-validation-state
mixin.
// Sass map from `_variables.scss`
// Override this and recompile your Sass to generate different states
$form-validation-states
map-merge
"valid"
"color"
$form-feedback-valid-color
"icon"
$form-feedback-icon-valid
"invalid"
"color"
$form-feedback-invalid-color
"icon"
$form-feedback-icon-invalid
$form-validation-states
// Loop from `_forms.scss`
// Any modifications to the above Sass map will be reflected in your compiled
// CSS via this loop.
@each
$state
$data
$form-validation-states
@include
form-validation-state
$state
map-get
$data
color
map-get
$data
icon
Input group validation
To detect what elements need rounded corners inside an input group with validation, an input group requires an additional
.has-validation
class.
class
"input-group has-validation"
class
"input-group-prepend"
span
class
"input-group-text"
span
input
type
"text"
class
"form-control"
required
class
"invalid-feedback"
Please choose a username.
Please choose a username.
Custom forms
For even more customization and cross browser consistency, use our completely custom form elements to replace the browser defaults. They’re built on top of semantic and accessible markup, so they’re solid replacements for any default form control.
Checkboxes and radios
Each checkbox and radio
<input>
<label>
pairing is wrapped in a
<div>
to create our custom control. Structurally, this is the same approach as our default
.form-check
We use the sibling selector (
) for all our
<input>
states—like
:checked
—to properly style our custom form indicator. When combined with the
.custom-control-label
class, we can also style the text for each item based on the
<input>
’s state.
We hide the default
<input>
with
opacity
and use the
.custom-control-label
to build a new custom form indicator in its place with
::before
::after
. Unfortunately we can’t build a custom one from just the
<input>
because CSS’s
content
doesn’t work on that element.
In the checked states, we use
base64 embedded SVG icons
from
Open Iconic
. This provides us the best control for styling and positioning across browsers and devices.
Checkboxes
Check this custom checkbox
class
"custom-control custom-checkbox"
input
type
"checkbox"
class
"custom-control-input"
"customCheck1"
label
class
"custom-control-label"
"customCheck1"
Check this custom checkbox
label
Custom checkboxes can also utilize the
:indeterminate
pseudo class when manually set via JavaScript (there is no available HTML attribute for specifying it).
Check this custom checkbox
If you’re using jQuery, something like this should suffice:
'.your-checkbox'
prop
'indeterminate'
true
Radios
Toggle this custom radio
Or toggle this other custom radio
class
"custom-control custom-radio"
input
type
"radio"
"customRadio1"
name
"customRadio"
class
"custom-control-input"
label
class
"custom-control-label"
"customRadio1"
Toggle this custom radio
label
class
"custom-control custom-radio"
input
type
"radio"
"customRadio2"
name
"customRadio"
class
"custom-control-input"
label
class
"custom-control-label"
"customRadio2"
Or toggle this other custom radio
label
Inline
Toggle this custom radio
Or toggle this other custom radio
class
"custom-control custom-radio custom-control-inline"
input
type
"radio"
"customRadioInline1"
name
"customRadioInline"
class
"custom-control-input"
label
class
"custom-control-label"
"customRadioInline1"
Toggle this custom radio
label
class
"custom-control custom-radio custom-control-inline"
input
type
"radio"
"customRadioInline2"
name
"customRadioInline"
class
"custom-control-input"
label
class
"custom-control-label"
"customRadioInline2"
Or toggle this other custom radio
label
Disabled
Custom checkboxes and radios can also be disabled. Add the
disabled
boolean attribute to the
<input>
and the custom indicator and label description will be automatically styled.
Check this custom checkbox
Toggle this custom radio
class
"custom-control custom-checkbox"
input
type
"checkbox"
class
"custom-control-input"
"customCheckDisabled1"
disabled
label
class
"custom-control-label"
"customCheckDisabled1"
Check this custom checkbox
label
class
"custom-control custom-radio"
input
type
"radio"
name
"radioDisabled"
"customRadioDisabled2"
class
"custom-control-input"
disabled
label
class
"custom-control-label"
"customRadioDisabled2"
Toggle this custom radio
label
Switches
A switch has the markup of a custom checkbox but uses the
.custom-switch
class to render a toggle switch. Switches also support the
disabled
attribute.
Toggle this switch element
Disabled switch element
class
"custom-control custom-switch"
input
type
"checkbox"
class
"custom-control-input"
"customSwitch1"
label
class
"custom-control-label"
"customSwitch1"
Toggle this switch element
label
class
"custom-control custom-switch"
input
type
"checkbox"
class
"custom-control-input"
disabled
"customSwitch2"
label
class
"custom-control-label"
"customSwitch2"
Disabled switch element
label
Select menu
Custom
<select>
menus need only a custom class,
.custom-select
to trigger the custom styles. Custom styles are limited to the
<select>
’s initial appearance and cannot modify the
<option>
s due to browser limitations.
Open this select menu
Three
select
class
"custom-select"
option
selected
Open this select menu
option
option
value
option
option
value
option
option
value
Three
option
select
You may also choose from small and large custom selects to match our similarly sized text inputs.
Open this select menu
Three
Open this select menu
Three
select
class
"custom-select custom-select-lg mb-3"
option
selected
Open this select menu
option
option
value
option
option
value
option
option
value
Three
option
select
select
class
"custom-select custom-select-sm"
option
selected
Open this select menu
option
option
value
option
option
value
option
option
value
Three
option
select
multiple
attribute is also supported:
Open this select menu
Three
select
class
"custom-select"
multiple
option
selected
Open this select menu
option
option
value
option
option
value
option
option
value
Three
option
select
As is the
size
attribute:
Open this select menu
Three
select
class
"custom-select"
size
option
selected
Open this select menu
option
option
value
option
option
value
option
option
value
Three
option
select
Range
Create custom
<input type="range">
controls with
.custom-range
. The track (the background) and thumb (the value) are both styled to appear the same across browsers. As only IE and Firefox support “filling” their track from the left or right of the thumb as a means to visually indicate progress, we do not currently support it.
Example range
label
"customRange1"
Example range
label
input
type
"range"
class
"custom-range"
"customRange1"
Range inputs have implicit values for
, respectively. You may specify new values for those using the
attributes.
Example range
label
"customRange2"
Example range
label
input
type
"range"
class
"custom-range"
"customRange2"
By default, range inputs “snap” to integer values. To change this, you can specify a
step
value. In the example below, we double the number of steps by using
step="0.5"
Example range
label
"customRange3"
Example range
label
input
type
"range"
class
"custom-range"
step
"0.5"
"customRange3"
File browser
The recommended plugin to animate custom file input:
bs-custom-file-input
, that’s what we are using currently here in our docs.
The file input is the most gnarly of the bunch and requires additional JavaScript if you’d like to hook them up with functional
Choose file…
and selected file name text.
Choose file
class
"custom-file"
input
type
"file"
class
"custom-file-input"
"customFile"
label
class
"custom-file-label"
"customFile"
Choose file
label
We hide the default file
<input>
opacity
and instead style the
<label>
. The button is generated and positioned with
::after
. Lastly, we declare a
width
height
on the
<input>
for proper spacing for surrounding content.
Translating or customizing the strings with SCSS
:lang()
pseudo-class
is used to allow for translation of the “Browse” text into other languages. Override or add entries to the
$custom-file-text
Sass variable with the relevant
language tag
and localized strings. The English strings can be customized the same way. For example, here’s how one might add a Spanish translation (Spanish’s language code is
$custom-file-text
"Browse"
"Elegir"
Here’s
lang(es)
in action on the custom file input for a Spanish translation:
Seleccionar Archivo
class
"custom-file"
input
type
"file"
class
"custom-file-input"
"customFileLang"
lang
"es"
label
class
"custom-file-label"
"customFileLang"
Seleccionar Archivo
label
You’ll need to set the language of your document (or subtree thereof) correctly in order for the correct text to be shown. This can be done using
lang
attribute
on the
<html>
element or the
Content-Language
HTTP header
, among other methods.
Translating or customizing the strings with HTML
data-browse
attribute which can be added to the custom input label (example in Dutch):
Voeg je document toe
class
"custom-file"
input
type
"file"
class
"custom-file-input"
"customFileLangHTML"
label
class
"custom-file-label"
"customFileLangHTML"
data-browse
"Bestand kiezen"
Voeg je document toe
label