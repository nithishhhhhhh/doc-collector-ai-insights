URL: https://getbootstrap.com/docs/4.6/components/toasts
==================================================

View on GitHub
Toasts
Push notifications to your visitors with a toast, a lightweight and easily customizable alert message.
Toasts are lightweight notifications designed to mimic the push notifications that have been popularized by mobile and desktop operating systems. They’re built with flexbox, so they’re easy to align and position.
Overview
Things to know when using the toast plugin:
If you’re building our JavaScript from source, it
requires
util.js
Toasts are opt-in for performance reasons, so
you must initialize them yourself
Please note that you are responsible for positioning toasts.
Toasts will automatically hide if you do not specify
autohide: false
The animation effect of this component is dependent on the
prefers-reduced-motion
media query. See the
reduced motion section of our accessibility documentation
Examples
Basic
To encourage extensible and predictable toasts, we recommend a header and body. Toast headers use
display: flex
, allowing easy alignment of content thanks to our margin and flexbox utilities.
Toasts are as flexible as you need and have very little required markup. At a minimum, we require a single element to contain your “toasted” content and strongly encourage a dismiss button.
11 mins ago
Hello, world! This is a toast message.
class
"toast"
role
"alert"
aria-live
"assertive"
aria-atomic
"true"
class
"toast-header"
"..."
class
"rounded mr-2"
"..."
strong
class
"mr-auto"
strong
small
11 mins ago
small
button
type
"button"
class
"ml-2 mb-1 close"
data-dismiss
"toast"
aria-label
"Close"
span
aria-hidden
"true"
&times;
span
button
class
"toast-body"
Hello, world! This is a toast message.
Live
Click the button below to show a toast (positioned with our utilities in the lower right corner) that has been hidden by default with
.hide
11 mins ago
Hello, world! This is a toast message.
Show live toast
button
type
"button"
class
"btn btn-primary"
"liveToastBtn"
Show live toast
button
class
"position-fixed bottom-0 right-0 p-3"
style
"z-index: 5; right: 0; bottom: 0;"
"liveToast"
class
"toast hide"
role
"alert"
aria-live
"assertive"
aria-atomic
"true"
data-delay
"2000"
class
"toast-header"
"..."
class
"rounded mr-2"
"..."
strong
class
"mr-auto"
strong
small
11 mins ago
small
button
type
"button"
class
"ml-2 mb-1 close"
data-dismiss
"toast"
aria-label
"Close"
span
aria-hidden
"true"
&times;
span
button
class
"toast-body"
Hello, world! This is a toast message.
Translucent
Toasts are slightly translucent to blend in with what’s below them.
11 mins ago
Hello, world! This is a toast message.
class
"toast"
role
"alert"
aria-live
"assertive"
aria-atomic
"true"
class
"toast-header"
"..."
class
"rounded mr-2"
"..."
strong
class
"mr-auto"
strong
small
class
"text-muted"
11 mins ago
small
button
type
"button"
class
"ml-2 mb-1 close"
data-dismiss
"toast"
aria-label
"Close"
span
aria-hidden
"true"
&times;
span
button
class
"toast-body"
Hello, world! This is a toast message.
Stacking
When you have multiple toasts, we default to vertically stacking them in a readable manner.
just now
See? Just like this.
2 seconds ago
Heads up, toasts will stack automatically
class
"toast"
role
"alert"
aria-live
"assertive"
aria-atomic
"true"
class
"toast-header"
"..."
class
"rounded mr-2"
"..."
strong
class
"mr-auto"
strong
small
class
"text-muted"
just now
small
button
type
"button"
class
"ml-2 mb-1 close"
data-dismiss
"toast"
aria-label
"Close"
span
aria-hidden
"true"
&times;
span
button
class
"toast-body"
See? Just like this.
class
"toast"
role
"alert"
aria-live
"assertive"
aria-atomic
"true"
class
"toast-header"
"..."
class
"rounded mr-2"
"..."
strong
class
"mr-auto"
strong
small
class
"text-muted"
2 seconds ago
small
button
type
"button"
class
"ml-2 mb-1 close"
data-dismiss
"toast"
aria-label
"Close"
span
aria-hidden
"true"
&times;
span
button
class
"toast-body"
Heads up, toasts will stack automatically
Placement
Place toasts with custom CSS as you need them. The top right is often used for notifications, as is the top middle. If you’re only ever going to show one toast at a time, put the positioning styles right on the
.toast
11 mins ago
Hello, world! This is a toast message.
aria-live
"polite"
aria-atomic
"true"
style
"position: relative; min-height: 200px;"
class
"toast"
style
"position: absolute; top: 0; right: 0;"
class
"toast-header"
"..."
class
"rounded mr-2"
"..."
strong
class
"mr-auto"
strong
small
11 mins ago
small
button
type
"button"
class
"ml-2 mb-1 close"
data-dismiss
"toast"
aria-label
"Close"
span
aria-hidden
"true"
&times;
span
button
class
"toast-body"
Hello, world! This is a toast message.
For systems that generate more notifications, consider using a wrapping element so they can easily stack.
just now
See? Just like this.
2 seconds ago
Heads up, toasts will stack automatically
aria-live
"polite"
aria-atomic
"true"
style
"position: relative; min-height: 200px;"
<!-- Position it -->
style
"position: absolute; top: 0; right: 0;"
<!-- Then put toasts within -->
class
"toast"
role
"alert"
aria-live
"assertive"
aria-atomic
"true"
class
"toast-header"
"..."
class
"rounded mr-2"
"..."
strong
class
"mr-auto"
strong
small
class
"text-muted"
just now
small
button
type
"button"
class
"ml-2 mb-1 close"
data-dismiss
"toast"
aria-label
"Close"
span
aria-hidden
"true"
&times;
span
button
class
"toast-body"
See? Just like this.
class
"toast"
role
"alert"
aria-live
"assertive"
aria-atomic
"true"
class
"toast-header"
"..."
class
"rounded mr-2"
"..."
strong
class
"mr-auto"
strong
small
class
"text-muted"
2 seconds ago
small
button
type
"button"
class
"ml-2 mb-1 close"
data-dismiss
"toast"
aria-label
"Close"
span
aria-hidden
"true"
&times;
span
button
class
"toast-body"
Heads up, toasts will stack automatically
You can also get fancy with flexbox utilities to align toasts horizontally and/or vertically.
11 mins ago
Hello, world! This is a toast message.
<!-- Flexbox container for aligning the toasts -->
aria-live
"polite"
aria-atomic
"true"
class
"d-flex justify-content-center align-items-center"
style
"height: 200px;"
<!-- Then put toasts within -->
class
"toast"
role
"alert"
aria-live
"assertive"
aria-atomic
"true"
class
"toast-header"
"..."
class
"rounded mr-2"
"..."
strong
class
"mr-auto"
strong
small
11 mins ago
small
button
type
"button"
class
"ml-2 mb-1 close"
data-dismiss
"toast"
aria-label
"Close"
span
aria-hidden
"true"
&times;
span
button
class
"toast-body"
Hello, world! This is a toast message.
Accessibility
Toasts are intended to be small interruptions to your visitors or users, so to help those with screen readers and similar assistive technologies, you should wrap your toasts in an
aria-live
region
. Changes to live regions (such as injecting/updating a toast component) are automatically announced by screen readers without needing to move the user’s focus or otherwise interrupt the user. Additionally, include
aria-atomic="true"
to ensure that the entire toast is always announced as a single (atomic) unit, rather than just announcing what was changed (which could lead to problems if you only update part of the toast’s content, or if displaying the same toast content at a later point in time). If the information needed is important for the process, e.g. for a list of errors in a form, then use the
alert component
instead of toast.
Note that the live region needs to be present in the markup
before
the toast is generated or updated. If you dynamically generate both at the same time and inject them into the page, they will generally not be announced by assistive technologies.
You also need to adapt the
role
aria-live
level depending on the content. If it’s an important message like an error, use
role="alert" aria-live="assertive"
, otherwise use
role="status" aria-live="polite"
attributes.
As the content you’re displaying changes, be sure to update the
delay
timeout
so that users have enough time to read the toast.
class
"toast"
role
"alert"
aria-live
"polite"
aria-atomic
"true"
data-delay
"10000"
role
"alert"
aria-live
"assertive"
aria-atomic
"true"
When using
autohide: false
, you must add a close button to allow users to dismiss the toast.
11 mins ago
Hello, world! This is a toast message.
role
"alert"
aria-live
"assertive"
aria-atomic
"true"
class
"toast"
data-autohide
"false"
class
"toast-header"
"..."
class
"rounded mr-2"
"..."
strong
class
"mr-auto"
strong
small
11 mins ago
small
button
type
"button"
class
"ml-2 mb-1 close"
data-dismiss
"toast"
aria-label
"Close"
span
aria-hidden
"true"
&times;
span
button
class
"toast-body"
Hello, world! This is a toast message.
While technically it’s possible to add focusable/actionable controls (such as additional buttons or links) in your toast, you should avoid doing this for autohiding toasts. Even if you give the toast a long
delay
timeout
, keyboard and assistive technology users may find it difficult to reach the toast in time to take action (since toasts don’t receive focus when they are displayed). If you absolutely must have further controls, we recommend using a toast with
autohide: false
JavaScript behavior
Usage
Initialize toasts via JavaScript:
'.toast'
toast
option
Options
Options can be passed via data attributes or JavaScript. For data attributes, append the option name to
data-
, as in
data-animation=""
Name
Type
Default
Description
animation
boolean
true
Apply a CSS fade transition to the toast
autohide
boolean
true
Auto hide the toast
delay
number
Delay hiding the toast (ms)
Methods
Asynchronous methods and transitions
All API methods are
asynchronous
and start a
transition
. They return to the caller as soon as the transition is started but
before it ends
. In addition, a method call on a
transitioning component will be ignored
See our JavaScript documentation for more information
$().toast(options)
Attaches a toast handler to an element collection.
.toast('show')
Reveals an element’s toast.
Returns to the caller before the toast has actually been shown
(i.e. before the
shown.bs.toast
event occurs).
You have to manually call this method, instead your toast won’t show.
'#element'
toast
'show'
.toast('hide')
Hides an element’s toast.
Returns to the caller before the toast has actually been hidden
(i.e. before the
hidden.bs.toast
event occurs). You have to manually call this method if you made
autohide
false
'#element'
toast
'hide'
.toast('dispose')
Hides an element’s toast. Your toast will remain on the DOM but won’t show anymore.
'#element'
toast
'dispose'
Events
Event Type
Description
show.bs.toast
This event fires immediately when the
show
instance method is called.
shown.bs.toast
This event is fired when the toast has been made visible to the user.
hide.bs.toast
This event is fired immediately when the
hide
instance method has been called.
hidden.bs.toast
This event is fired when the toast has finished being hidden from the user.
'#myToast'
'hidden.bs.toast'
function
// do something...