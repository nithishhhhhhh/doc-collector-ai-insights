URL: https://getbootstrap.com/docs/5.3/customize/sass
==================================================

Utilize our source Sass files to take advantage of variables, maps, mixins, and more.
Sass deprecation warnings are shown when compiling source Sass files with the latest versions of Dart Sass. This does not prevent compilation or usage of Bootstrap. We’re
working on a long-term fix
, but in the meantime these deprecation notices can be ignored.
File structure
Whenever possible, avoid modifying Bootstrap’s core files. For Sass, that means creating your own stylesheet that imports Bootstrap so you can modify and extend it. Assuming you’re using a package manager like npm, you’ll have a file structure that looks like this:
your-project/
├── scss/
│   └── custom.scss
└── node_modules/
│   └── bootstrap/
│       ├── js/
│       └── scss/
└── index.html
If you’ve downloaded our source files and aren’t using a package manager, you’ll want to manually create something similar to that structure, keeping Bootstrap’s source files separate from your own.
your-project/
├── scss/
│   └── custom.scss
├── bootstrap/
│   ├── js/
│   └── scss/
└── index.html
Importing
In your
custom.scss
, you’ll import Bootstrap’s source Sass files. You have two options: include all of Bootstrap, or pick the parts you need. We encourage the latter, though be aware there are some requirements and dependencies across our components. You also will need to include some JavaScript for our plugins.
// Custom.scss
// Option A: Include all of Bootstrap
// Include any default variable overrides here (though functions won’t be available)
@import
"../node_modules/bootstrap/scss/bootstrap"
// Then add additional custom code here
// Custom.scss
// Option B: Include parts of Bootstrap
// 1. Include functions first (so you can manipulate colors, SVGs, calc, etc)
@import
"../node_modules/bootstrap/scss/functions"
// 2. Include any default variable overrides here
// 3. Include remainder of required Bootstrap stylesheets (including any separate color mode stylesheets)
@import
"../node_modules/bootstrap/scss/variables"
@import
"../node_modules/bootstrap/scss/variables-dark"
// 4. Include any default map overrides here
// 5. Include remainder of required parts
@import
"../node_modules/bootstrap/scss/maps"
@import
"../node_modules/bootstrap/scss/mixins"
@import
"../node_modules/bootstrap/scss/root"
// 6. Include any other optional stylesheet partials as desired; list below is not inclusive of all available stylesheets
@import
"../node_modules/bootstrap/scss/utilities"
@import
"../node_modules/bootstrap/scss/reboot"
@import
"../node_modules/bootstrap/scss/type"
@import
"../node_modules/bootstrap/scss/images"
@import
"../node_modules/bootstrap/scss/containers"
@import
"../node_modules/bootstrap/scss/grid"
@import
"../node_modules/bootstrap/scss/helpers"
// ...
// 7. Optionally include utilities API last to generate classes based on the Sass map in `_utilities.scss`
@import
"../node_modules/bootstrap/scss/utilities/api"
// 8. Add additional custom code here
With that setup in place, you can begin to modify any of the Sass variables and maps in your
custom.scss
. You can also start to add parts of Bootstrap under the
// Optional
section as needed. We suggest using the full import stack from our
file as your starting point.
Compiling
In order to use your custom Sass code as CSS in the browser, you need a Sass compiler. Sass ships as a CLI package, but you can also compile it with other build tools like
Gulp
Webpack
, or with GUI applications. Some IDEs also have Sass compilers built in or as downloadable extensions.
We like to use the CLI to compile our Sass, but you can use whichever method you prefer. From the command line, run the following:
# Install Sass globally
install
sass
# Watch your custom Sass for changes and compile it to CSS
sass
--watch
./scss/custom.scss ./css/custom.css
Learn more about your options at
sass-lang.com/install
compiling with VS Code
Using Bootstrap with another build tool?
Consider reading our guides for compiling with
Webpack
Parcel
, or
Vite
. We also have production-ready demos in
our examples repository on GitHub
Including
Once your CSS is compiled, you can include it in your HTML files. Inside your
index.html
you’ll want to include your compiled CSS file. Be sure to update the path to your compiled CSS file if you’ve changed it.
doctype
html
html
lang
head
meta
charset
utf-8
meta
name
viewport
content
width=device-width, initial-scale=1
title
Custom Bootstrap
title
link
href
/css/custom.css
stylesheet
head
body
Hello, world!
body
html
Variable defaults
Every Sass variable in Bootstrap includes the
!default
flag allowing you to override the variable’s default value in your own Sass without modifying Bootstrap’s source code. Copy and paste variables as needed, modify their values, and remove the
!default
flag. If a variable has already been assigned, then it won’t be re-assigned by the default values in Bootstrap.
You will find the complete list of Bootstrap’s variables in
scss/_variables.scss
. Some variables are set to
null
, these variables don’t output the property unless they are overridden in your configuration.
Variable overrides must come after our functions are imported, but before the rest of the imports.
Here’s an example that changes the
background-color
color
for the
<body>
when importing and compiling Bootstrap via npm:
// Required
@import
"../node_modules/bootstrap/scss/functions"
// Default variable overrides
$body-bg
#000
$body-color
#111
// Required
@import
"../node_modules/bootstrap/scss/variables"
@import
"../node_modules/bootstrap/scss/variables-dark"
@import
"../node_modules/bootstrap/scss/maps"
@import
"../node_modules/bootstrap/scss/mixins"
@import
"../node_modules/bootstrap/scss/root"
// Optional Bootstrap components here
@import
"../node_modules/bootstrap/scss/reboot"
@import
"../node_modules/bootstrap/scss/type"
// etc
Repeat as necessary for any variable in Bootstrap, including the global options below.
Get started with Bootstrap via npm with our starter project!
Head to the
Sass & JS example
template repository to see how to build and customize Bootstrap in your own npm project. Includes Sass compiler, Autoprefixer, Stylelint, PurgeCSS, and Bootstrap Icons.
Maps and loops
!default
flag and can be overridden and extended.
Some of our Sass maps are merged into empty ones by default. This is done to allow easy expansion of a given Sass map, but comes at the cost of making
removing
items from a map slightly more difficult.
Modify map
All variables in the
$theme-colors
map are defined as standalone variables. To modify an existing color in our
$theme-colors
map, add the following to your custom Sass file:
$primary
#0074d9
$danger
#ff4136
Later on, these variables are set in Bootstrap’s
$theme-colors
map:
$theme-colors
"primary"
$primary
"danger"
$danger
Add to map
Add new colors to
$theme-colors
, or any other map, by creating a new Sass map with your custom values and merging it with the original map. In this case, we'll create a new
$custom-colors
map and merge it with
$theme-colors
// Create your own map
$custom-colors
"custom-color"
#900
// Merge the maps
$theme-colors
map-merge
$theme-colors
$custom-colors
Remove from map
To remove colors from
$theme-colors
, or any other map, use
map-remove
. Be aware you must insert
$theme-colors
between our requirements just after its definition in
variables
and before its usage in
maps
// Required
@import
"../node_modules/bootstrap/scss/functions"
@import
"../node_modules/bootstrap/scss/variables"
@import
"../node_modules/bootstrap/scss/variables-dark"
$theme-colors
map-remove
$theme-colors
"info"
"light"
"dark"
@import
"../node_modules/bootstrap/scss/maps"
@import
"../node_modules/bootstrap/scss/mixins"
@import
"../node_modules/bootstrap/scss/root"
// Optional
@import
"../node_modules/bootstrap/scss/reboot"
@import
"../node_modules/bootstrap/scss/type"
// etc
Required keys
For example, we use the
primary
success
, and
danger
keys from
$theme-colors
for links, buttons, and form states. Replacing the values of these keys should present no issues, but removing them may cause Sass compilation issues. In these instances, you’ll need to modify the Sass code that makes use of those values.
Functions
Colors
Next to the
Sass maps
we have, theme colors can also be used as standalone variables, like
$primary
.custom-element
color
$gray-100
background-color
$dark
You can lighten or darken colors with Bootstrap’s
tint-color()
shade-color()
functions. These functions will mix colors with black or white, unlike Sass’ native
lighten()
darken()
functions which will change the lightness by a fixed amount, which often doesn’t lead to the desired effect.
shift-color()
combines these two functions by shading the color if the weight is positive and tinting the color if the weight is negative.
scss/_functions.scss
// Tint a color: mix a color with white
@function
tint-color
$color
$weight
@return
white
$color
$weight
// Shade a color: mix a color with black
@function
shade-color
$color
$weight
@return
black
$color
$weight
// Shade the color if the weight is positive, else tint it
@function
shift-color
$color
$weight
@return
$weight
shade-color
$color
$weight
tint-color
$color
$weight
In practice, you’d call the function and pass in the color and weight parameters.
.custom-element
color
tint-color
$primary
.custom-element-2
color
shade-color
$danger
.custom-element-3
color
shift-color
$success
background-color
shift-color
$success
-60%
Color contrast
In order to meet the
Web Content Accessibility Guidelines (WCAG)
contrast requirements, authors
must
provide a minimum
text color contrast of 4.5:1
and a minimum
non-text color contrast of 3:1
, with very few exceptions.
To help with this, we included the
color-contrast
function in Bootstrap. It uses the
WCAG contrast ratio algorithm
for calculating contrast thresholds based on
relative luminance
in an
sRGB
color space to automatically return a light (
#fff
), dark (
#212529
) or black (
#000
) contrast color based on the specified base color. This function is especially useful for mixins or loops where you’re generating multiple classes.
For example, to generate color swatches from our
$theme-colors
map:
@each
$color
$value
$theme-colors
.swatch-
#{$color}
color
color-contrast
$value
It can also be used for one-off contrast needs:
.custom-element
color
color-contrast
#000
// returns `color: #fff`
You can also specify a base color with our color map functions:
.custom-element
color
color-contrast
$dark
// returns `color: #fff`
Escape SVG
We use the
escape-svg
function to escape the
characters for SVG background images. When using the
escape-svg
function, data URIs must be quoted.
Add and Subtract functions
We use the
subtract
functions to wrap the CSS
calc
function. The primary purpose of these functions is to avoid errors when a “unitless”
value is passed into a
calc
expression. Expressions like
calc(10px - 0)
will return an error in all browsers, despite being mathematically correct.
Example where the calc is valid:
$border-radius
.25rem
$border-width
.element
// Output calc(.25rem - 1px) is valid
border-radius
calc
$border-radius
$border-width
.element
// Output the same calc(.25rem - 1px) as above
border-radius
subtract
$border-radius
$border-width
Example where the calc is invalid:
$border-radius
.25rem
$border-width
.element
// Output calc(.25rem - 0) is invalid
border-radius
calc
$border-radius
$border-width
.element
// Output .25rem
border-radius
subtract
$border-radius
$border-width
Mixins
scss/mixins/
directory has a ton of mixins that power parts of Bootstrap and can also be used across your own project.
Color schemes
A shorthand mixin for the
prefers-color-scheme
media query is available with support for
light
dark
color schemes. See
the color modes documentation
for information on our color mode mixin.
scss/mixins/_color-scheme.scss
@mixin
color-scheme
$name
@media
prefers-color-scheme
#{$name}
@content
.custom-element
@include
color-scheme
light
// Insert light mode styles here
@include
color-scheme
dark
// Insert dark mode styles here