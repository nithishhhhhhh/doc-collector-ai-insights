URL: https://getbootstrap.com/docs/5.3/layout/breakpoints
==================================================

Core concepts
Breakpoints are the building blocks of responsive design.
Use them to control when your layout can be adapted at a particular viewport or device size.
Use media queries to architect your CSS by breakpoint.
Media queries are a feature of CSS that allow you to conditionally apply styles based on a set of browser and operating system parameters. We most commonly use
min-width
in our media queries.
Mobile first, responsive design is the goal.
Available breakpoints
grid tiers
, for building responsively. These breakpoints can be customized if you’re using our source Sass files.
Breakpoint
Class infix
Dimensions
Extra small
None
<576px
Small
≥576px
Medium
≥768px
Large
≥992px
Extra large
≥1200px
Extra extra large
≥1400px
Each breakpoint was chosen to comfortably hold containers whose widths are multiples of 12. Breakpoints are also representative of a subset of common device sizes and viewport dimensions—they don’t specifically target every use case or device. Instead, the ranges provide a strong and consistent foundation to build on for nearly any device.
These breakpoints are customizable via Sass—you’ll find them in a Sass map in our
_variables.scss
stylesheet.
scss/_variables.scss
$grid-breakpoints
576px
768px
992px
1200px
1400px
For more information and examples on how to modify our Sass maps and variables, please refer to
the CSS section of the Grid documentation
Media queries
Since Bootstrap is developed to be mobile first, we use a handful of
media queries
to create sensible breakpoints for our layouts and interfaces. These breakpoints are mostly based on minimum viewport widths and allow us to scale up elements as the viewport changes.
Min-width
// Source mixins
// No media query necessary for xs breakpoint as it’s effectively `@media (min-width: 0) { ... }`
@include
media-breakpoint-up
@include
media-breakpoint-up
@include
media-breakpoint-up
@include
media-breakpoint-up
@include
media-breakpoint-up
// Usage
// Example: Hide starting at `min-width: 0`, and then show at the `sm` breakpoint
.custom-class
display
none
@include
media-breakpoint-up
.custom-class
display
block
These Sass mixins translate in our compiled CSS using the values declared in our Sass variables. For example:
// X-Small devices (portrait phones, less than 576px)
// No media query for `xs` since this is the default in Bootstrap
// Small devices (landscape phones, 576px and up)
@media
min-width
576px
// Medium devices (tablets, 768px and up)
@media
min-width
768px
// Large devices (desktops, 992px and up)
@media
min-width
992px
// X-Large devices (large desktops, 1200px and up)
@media
min-width
1200px
// XX-Large devices (larger desktops, 1400px and up)
@media
min-width
1400px
Max-width
We occasionally use media queries that go in the other direction (the given screen size
or smaller
// No media query necessary for xs breakpoint as it’s effectively `@media (max-width: 0) { ... }`
@include
media-breakpoint-down
@include
media-breakpoint-down
@include
media-breakpoint-down
@include
media-breakpoint-down
@include
media-breakpoint-down
// Example: Style from medium breakpoint and down
@include
media-breakpoint-down
.custom-class
display
block
These mixins take those declared breakpoints, subtract
.02px
from them, and use them as our
max-width
values. For example:
// `xs` returns only a ruleset and no media query
// ... { ... }
// `sm` applies to x-small devices (portrait phones, less than 576px)
@media
max-width
575.98px
// `md` applies to small devices (landscape phones, less than 768px)
@media
max-width
767.98px
// `lg` applies to medium devices (tablets, less than 992px)
@media
max-width
991.98px
// `xl` applies to large devices (desktops, less than 1200px)
@media
max-width
1199.98px
// `xxl` applies to x-large devices (large desktops, less than 1400px)
@media
max-width
1399.98px
Why subtract .02px?
Browsers don’t currently support
range context queries
, so we work around the limitations of
min-
max-
prefixes
and viewports with fractional widths (which can occur under certain conditions on high-dpi devices, for instance) by using values with higher precision.
Single breakpoint
There are also media queries and mixins for targeting a single segment of screen sizes using the minimum and maximum breakpoint widths.
@include
media-breakpoint-only
@include
media-breakpoint-only
@include
media-breakpoint-only
@include
media-breakpoint-only
@include
media-breakpoint-only
@include
media-breakpoint-only
For example the
@include media-breakpoint-only(md) { ... }
will result in :
@media
min-width
768px
max-width
991.98px
Between breakpoints
Similarly, media queries may span multiple breakpoint widths:
@include
media-breakpoint-between
Which results in:
// Example
// Apply styles starting from medium devices and up to extra large devices
@media
min-width
768px
max-width
1199.98px