URL: https://getbootstrap.com/docs/5.0/getting-started/javascript
==================================================

Individual or compiled
Plugins can be included individually (using Bootstrap’s individual
js/dist/*.js
), or all at once using
or the minified
(don’t include both).
If you use a bundler (Webpack, Rollup…), you can use
/js/dist/*.js
files which are UMD ready.
Using Bootstrap as a module
We provide a version of Bootstrap built as
) which allows you to use Bootstrap as a module in your browser, if your
targeted browsers support it
script
type
"module"
import
Toast
from
'bootstrap.esm.min.js'
Array
from
document
querySelectorAll
'.toast'
forEach
toastNode
Toast
toastNode
script
Incompatible plugins
Due to browser limitations, some of our plugins, namely Dropdown, Tooltip and Popover plugins, cannot be used in a
<script>
tag with
module
type because they depend on Popper. For more information about the issue see
here
Dependencies
Some plugins and CSS components depend on other plugins. If you include plugins individually, make sure to check for these dependencies in the docs.
Our dropdowns, popovers and tooltips also depend on
Popper
Still want to use jQuery? It’s possible!
If Bootstrap detects
jQuery
in the
window
object
it’ll add all of our components in jQuery’s plugin system; this means you’ll be able to do
$('[data-bs-toggle="tooltip"]').tooltip()
to enable tooltips. The same goes for our other components.
Data attributes
Nearly all Bootstrap plugins can be enabled and configured through HTML alone with data attributes (our preferred way of using JavaScript functionality). Be sure to
only use one set of data attributes on a single element
(e.g., you cannot trigger a tooltip and modal from the same button.)
Selectors
Currently to query DOM elements we use the native methods
querySelector
querySelectorAll
for performance reasons, so you have to use
valid selectors
If you use special selectors, for example:
collapse:Example
be sure to escape them.
Events
show
) is triggered at the start of an event, and its past participle form (ex.
shown
) is triggered on the completion of an action.
All infinitive events provide
preventDefault()
functionality. This provides the ability to stop the execution of an action before it starts. Returning false from an event handler will also automatically call
preventDefault()
myModal
document
getElementById
'myModal'
myModal
addEventListener
'show.bs.modal'
function
event
data
return
event
preventDefault
// stops modal from being shown
jQuery events
jQuery
is present in the
window
object and there is no
data-bs-no-jquery
attribute set on
<body>
. If jQuery is found, Bootstrap will emit events thanks to jQuery’s event system. So if you want to listen to Bootstrap’s events, you’ll have to use the jQuery methods (
.one
) instead of
addEventListener
'#myTab a'
'shown.bs.tab'
function
// do something...
Programmatic API
All constructors accept an optional options object or nothing (which initiates a plugin with its default behavior):
myModalEl
document
getElementById
'myModal'
modal
Modal
myModalEl
// initialized with defaults
modal
Modal
myModalEl
keyboard
false
// initialized with no keyboard
If you’d like to get a particular plugin instance, each plugin exposes a
getInstance
method. In order to retrieve it directly from an element, do this:
CSS selectors in constructors
You can also use a CSS selector as the first argument instead of a DOM element to initialize the plugin. Currently the element for the plugin is found by the
querySelector
method since our plugins support a single element only.
modal
Modal
'#myModal'
dropdown
Dropdown
'[data-bs-toggle="dropdown"]'
Asynchronous functions and transitions
All programmatic API methods are
asynchronous
and return to the caller once the transition is started but
before it ends
In order to execute an action once the transition is complete, you can listen to the corresponding event.
myCollapseEl
document
getElementById
'myCollapse'
myCollapseEl
addEventListener
'shown.bs.collapse'
function
event
// Action to execute once the collapsible area is expanded
In addition a method call on a
transitioning component will be ignored
myCarouselEl
document
getElementById
'myCarousel'
carousel
Carousel
getInstance
myCarouselEl
// Retrieve a Carousel instance
myCarouselEl
addEventListener
'slid.bs.carousel'
function
event
carousel
// Will slide to the slide 2 as soon as the transition to slide 1 is finished
carousel
// Will start sliding to the slide 1 and returns to the caller
carousel
// !! Will be ignored, as the transition to the slide 1 is not finished !!
Default settings
You can change the default settings for a plugin by modifying the plugin’s
Constructor.Default
object:
// changes default for the modal plugin's `keyboard` option to false
Modal
Default
keyboard
false
No conflict (only if you use jQuery)
Sometimes it is necessary to use Bootstrap plugins with other UI frameworks. In these circumstances, namespace collisions can occasionally occur. If this happens, you may call
.noConflict
on the plugin you wish to revert the value of.
button
noConflict
// return $.fn.button to previously assigned value
// give $().bootstrapBtn the Bootstrap functionality
Version numbers
The version of each of Bootstrap’s plugins can be accessed via the
VERSION
property of the plugin’s constructor. For example, for the tooltip plugin:
Tooltip
VERSION
// => "5.0.2"
No special fallbacks when JavaScript is disabled
<noscript>
to explain the situation (and how to re-enable JavaScript) to your users, and/or add your own custom fallbacks.
Third-party libraries
like Prototype or jQuery UI. Despite
.noConflict
and namespaced events, there may be compatibility problems that you need to fix on your own.
Sanitizer
Tooltips and Popovers use our built-in sanitizer to sanitize options which accept HTML.
The default
allowList
value is the following:
ARIA_ATTRIBUTE_PATTERN
/^aria-[\w-]*$/i
DefaultAllowlist
// Global attributes allowed on any supplied element below.
'class'
'dir'
'id'
'lang'
'role'
ARIA_ATTRIBUTE_PATTERN
'target'
'href'
'title'
'rel'
area
code
'src'
'srcset'
'alt'
'title'
'width'
'height'
small
span
strong
If you want to add new values to this default
allowList
you can do the following:
myDefaultAllowList
Tooltip
Default
allowList
// To allow table elements
myDefaultAllowList
table
// To allow td elements and data-bs-option attributes on td elements
myDefaultAllowList
'data-bs-option'
// You can push your custom regex to validate your attributes.
// Be careful about your regular expressions being too lax
myCustomRegex
/^data-my-app-[\w-]+/
myDefaultAllowList
push
myCustomRegex
If you want to bypass our sanitizer because you prefer to use a dedicated library, for example
DOMPurify
, you should do the following:
yourTooltipEl
document
getElementById
'yourTooltip'
tooltip
Tooltip
yourTooltipEl
sanitizeFn
function
content
return
DOMPurify
sanitize
content