SOURCE URL: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly
SCRAPED: 2025-06-19 18:21:03
================================================================================

--- CODE BLOCK 1 ---
WebAssembly
--- END CODE BLOCK ---
JavaScript object acts as the namespace for all
WebAssembly
-related functionality.
Unlike most other global objects,
--- CODE BLOCK 2 ---
WebAssembly
--- END CODE BLOCK ---
is not a constructor (it is not a function object). You can compare it to
--- CODE BLOCK 5 ---
WebAssembly
--- END CODE BLOCK ---
, which is also a namespace object for mathematical constants and functions, or to
--- CODE BLOCK 6 ---
WebAssembly.instantiate()
--- END CODE BLOCK ---
which is the namespace object for internationalization constructors and other language-sensitive functions.
Description
The primary uses for the
--- CODE BLOCK 7 ---
WebAssembly.Memory()
--- END CODE BLOCK ---
object are:
Loading WebAssembly code, using the
--- CODE BLOCK 8 ---
WebAssembly.Table()
--- END CODE BLOCK ---
function.
Creating new memory and table instances via the
--- CODE BLOCK 9 ---
WebAssembly.CompileError()
--- END CODE BLOCK ---
--- CODE BLOCK 10 ---
WebAssembly.LinkError()
--- END CODE BLOCK ---
constructors.
Providing facilities to handle errors that occur in WebAssembly via the
--- CODE BLOCK 11 ---
WebAssembly.RuntimeError()
--- END CODE BLOCK ---
--- CODE BLOCK 12 ---
WebAssembly.CompileError
--- END CODE BLOCK ---
--- CODE BLOCK 13 ---
WebAssembly.Global
--- END CODE BLOCK ---
constructors.
Interfaces
--- CODE BLOCK 14 ---
WebAssembly.Module
--- END CODE BLOCK ---
Indicates an error during WebAssembly decoding or validation.
--- CODE BLOCK 15 ---
WebAssembly.Instance
--- END CODE BLOCK ---
Represents a global variable instance, accessible from both JavaScript and importable/exportable across one or more
--- CODE BLOCK 16 ---
WebAssembly.Module
--- END CODE BLOCK ---
instances. This allows dynamic linking of multiple modules.
--- CODE BLOCK 17 ---
WebAssembly.LinkError
--- END CODE BLOCK ---
Is a stateful, executable instance of a
--- CODE BLOCK 18 ---
WebAssembly.Memory
--- END CODE BLOCK ---
--- CODE BLOCK 20 ---
ArrayBuffer
--- END CODE BLOCK ---
Indicates an error during module instantiation (besides
traps
from the start function).
--- CODE BLOCK 22 ---
WebAssembly.Module
--- END CODE BLOCK ---
An object whose
--- CODE BLOCK 23 ---
WebAssembly.RuntimeError
--- END CODE BLOCK ---
property is a resizable
--- CODE BLOCK 24 ---
WebAssembly.Table
--- END CODE BLOCK ---
that holds the raw bytes of memory accessed by a WebAssembly
--- CODE BLOCK 25 ---
WebAssembly.Tag
--- END CODE BLOCK ---
--- CODE BLOCK 26 ---
WebAssembly.Exception
--- END CODE BLOCK ---
Contains stateless WebAssembly code that has already been compiled by the browser and can be efficiently
shared with Workers
, and instantiated multiple times.
--- CODE BLOCK 27 ---
WebAssembly.compile()
--- END CODE BLOCK ---
Error type that is thrown whenever WebAssembly specifies a
trap
--- CODE BLOCK 28 ---
WebAssembly.Module
--- END CODE BLOCK ---
An array-like structure representing a WebAssembly Table, which stores
references
, such as function references.
--- CODE BLOCK 29 ---
WebAssembly.compileStreaming()
--- END CODE BLOCK ---
An object that represents a type of WebAssembly exception.
--- CODE BLOCK 30 ---
WebAssembly.Module
--- END CODE BLOCK ---
A WebAssembly exception object that can be thrown, caught, and rethrown both within and across WebAssembly/JavaScript boundaries.
Static methods
--- CODE BLOCK 31 ---
WebAssembly.instantiate()
--- END CODE BLOCK ---
Compiles a
--- CODE BLOCK 34 ---
WebAssembly.instantiateStreaming()
--- END CODE BLOCK ---
from WebAssembly binary code, leaving instantiation as a separate step.
--- CODE BLOCK 37 ---
WebAssembly.validate()
--- END CODE BLOCK ---
Compiles a
--- CODE BLOCK 40 ---
ResultObject
--- END CODE BLOCK ---
directly from a streamed underlying source, leaving instantiation as a separate step.
--- CODE BLOCK 41 ---
instantiateStreaming()
--- END CODE BLOCK ---
The primary API for compiling and instantiating WebAssembly code, returning both a
--- CODE BLOCK 44 ---
const importObject = {
my_namespace: { imported_func: (arg) => console.log(arg) },
WebAssembly.instantiateStreaming(fetch("simple.wasm"), importObject).then(
(obj) => obj.instance.exports.exported_func(),
--- END CODE BLOCK ---
and its first
--- CODE BLOCK 45 ---
const importObject = {
my_namespace: { imported_func: (arg) => console.log(arg) },
WebAssembly.instantiateStreaming(fetch("simple.wasm"), importObject).then(
(obj) => obj.instance.exports.exported_func(),
--- END CODE BLOCK ---
--- CODE BLOCK 46 ---
ResultObject
--- END CODE BLOCK ---
Compiles and instantiates a WebAssembly module directly from a streamed underlying source, returning both a
[CODE_BLOCK_35]
and its first
[CODE_BLOCK_36]
[CODE_BLOCK_37]
Validates a given typed array of WebAssembly binary code, returning whether the bytes are valid WebAssembly code (
[CODE_BLOCK_38]
) or not (
[CODE_BLOCK_39]
Examples
Stream a Wasm module then compile and instantiate it
The following example (see our
instantiate-streaming.html
demo on GitHub, and
view it live
also) directly streams a Wasm module from an underlying source then compiles and instantiates it, the promise fulfilling with a
[CODE_BLOCK_40]
. Because the
[CODE_BLOCK_41]
function accepts a promise for a
[CODE_BLOCK_42]
object, you can directly pass it a
[CODE_BLOCK_43]
call, and it will pass the response into the function when it fulfills.
Copy to Clipboard
[CODE_BLOCK_44]
[CODE_BLOCK_46]
[CODE_BLOCK_47]
property is then accessed, and the contained exported function invoked.
Specifications
Specification
WebAssembly JavaScript Interface
webassembly-namespace
Browser compatibility
See also
WebAssembly
overview
WebAssembly concepts
Using the WebAssembly JavaScript API
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
Apr 22, 2025
MDN contributors
View this page on GitHub
Report a problem with this content