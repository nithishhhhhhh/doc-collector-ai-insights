SOURCE URL: https://nextjs.org/docs/pages/guides/upgrading/version-11
SCRAPED: 2025-06-19 17:35:37
================================================================================

Menu
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Guides
Upgrading
Version 11
You are currently viewing the documentation for Pages Router.
How to upgrade to version 11
To upgrade to version 11, run the following command:
Terminal
--- CODE BLOCK 1 ---
npm i next@11 react@17 react-dom@17
--- END CODE BLOCK ---
Terminal
--- CODE BLOCK 3 ---
yarn add next@11 react@17 react-dom@17
--- END CODE BLOCK ---
Terminal
--- CODE BLOCK 5 ---
pnpm up next@11 react@17 react-dom@17
--- END CODE BLOCK ---
Terminal
--- CODE BLOCK 7 ---
bun add next@11 react@17 react-dom@17
--- END CODE BLOCK ---
Good to know:
If you are using TypeScript, ensure you also upgrade
--- CODE BLOCK 9 ---
@types/react
--- END CODE BLOCK ---
--- CODE BLOCK 10 ---
@types/react-dom
--- END CODE BLOCK ---
to their corresponding versions.
Webpack 5
Webpack 5 is now the default for all Next.js applications. If you did not have a custom webpack configuration, your application is already using webpack 5. If you do have a custom webpack configuration, you can refer to the
Next.js webpack 5 documentation
for upgrade guidance.
Cleaning the
--- CODE BLOCK 14 ---
cleanDistDir: false
--- END CODE BLOCK ---
is now a default
The build output directory (defaults to
--- CODE BLOCK 15 ---
next.config.js
--- END CODE BLOCK ---
) is now cleared by default except for the Next.js caches. You can refer to
the cleaning
--- CODE BLOCK 24 ---
PORT=4000 next start
--- END CODE BLOCK ---
for more information.
If your application was relying on this behavior previously you can disable the new default behavior by adding the
--- CODE BLOCK 25 ---
PORT=4000 next start
--- END CODE BLOCK ---
flag in
--- CODE BLOCK 26 ---
next.config.js
--- END CODE BLOCK ---
--- CODE BLOCK 28 ---
next-images
--- END CODE BLOCK ---
is now supported for
--- CODE BLOCK 29 ---
next-optimized-images
--- END CODE BLOCK ---
--- CODE BLOCK 31 ---
module.exports = {
images: {
disableStaticImages: true,
--- END CODE BLOCK ---
Next.js 11 supports the
--- CODE BLOCK 32 ---
module.exports = {
images: {
disableStaticImages: true,
--- END CODE BLOCK ---
environment variable to set the port the application runs on. Using
--- CODE BLOCK 33 ---
super.componentDidCatch()
--- END CODE BLOCK ---
--- CODE BLOCK 34 ---
pages/_app.js
--- END CODE BLOCK ---
is still recommended but if you were prohibited from using
--- CODE BLOCK 36 ---
componentDidCatch
--- END CODE BLOCK ---
in any way you can now use
--- CODE BLOCK 37 ---
pages/_app.js
--- END CODE BLOCK ---
as an alternative:
Example:
--- CODE BLOCK 38 ---
componentDidCatch
--- END CODE BLOCK ---
--- CODE BLOCK 41 ---
pages/_app.js
--- END CODE BLOCK ---
customization to import images
Next.js 11 supports static image imports with
--- CODE BLOCK 42 ---
pages/_app.js
--- END CODE BLOCK ---
. This new feature relies on being able to process image imports. If you previously added the
--- CODE BLOCK 47 ---
getStaticProps
--- END CODE BLOCK ---
--- CODE BLOCK 48 ---
getServerSideProps
--- END CODE BLOCK ---
packages you can either move to the new built-in support using
--- CODE BLOCK 54 ---
layout="fill"
--- END CODE BLOCK ---
or disable the feature:
next.config.js
--- CODE BLOCK 57 ---
next/dynamic
--- END CODE BLOCK ---
Remove
--- CODE BLOCK 61 ---
next/dynamic
--- END CODE BLOCK ---
from
--- CODE BLOCK 67 ---
Head.rewind
--- END CODE BLOCK ---
--- CODE BLOCK 68 ---
Head.rewind
--- END CODE BLOCK ---
component's
--- CODE BLOCK 69 ---
Head.rewind
--- END CODE BLOCK ---
was deprecated in Next.js 9 as it's no longer needed and has since been a no-op. In Next.js 11, it was removed.
If your
--- CODE BLOCK 70 ---
import moment from 'moment'
import 'moment/locale/ja'
moment.locale('ja')
--- END CODE BLOCK ---
has a custom
--- CODE BLOCK 71 ---
import moment from 'moment'
import 'moment/locale/ja'
moment.locale('ja')
--- END CODE BLOCK ---
method you can remove
--- CODE BLOCK 72 ---
excludeDefaultMomentLocales: false
--- END CODE BLOCK ---
as it is no longer needed.
Remove
--- CODE BLOCK 73 ---
next.config.js
--- END CODE BLOCK ---
from
--- CODE BLOCK 74 ---
router.events
--- END CODE BLOCK ---
This export was deprecated in Next.js 9 as it's no longer needed and has since been a no-op with a warning during development. In Next.js 11 it was removed.
If your
--- CODE BLOCK 75 ---
router.events
--- END CODE BLOCK ---
imports
--- CODE BLOCK 76 ---
router.events
--- END CODE BLOCK ---
from
--- CODE BLOCK 77 ---
router.events
--- END CODE BLOCK ---
you can remove
--- CODE BLOCK 79 ---
useEffect(() => {
const handleRouteChange = (url, { shallow }) => {
console.log(
`App is changing to ${url} ${
shallow ? 'with' : 'without'
} shallow routing`
router.events.on('routeChangeStart', handleRouteChange)
// If the component is unmounted, unsubscribe
// from the event with the `off` method:
return () => {
router.events.off('routeChangeStart', handleRouteChange)
}, [router])
--- END CODE BLOCK ---
as it was removed. Learn more in
the documentation
Remove
--- CODE BLOCK 80 ---
useEffect(() => {
const handleRouteChange = (url, { shallow }) => {
console.log(
`App is changing to ${url} ${
shallow ? 'with' : 'without'
} shallow routing`
router.events.on('routeChangeStart', handleRouteChange)
// If the component is unmounted, unsubscribe
// from the event with the `off` method:
return () => {
router.events.off('routeChangeStart', handleRouteChange)
}, [router])
--- END CODE BLOCK ---
usage from page components
This property was deprecated in Next.js 4 and has since shown a warning during development. With the introduction of
--- CODE BLOCK 81 ---
router.router.events
--- END CODE BLOCK ---
--- CODE BLOCK 82 ---
router.events
--- END CODE BLOCK ---
these methods already disallowed the usage of
--- CODE BLOCK 83 ---
import React from 'react'
--- END CODE BLOCK ---
. In Next.js 11, it was removed completely.
You can learn more in
the documentation
Remove
--- CODE BLOCK 86 ---
npm install react@latest react-dom@latest
--- END CODE BLOCK ---
property on
--- CODE BLOCK 87 ---
npm install react@latest react-dom@latest
--- END CODE BLOCK ---
--- CODE BLOCK 89 ---
yarn add react@latest react-dom@latest
--- END CODE BLOCK ---
property on
--- CODE BLOCK 90 ---
yarn add react@latest react-dom@latest
--- END CODE BLOCK ---
was deprecated in Next.js 10.0.1. You can use
[CODE_BLOCK_54]
instead. In Next.js 11
[CODE_BLOCK_55]
was removed.
Remove
[CODE_BLOCK_56]
property on
[CODE_BLOCK_57]
[CODE_BLOCK_58]
[CODE_BLOCK_59]
option for
[CODE_BLOCK_60]
were deprecated in Next.js 9.5. This was done in order to make the
[CODE_BLOCK_61]
API closer to
[CODE_BLOCK_62]
. In Next.js 11, the
[CODE_BLOCK_63]
[CODE_BLOCK_64]
options were removed.
This option hasn't been mentioned in the documentation since Next.js 8 so it's less likely that your application is using it.
If your application does use
[CODE_BLOCK_65]
[CODE_BLOCK_66]
you can refer to
the documentation
Remove
[CODE_BLOCK_67]
[CODE_BLOCK_68]
has been a no-op since Next.js 9.5, in Next.js 11 it was removed. You can safely remove your usage of
[CODE_BLOCK_69]
Moment.js locales excluded by default
Moment.js includes translations for a lot of locales by default. Next.js now automatically excludes these locales by default to optimize bundle size for applications using Moment.js.
To load a specific locale use this snippet:
[CODE_BLOCK_70]
You can opt-out of this new default by adding
[CODE_BLOCK_72]
[CODE_BLOCK_73]
if you do not want the new behavior, do note it's highly recommended to not disable this new optimization as it significantly reduces the size of Moment.js.
Update usage of
[CODE_BLOCK_74]
In case you're accessing
[CODE_BLOCK_75]
during rendering, in Next.js 11
[CODE_BLOCK_76]
is no longer provided during pre-rendering. Ensure you're accessing
[CODE_BLOCK_77]
[CODE_BLOCK_78]
[CODE_BLOCK_79]
If your application uses
[CODE_BLOCK_81]
which was an internal property that was not public please make sure to use
[CODE_BLOCK_82]
as well.
React 16 to 17
React 17 introduced a new
JSX Transform
that brings a long-time Next.js feature to the wider React ecosystem: Not having to
[CODE_BLOCK_83]
when using JSX. When using React 17 Next.js will automatically use the new transform. This transform does not make the
[CODE_BLOCK_84]
variable global, which was an unintended side-effect of the previous Next.js implementation. A
codemod is available
to automatically fix cases where you accidentally used
[CODE_BLOCK_85]
without importing it.
Most applications already use the latest version of React, with Next.js 11 the minimum React version has been updated to 17.0.2.
To upgrade you can run the following command:
[CODE_BLOCK_86]
Or using
[CODE_BLOCK_88]
[CODE_BLOCK_89]
Was this helpful?
supported.
Send