SOURCE URL: https://nextjs.org/docs/pages/building-your-application/configuring/error-handling
SCRAPED: 2025-06-19 17:19:25
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
App Router
Getting Started
Error Handling
Error Handling
Errors can be divided into two categories:
expected errors
uncaught exceptions
. This page will walk you through how you can handle these errors in your Next.js application.
Handling expected errors
Expected errors are those that can occur during the normal operation of the application, such as those from
server-side form validation
or failed requests. These errors should be handled explicitly and returned to the client.
Server Functions
You can use the
--- CODE BLOCK 1 ---
useActionState
--- END CODE BLOCK ---
hook to handle expected errors in
Server Functions
For these errors, avoid using
--- CODE BLOCK 4 ---
'use server'
export async function createPost(prevState: any, formData: FormData) {
const title = formData.get('title')
const content = formData.get('content')
const res = await fetch('https://api.vercel.app/posts', {
method: 'POST',
body: { title, content },
const json = await res.json()
if (!res.ok) {
return { message: 'Failed to create post' }
--- END CODE BLOCK ---
--- CODE BLOCK 5 ---
'use server'
export async function createPost(prevState: any, formData: FormData) {
const title = formData.get('title')
const content = formData.get('content')
const res = await fetch('https://api.vercel.app/posts', {
method: 'POST',
body: { title, content },
const json = await res.json()
if (!res.ok) {
return { message: 'Failed to create post' }
--- END CODE BLOCK ---
blocks and throw errors. Instead, model expected errors as return values.
app/actions.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 6 ---
useActionState
--- END CODE BLOCK ---
You can pass your action to the
--- CODE BLOCK 9 ---
'use client'
import { useActionState } from 'react'
import { createPost } from '@/app/actions'
const initialState = {
message: '',
export function Form() {
const [state, formAction, pending] = useActionState(createPost, initialState)
return (
<form action={formAction}>
<label htmlFor="title">Title</label>
<input type="text" id="title" name="title" required />
<label htmlFor="content">Content</label>
<textarea id="content" name="content" required />
{state?.message && <p aria-live="polite">{state.message}</p>}
<button disabled={pending}>Create Post</button>
</form>
--- END CODE BLOCK ---
hook and use the returned
--- CODE BLOCK 11 ---
export default async function Page() {
const res = await fetch(`https://...`)
const data = await res.json()
if (!res.ok) {
return 'There was an error.'
return '...'
--- END CODE BLOCK ---
to display an error message.
app/ui/form.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 12 ---
export default async function Page() {
const res = await fetch(`https://...`)
const data = await res.json()
if (!res.ok) {
return 'There was an error.'
return '...'
--- END CODE BLOCK ---
Server Components
When fetching data inside of a Server Component, you can use the response to conditionally render an error message or
--- CODE BLOCK 15 ---
import { getPostBySlug } from '@/lib/posts'
export default async function Page({ params }: { params: { slug: string } }) {
const { slug } = await params
const post = getPostBySlug(slug)
if (!post) {
notFound()
return <div>{post.title}</div>
--- END CODE BLOCK ---
app/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 16 ---
import { getPostBySlug } from '@/lib/posts'
export default async function Page({ params }: { params: { slug: string } }) {
const { slug } = await params
const post = getPostBySlug(slug)
if (!post) {
notFound()
return <div>{post.title}</div>
--- END CODE BLOCK ---
Not found
You can call the
--- CODE BLOCK 18 ---
export default function NotFound() {
return <div>404 - Page Not Found</div>
--- END CODE BLOCK ---
function within a route segment and use the
--- CODE BLOCK 20 ---
'use client' // Error boundaries must be Client Components
import { useEffect } from 'react'
export default function Error({
error,
reset,
}: {
error: Error & { digest?: string }
reset: () => void
}) {
useEffect(() => {
// Log the error to an error reporting service
console.error(error)
}, [error])
return (
<div>
<h2>Something went wrong!</h2>
<button
onClick={
// Attempt to recover by trying to re-render the segment
() => reset()
Try again
</button>
</div>
--- END CODE BLOCK ---
file to show a 404 UI.
app/blog/[slug]/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 21 ---
'use client' // Error boundaries must be Client Components
import { useEffect } from 'react'
export default function Error({
error,
reset,
}: {
error: Error & { digest?: string }
reset: () => void
}) {
useEffect(() => {
// Log the error to an error reporting service
console.error(error)
}, [error])
return (
<div>
<h2>Something went wrong!</h2>
<button
onClick={
// Attempt to recover by trying to re-render the segment
() => reset()
Try again
</button>
</div>
--- END CODE BLOCK ---
app/blog/[slug]/not-found.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 26 ---
'use client' // Error boundaries must be Client Components
export default function GlobalError({
error,
reset,
}: {
error: Error & { digest?: string }
reset: () => void
}) {
return (
// global-error must include html and body tags
<html>
<body>
<h2>Something went wrong!</h2>
<button onClick={() => reset()}>Try again</button>
</body>
</html>
--- END CODE BLOCK ---
Handling uncaught exceptions
Uncaught exceptions are unexpected errors that indicate bugs or issues that should not occur during the normal flow of your application. These should be handled by throwing errors, which will then be caught by error boundaries.
Nested error boundaries
Next.js uses error boundaries to handle uncaught exceptions. Error boundaries catch errors in their child components and display a fallback UI instead of the component tree that crashed.
Create an error boundary by adding an
[CODE_BLOCK_19]
file inside a route segment and exporting a React component:
app/dashboard/error.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_20]
Errors will bubble up to the nearest parent error boundary. This allows for granular error handling by placing
[CODE_BLOCK_22]
files at different levels in the
route hierarchy
Global errors
While less common, you can handle errors in the root layout using the
[CODE_BLOCK_23]
file, located in the root app directory, even when leveraging
internationalization
. Global error UI must define its own
[CODE_BLOCK_24]
[CODE_BLOCK_25]
tags, since it is replacing the root layout or template when active.
app/global-error.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_26]
API Reference
Learn more about the features mentioned in this page by reading the API Reference.
redirect
API Reference for the redirect function.
error.js
API reference for the error.js special file.
notFound
API Reference for the notFound function.
not-found.js
API reference for the not-found.js file.
Was this helpful?
supported.
Send