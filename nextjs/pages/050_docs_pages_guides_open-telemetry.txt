SOURCE URL: https://nextjs.org/docs/pages/guides/open-telemetry
SCRAPED: 2025-06-19 17:14:54
================================================================================

Menu
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Pages Router
Guides
OpenTelemetry
You are currently viewing the documentation for Pages Router.
How to instrument your Next.js app with OpenTelemetry
Observability is crucial for understanding and optimizing the behavior and performance of your Next.js app.
As applications become more complex, it becomes increasingly difficult to identify and diagnose issues that may arise. By leveraging observability tools, such as logging and metrics, developers can gain insights into their application's behavior and identify areas for optimization. With observability, developers can proactively address issues before they become major problems and provide a better user experience. Therefore, it is highly recommended to use observability in your Next.js applications to improve performance, optimize resources, and enhance user experience.
We recommend using OpenTelemetry for instrumenting your apps.
It's a platform-agnostic way to instrument apps that allows you to change your observability provider without changing your code.
Read
Official OpenTelemetry docs
for more information about OpenTelemetry and how it works.
This documentation uses terms like
Span
Trace
Exporter
throughout this doc, all of which can be found in
the OpenTelemetry Observability Primer
Next.js supports OpenTelemetry instrumentation out of the box, which means that we already instrumented Next.js itself.
When you enable OpenTelemetry we will automatically wrap all your code like
--- CODE BLOCK 1 ---
getStaticProps
--- END CODE BLOCK ---
spans
with helpful attributes.
Getting Started
OpenTelemetry is extensible but setting it up properly can be quite verbose.
That's why we prepared a package
--- CODE BLOCK 2 ---
@vercel/otel
--- END CODE BLOCK ---
that helps you get started quickly.
Using
--- CODE BLOCK 3 ---
@vercel/otel
--- END CODE BLOCK ---
To get started, install the following packages:
Terminal
--- CODE BLOCK 4 ---
npm install @vercel/otel @opentelemetry/sdk-logs @opentelemetry/api-logs @opentelemetry/instrumentation
--- END CODE BLOCK ---
Next, create a custom
--- CODE BLOCK 6 ---
instrumentation.ts
--- END CODE BLOCK ---
--- CODE BLOCK 9 ---
import { registerOTel } from '@vercel/otel'
export function register() {
registerOTel({ serviceName: 'next-app' })
--- END CODE BLOCK ---
) file in the
root directory
of the project (or inside
--- CODE BLOCK 10 ---
import { registerOTel } from '@vercel/otel'
export function register() {
registerOTel({ serviceName: 'next-app' })
--- END CODE BLOCK ---
folder if using one):
your-project/instrumentation.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 11 ---
@vercel/otel
--- END CODE BLOCK ---
See the
--- CODE BLOCK 19 ---
pageExtensions
--- END CODE BLOCK ---
documentation
for additional configuration options.
Good to know
--- CODE BLOCK 20 ---
instrumentation
--- END CODE BLOCK ---
file should be in the root of your project and not inside the
--- CODE BLOCK 21 ---
@vercel/otel
--- END CODE BLOCK ---
--- CODE BLOCK 22 ---
npm install @opentelemetry/sdk-node @opentelemetry/resources @opentelemetry/semantic-conventions @opentelemetry/sdk-trace-node @opentelemetry/exporter-trace-otlp-http
--- END CODE BLOCK ---
directory. If you're using the
--- CODE BLOCK 23 ---
npm install @opentelemetry/sdk-node @opentelemetry/resources @opentelemetry/semantic-conventions @opentelemetry/sdk-trace-node @opentelemetry/exporter-trace-otlp-http
--- END CODE BLOCK ---
folder, then place the file inside
--- CODE BLOCK 25 ---
instrumentation.ts
--- END CODE BLOCK ---
alongside
--- CODE BLOCK 26 ---
@vercel/otel
--- END CODE BLOCK ---
--- CODE BLOCK 28 ---
process.env.NEXT_RUNTIME === 'nodejs'
--- END CODE BLOCK ---
If you use the
--- CODE BLOCK 29 ---
instrumentation.node.ts
--- END CODE BLOCK ---
config option
to add a suffix, you will also need to update the
--- CODE BLOCK 30 ---
export async function register() {
if (process.env.NEXT_RUNTIME === 'nodejs') {
await import('./instrumentation.node.ts')
--- END CODE BLOCK ---
filename to match.
We have created a basic
with-opentelemetry
example that you can use.
Manual OpenTelemetry configuration
--- CODE BLOCK 31 ---
export async function register() {
if (process.env.NEXT_RUNTIME === 'nodejs') {
await import('./instrumentation.node.ts')
--- END CODE BLOCK ---
package provides many configuration options and should serve most of common use cases. But if it doesn't suit your needs, you can configure OpenTelemetry manually.
Firstly you need to install OpenTelemetry packages:
Terminal
--- CODE BLOCK 32 ---
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http'
import { Resource } from '@opentelemetry/resources'
import { NodeSDK } from '@opentelemetry/sdk-node'
import { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-node'
import { ATTR_SERVICE_NAME } from '@opentelemetry/semantic-conventions'
const sdk = new NodeSDK({
resource: new Resource({
[ATTR_SERVICE_NAME]: 'next-app',
spanProcessor: new SimpleSpanProcessor(new OTLPTraceExporter()),
sdk.start()
--- END CODE BLOCK ---
Now you can initialize
--- CODE BLOCK 34 ---
@vercel/otel
--- END CODE BLOCK ---
in your
--- CODE BLOCK 35 ---
@vercel/otel
--- END CODE BLOCK ---
Unlike
--- CODE BLOCK 36 ---
@vercel/otel
--- END CODE BLOCK ---
--- CODE BLOCK 37 ---
GET /requested/pathname
--- END CODE BLOCK ---
is not compatible with edge runtime, so you need to make sure that you are importing them only when
--- CODE BLOCK 38 ---
NEXT_OTEL_VERBOSE=1
--- END CODE BLOCK ---
. We recommend creating a new file
--- CODE BLOCK 39 ---
@vercel/otel
--- END CODE BLOCK ---
which you conditionally import only when using node:
instrumentation.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 40 ---
@vercel/otel
--- END CODE BLOCK ---
instrumentation.node.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 42 ---
npm install @opentelemetry/api
--- END CODE BLOCK ---
Doing this is equivalent to using
--- CODE BLOCK 44 ---
import { trace } from '@opentelemetry/api'
export async function fetchGithubStars() {
return await trace
.getTracer('nextjs-example')
.startActiveSpan('fetchGithubStars', async (span) => {
try {
return await getValue()
} finally {
span.end()
--- END CODE BLOCK ---
, but it's possible to modify and extend some features that are not exposed by the
--- CODE BLOCK 45 ---
import { trace } from '@opentelemetry/api'
export async function fetchGithubStars() {
return await trace
.getTracer('nextjs-example')
.startActiveSpan('fetchGithubStars', async (span) => {
try {
return await getValue()
} finally {
span.end()
--- END CODE BLOCK ---
. If edge runtime support is necessary, you will have to use
--- CODE BLOCK 48 ---
next.span_name
--- END CODE BLOCK ---
Testing your instrumentation
You need an OpenTelemetry collector with a compatible backend to test OpenTelemetry traces locally.
We recommend using our
OpenTelemetry dev environment
If everything works well you should be able to see the root server span labeled as
--- CODE BLOCK 49 ---
next.span_type
--- END CODE BLOCK ---
All other spans from that particular trace will be nested under it.
Next.js traces more spans than are emitted by default.
To see more spans, you must set
--- CODE BLOCK 51 ---
/[param]/user
--- END CODE BLOCK ---
Deployment
Using OpenTelemetry Collector
When you are deploying with OpenTelemetry Collector, you can use
--- CODE BLOCK 59 ---
/(groupA)/layout.ts
--- END CODE BLOCK ---
It will work both on Vercel and when self-hosted.
Deploying on Vercel
We made sure that OpenTelemetry works out of the box on Vercel.
Follow
Vercel documentation
to connect your project to an observability provider.
Self-hosting
Deploying to other platforms is also straightforward. You will need to spin up your own OpenTelemetry Collector to receive and process the telemetry data from your Next.js app.
To do this, follow the
OpenTelemetry Collector Getting Started guide
, which will walk you through setting up the collector and configuring it to receive data from your Next.js app.
Once you have your collector up and running, you can deploy your Next.js app to your chosen platform following their respective deployment guides.
Custom Exporters
OpenTelemetry Collector is not necessary. You can use a custom OpenTelemetry exporter with
--- CODE BLOCK 60 ---
/(groupB)/layout.ts
--- END CODE BLOCK ---
manual OpenTelemetry configuration
Custom Spans
You can add a custom span with
OpenTelemetry APIs
Terminal
--- CODE BLOCK 61 ---
[http.method] [next.route]
--- END CODE BLOCK ---
The following example demonstrates a function that fetches GitHub stars and adds a custom
--- CODE BLOCK 63 ---
BaseServer.handleRequest
--- END CODE BLOCK ---
span to track the fetch request's result:
--- CODE BLOCK 64 ---
http.method
--- END CODE BLOCK ---
--- CODE BLOCK 67 ---
http.target
--- END CODE BLOCK ---
function will execute before your code runs in a new environment.
You can start creating new spans, and they should be correctly added to the exported trace.
Default Spans in Next.js
Next.js automatically instruments several spans for you to provide useful insights into your application's performance.
Attributes on spans follow
OpenTelemetry semantic conventions
. We also add some custom attributes under the
--- CODE BLOCK 68 ---
next.span_name
--- END CODE BLOCK ---
namespace:
--- CODE BLOCK 69 ---
next.span_type
--- END CODE BLOCK ---
- duplicates span name
--- CODE BLOCK 71 ---
render route (app) [next.route]
--- END CODE BLOCK ---
- each span type has a unique identifier
--- CODE BLOCK 72 ---
next.span_type
--- END CODE BLOCK ---
- The route pattern of the request (e.g.,
--- CODE BLOCK 73 ---
AppRender.getBodyResult
--- END CODE BLOCK ---
--- CODE BLOCK 74 ---
next.span_name
--- END CODE BLOCK ---
(true/false) - Whether the request is an RSC request, such as prefetch.
--- CODE BLOCK 75 ---
next.span_type
--- END CODE BLOCK ---
This is an internal value used by an app router.
You can think about it as a route to a special file (like
--- CODE BLOCK 77 ---
fetch [http.method] [http.url]
--- END CODE BLOCK ---
--- CODE BLOCK 78 ---
next.span_type
--- END CODE BLOCK ---
--- CODE BLOCK 79 ---
AppRender.fetch
--- END CODE BLOCK ---
and others)
It can be used as a unique identifier only when paired with
--- CODE BLOCK 80 ---
http.method
--- END CODE BLOCK ---
because
--- CODE BLOCK 82 ---
net.peer.name
--- END CODE BLOCK ---
can be used to identify both
--- CODE BLOCK 83 ---
net.peer.port
--- END CODE BLOCK ---
--- CODE BLOCK 84 ---
next.span_name
--- END CODE BLOCK ---
--- CODE BLOCK 85 ---
next.span_type
--- END CODE BLOCK ---
--- CODE BLOCK 86 ---
NEXT_OTEL_FETCH_DISABLED=1
--- END CODE BLOCK ---
--- CODE BLOCK 87 ---
executing api route (app) [next.route]
--- END CODE BLOCK ---
This span represents the root span for each incoming request to your Next.js application. It tracks the HTTP method, route, target, and status code of the request.
Attributes:
Common HTTP attributes
--- CODE BLOCK 88 ---
next.span_type
--- END CODE BLOCK ---
--- CODE BLOCK 89 ---
AppRouteRouteHandlers.runHandler
--- END CODE BLOCK ---
Server HTTP attributes
--- CODE BLOCK 90 ---
next.span_name
--- END CODE BLOCK ---
--- CODE BLOCK 91 ---
next.span_type
--- END CODE BLOCK ---
--- CODE BLOCK 93 ---
getServerSideProps [next.route]
--- END CODE BLOCK ---
--- CODE BLOCK 94 ---
next.span_type
--- END CODE BLOCK ---
--- CODE BLOCK 95 ---
Render.getServerSideProps
--- END CODE BLOCK ---
--- CODE BLOCK 96 ---
getServerSideProps
--- END CODE BLOCK ---
--- CODE BLOCK 97 ---
next.span_name
--- END CODE BLOCK ---
--- CODE BLOCK 98 ---
next.span_type
--- END CODE BLOCK ---
This span represents the process of rendering a route in the app router.
Attributes:
--- CODE BLOCK 100 ---
getStaticProps [next.route]
--- END CODE BLOCK ---
--- CODE BLOCK 101 ---
next.span_type
--- END CODE BLOCK ---
--- CODE BLOCK 102 ---
Render.getStaticProps
--- END CODE BLOCK ---
--- CODE BLOCK 103 ---
getStaticProps
--- END CODE BLOCK ---
--- CODE BLOCK 104 ---
next.span_name
--- END CODE BLOCK ---
--- CODE BLOCK 105 ---
next.span_type
--- END CODE BLOCK ---
This span represents the fetch request executed in your code.
Attributes:
Common HTTP attributes
--- CODE BLOCK 107 ---
render route (pages) [next.route]
--- END CODE BLOCK ---
Client HTTP attributes
--- CODE BLOCK 108 ---
next.span_type
--- END CODE BLOCK ---
--- CODE BLOCK 109 ---
Render.renderDocument
--- END CODE BLOCK ---
--- CODE BLOCK 110 ---
next.span_name
--- END CODE BLOCK ---
(only if specified)
--- CODE BLOCK 111 ---
next.span_type
--- END CODE BLOCK ---
--- CODE BLOCK 113 ---
generateMetadata [next.page]
--- END CODE BLOCK ---
This span can be turned off by setting
--- CODE BLOCK 114 ---
next.span_type
--- END CODE BLOCK ---
in your environment. This is useful when you want to use a custom fetch instrumentation library.
--- CODE BLOCK 115 ---
ResolveMetadata.generateMetadata
--- END CODE BLOCK ---
--- CODE BLOCK 116 ---
next.span_name
--- END CODE BLOCK ---
--- CODE BLOCK 117 ---
next.span_type
--- END CODE BLOCK ---
This span represents the execution of an API Route Handler in the app router.
Attributes:
--- CODE BLOCK 119 ---
resolve page components
--- END CODE BLOCK ---
--- CODE BLOCK 120 ---
next.span_type
--- END CODE BLOCK ---
--- CODE BLOCK 121 ---
NextNodeServer.findPageComponents
--- END CODE BLOCK ---
--- CODE BLOCK 122 ---
next.span_name
--- END CODE BLOCK ---
--- CODE BLOCK 123 ---
next.span_type
--- END CODE BLOCK ---
--- CODE BLOCK 125 ---
resolve segment modules
--- END CODE BLOCK ---
This span represents the execution of
--- CODE BLOCK 126 ---
next.span_type
--- END CODE BLOCK ---
for a specific route.
Attributes:
--- CODE BLOCK 127 ---
NextNodeServer.getLayoutOrPageModule
--- END CODE BLOCK ---
--- CODE BLOCK 128 ---
next.span_name
--- END CODE BLOCK ---
--- CODE BLOCK 129 ---
next.span_type
--- END CODE BLOCK ---
--- CODE BLOCK 130 ---
next.segment
--- END CODE BLOCK ---
--- CODE BLOCK 131 ---
start response
--- END CODE BLOCK ---
--- CODE BLOCK 132 ---
next.span_type
--- END CODE BLOCK ---
This span represents the execution of
--- CODE BLOCK 133 ---
NextNodeServer.startResponse
--- END CODE BLOCK ---
for a specific route.
Attributes:
[CODE_BLOCK_104]
[CODE_BLOCK_105]
[CODE_BLOCK_106]
[CODE_BLOCK_107]
[CODE_BLOCK_108]
[CODE_BLOCK_109]
This span represents the process of rendering the document for a specific route.
Attributes:
[CODE_BLOCK_110]
[CODE_BLOCK_111]
[CODE_BLOCK_112]
[CODE_BLOCK_113]
[CODE_BLOCK_114]
[CODE_BLOCK_115]
This span represents the process of generating metadata for a specific page (a single route can have multiple of these spans).
Attributes:
[CODE_BLOCK_116]
[CODE_BLOCK_117]
[CODE_BLOCK_118]
[CODE_BLOCK_119]
[CODE_BLOCK_120]
[CODE_BLOCK_121]
This span represents the process of resolving page components for a specific page.
Attributes:
[CODE_BLOCK_122]
[CODE_BLOCK_123]
[CODE_BLOCK_124]
[CODE_BLOCK_125]
[CODE_BLOCK_126]
[CODE_BLOCK_127]
This span represents loading of code modules for a layout or a page.
Attributes:
[CODE_BLOCK_128]
[CODE_BLOCK_129]
[CODE_BLOCK_130]
[CODE_BLOCK_131]
[CODE_BLOCK_132]
[CODE_BLOCK_133]
This zero-length span represents the time when the first byte has been sent in the response.
Was this helpful?
supported.
Send