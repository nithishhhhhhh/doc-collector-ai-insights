SOURCE URL: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/BigInt
SCRAPED: 2025-06-19 18:20:42
================================================================================

--- CODE BLOCK 7 ---
const previouslyMaxSafeInteger = 9007199254740991n;
const alsoHuge = BigInt(9007199254740991);
// 9007199254740991n
const hugeString = BigInt("9007199254740991");
// 9007199254740991n
const hugeHex = BigInt("0x1fffffffffffff");
// 9007199254740991n
const hugeOctal = BigInt("0o377777777777777777");
// 9007199254740991n
const hugeBin = BigInt(
"0b11111111111111111111111111111111111111111111111111111",
// 9007199254740991n
--- END CODE BLOCK ---
values represent integer values which are
too high
too low
to be represented by the
--- CODE BLOCK 8 ---
const previouslyMaxSafeInteger = 9007199254740991n;
const alsoHuge = BigInt(9007199254740991);
// 9007199254740991n
const hugeString = BigInt("9007199254740991");
// 9007199254740991n
const hugeHex = BigInt("0x1fffffffffffff");
// 9007199254740991n
const hugeOctal = BigInt("0o377777777777777777");
// 9007199254740991n
const hugeBin = BigInt(
"0b11111111111111111111111111111111111111111111111111111",
// 9007199254740991n
--- END CODE BLOCK ---
primitive
Description
BigInt value
, also sometimes just called a
BigInt
, is a
--- CODE BLOCK 13 ---
typeof 1n === "bigint"; // true
typeof BigInt("1") === "bigint"; // true
--- END CODE BLOCK ---
primitive
, created by appending
--- CODE BLOCK 14 ---
typeof 1n === "bigint"; // true
typeof BigInt("1") === "bigint"; // true
--- END CODE BLOCK ---
to the end of an integer literal, or by calling the
--- CODE BLOCK 16 ---
typeof Object(1n) === "object"; // true
--- END CODE BLOCK ---
function (without the
--- CODE BLOCK 17 ---
typeof Object(1n) === "object"; // true
--- END CODE BLOCK ---
operator) and giving it an integer value or string value.
Copy to Clipboard
--- CODE BLOCK 45 ---
const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER); // 9007199254740991n
const maxPlusOne = previousMaxSafe + 1n; // 9007199254740992n
const theFuture = previousMaxSafe + 2n; // 9007199254740993n, this works now!
const prod = previousMaxSafe * 2n; // 18014398509481982n
const diff = prod - 10n; // 18014398509481972n
const mod = prod % 10n; // 2n
const bigN = 2n ** 54n; // 18014398509481984n
bigN * -1n; // -18014398509481984n
const expected = 4n / 2n; // 2n
const truncated = 5n / 2n; // 2n, not 2.5n
--- END CODE BLOCK ---
BigInt values are similar to Number values in some ways, but also differ in a few key matters: A BigInt value cannot be used with methods in the built-in
--- CODE BLOCK 47 ---
0n === 0; // false
0n == 0; // true
--- END CODE BLOCK ---
object and cannot be mixed with a Number value in operations; they must be coerced to the same type. Be careful coercing values back and forth, however, as the precision of a BigInt value may be lost when it is coerced to a Number value.
Type information
When tested against
--- CODE BLOCK 48 ---
0n === 0; // false
0n == 0; // true
--- END CODE BLOCK ---
, a BigInt value (
--- CODE BLOCK 49 ---
1n < 2; // true
2n > 1; // true
2 > 2; // false
2n > 2; // false
2n >= 2; // true
--- END CODE BLOCK ---
primitive) will give
--- CODE BLOCK 50 ---
1n < 2; // true
2n > 1; // true
2 > 2; // false
2n > 2; // false
2n >= 2; // true
--- END CODE BLOCK ---
Copy to Clipboard
--- CODE BLOCK 51 ---
const mixed = [4n, 6, -12n, 10, 4, 0, 0n];
// [4n, 6, -12n, 10, 4, 0, 0n]
mixed.sort(); // default sorting behavior
// [ -12n, 0, 0n, 10, 4n, 4, 6 ]
mixed.sort((a, b) => a - b);
// won't work since subtraction will not work with mixed types
// TypeError: can't convert BigInt value to Number value
// sort with an appropriate numeric comparator
mixed.sort((a, b) => (a < b ? -1 : a > b ? 1 : 0));
// [ -12n, 0, 0n, 4n, 4, 6, 10 ]
--- END CODE BLOCK ---
A BigInt value can also be wrapped in an
--- CODE BLOCK 54 ---
Object(0n) === 0n; // false
Object(0n) === Object(0n); // false
const o = Object(0n);
o === o; // true
--- END CODE BLOCK ---
Copy to Clipboard
--- CODE BLOCK 55 ---
Object(0n) === 0n; // false
Object(0n) === Object(0n); // false
const o = Object(0n);
o === o; // true
--- END CODE BLOCK ---
Operators
Most operators support BigInts, however most do not permit operands to be of mixed types â€” both operands must be BigInt or neither:
Arithmetic operators
--- CODE BLOCK 64 ---
if (0n) {
console.log("Hello from the if!");
} else {
console.log("Hello from the else!");
// "Hello from the else!"
0n || 12n; // 12n
0n && 12n; // 0n
Boolean(0n); // false
Boolean(12n); // true
!12n; // false
!0n; // true
--- END CODE BLOCK ---
--- CODE BLOCK 65 ---
101n ** 65537n
--- END CODE BLOCK ---
--- CODE BLOCK 66 ---
17n ** 9999n
--- END CODE BLOCK ---
--- CODE BLOCK 67 ---
JSON.stringify()
--- END CODE BLOCK ---
--- CODE BLOCK 69 ---
JSON.stringify()
--- END CODE BLOCK ---
--- CODE BLOCK 72 ---
BigInt.prototype.toJSON = function () {
return { $bigint: this.toString() };
--- END CODE BLOCK ---
Bitwise operators
--- CODE BLOCK 73 ---
BigInt.prototype.toJSON = function () {
return { $bigint: this.toString() };
--- END CODE BLOCK ---
--- CODE BLOCK 74 ---
JSON.stringify()
--- END CODE BLOCK ---
--- CODE BLOCK 75 ---
console.log(JSON.stringify({ a: 1n }));
// {"a":{"$bigint":"1"}}
--- END CODE BLOCK ---
--- CODE BLOCK 76 ---
console.log(JSON.stringify({ a: 1n }));
// {"a":{"$bigint":"1"}}
--- END CODE BLOCK ---
--- CODE BLOCK 77 ---
BigInt.prototype
--- END CODE BLOCK ---
--- CODE BLOCK 79 ---
JSON.stringify
--- END CODE BLOCK ---
Unary negation (
--- CODE BLOCK 80 ---
const replacer = (key, value) =>
typeof value === "bigint" ? { $bigint: value.toString() } : value;
const data = {
number: 1,
big: 18014398509481982n,
const stringified = JSON.stringify(data, replacer);
console.log(stringified);
// {"number":1,"big":{"$bigint":"18014398509481982"}}
--- END CODE BLOCK ---
Increment/decrement
--- CODE BLOCK 81 ---
const replacer = (key, value) =>
typeof value === "bigint" ? { $bigint: value.toString() } : value;
const data = {
number: 1,
big: 18014398509481982n,
const stringified = JSON.stringify(data, replacer);
console.log(stringified);
// {"number":1,"big":{"$bigint":"18014398509481982"}}
--- END CODE BLOCK ---
--- CODE BLOCK 84 ---
const reviver = (key, value) =>
value !== null &&
typeof value === "object" &&
"$bigint" in value &&
typeof value.$bigint === "string"
? BigInt(value.$bigint)
: value;
const payload = '{"number":1,"big":{"$bigint":"18014398509481982"}}';
const parsed = JSON.parse(payload, reviver);
console.log(parsed);
// { number: 1, big: 18014398509481982n }
--- END CODE BLOCK ---
The boolean-returning operators allow mixing numbers and BigInts as operands:
Relational operators
equality operators
--- CODE BLOCK 85 ---
const reviver = (key, value) =>
value !== null &&
typeof value === "object" &&
"$bigint" in value &&
typeof value.$bigint === "string"
? BigInt(value.$bigint)
: value;
const payload = '{"number":1,"big":{"$bigint":"18014398509481982"}}';
const parsed = JSON.parse(payload, reviver);
console.log(parsed);
// { number: 1, big: 18014398509481982n }
--- END CODE BLOCK ---
--- CODE BLOCK 86 ---
JSON.stringify()
--- END CODE BLOCK ---
--- CODE BLOCK 87 ---
JSON.parse()
--- END CODE BLOCK ---
--- CODE BLOCK 96 ---
SyntaxError
--- END CODE BLOCK ---
--- CODE BLOCK 99 ---
[Symbol.toPrimitive]()
--- END CODE BLOCK ---
--- CODE BLOCK 107 ---
BigInt.asIntN()
--- END CODE BLOCK ---
--- CODE BLOCK 108 ---
BigInt.asUintN()
--- END CODE BLOCK ---
--- CODE BLOCK 109 ---
BigInt64Array
--- END CODE BLOCK ---
Logical operators
only rely on the
truthiness
of operands
A couple of operators do not support BigInt at all:
Unary plus (
--- CODE BLOCK 110 ---
BigUint64Array
--- END CODE BLOCK ---
cannot be supported due to conflicting usage in asm.js, so it has been left out
in order to not break asm.js
Unsigned right shift (
--- CODE BLOCK 113 ---
BigInt.asIntN()
--- END CODE BLOCK ---
is the only bitwise operator that's unsupported, as every BigInt value is signed.
Special cases:
Addition (
--- CODE BLOCK 114 ---
BigInt.asUintN()
--- END CODE BLOCK ---
) involving a string and a BigInt returns a string.
Division (
--- CODE BLOCK 115 ---
BigInt.prototype
--- END CODE BLOCK ---
) truncates fractional components towards zero, since BigInt is unable to represent fractional quantities.
Copy to Clipboard
--- CODE BLOCK 117 ---
BigInt.prototype.constructor
--- END CODE BLOCK ---
Comparisons
A BigInt value is not strictly equal to a Number value, but it
loosely so:
Copy to Clipboard
--- CODE BLOCK 121 ---
[Symbol.toStringTag]
--- END CODE BLOCK ---
A Number value and a BigInt value may be compared as usual:
Copy to Clipboard
--- CODE BLOCK 126 ---
Object.prototype.toString.call()
--- END CODE BLOCK ---
BigInt values and Number values may be mixed in arrays and sorted:
Copy to Clipboard
--- CODE BLOCK 129 ---
Object.prototype.toLocaleString()
--- END CODE BLOCK ---
Note that comparisons with
--- CODE BLOCK 131 ---
Object.prototype.toString()
--- END CODE BLOCK ---
-wrapped BigInt values act as with other objects, only indicating equality when the same object instance is compared:
Copy to Clipboard
--- CODE BLOCK 132 ---
BigInt.prototype.valueOf()
--- END CODE BLOCK ---
Because coercing between Number values and BigInt values can lead to loss of precision, the following are recommended:
Only use a BigInt value when values greater than 2
are reasonably expected.
Don't coerce between BigInt values and Number values.
Conditionals
A BigInt value follows the same conversion rules as Numbers when:
it is converted to a
--- CODE BLOCK 134 ---
// Returns true if the passed BigInt value is a prime number
function isPrime(p) {
for (let i = 2n; i * i <= p; i++) {
if (p % i === 0n) return false;
return true;
// Takes a BigInt value as an argument, returns nth prime number as a BigInt value
function nthPrime(nth) {
let maybePrime = 2n;
let prime = 0n;
while (nth >= 0n) {
if (isPrime(maybePrime)) {
nth--;
prime = maybePrime;
maybePrime++;
return prime;
nthPrime(20n);
// 73n
--- END CODE BLOCK ---
: via the
--- CODE BLOCK 135 ---
// Returns true if the passed BigInt value is a prime number
function isPrime(p) {
for (let i = 2n; i * i <= p; i++) {
if (p % i === 0n) return false;
return true;
// Takes a BigInt value as an argument, returns nth prime number as a BigInt value
function nthPrime(nth) {
let maybePrime = 2n;
let prime = 0n;
while (nth >= 0n) {
if (isPrime(maybePrime)) {
nth--;
prime = maybePrime;
maybePrime++;
return prime;
nthPrime(20n);
// 73n
--- END CODE BLOCK ---
function;
when used with
logical operators
--- CODE BLOCK 137 ---
Number.MAX_SAFE_INTEGER
--- END CODE BLOCK ---
[CODE_BLOCK_59]
, and
[CODE_BLOCK_60]
; or
within a conditional test like an
[CODE_BLOCK_61]
statement.
Namely, only
[CODE_BLOCK_62]
falsy
; everything else is
truthy
Copy to Clipboard
[CODE_BLOCK_63]
Cryptography
The operations supported on BigInt values are not constant-time and are thus open to
timing attacks
. JavaScript BigInts therefore could be dangerous for use in cryptography without mitigating factors. As a very generic example, an attacker could measure the time difference between
[CODE_BLOCK_65]
[CODE_BLOCK_66]
, and deduce the magnitude of secrets, such as private keys, based on the time elapsed. If you still have to use BigInts, take a look at the
Timing attack FAQ
for general advice regarding the issue.
Use within JSON
Using
[CODE_BLOCK_67]
with any BigInt value will raise a
[CODE_BLOCK_68]
, as BigInt values aren't serialized in JSON by default. However,
[CODE_BLOCK_69]
specifically leaves a backdoor for BigInt values: it would try to call the BigInt's
[CODE_BLOCK_70]
method. (It doesn't do so for any other primitive values.) Therefore, you can implement your own
[CODE_BLOCK_71]
method (which is one of the few cases where patching built-in objects is not explicitly discouraged):
Copy to Clipboard
[CODE_BLOCK_72]
Instead of throwing,
[CODE_BLOCK_74]
now produces a string like this:
Copy to Clipboard
[CODE_BLOCK_75]
If you do not wish to patch
[CODE_BLOCK_77]
, you can use the
[CODE_BLOCK_78]
parameter of
[CODE_BLOCK_79]
to serialize BigInt values:
Copy to Clipboard
[CODE_BLOCK_80]
You can then use the
[CODE_BLOCK_82]
parameter of
[CODE_BLOCK_83]
to handle them:
Copy to Clipboard
[CODE_BLOCK_84]
Note:
While it's possible to make the replacer of
[CODE_BLOCK_86]
generic and properly serialize BigInt values for all objects as shown above, the reviver of
[CODE_BLOCK_87]
has to be used with caution, because the serialization is
irreversible
: it's not possible to distinguish between an object that happens to have a property called
[CODE_BLOCK_88]
and an actual BigInt.
In addition, the example above creates an entire object during replacing and reviving, which may have performance or storage implications for larger objects containing many BigInts. If you know the shape of the payload, it may be better to just serialize them as strings and revive them based on the property key's name instead.
In fact, JSON allows number literals that are arbitrarily long; they just cannot be parsed to full precision in JavaScript. If you are communicating with another program in a language that supports longer integers (such as 64-bit integers), and you want to transmit the BigInt as a JSON number instead of a JSON string, see
Lossless number serialization
BigInt coercion
Many built-in operations that expect BigInts first coerce their arguments to BigInts.
The operation
can be summarized as follows:
BigInts are returned as-is.
[CODE_BLOCK_89]
[CODE_BLOCK_90]
throw a
[CODE_BLOCK_91]
[CODE_BLOCK_92]
turns into
[CODE_BLOCK_93]
[CODE_BLOCK_94]
turns into
[CODE_BLOCK_95]
Strings are converted by parsing them as if they contain an integer literal. Any parsing failure results in a
[CODE_BLOCK_96]
. The syntax is a subset of
string numeric literals
, where decimal points or exponent indicators are not allowed.
Numbers
throw a
[CODE_BLOCK_97]
to prevent unintended implicit coercion causing loss of precision.
Symbols
throw a
[CODE_BLOCK_98]
Objects are first
converted to a primitive
by calling their
[CODE_BLOCK_99]
(with
[CODE_BLOCK_100]
as hint),
[CODE_BLOCK_101]
, and
[CODE_BLOCK_102]
methods, in that order. The resulting primitive is then converted to a BigInt.
The best way to achieve nearly the same effect in JavaScript is through the
[CODE_BLOCK_103]
function:
[CODE_BLOCK_104]
uses the same algorithm to convert
[CODE_BLOCK_105]
, except that
Numbers
don't throw a
[CODE_BLOCK_106]
, but are converted to BigInts if they are integers.
Note that built-in operations expecting BigInts often truncate the BigInt to a fixed width after coercion. This includes
[CODE_BLOCK_107]
[CODE_BLOCK_108]
, and methods of
[CODE_BLOCK_109]
[CODE_BLOCK_110]
Constructor
[CODE_BLOCK_111]
Returns primitive values of type BigInt. Throws an error when called with
[CODE_BLOCK_112]
Static methods
[CODE_BLOCK_113]
Clamps a BigInt value to a signed integer value, and returns that value.
[CODE_BLOCK_114]
Clamps a BigInt value to an unsigned integer value, and returns that value.
Instance properties
These properties are defined on
[CODE_BLOCK_115]
and shared by all
[CODE_BLOCK_116]
instances.
[CODE_BLOCK_117]
The constructor function that created the instance object. For
[CODE_BLOCK_118]
instances, the initial value is the
[CODE_BLOCK_119]
constructor.
[CODE_BLOCK_120]
The initial value of the
[CODE_BLOCK_121]
property is the string
[CODE_BLOCK_122]
. This property is used in
[CODE_BLOCK_123]
. However, because
[CODE_BLOCK_124]
also has its own
[CODE_BLOCK_125]
method, this property is not used unless you call
[CODE_BLOCK_126]
with a BigInt as
[CODE_BLOCK_127]
Instance methods
[CODE_BLOCK_128]
Returns a string with a language-sensitive representation of this BigInt value. Overrides the
[CODE_BLOCK_129]
method.
[CODE_BLOCK_130]
Returns a string representing this BigInt value in the specified radix (base). Overrides the
[CODE_BLOCK_131]
method.
[CODE_BLOCK_132]
Returns this BigInt value. Overrides the
[CODE_BLOCK_133]
method.
Examples
Calculating Primes
Copy to Clipboard
[CODE_BLOCK_134]
Specifications
Specification
ECMAScriptÂ® 2026 LanguageÂ Specification
sec-bigint-objects
Browser compatibility
See also
[CODE_BLOCK_136]
[CODE_BLOCK_137]
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
Mar 6, 2025
MDN contributors
View this page on GitHub
Report a problem with this content