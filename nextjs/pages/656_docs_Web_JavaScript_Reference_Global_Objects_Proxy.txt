SOURCE URL: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Proxy
SCRAPED: 2025-06-19 18:24:03
================================================================================

--- CODE BLOCK 8 ---
const target = {
message1: "hello",
message2: "everyone",
const handler1 = {};
const proxy1 = new Proxy(target, handler1);
--- END CODE BLOCK ---
object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.
Description
--- CODE BLOCK 9 ---
const target = {
message1: "hello",
message2: "everyone",
const handler1 = {};
const proxy1 = new Proxy(target, handler1);
--- END CODE BLOCK ---
object allows you to create an object that can be used in place of the original object, but which may redefine fundamental
--- CODE BLOCK 10 ---
console.log(proxy1.message1); // hello
console.log(proxy1.message2); // everyone
--- END CODE BLOCK ---
operations like getting, setting, and defining properties. Proxy objects are commonly used to log property accesses, validate, format, or sanitize inputs, and so on.
You create a
--- CODE BLOCK 11 ---
console.log(proxy1.message1); // hello
console.log(proxy1.message2); // everyone
--- END CODE BLOCK ---
with two parameters:
--- CODE BLOCK 12 ---
const target = {
message1: "hello",
message2: "everyone",
const handler2 = {
get(target, prop, receiver) {
return "world";
const proxy2 = new Proxy(target, handler2);
--- END CODE BLOCK ---
: the original object which you want to proxy
--- CODE BLOCK 13 ---
const target = {
message1: "hello",
message2: "everyone",
const handler2 = {
get(target, prop, receiver) {
return "world";
const proxy2 = new Proxy(target, handler2);
--- END CODE BLOCK ---
: an object that defines which operations will be intercepted and how to redefine intercepted operations.
For example, this code creates a proxy for the
--- CODE BLOCK 16 ---
console.log(proxy2.message1); // world
console.log(proxy2.message2); // world
--- END CODE BLOCK ---
object.
Copy to Clipboard
--- CODE BLOCK 17 ---
console.log(proxy2.message1); // world
console.log(proxy2.message2); // world
--- END CODE BLOCK ---
Because the handler is empty, this proxy behaves just like the original target:
Copy to Clipboard
--- CODE BLOCK 22 ---
const target = {
message1: "hello",
message2: "everyone",
const handler3 = {
get(target, prop, receiver) {
if (prop === "message2") {
return "world";
return Reflect.get(...arguments);
const proxy3 = new Proxy(target, handler3);
console.log(proxy3.message1); // hello
console.log(proxy3.message2); // world
--- END CODE BLOCK ---
To customize the proxy, we define functions on the handler object:
Copy to Clipboard
--- CODE BLOCK 39 ---
[[DefineOwnProperty]]
--- END CODE BLOCK ---
Here we've provided an implementation of the
--- CODE BLOCK 44 ---
getPrototypeOf()
--- END CODE BLOCK ---
handler, which intercepts attempts to access properties in the target.
Handler functions are sometimes called
traps
, presumably because they trap calls to the target object. The trap in
--- CODE BLOCK 45 ---
[[SetPrototypeOf]]
--- END CODE BLOCK ---
above redefines all property accessors:
Copy to Clipboard
--- CODE BLOCK 46 ---
setPrototypeOf()
--- END CODE BLOCK ---
Proxies are often used with the
--- CODE BLOCK 48 ---
isExtensible()
--- END CODE BLOCK ---
object, which provides some methods with the same names as the
--- CODE BLOCK 49 ---
[[PreventExtensions]]
--- END CODE BLOCK ---
traps. The
--- CODE BLOCK 50 ---
preventExtensions()
--- END CODE BLOCK ---
methods provide the reflective semantics for invoking the corresponding
object internal methods
. For example, we can call
--- CODE BLOCK 51 ---
[[GetOwnProperty]]
--- END CODE BLOCK ---
if we don't wish to redefine the object's behavior:
Copy to Clipboard
--- CODE BLOCK 52 ---
getOwnPropertyDescriptor()
--- END CODE BLOCK ---
--- CODE BLOCK 54 ---
defineProperty()
--- END CODE BLOCK ---
method still interacts with the object through object internal methods — it doesn't "de-proxify" the proxy if it's invoked on a proxy. If you use
--- CODE BLOCK 55 ---
[[HasProperty]]
--- END CODE BLOCK ---
methods within a proxy trap, and the
--- CODE BLOCK 62 ---
deleteProperty()
--- END CODE BLOCK ---
method call gets intercepted by the trap again, there may be infinite recursion.
Terminology
The following terms are used when talking about the functionality of proxies.
handler
The object passed as the second argument to the
--- CODE BLOCK 63 ---
[[OwnPropertyKeys]]
--- END CODE BLOCK ---
constructor. It contains the traps which define the behavior of the proxy.
trap
The function that defines the behavior for the corresponding
object internal method
. (This is analogous to the concept of
traps
in operating systems.)
target
Object which the proxy virtualizes. It is often used as storage backend for the proxy. Invariants (semantics that remain unchanged) regarding object non-extensibility or non-configurable properties are verified against the target.
invariants
Semantics that remain unchanged when implementing custom operations. If your trap implementation violates the invariants of a handler, a
--- CODE BLOCK 67 ---
[[Construct]]
--- END CODE BLOCK ---
will be thrown.
Object internal methods
Objects
are collections of properties. However, the language doesn't provide any machinery to
directly
manipulate data stored in the object — rather, the object defines some internal methods specifying how it can be interacted with. For example, when you read
--- CODE BLOCK 68 ---
construct()
--- END CODE BLOCK ---
, you may expect the following to happen:
--- CODE BLOCK 69 ---
delete obj.x
--- END CODE BLOCK ---
property is searched up the
prototype chain
until it is found.
--- CODE BLOCK 73 ---
[[HasProperty]]
--- END CODE BLOCK ---
is a data property, the property descriptor's
--- CODE BLOCK 74 ---
delete obj.x
--- END CODE BLOCK ---
attribute is returned.
--- CODE BLOCK 80 ---
[[DefineOwnProperty]]
--- END CODE BLOCK ---
is an accessor property, the getter is invoked, and the return value of the getter is returned.
There isn't anything special about this process in the language — it's just because ordinary objects, by default, have a
--- CODE BLOCK 82 ---
[[DefineOwnProperty]]
--- END CODE BLOCK ---
internal method that is defined with this behavior. The
--- CODE BLOCK 85 ---
Object.defineProperty()
--- END CODE BLOCK ---
property access syntax simply invokes the
--- CODE BLOCK 86 ---
[[DefineOwnProperty]]
--- END CODE BLOCK ---
method on the object, and the object uses its own internal method implementation to determine what to return.
As another example,
arrays
differ from normal objects, because they have a magic
--- CODE BLOCK 87 ---
[[DefineOwnProperty]]
--- END CODE BLOCK ---
property that, when modified, automatically allocates empty slots or removes elements from the array. Similarly, adding array elements automatically changes the
--- CODE BLOCK 90 ---
Proxy.prototype
--- END CODE BLOCK ---
property. This is because arrays have a
--- CODE BLOCK 92 ---
Proxy.revocable()
--- END CODE BLOCK ---
internal method that knows to update
--- CODE BLOCK 96 ---
const handler = {
get(obj, prop) {
return prop in obj ? obj[prop] : 37;
const p = new Proxy({}, handler);
p.a = 1;
p.b = undefined;
console.log(p.a, p.b); // 1, undefined
console.log("c" in p, p.c); // false, 37
--- END CODE BLOCK ---
when an integer index is written to, or update the array contents when
--- CODE BLOCK 97 ---
const handler = {
get(obj, prop) {
return prop in obj ? obj[prop] : 37;
const p = new Proxy({}, handler);
p.a = 1;
p.b = undefined;
console.log(p.a, p.b); // 1, undefined
console.log("c" in p, p.c); // false, 37
--- END CODE BLOCK ---
is written to. Such objects whose internal methods have different implementations from ordinary objects are called
exotic objects
--- CODE BLOCK 98 ---
const target = {};
const p = new Proxy(target, {});
p.a = 37; // Operation forwarded to the target
console.log(target.a); // 37 (The operation has been properly forwarded!)
--- END CODE BLOCK ---
enable developers to define their own exotic objects with full capacity.
All objects have the following internal methods:
Internal method
Corresponding trap
--- CODE BLOCK 99 ---
const target = {};
const p = new Proxy(target, {});
p.a = 37; // Operation forwarded to the target
console.log(target.a); // 37 (The operation has been properly forwarded!)
--- END CODE BLOCK ---
--- CODE BLOCK 101 ---
class Secret {
#secret;
constructor(secret) {
this.#secret = secret;
get secret() {
return this.#secret.replace(/\d+/, "[REDACTED]");
const aSecret = new Secret("123456");
console.log(aSecret.secret); // [REDACTED]
// Looks like a no-op forwarding...
const proxy = new Proxy(aSecret, {});
console.log(proxy.secret); // TypeError: Cannot read private member #secret from an object whose class did not declare it
--- END CODE BLOCK ---
--- CODE BLOCK 102 ---
class Secret {
#secret;
constructor(secret) {
this.#secret = secret;
get secret() {
return this.#secret.replace(/\d+/, "[REDACTED]");
const aSecret = new Secret("123456");
console.log(aSecret.secret); // [REDACTED]
// Looks like a no-op forwarding...
const proxy = new Proxy(aSecret, {});
console.log(proxy.secret); // TypeError: Cannot read private member #secret from an object whose class did not declare it
--- END CODE BLOCK ---
--- CODE BLOCK 110 ---
const proxy = new Proxy(aSecret, {
get(target, prop, receiver) {
// By default, it looks like Reflect.get(target, prop, receiver)
// which has a different value of `this`
return target[prop];
console.log(proxy.secret);
--- END CODE BLOCK ---
--- CODE BLOCK 111 ---
const proxy = new Proxy(aSecret, {
get(target, prop, receiver) {
// By default, it looks like Reflect.get(target, prop, receiver)
// which has a different value of `this`
return target[prop];
console.log(proxy.secret);
--- END CODE BLOCK ---
--- CODE BLOCK 113 ---
class Secret {
#x = 1;
x() {
return this.#x;
const aSecret = new Secret();
const proxy = new Proxy(aSecret, {
get(target, prop, receiver) {
const value = target[prop];
if (value instanceof Function) {
return function (...args) {
return value.apply(this === receiver ? target : this, args);
return value;
console.log(proxy.x());
--- END CODE BLOCK ---
--- CODE BLOCK 114 ---
class Secret {
#x = 1;
x() {
return this.#x;
const aSecret = new Secret();
const proxy = new Proxy(aSecret, {
get(target, prop, receiver) {
const value = target[prop];
if (value instanceof Function) {
return function (...args) {
return value.apply(this === receiver ? target : this, args);
return value;
console.log(proxy.x());
--- END CODE BLOCK ---
--- CODE BLOCK 116 ---
[[MapData]]
--- END CODE BLOCK ---
--- CODE BLOCK 117 ---
const proxy = new Proxy(new Map(), {});
console.log(proxy.size); // TypeError: get size method called on incompatible Proxy
--- END CODE BLOCK ---
--- CODE BLOCK 118 ---
const proxy = new Proxy(new Map(), {});
console.log(proxy.size); // TypeError: get size method called on incompatible Proxy
--- END CODE BLOCK ---
--- CODE BLOCK 122 ---
const validator = {
set(obj, prop, value) {
if (prop === "age") {
if (!Number.isInteger(value)) {
throw new TypeError("The age is not an integer");
if (value > 200) {
throw new RangeError("The age seems invalid");
// The default behavior to store the value
obj[prop] = value;
// Indicate success
return true;
const person = new Proxy({}, validator);
person.age = 100;
console.log(person.age); // 100
person.age = "young"; // Throws an exception
person.age = 300; // Throws an exception
--- END CODE BLOCK ---
--- CODE BLOCK 123 ---
const validator = {
set(obj, prop, value) {
if (prop === "age") {
if (!Number.isInteger(value)) {
throw new TypeError("The age is not an integer");
if (value > 200) {
throw new RangeError("The age seems invalid");
// The default behavior to store the value
obj[prop] = value;
// Indicate success
return true;
const person = new Proxy({}, validator);
person.age = 100;
console.log(person.age); // 100
person.age = "young"; // Throws an exception
person.age = 300; // Throws an exception
--- END CODE BLOCK ---
--- CODE BLOCK 128 ---
view.selected
--- END CODE BLOCK ---
--- CODE BLOCK 129 ---
'aria-selected'
--- END CODE BLOCK ---
--- CODE BLOCK 131 ---
view.selected
--- END CODE BLOCK ---
--- CODE BLOCK 132 ---
'aria-selected'
--- END CODE BLOCK ---
--- CODE BLOCK 134 ---
'aria-selected'
--- END CODE BLOCK ---
--- CODE BLOCK 136 ---
const view = new Proxy(
selected: null,
set(obj, prop, newVal) {
const oldVal = obj[prop];
if (prop === "selected") {
if (oldVal) {
oldVal.setAttribute("aria-selected", "false");
if (newVal) {
newVal.setAttribute("aria-selected", "true");
// The default behavior to store the value
obj[prop] = newVal;
// Indicate success
return true;
const item1 = document.getElementById("item-1");
const item2 = document.getElementById("item-2");
// select item1:
view.selected = item1;
console.log(`item1: ${item1.getAttribute("aria-selected")}`);
// item1: true
// selecting item2 de-selects item1:
view.selected = item2;
console.log(`item1: ${item1.getAttribute("aria-selected")}`);
// item1: false
console.log(`item2: ${item2.getAttribute("aria-selected")}`);
// item2: true
--- END CODE BLOCK ---
--- CODE BLOCK 137 ---
const view = new Proxy(
selected: null,
set(obj, prop, newVal) {
const oldVal = obj[prop];
if (prop === "selected") {
if (oldVal) {
oldVal.setAttribute("aria-selected", "false");
if (newVal) {
newVal.setAttribute("aria-selected", "true");
// The default behavior to store the value
obj[prop] = newVal;
// Indicate success
return true;
const item1 = document.getElementById("item-1");
const item2 = document.getElementById("item-2");
// select item1:
view.selected = item1;
console.log(`item1: ${item1.getAttribute("aria-selected")}`);
// item1: true
// selecting item2 de-selects item1:
view.selected = item2;
console.log(`item1: ${item1.getAttribute("aria-selected")}`);
// item1: false
console.log(`item2: ${item2.getAttribute("aria-selected")}`);
// item2: true
--- END CODE BLOCK ---
--- CODE BLOCK 139 ---
latestBrowser
--- END CODE BLOCK ---
--- CODE BLOCK 140 ---
const products = new Proxy(
browsers: ["Firefox", "Chrome"],
get(obj, prop) {
// An extra property
if (prop === "latestBrowser") {
return obj.browsers[obj.browsers.length - 1];
// The default behavior to return the value
return obj[prop];
set(obj, prop, value) {
// An extra property
if (prop === "latestBrowser") {
obj.browsers.push(value);
return true;
// Convert the value if it is not an array
if (typeof value === "string") {
value = [value];
// The default behavior to store the value
obj[prop] = value;
// Indicate success
return true;
console.log(products.browsers);
//  ['Firefox', 'Chrome']
products.browsers = "Safari";
//  pass a string (by mistake)
console.log(products.browsers);
//  ['Safari'] <- no problem, the value is an array
products.latestBrowser = "Edge";
console.log(products.browsers);
//  ['Safari', 'Edge']
console.log(products.latestBrowser);
//  'Edge'
--- END CODE BLOCK ---
--- CODE BLOCK 141 ---
const products = new Proxy(
browsers: ["Firefox", "Chrome"],
get(obj, prop) {
// An extra property
if (prop === "latestBrowser") {
return obj.browsers[obj.browsers.length - 1];
// The default behavior to return the value
return obj[prop];
set(obj, prop, value) {
// An extra property
if (prop === "latestBrowser") {
obj.browsers.push(value);
return true;
// Convert the value if it is not an array
if (typeof value === "string") {
value = [value];
// The default behavior to store the value
obj[prop] = value;
// Indicate success
return true;
console.log(products.browsers);
//  ['Firefox', 'Chrome']
products.browsers = "Safari";
//  pass a string (by mistake)
console.log(products.browsers);
//  ['Safari'] <- no problem, the value is an array
products.latestBrowser = "Edge";
console.log(products.browsers);
//  ['Safari', 'Edge']
console.log(products.latestBrowser);
//  'Edge'
--- END CODE BLOCK ---
Function objects also have the following internal methods:
Internal method
Corresponding trap
--- CODE BLOCK 144 ---
const docCookies = ... get the "docCookies" object here:
https://reference.codeproject.com/dom/document/cookie/simple_document.cookie_framework
const docCookies = new Proxy(docCookies, {
get(target, key) {
return target[key] ?? target.getItem(key) ?? undefined;
set(target, key, value) {
if (key in target) {
return false;
return target.setItem(key, value);
deleteProperty(target, key) {
if (!(key in target)) {
return false;
return target.removeItem(key);
ownKeys(target) {
return target.keys();
has(target, key) {
return key in target || target.hasItem(key);
defineProperty(target, key, descriptor) {
if (descriptor && "value" in descriptor) {
target.setItem(key, descriptor.value);
return target;
getOwnPropertyDescriptor(target, key) {
const value = target.getItem(key);
return value
value,
writable: true,
enumerable: true,
configurable: false,
: undefined;
/* Cookies test */
console.log((docCookies.myCookie1 = "First value"));
console.log(docCookies.getItem("myCookie1"));
docCookies.setItem("myCookie1", "Changed value");
console.log(docCookies.myCookie1);
--- END CODE BLOCK ---
--- CODE BLOCK 145 ---
const docCookies = ... get the "docCookies" object here:
https://reference.codeproject.com/dom/document/cookie/simple_document.cookie_framework
const docCookies = new Proxy(docCookies, {
get(target, key) {
return target[key] ?? target.getItem(key) ?? undefined;
set(target, key, value) {
if (key in target) {
return false;
return target.setItem(key, value);
deleteProperty(target, key) {
if (!(key in target)) {
return false;
return target.removeItem(key);
ownKeys(target) {
return target.keys();
has(target, key) {
return key in target || target.hasItem(key);
defineProperty(target, key, descriptor) {
if (descriptor && "value" in descriptor) {
target.setItem(key, descriptor.value);
return target;
getOwnPropertyDescriptor(target, key) {
const value = target.getItem(key);
return value
value,
writable: true,
enumerable: true,
configurable: false,
: undefined;
/* Cookies test */
console.log((docCookies.myCookie1 = "First value"));
console.log(docCookies.getItem("myCookie1"));
docCookies.setItem("myCookie1", "Changed value");
console.log(docCookies.myCookie1);
--- END CODE BLOCK ---
[CODE_BLOCK_67]
[CODE_BLOCK_68]
It's important to realize that all interactions with an object eventually boils down to the invocation of one of these internal methods, and that they are all customizable through proxies. This means almost no behavior (except certain critical invariants) is guaranteed in the language — everything is defined by the object itself. When you run
[CODE_BLOCK_69]
, there's no guarantee that
[CODE_BLOCK_70]
returns
[CODE_BLOCK_71]
afterwards — it depends on the object's implementations of
[CODE_BLOCK_72]
[CODE_BLOCK_73]
[CODE_BLOCK_74]
may log things to the console, modify some global state, or even define a new property instead of deleting the existing one, although these semantics should be avoided in your own code.
All internal methods are called by the language itself, and are not directly accessible in JavaScript code. The
[CODE_BLOCK_75]
namespace offers methods that do little more than call the internal methods, besides some input normalization/validation. In each trap's page, we list several typical situations when the trap is invoked, but these internal methods are called in
a lot
of places. For example, array methods read and write to array through these internal methods, so methods like
[CODE_BLOCK_76]
would also invoke
[CODE_BLOCK_77]
[CODE_BLOCK_78]
traps.
Most of the internal methods are straightforward in what they do. The only two that may be confusable are
[CODE_BLOCK_79]
[CODE_BLOCK_80]
. For normal objects, the former invokes setters; the latter doesn't. (And
[CODE_BLOCK_81]
calls
[CODE_BLOCK_82]
internally if there's no existing property or the property is a data property.) While you may know that the
[CODE_BLOCK_83]
syntax uses
[CODE_BLOCK_84]
, and
[CODE_BLOCK_85]
uses
[CODE_BLOCK_86]
, it's not immediately apparent what semantics other built-in methods and syntaxes use. For example,
class fields
use the
[CODE_BLOCK_87]
semantic, which is why setters defined in the superclass are not invoked when a field is declared on the derived class.
Constructor
[CODE_BLOCK_88]
Creates a new
[CODE_BLOCK_89]
object.
Note:
There's no
[CODE_BLOCK_90]
property, so
[CODE_BLOCK_91]
instances do not have any special properties or methods.
Static methods
[CODE_BLOCK_92]
Creates a revocable
[CODE_BLOCK_93]
object.
Examples
Basic example
In this example, the number
[CODE_BLOCK_94]
gets returned as the default value when the property name is not in the object. It is using the
[CODE_BLOCK_95]
handler.
Copy to Clipboard
[CODE_BLOCK_96]
No-op forwarding proxy
In this example, we are using a native JavaScript object to which our proxy will forward all operations that are applied to it.
Copy to Clipboard
[CODE_BLOCK_98]
Note that while this "no-op" works for plain JavaScript objects, it does not work for native objects, such as DOM elements,
[CODE_BLOCK_100]
objects, or anything that has internal slots. See
no private property forwarding
for more information.
No private property forwarding
A proxy is still another object with a different identity — it's a
proxy
that operates between the wrapped object and the outside. As such, the proxy does not have direct access to the original object's
private properties
Copy to Clipboard
[CODE_BLOCK_101]
This is because when the proxy's
[CODE_BLOCK_103]
trap is invoked, the
[CODE_BLOCK_104]
value is the
[CODE_BLOCK_105]
instead of the original
[CODE_BLOCK_106]
, so
[CODE_BLOCK_107]
is not accessible. To fix this, use the original
[CODE_BLOCK_108]
[CODE_BLOCK_109]
Copy to Clipboard
[CODE_BLOCK_110]
For methods, this means you have to redirect the method's
[CODE_BLOCK_112]
value to the original object as well:
Copy to Clipboard
[CODE_BLOCK_113]
Some native JavaScript objects have properties called
internal slots
, which are not accessible from JavaScript code. For example,
[CODE_BLOCK_115]
objects have an internal slot called
[CODE_BLOCK_116]
, which stores the key-value pairs of the map. As such, you cannot trivially create a forwarding proxy for a map:
Copy to Clipboard
[CODE_BLOCK_117]
You have to use the "
[CODE_BLOCK_119]
-recovering" proxy illustrated above to work around this.
Validation
With a
[CODE_BLOCK_120]
, you can easily validate the passed value for an object. This example uses the
[CODE_BLOCK_121]
handler.
Copy to Clipboard
[CODE_BLOCK_122]
Manipulating DOM nodes
In this example we use
[CODE_BLOCK_124]
to toggle an attribute of two different elements: so when we set the attribute on one element, the attribute is unset on the other one.
We create a
[CODE_BLOCK_125]
object which is a proxy for an object with a
[CODE_BLOCK_126]
property. The proxy handler defines the
[CODE_BLOCK_127]
handler.
When we assign an HTML element to
[CODE_BLOCK_128]
, the element's
[CODE_BLOCK_129]
attribute is set to
[CODE_BLOCK_130]
. If we then assign a different element to
[CODE_BLOCK_131]
, this element's
[CODE_BLOCK_132]
attribute is set to
[CODE_BLOCK_133]
and the previous element's
[CODE_BLOCK_134]
attribute is automatically set to
[CODE_BLOCK_135]
Copy to Clipboard
[CODE_BLOCK_136]
Value correction and an extra property
[CODE_BLOCK_138]
proxy object evaluates the passed value and converts it to an array if needed. The object also supports an extra property called
[CODE_BLOCK_139]
both as a getter and a setter.
Copy to Clipboard
[CODE_BLOCK_140]
A complete traps list example
Now in order to create a complete sample
[CODE_BLOCK_142]
list, for didactic purposes, we will try to proxify a
non-native
object that is particularly suited to this type of operation: the
[CODE_BLOCK_143]
global object created by
a simple cookie framework
Copy to Clipboard
[CODE_BLOCK_144]
Specifications
Specification
ECMAScript® 2026 Language Specification
sec-proxy-objects
Browser compatibility
See also
Proxies are awesome
presentation by Brendan Eich at JSConf (2014)
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
May 15, 2025
MDN contributors
View this page on GitHub
Report a problem with this content