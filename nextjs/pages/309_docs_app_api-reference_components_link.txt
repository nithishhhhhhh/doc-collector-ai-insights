SOURCE URL: https://nextjs.org/docs/app/api-reference/components/link
SCRAPED: 2025-06-19 17:45:47
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
API Reference
Components
Link Component
Link Component
--- CODE BLOCK 3 ---
import Link from 'next/link'
export default function Page() {
return <Link href="/dashboard">Dashboard</Link>
--- END CODE BLOCK ---
is a React component that extends the HTML
--- CODE BLOCK 4 ---
import Link from 'next/link'
export default function Page() {
return <Link href="/dashboard">Dashboard</Link>
--- END CODE BLOCK ---
element to provide
prefetching
and client-side navigation between routes. It is the primary way to navigate between routes in Next.js.
Basic usage:
app/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 7 ---
href="/dashboard"
--- END CODE BLOCK ---
Reference
The following props can be passed to the
--- CODE BLOCK 11 ---
scroll={false}
--- END CODE BLOCK ---
component:
Prop
Example
Type
Required
--- CODE BLOCK 13 ---
prefetch={false}
--- END CODE BLOCK ---
--- CODE BLOCK 15 ---
onNavigate={(e) => {}}
--- END CODE BLOCK ---
String or Object
--- CODE BLOCK 18 ---
target="_blank"
--- END CODE BLOCK ---
--- CODE BLOCK 22 ---
import Link from 'next/link'
// Navigate to /about?name=test
export default function Page() {
return (
<Link
href={{
pathname: '/about',
query: { name: 'test' },
About
</Link>
--- END CODE BLOCK ---
Boolean
--- CODE BLOCK 23 ---
import Link from 'next/link'
// Navigate to /about?name=test
export default function Page() {
return (
<Link
href={{
pathname: '/about',
query: { name: 'test' },
About
</Link>
--- END CODE BLOCK ---
--- CODE BLOCK 28 ---
import Link from 'next/link'
export default function Page() {
return (
<Link href="/dashboard" replace>
Dashboard
</Link>
--- END CODE BLOCK ---
Boolean
--- CODE BLOCK 29 ---
import Link from 'next/link'
export default function Page() {
return (
<Link href="/dashboard" replace>
Dashboard
</Link>
--- END CODE BLOCK ---
--- CODE BLOCK 33 ---
scroll = {false}
--- END CODE BLOCK ---
Boolean or null
--- CODE BLOCK 34 ---
scroll: false
--- END CODE BLOCK ---
--- CODE BLOCK 35 ---
getBoundingClientRect
--- END CODE BLOCK ---
Function
Good to know
--- CODE BLOCK 36 ---
import Link from 'next/link'
export default function Page() {
return (
<Link href="/dashboard" scroll={false}>
Dashboard
</Link>
--- END CODE BLOCK ---
tag attributes such as
--- CODE BLOCK 37 ---
import Link from 'next/link'
export default function Page() {
return (
<Link href="/dashboard" scroll={false}>
Dashboard
</Link>
--- END CODE BLOCK ---
--- CODE BLOCK 47 ---
import Link from 'next/link'
export default function Page() {
return (
<Link href="/dashboard" prefetch={false}>
Dashboard
</Link>
--- END CODE BLOCK ---
can be added to
--- CODE BLOCK 48 ---
import Link from 'next/link'
export default function Page() {
return (
<Link href="/dashboard" prefetch={false}>
Dashboard
</Link>
--- END CODE BLOCK ---
as props and will be passed to the underlying
--- CODE BLOCK 50 ---
preventDefault()
--- END CODE BLOCK ---
element.
--- CODE BLOCK 51 ---
import Link from 'next/link'
export default function Page() {
return (
<Link
href="/dashboard"
onNavigate={(e) => {
// Only executes during SPA navigation
console.log('Navigating...')
// Optionally prevent navigation
// e.preventDefault()
Dashboard
</Link>
--- END CODE BLOCK ---
(required)
The path or URL to navigate to.
app/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 52 ---
import Link from 'next/link'
export default function Page() {
return (
<Link
href="/dashboard"
onNavigate={(e) => {
// Only executes during SPA navigation
console.log('Navigating...')
// Optionally prevent navigation
// e.preventDefault()
Dashboard
</Link>
--- END CODE BLOCK ---
--- CODE BLOCK 67 ---
import Link from 'next/link'
interface Post {
id: number
title: string
slug: string
export default function PostList({ posts }: { posts: Post[] }) {
return (
<ul>
{posts.map((post) => (
<li key={post.id}>
<Link href={`/blog/${post.slug}`}>{post.title}</Link>
</li>
</ul>
--- END CODE BLOCK ---
Defaults to
--- CODE BLOCK 68 ---
usePathname()
--- END CODE BLOCK ---
When
--- CODE BLOCK 71 ---
'use client'
import { usePathname } from 'next/navigation'
import Link from 'next/link'
export function Links() {
const pathname = usePathname()
return (
<nav>
<Link className={`link ${pathname === '/' ? 'active' : ''}`} href="/">
Home
</Link>
<Link
className={`link ${pathname === '/about' ? 'active' : ''}`}
href="/about"
About
</Link>
</nav>
--- END CODE BLOCK ---
--- CODE BLOCK 72 ---
'use client'
import { usePathname } from 'next/navigation'
import Link from 'next/link'
export function Links() {
const pathname = usePathname()
return (
<nav>
<Link className={`link ${pathname === '/' ? 'active' : ''}`} href="/">
Home
</Link>
<Link
className={`link ${pathname === '/about' ? 'active' : ''}`}
href="/about"
About
</Link>
</nav>
--- END CODE BLOCK ---
will replace the current history state instead of adding a new URL into the
browser's history
stack.
app/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 79 ---
<Link href="/dashboard#settings">Settings</Link>
// Output
<a href="/dashboard#settings">Settings</a>
--- END CODE BLOCK ---
--- CODE BLOCK 81 ---
app/blog/[slug]/page.js
--- END CODE BLOCK ---
Defaults to
--- CODE BLOCK 82 ---
import Link from 'next/link'
export default function Page({ posts }) {
return (
<ul>
{posts.map((post) => (
<li key={post.id}>
<Link href={`/blog/${post.slug}`}>{post.title}</Link>
</li>
</ul>
--- END CODE BLOCK ---
The default scrolling behavior of
--- CODE BLOCK 83 ---
import Link from 'next/link'
export default function Page({ posts }) {
return (
<ul>
{posts.map((post) => (
<li key={post.id}>
<Link href={`/blog/${post.slug}`}>{post.title}</Link>
</li>
</ul>
--- END CODE BLOCK ---
in Next.js
is to maintain scroll position
, similar to how browsers handle back and forwards navigation. When you navigate to a new
Page
, scroll position will stay the same as long as the Page is visible in the viewport. However, if the Page is not visible in the viewport, Next.js will scroll to the top of the first Page element.
When
--- CODE BLOCK 91 ---
next/link-passhref
--- END CODE BLOCK ---
, Next.js will not attempt to scroll to the first Page element.
Good to know
: Next.js checks if
--- CODE BLOCK 93 ---
import Link from 'next/link'
import styled from 'styled-components'
// This creates a custom component that wraps an <a> tag
const RedLink = styled.a`
color: red;
function NavLink({ href, name }) {
return (
<Link href={href} passHref legacyBehavior>
<RedLink>{name}</RedLink>
</Link>
export default NavLink
--- END CODE BLOCK ---
before managing scroll behavior. If scrolling is enabled, it identifies the relevant DOM node for navigation and inspects each top-level element. All non-scrollable elements and those without rendered HTML are bypassed, this includes sticky or fixed positioned elements, and non-visible elements such as those calculated with
--- CODE BLOCK 94 ---
import Link from 'next/link'
import styled from 'styled-components'
// This creates a custom component that wraps an <a> tag
const RedLink = styled.a`
color: red;
function NavLink({ href, name }) {
return (
<Link href={href} passHref legacyBehavior>
<RedLink>{name}</RedLink>
</Link>
export default NavLink
--- END CODE BLOCK ---
. Next.js then continues through siblings until it identifies a scrollable element that is visible in the viewport.
app/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 101 ---
legacyBehavior
--- END CODE BLOCK ---
--- CODE BLOCK 103 ---
import Link from 'next/link'
import React from 'react'
// Define the props type for MyButton
interface MyButtonProps {
onClick?: React.MouseEventHandler<HTMLAnchorElement>
href?: string
// Use React.ForwardRefRenderFunction to properly type the forwarded ref
const MyButton: React.ForwardRefRenderFunction<
HTMLAnchorElement,
MyButtonProps
> = ({ onClick, href }, ref) => {
return (
<a href={href} onClick={onClick} ref={ref}>
Click Me
</a>
// Use React.forwardRef to wrap the component
const ForwardedMyButton = React.forwardRef(MyButton)
export default function Page() {
return (
<Link href="/about" passHref legacyBehavior>
<ForwardedMyButton />
</Link>
--- END CODE BLOCK ---
Prefetching happens when a
--- CODE BLOCK 104 ---
import Link from 'next/link'
import React from 'react'
// Define the props type for MyButton
interface MyButtonProps {
onClick?: React.MouseEventHandler<HTMLAnchorElement>
href?: string
// Use React.ForwardRefRenderFunction to properly type the forwarded ref
const MyButton: React.ForwardRefRenderFunction<
HTMLAnchorElement,
MyButtonProps
> = ({ onClick, href }, ref) => {
return (
<a href={href} onClick={onClick} ref={ref}>
Click Me
</a>
// Use React.forwardRef to wrap the component
const ForwardedMyButton = React.forwardRef(MyButton)
export default function Page() {
return (
<Link href="/about" passHref legacyBehavior>
<ForwardedMyButton />
</Link>
--- END CODE BLOCK ---
component enters the user's viewport (initially or through scroll). Next.js prefetches and loads the linked route (denoted by the
--- CODE BLOCK 109 ---
import Link from 'next/link'
export default function Page() {
return (
<Link href="/about" replace>
About us
</Link>
--- END CODE BLOCK ---
) and its data in the background to improve the performance of client-side navigations. If the prefetched data has expired by the time the user hovers over a
--- CODE BLOCK 110 ---
import Link from 'next/link'
export default function Page() {
return (
<Link href="/about" replace>
About us
</Link>
--- END CODE BLOCK ---
, Next.js will attempt to prefetch it again.
Prefetching is only enabled in production
The following values can be passed to the
--- CODE BLOCK 112 ---
scroll={false}
--- END CODE BLOCK ---
prop:
--- CODE BLOCK 114 ---
scroll: false
--- END CODE BLOCK ---
(default)
: Prefetch behavior depends on whether the route is static or dynamic. For static routes, the full route will be prefetched (including all its data). For dynamic routes, the partial route down to the nearest segment with a
--- CODE BLOCK 115 ---
router.push()
--- END CODE BLOCK ---
boundary will be prefetched.
--- CODE BLOCK 116 ---
router.replace()
--- END CODE BLOCK ---
: The full route will be prefetched for both static and dynamic routes.
--- CODE BLOCK 117 ---
import Link from 'next/link'
export default function Page() {
return (
<Link href="/#hashid" scroll={false}>
Disables scrolling to the top
</Link>
--- END CODE BLOCK ---
: Prefetching will never happen both on entering the viewport and on hover.
app/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 118 ---
import Link from 'next/link'
export default function Page() {
return (
<Link href="/#hashid" scroll={false}>
Disables scrolling to the top
</Link>
--- END CODE BLOCK ---
--- CODE BLOCK 120 ---
router.replace()
--- END CODE BLOCK ---
An event handler called during client-side navigation. The handler receives an event object that includes a
--- CODE BLOCK 121 ---
// useRouter
import { useRouter } from 'next/navigation'
const router = useRouter()
router.push('/dashboard', { scroll: false })
--- END CODE BLOCK ---
method, allowing you to cancel the navigation if needed.
app/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 122 ---
// useRouter
import { useRouter } from 'next/navigation'
const router = useRouter()
router.push('/dashboard', { scroll: false })
--- END CODE BLOCK ---
Good to know
: While
--- CODE BLOCK 126 ---
import { NextResponse } from 'next/server'
export function middleware(request: Request) {
const nextUrl = request.nextUrl
if (nextUrl.pathname === '/dashboard') {
if (request.cookies.authToken) {
return NextResponse.rewrite(new URL('/auth/dashboard', request.url))
} else {
return NextResponse.rewrite(new URL('/public/dashboard', request.url))
--- END CODE BLOCK ---
--- CODE BLOCK 128 ---
'use client'
import Link from 'next/link'
import useIsAuthed from './hooks/useIsAuthed' // Your auth hook
export default function Page() {
const isAuthed = useIsAuthed()
const path = isAuthed ? '/auth/dashboard' : '/public/dashboard'
return (
<Link as="/dashboard" href={path}>
Dashboard
</Link>
--- END CODE BLOCK ---
may seem similar, they serve different purposes.
--- CODE BLOCK 129 ---
'use client'
import Link from 'next/link'
import useIsAuthed from './hooks/useIsAuthed' // Your auth hook
export default function Page() {
const isAuthed = useIsAuthed()
const path = isAuthed ? '/auth/dashboard' : '/public/dashboard'
return (
<Link as="/dashboard" href={path}>
Dashboard
</Link>
--- END CODE BLOCK ---
executes for all click events, while
--- CODE BLOCK 131 ---
'use client'
import { createContext, useState, useContext } from 'react'
interface NavigationBlockerContextType {
isBlocked: boolean
setIsBlocked: (isBlocked: boolean) => void
export const NavigationBlockerContext =
createContext<NavigationBlockerContextType>({
isBlocked: false,
setIsBlocked: () => {},
export function NavigationBlockerProvider({
children,
}: {
children: React.ReactNode
}) {
const [isBlocked, setIsBlocked] = useState(false)
return (
<NavigationBlockerContext.Provider value={{ isBlocked, setIsBlocked }}>
{children}
</NavigationBlockerContext.Provider>
export function useNavigationBlocker() {
return useContext(NavigationBlockerContext)
--- END CODE BLOCK ---
only runs during client-side navigation. Some key differences:
When using modifier keys (
--- CODE BLOCK 132 ---
'use client'
import { createContext, useState, useContext } from 'react'
interface NavigationBlockerContextType {
isBlocked: boolean
setIsBlocked: (isBlocked: boolean) => void
export const NavigationBlockerContext =
createContext<NavigationBlockerContextType>({
isBlocked: false,
setIsBlocked: () => {},
export function NavigationBlockerProvider({
children,
}: {
children: React.ReactNode
}) {
const [isBlocked, setIsBlocked] = useState(false)
return (
<NavigationBlockerContext.Provider value={{ isBlocked, setIsBlocked }}>
{children}
</NavigationBlockerContext.Provider>
export function useNavigationBlocker() {
return useContext(NavigationBlockerContext)
--- END CODE BLOCK ---
--- CODE BLOCK 133 ---
'use client'
import { useNavigationBlocker } from '../contexts/navigation-blocker'
export default function Form() {
const { setIsBlocked } = useNavigationBlocker()
return (
<form
onSubmit={(e) => {
e.preventDefault()
setIsBlocked(false)
onChange={() => setIsBlocked(true)}
<input type="text" name="name" />
<button type="submit">Save</button>
</form>
--- END CODE BLOCK ---
+ Click),
--- CODE BLOCK 134 ---
'use client'
import { useNavigationBlocker } from '../contexts/navigation-blocker'
export default function Form() {
const { setIsBlocked } = useNavigationBlocker()
return (
<form
onSubmit={(e) => {
e.preventDefault()
setIsBlocked(false)
onChange={() => setIsBlocked(true)}
<input type="text" name="name" />
<button type="submit">Save</button>
</form>
--- END CODE BLOCK ---
executes but
--- CODE BLOCK 135 ---
'use client'
import Link from 'next/link'
import { useNavigationBlocker } from '../contexts/navigation-blocker'
interface CustomLinkProps extends React.ComponentProps<typeof Link> {
children: React.ReactNode
export function CustomLink({ children, ...props }: CustomLinkProps) {
const { isBlocked } = useNavigationBlocker()
return (
<Link
onNavigate={(e) => {
if (
isBlocked &&
!window.confirm('You have unsaved changes. Leave anyway?')
e.preventDefault()
{...props}
{children}
</Link>
--- END CODE BLOCK ---
doesn't since Next.js prevents default navigation for new tabs.
External URLs won't trigger
--- CODE BLOCK 136 ---
'use client'
import Link from 'next/link'
import { useNavigationBlocker } from '../contexts/navigation-blocker'
interface CustomLinkProps extends React.ComponentProps<typeof Link> {
children: React.ReactNode
export function CustomLink({ children, ...props }: CustomLinkProps) {
const { isBlocked } = useNavigationBlocker()
return (
<Link
onNavigate={(e) => {
if (
isBlocked &&
!window.confirm('You have unsaved changes. Leave anyway?')
e.preventDefault()
{...props}
{children}
</Link>
--- END CODE BLOCK ---
since it's only for client-side and same-origin navigations.
Links with the
--- CODE BLOCK 137 ---
'use client'
import { CustomLink as Link } from './custom-link'
export default function Nav() {
return (
<nav>
<Link href="/">Home</Link>
<Link href="/about">About</Link>
</nav>
--- END CODE BLOCK ---
attribute will work with
--- CODE BLOCK 138 ---
'use client'
import { CustomLink as Link } from './custom-link'
export default function Nav() {
return (
<nav>
<Link href="/">Home</Link>
<Link href="/about">About</Link>
</nav>
--- END CODE BLOCK ---
but not
--- CODE BLOCK 139 ---
NavigationBlockerProvider
--- END CODE BLOCK ---
since the browser will treat the linked URL as a download.
Examples
The following examples demonstrate how to use the
--- CODE BLOCK 140 ---
import { NavigationBlockerProvider } from './contexts/navigation-blocker'
export default function RootLayout({
children,
}: {
children: React.ReactNode
}) {
return (
<html lang="en">
<body>
<NavigationBlockerProvider>{children}</NavigationBlockerProvider>
</body>
</html>
--- END CODE BLOCK ---
component in different scenarios.
Linking to dynamic segments
When linking to
dynamic segments
, you can use
template literals and interpolation
to generate a list of links. For example, to generate a list of blog posts:
app/blog/post-list.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 141 ---
import { NavigationBlockerProvider } from './contexts/navigation-blocker'
export default function RootLayout({
children,
}: {
children: React.ReactNode
}) {
return (
<html lang="en">
<body>
<NavigationBlockerProvider>{children}</NavigationBlockerProvider>
</body>
</html>
--- END CODE BLOCK ---
Checking active links
You can use
--- CODE BLOCK 145 ---
import Nav from './components/nav'
import Form from './components/form'
export default function Page() {
return (
<div>
<Nav />
<main>
<h1>Welcome to the Dashboard</h1>
<Form />
</main>
</div>
--- END CODE BLOCK ---
to determine if a link is active. For example, to add a class to the active link, you can check if the current
[CODE_BLOCK_69]
matches the
[CODE_BLOCK_70]
of the link:
app/ui/nav-links.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_71]
Scrolling to an
[CODE_BLOCK_73]
If you'd like to scroll to a specific
[CODE_BLOCK_74]
on navigation, you can append your URL with a
[CODE_BLOCK_75]
hash link or just pass a hash link to the
[CODE_BLOCK_76]
prop. This is possible since
[CODE_BLOCK_77]
renders to an
[CODE_BLOCK_78]
element.
[CODE_BLOCK_79]
Good to know
Next.js will scroll to the
Page
if it is not visible in the viewport upon navigation.
Linking to dynamic route segments
dynamic route segments
, it can be handy to use template literals to create the link's path.
For example, you can generate a list of links to the dynamic route
[CODE_BLOCK_81]
app/blog/page.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_82]
If the child is a custom component that wraps an
[CODE_BLOCK_84]
If the child of
[CODE_BLOCK_85]
is a custom component that wraps an
[CODE_BLOCK_86]
tag, you must add
[CODE_BLOCK_87]
[CODE_BLOCK_88]
. This is necessary if you’re using libraries like
styled-components
. Without this, the
[CODE_BLOCK_89]
tag will not have the
[CODE_BLOCK_90]
attribute, which hurts your site's accessibility and might affect SEO. If you're using
ESLint
, there is a built-in rule
[CODE_BLOCK_91]
to ensure correct usage of
[CODE_BLOCK_92]
components/nav-link.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_93]
If you’re using
emotion
’s JSX pragma feature (
[CODE_BLOCK_95]
), you must use
[CODE_BLOCK_96]
even if you use an
[CODE_BLOCK_97]
tag directly.
The component should support
[CODE_BLOCK_98]
property to trigger navigation correctly.
Nesting a functional component
If the child of
[CODE_BLOCK_99]
is a functional component, in addition to using
[CODE_BLOCK_100]
[CODE_BLOCK_101]
, you must wrap the component in
[CODE_BLOCK_102]
app/page.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_103]
Replace the URL instead of push
The default behavior of the
[CODE_BLOCK_105]
component is to
[CODE_BLOCK_106]
a new URL into the
[CODE_BLOCK_107]
stack. You can use the
[CODE_BLOCK_108]
prop to prevent adding a new entry, as in the following example:
app/page.js
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_109]
Disable scrolling to the top of the page
The default scrolling behavior of
[CODE_BLOCK_111]
in Next.js
is to maintain scroll position
, similar to how browsers handle back and forwards navigation. When you navigate to a new
Page
, scroll position will stay the same as long as the Page is visible in the viewport.
However, if the Page is not visible in the viewport, Next.js will scroll to the top of the first Page element. If you'd like to disable this behavior, you can pass
[CODE_BLOCK_112]
to the
[CODE_BLOCK_113]
component, or
[CODE_BLOCK_114]
[CODE_BLOCK_115]
[CODE_BLOCK_116]
app/page.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_117]
Using
[CODE_BLOCK_119]
[CODE_BLOCK_120]
[CODE_BLOCK_121]
Prefetching links in Middleware
It's common to use
Middleware
for authentication or other purposes that involve rewriting the user to a different page. In order for the
[CODE_BLOCK_123]
component to properly prefetch links with rewrites via Middleware, you need to tell Next.js both the URL to display and the URL to prefetch. This is required to avoid un-necessary fetches to middleware to know the correct route to prefetch.
For example, if you want to serve a
[CODE_BLOCK_124]
route that has authenticated and visitor views, you can add the following in your Middleware to redirect the user to the correct page:
middleware.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_125]
In this case, you would want to use the following code in your
[CODE_BLOCK_127]
component:
app/page.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_128]
Blocking navigation
You can use the
[CODE_BLOCK_130]
prop to block navigation when certain conditions are met, such as when a form has unsaved changes. When you need to block navigation across multiple components in your app (like preventing navigation from any link while a form is being edited), React Context provides a clean way to share this blocking state. First, create a context to track the navigation blocking state:
app/contexts/navigation-blocker.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_131]
Create a form component that uses the context:
app/components/form.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_133]
Create a custom Link component that blocks navigation:
app/components/custom-link.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_135]
Create a navigation component:
app/components/nav.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_137]
Finally, wrap your app with the
[CODE_BLOCK_139]
in the root layout and use the components in your page:
app/layout.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_140]
Then, use the
[CODE_BLOCK_142]
[CODE_BLOCK_143]
components in your page:
app/page.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_144]
When a user tries to navigate away using
[CODE_BLOCK_146]
while the form has unsaved changes, they'll be prompted to confirm before leaving.
Version history
Version
Changes
[CODE_BLOCK_147]
[CODE_BLOCK_148]
[CODE_BLOCK_149]
No longer requires a child
[CODE_BLOCK_150]
tag. A
codemod
is provided to automatically update your codebase.
[CODE_BLOCK_151]
[CODE_BLOCK_152]
props pointing to a dynamic route are automatically resolved and no longer require an
[CODE_BLOCK_153]
prop.
[CODE_BLOCK_154]
Improved prefetching performance.
[CODE_BLOCK_155]
[CODE_BLOCK_156]
introduced.
Was this helpful?
supported.
Send