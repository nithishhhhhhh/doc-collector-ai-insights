SOURCE URL: https://nextjs.org/docs/app/guides/instrumentation
SCRAPED: 2025-06-19 17:09:22
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
App Router
Guides
Instrumentation
How to set up instrumentation
Instrumentation is the process of using code to integrate monitoring and logging tools into your application. This allows you to track the performance and behavior of your application, and to debug issues in production.
Convention
To set up instrumentation, create
--- CODE BLOCK 1 ---
instrumentation.ts|js
--- END CODE BLOCK ---
file in the
root directory
of your project (or inside the
--- CODE BLOCK 4 ---
import { registerOTel } from '@vercel/otel'
export function register() {
registerOTel('next-app')
--- END CODE BLOCK ---
folder if using one).
Then, export a
--- CODE BLOCK 5 ---
import { registerOTel } from '@vercel/otel'
export function register() {
registerOTel('next-app')
--- END CODE BLOCK ---
function in the file. This function will be called
once
when a new Next.js server instance is initiated.
For example, to use Next.js with
OpenTelemetry
@vercel/otel
instrumentation.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 6 ---
instrumentation
--- END CODE BLOCK ---
See the
Next.js with OpenTelemetry example
for a complete implementation.
Good to know
--- CODE BLOCK 14 ---
instrumentation
--- END CODE BLOCK ---
file should be in the root of your project and not inside the
--- CODE BLOCK 19 ---
export async function register() {
await import('package-with-side-effect')
--- END CODE BLOCK ---
--- CODE BLOCK 20 ---
export async function register() {
await import('package-with-side-effect')
--- END CODE BLOCK ---
directory. If you're using the
--- CODE BLOCK 23 ---
NEXT_RUNTIME
--- END CODE BLOCK ---
folder, then place the file inside
--- CODE BLOCK 24 ---
export async function register() {
if (process.env.NEXT_RUNTIME === 'nodejs') {
await import('./instrumentation-node')
if (process.env.NEXT_RUNTIME === 'edge') {
await import('./instrumentation-edge')
--- END CODE BLOCK ---
alongside
--- CODE BLOCK 25 ---
export async function register() {
if (process.env.NEXT_RUNTIME === 'nodejs') {
await import('./instrumentation-node')
if (process.env.NEXT_RUNTIME === 'edge') {
await import('./instrumentation-edge')
--- END CODE BLOCK ---
[CODE_BLOCK_12]
If you use the
[CODE_BLOCK_13]
config option
to add a suffix, you will also need to update the
[CODE_BLOCK_14]
filename to match.
Examples
Importing files with side effects
Sometimes, it may be useful to import a file in your code because of the side effects it will cause. For example, you might import a file that defines a set of global variables, but never explicitly use the imported file in your code. You would still have access to the global variables the package has declared.
We recommend importing files using JavaScript
[CODE_BLOCK_15]
syntax within your
[CODE_BLOCK_16]
function. The following example demonstrates a basic usage of
[CODE_BLOCK_17]
in a
[CODE_BLOCK_18]
function:
instrumentation.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_19]
Good to know:
We recommend importing the file from within the
[CODE_BLOCK_21]
function, rather than at the top of the file. By doing this, you can colocate all of your side effects in one place in your code, and avoid any unintended consequences from importing globally at the top of the file.
Importing runtime-specific code
Next.js calls
[CODE_BLOCK_22]
in all environments, so it's important to conditionally import any code that doesn't support specific runtimes (e.g.
Edge or Node.js
). You can use the
[CODE_BLOCK_23]
environment variable to get the current environment:
instrumentation.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_24]
Learn more about Instrumentation
instrumentation.js
API reference for the instrumentation.js file.
Was this helpful?
supported.
Send