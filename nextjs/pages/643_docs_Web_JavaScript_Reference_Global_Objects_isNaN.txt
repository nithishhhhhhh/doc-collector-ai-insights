SOURCE URL: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/isNaN
SCRAPED: 2025-06-19 18:22:39
================================================================================

--- CODE BLOCK 4 ---
Number.isNaN()
--- END CODE BLOCK ---
function determines whether a value is
--- CODE BLOCK 5 ---
function milliseconds(x) {
if (isNaN(x)) {
return "Not a Number!";
return x * 1000;
console.log(milliseconds("100F"));
// Expected output: "Not a Number!"
console.log(milliseconds("0.0314E+2"));
// Expected output: 3140
--- END CODE BLOCK ---
, first converting the value to a number if necessary. Because coercion inside the
--- CODE BLOCK 6 ---
function milliseconds(x) {
if (isNaN(x)) {
return "Not a Number!";
return x * 1000;
console.log(milliseconds("100F"));
// Expected output: "Not a Number!"
console.log(milliseconds("0.0314E+2"));
// Expected output: 3140
--- END CODE BLOCK ---
function can be
surprising
, you may prefer to use
--- CODE BLOCK 7 ---
isNaN(value)
--- END CODE BLOCK ---
Try it
--- CODE BLOCK 8 ---
isNaN(value)
--- END CODE BLOCK ---
Syntax
Copy to Clipboard
--- CODE BLOCK 28 ---
typeof x === "number"
--- END CODE BLOCK ---
Parameters
--- CODE BLOCK 53 ---
isNaN(NaN); // true
isNaN(undefined); // true
isNaN({}); // true
isNaN(true); // false
isNaN(null); // false
isNaN(37); // false
// Strings
isNaN("37"); // false: "37" is converted to the number 37 which is not NaN
isNaN("37.37"); // false: "37.37" is converted to the number 37.37 which is not NaN
isNaN("37,5"); // true
isNaN("123ABC"); // true: Number("123ABC") is NaN
isNaN(""); // false: the empty string is converted to 0 which is not NaN
isNaN(" "); // false: a string with spaces is converted to 0 which is not NaN
// Dates
isNaN(new Date()); // false; Date objects can be converted to a number (timestamp)
isNaN(new Date().toString()); // true; the string representation of a Date object cannot be parsed as a number
// Arrays
isNaN([]); // false; the primitive representation is "", which coverts to the number 0
isNaN([1]); // false; the primitive representation is "1"
isNaN([1, 2]); // true; the primitive representation is "1,2", which cannot be parsed as number
--- END CODE BLOCK ---
The value to be tested.
Return value
--- CODE BLOCK 54 ---
isNaN(NaN); // true
isNaN(undefined); // true
isNaN({}); // true
isNaN(true); // false
isNaN(null); // false
isNaN(37); // false
// Strings
isNaN("37"); // false: "37" is converted to the number 37 which is not NaN
isNaN("37.37"); // false: "37.37" is converted to the number 37.37 which is not NaN
isNaN("37,5"); // true
isNaN("123ABC"); // true: Number("123ABC") is NaN
isNaN(""); // false: the empty string is converted to 0 which is not NaN
isNaN(" "); // false: a string with spaces is converted to 0 which is not NaN
// Dates
isNaN(new Date()); // false; Date objects can be converted to a number (timestamp)
isNaN(new Date().toString()); // true; the string representation of a Date object cannot be parsed as a number
// Arrays
isNaN([]); // false; the primitive representation is "", which coverts to the number 0
isNaN([1]); // false; the primitive representation is "1"
isNaN([1, 2]); // true; the primitive representation is "1,2", which cannot be parsed as number
--- END CODE BLOCK ---
if the given value is
--- CODE BLOCK 56 ---
Number.isNaN()
--- END CODE BLOCK ---
after being
converted to a number
; otherwise,
[CODE_BLOCK_12]
Description
[CODE_BLOCK_13]
is a function property of the global object.
For number values,
[CODE_BLOCK_14]
tests if the number is the value
[CODE_BLOCK_15]
. When the argument to the
[CODE_BLOCK_16]
function is not of type
Number
, the value is first coerced to a number, and the resulting value is then compared against
[CODE_BLOCK_17]
This behavior of
[CODE_BLOCK_18]
for non-numeric arguments can be confusing! For example, an empty string is coerced to 0, while a boolean is coerced to 0 or 1; both values are intuitively "not numbers", but they don't evaluate to
[CODE_BLOCK_19]
, so
[CODE_BLOCK_20]
returns
[CODE_BLOCK_21]
. Therefore,
[CODE_BLOCK_22]
answers neither the question "is the input the floating point
[CODE_BLOCK_23]
value" nor the question "is the input not a number".
[CODE_BLOCK_24]
is a more reliable way to test whether a value is the number value
[CODE_BLOCK_25]
or not. Alternatively, the expression
[CODE_BLOCK_26]
can be used, and neither of the solutions is subject to the false positives that make the global
[CODE_BLOCK_27]
unreliable. To test if a value is a number, use
[CODE_BLOCK_28]
[CODE_BLOCK_29]
function answers the question "is the input functionally equivalent to
[CODE_BLOCK_30]
when used in a number context". If
[CODE_BLOCK_31]
returns
[CODE_BLOCK_32]
, you can use
[CODE_BLOCK_33]
in an arithmetic expression as if it's a valid number that's not
[CODE_BLOCK_34]
. If
[CODE_BLOCK_35]
returns
[CODE_BLOCK_36]
[CODE_BLOCK_37]
will get coerced to
[CODE_BLOCK_38]
and make most arithmetic expressions return
[CODE_BLOCK_39]
(because
[CODE_BLOCK_40]
propagates). You can use this, for example, to test whether an argument to a function is arithmetically processable (usable "like" a number), and handle values that are not number-like by throwing an error, providing a default value, etc. This way, you can have a function that makes use of the full versatility JavaScript provides by implicitly converting values depending on context.
Note:
[CODE_BLOCK_41]
operator
performs both number addition and string concatenation. Therefore, even if
[CODE_BLOCK_42]
returns
[CODE_BLOCK_43]
for both operands, the
[CODE_BLOCK_44]
operator may still return a string, because it's not used as an arithmetic operator. For example,
[CODE_BLOCK_45]
returns
[CODE_BLOCK_46]
, but
[CODE_BLOCK_47]
returns
[CODE_BLOCK_48]
. To be sure that you are working with numbers,
coerce the value to a number
and use
[CODE_BLOCK_49]
to test the result.
Examples
Note how
[CODE_BLOCK_50]
returns
[CODE_BLOCK_51]
for values that are not the value
[CODE_BLOCK_52]
but are not numbers either:
Copy to Clipboard
[CODE_BLOCK_53]
Specifications
Specification
ECMAScript® 2026 Language Specification
sec-isnan-number
Browser compatibility
See also
[CODE_BLOCK_55]
[CODE_BLOCK_56]
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
Mar 13, 2025
MDN contributors
View this page on GitHub
Report a problem with this content