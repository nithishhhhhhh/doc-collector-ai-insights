SOURCE URL: https://developer.mozilla.org/docs/Web/HTML/Viewport_meta_tag
SCRAPED: 2025-06-19 17:59:06
================================================================================

This article describes how to use the "viewport"
--- CODE BLOCK 3 ---
<meta name="viewport" content="width=device-width, initial-scale=1" />
--- END CODE BLOCK ---
tag to control the viewport's size and shape.
Background
The browser's
viewport
is the area of the window in which web content can be seen. This is often not the same size as the rendered page, in which case the browser provides scrollbars for the user to scroll around and access all the content.
Some mobile devices and other narrow screens render pages in a virtual window or viewport, which is usually wider than the screen, and then shrink the rendered result down so it can all be seen at once. Users can then zoom and pan to look more closely at different areas of the page. For example, if a mobile screen has a width of 640px, pages might be rendered with a virtual viewport of 980px, and then it will be shrunk down to fit into the 640px space.
This is done because not all pages are optimized for mobile and break (or at least look bad) when rendered at a small viewport width. This virtual viewport is a way to make non-mobile-optimized sites in general look better on narrow screen devices.
However, this mechanism is not so good for pages that are optimized for narrow screens using
media queries
— if the virtual viewport is 980px for example, media queries that kick in at 640px or 480px or less will never be used, limiting the effectiveness of such responsive design techniques. The viewport
--- CODE BLOCK 4 ---
<meta name="viewport" content="width=device-width, initial-scale=1" />
--- END CODE BLOCK ---
element mitigates this problem of virtual viewport on narrow screen devices.
Viewport basics
The viewport is a comma-separated list of feature and value pairs. A typical mobile-optimized site contains something like the following:
html
Copy to Clipboard
--- CODE BLOCK 8 ---
device-width
--- END CODE BLOCK ---
Not all devices are the same width; you should make sure that your pages work well in a large variation of screen sizes and orientations.
The basic attributes of the "viewport"
--- CODE BLOCK 18 ---
initial-scale
--- END CODE BLOCK ---
element include:
--- CODE BLOCK 22 ---
minimum-scale
--- END CODE BLOCK ---
Controls the (minimum) size of the viewport (see
viewport width and screen width
). It can be set to a specific number of pixels like
--- CODE BLOCK 26 ---
maximum-scale
--- END CODE BLOCK ---
or to the special value
--- CODE BLOCK 30 ---
user-scalable
--- END CODE BLOCK ---
, which is the physical size of the device screen in CSS pixels. This value establishes the value of the
--- CODE BLOCK 39 ---
interactive-widget
--- END CODE BLOCK ---
unit. Minimum:
--- CODE BLOCK 40 ---
resizes-visual
--- END CODE BLOCK ---
. Maximum:
--- CODE BLOCK 41 ---
resizes-content
--- END CODE BLOCK ---
. Negative values: ignored.
--- CODE BLOCK 42 ---
overlays-content
--- END CODE BLOCK ---
Controls the (minimum) size of the viewport (see
viewport width and screen width
). It can be set to a specific number of pixels like
--- CODE BLOCK 43 ---
resizes-visual
--- END CODE BLOCK ---
or to the special value
--- CODE BLOCK 44 ---
user-scalable=no
--- END CODE BLOCK ---
, which is the physical size of the device screen in CSS pixels. This value establishes the value of the
--- CODE BLOCK 45 ---
initial-scale=1
--- END CODE BLOCK ---
unit. Minimum:
--- CODE BLOCK 46 ---
"width=320, initial-scale=1"
--- END CODE BLOCK ---
. Maximum:
--- CODE BLOCK 48 ---
<meta name="viewport" content="width=500, initial-scale=1" />
--- END CODE BLOCK ---
. Negative values: ignored.
--- CODE BLOCK 49 ---
<meta name="viewport" content="width=500, initial-scale=1" />
--- END CODE BLOCK ---
Controls the zoom level when the page is first loaded. Minimum:
--- CODE BLOCK 50 ---
minimum-scale
--- END CODE BLOCK ---
. Maximum:
--- CODE BLOCK 51 ---
maximum-scale
--- END CODE BLOCK ---
. Default:
--- CODE BLOCK 52 ---
user-scalable
--- END CODE BLOCK ---
. Negative values: ignored.
--- CODE BLOCK 53 ---
interactive-widget
--- END CODE BLOCK ---
Controls how much zoom out is allowed on the page. Minimum:
--- CODE BLOCK 54 ---
resizes-visual
--- END CODE BLOCK ---
. Maximum:
--- CODE BLOCK 55 ---
resizes-content
--- END CODE BLOCK ---
. Default:
--- CODE BLOCK 56 ---
overlays-content
--- END CODE BLOCK ---
. Negative values: ignored.
--- CODE BLOCK 57 ---
<meta name="viewport" content="interactive-widget=resizes-content" />
--- END CODE BLOCK ---
Controls how much zoom in is allowed on the page. Any value less than 3 fails accessibility. Minimum:
--- CODE BLOCK 58 ---
<meta name="viewport" content="interactive-widget=resizes-content" />
--- END CODE BLOCK ---
. Maximum:
[CODE_BLOCK_28]
. Default:
[CODE_BLOCK_29]
. Negative values: ignored.
[CODE_BLOCK_30]
Controls whether zoom in and zoom out actions are allowed on the page. Valid values:
[CODE_BLOCK_31]
[CODE_BLOCK_32]
[CODE_BLOCK_33]
, or
[CODE_BLOCK_34]
. Default:
[CODE_BLOCK_35]
, which is the same as
[CODE_BLOCK_36]
. Setting the value to
[CODE_BLOCK_37]
, which is the same as
[CODE_BLOCK_38]
, is against Web Content Accessibility Guidelines (WCAG).
[CODE_BLOCK_39]
Specifies the effect that interactive UI widgets, such as a virtual keyboard, have on the page's viewports. Valid values:
[CODE_BLOCK_40]
[CODE_BLOCK_41]
, or
[CODE_BLOCK_42]
. Default:
[CODE_BLOCK_43]
Warning:
Usage of
[CODE_BLOCK_44]
can cause accessibility issues to users with visual impairments such as low vision.
WCAG
requires a minimum of 2× scaling; however, the best practice is to enable a 5× zoom.
Screen density
Screen resolutions have risen to the size that individual pixels are indistinguishable by the human eye. For example, smartphones often have small screens with resolutions upwards of 1920–1080 pixels (≈400dpi). Because of this, many browsers can display their pages in a smaller physical size by translating multiple hardware pixels for each CSS "pixel". Initially, this caused usability and readability problems on many touch-optimized websites.
On high dpi screens, pages with
[CODE_BLOCK_45]
will effectively be zoomed by browsers. Their text will be smooth and crisp, but their bitmap images may not take advantage of the full screen resolution. To get sharper images on these screens, web developers may want to design images – or whole layouts – at a higher scale than their final size and then scale them down using CSS or viewport properties.
The default pixel ratio depends on the display density. On a display with density less than 200dpi, the ratio is 1.0. On displays with density between 200 and 300dpi, the ratio is 1.5. For displays with density over 300dpi, the ratio is the integer floor (
density
/150dpi). Note that the default ratio is true only when the viewport scale equals 1. Otherwise, the relationship between CSS pixels and
device pixels
depends on the current zoom level.
Viewport width and screen width
Sites can set their viewport to a specific size. For example, the definition
[CODE_BLOCK_46]
can be used to fit precisely onto a small phone display in portrait mode. This can cause problems when the browser renders a page at a larger size. To fix this, browsers will expand the viewport width if necessary to fill the screen at the requested scale. This is especially useful on large-screen devices.
For pages that set an initial or maximum scale, this means the
[CODE_BLOCK_47]
property actually translates into a
minimum
viewport width. For example, if your layout needs at least 500 pixels of width then you can use the following markup. When the screen is more than 500 pixels wide, the browser will expand the viewport (rather than zoom in) to fit the screen:
html
Copy to Clipboard
[CODE_BLOCK_48]
Other
attributes
that are available are
[CODE_BLOCK_50]
[CODE_BLOCK_51]
, and
[CODE_BLOCK_52]
. These properties affect the initial scale and width, as well as limiting changes in zoom level.
The effect of interactive UI widgets
Interactive UI widgets of the browser can influence the size of the page's viewports. The most common such UI widget is a virtual keyboard. To control which resize behavior the browser should use, set the
[CODE_BLOCK_53]
property.
Allowed values are:
[CODE_BLOCK_54]
visual viewport
gets resized by the interactive widget.
[CODE_BLOCK_55]
viewport
gets resized by the interactive widget.
[CODE_BLOCK_56]
Neither the
viewport
nor the
visual viewport
gets resized by the interactive widget.
html
Copy to Clipboard
[CODE_BLOCK_57]
When the
viewport
gets resized, the initial
containing block
also gets resized, thereby affecting the computed size of
viewport units
Common viewport sizes for mobile and tablet devices
If you want to know what mobile and tablet devices have which viewport widths, there is a comprehensive list of
mobile and tablet viewport sizes here
. This gives information such as viewport width on portrait and landscape orientation as well as physical screen size, operating system and the pixel density of the device.
Specifications
Specification
CSS Viewport Module Level 1
viewport-meta
See also
Article:
Prepare for viewport resize behavior changes coming to Chrome on Android
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
Apr 10, 2025
MDN contributors
View this page on GitHub
Report a problem with this content