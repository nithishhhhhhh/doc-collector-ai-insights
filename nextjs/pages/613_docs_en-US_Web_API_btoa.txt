SOURCE URL: https://developer.mozilla.org/en-US/docs/Web/API/btoa
SCRAPED: 2025-06-19 18:19:38
================================================================================

--- CODE BLOCK 3 ---
Window.atob()
--- END CODE BLOCK ---
method of the
--- CODE BLOCK 4 ---
Uint8Array.prototype.toBase64()
--- END CODE BLOCK ---
interface creates a
Base64
-encoded
ASCII
string from a
binary string
(i.e., a
string in which each character in the string is treated as a byte
of binary data).
You can use this method to encode data which may otherwise cause communication
problems, transmit it, then use the
--- CODE BLOCK 6 ---
btoa(stringToEncode)
--- END CODE BLOCK ---
method to decode the data again.
For example, you can encode control characters such as ASCII values 0 through 31.
Also consider using the
--- CODE BLOCK 7 ---
btoa(stringToEncode)
--- END CODE BLOCK ---
method if your data is in a
--- CODE BLOCK 8 ---
stringToEncode
--- END CODE BLOCK ---
object to avoid creating a string containing raw bytes.
Syntax
Copy to Clipboard
--- CODE BLOCK 9 ---
stringToEncode
--- END CODE BLOCK ---
Parameters
--- CODE BLOCK 11 ---
DOMException
--- END CODE BLOCK ---
binary string
to encode. Strings in JavaScript are encoded as UTF-16, so this means each character must have a code point less than 256, representing one byte of data.
Return value
An ASCII string containing the Base64 representation of
--- CODE BLOCK 12 ---
const encodedData = window.btoa("Hello, world"); // encode a string
const decodedData = window.atob(encodedData); // decode the string
--- END CODE BLOCK ---
Exceptions
--- CODE BLOCK 13 ---
const encodedData = window.btoa("Hello, world"); // encode a string
const decodedData = window.atob(encodedData); // decode the string
--- END CODE BLOCK ---
--- CODE BLOCK 15 ---
const ok = "a";
console.log(ok.codePointAt(0).toString(16)); //   61: occupies < 1 byte
const notOK = "✓";
console.log(notOK.codePointAt(0).toString(16)); // 2713: occupies > 1 byte
console.log(window.btoa(ok)); // YQ==
console.log(window.btoa(notOK)); // error
--- END CODE BLOCK ---
The string contained a character that did not fit in a single byte. See "Unicode strings" below for more detail.
Examples
Copy to Clipboard
--- CODE BLOCK 16 ---
const ok = "a";
console.log(ok.codePointAt(0).toString(16)); //   61: occupies < 1 byte
const notOK = "✓";
console.log(notOK.codePointAt(0).toString(16)); // 2713: occupies > 1 byte
console.log(window.btoa(ok)); // YQ==
console.log(window.btoa(notOK)); // error
--- END CODE BLOCK ---
Unicode strings
Base64, by design, expects binary data as its input. In terms of JavaScript strings,
this means strings in which the code point of each character occupies only one byte. So if you pass a
string into
--- CODE BLOCK 21 ---
TextDecoder
--- END CODE BLOCK ---
containing characters that occupy more than one byte,
you will get an error, because this is not considered binary data:
Copy to Clipboard
--- CODE BLOCK 22 ---
function base64ToBytes(base64) {
const binString = atob(base64);
return Uint8Array.from(binString, (m) => m.codePointAt(0));
function bytesToBase64(bytes) {
const binString = Array.from(bytes, (byte) =>
String.fromCodePoint(byte),
).join("");
return btoa(binString);
// Usage
bytesToBase64(new TextEncoder().encode("a Ā 𐀀 文 🦄")); // "YSDEgCDwkICAIOaWhyDwn6aE"
new TextDecoder().decode(base64ToBytes("YSDEgCDwkICAIOaWhyDwn6aE")); // "a Ā 𐀀 文 🦄"
--- END CODE BLOCK ---
Since
--- CODE BLOCK 24 ---
bytesToBase64
--- END CODE BLOCK ---
interprets the code points of its input string as byte values, calling
--- CODE BLOCK 25 ---
base64ToBytes
--- END CODE BLOCK ---
on a string will cause a "Character Out Of Range" exception if a character's code point exceeds
--- CODE BLOCK 29 ---
async function bytesToBase64DataUrl(bytes, type = "application/octet-stream") {
return await new Promise((resolve, reject) => {
const reader = Object.assign(new FileReader(), {
onload: () => resolve(reader.result),
onerror: () => reject(reader.error),
reader.readAsDataURL(new File([bytes], "", { type }));
async function dataUrlToBytes(dataUrl) {
const res = await fetch(dataUrl);
return new Uint8Array(await res.arrayBuffer());
// Usage
await bytesToBase64DataUrl(new Uint8Array([0, 1, 2])); // "data:application/octet-stream;base64,AAEC"
await dataUrlToBytes("data:application/octet-stream;base64,AAEC"); // Uint8Array [0, 1, 2]
--- END CODE BLOCK ---
. For use cases where you need to encode arbitrary Unicode text, it is necessary to first convert the string to its constituent bytes in
UTF-8
, and then encode the bytes.
The simplest solution is to use
--- CODE BLOCK 30 ---
async function bytesToBase64DataUrl(bytes, type = "application/octet-stream") {
return await new Promise((resolve, reject) => {
const reader = Object.assign(new FileReader(), {
onload: () => resolve(reader.result),
onerror: () => reject(reader.error),
reader.readAsDataURL(new File([bytes], "", { type }));
async function dataUrlToBytes(dataUrl) {
const res = await fetch(dataUrl);
return new Uint8Array(await res.arrayBuffer());
// Usage
await bytesToBase64DataUrl(new Uint8Array([0, 1, 2])); // "data:application/octet-stream;base64,AAEC"
await dataUrlToBytes("data:application/octet-stream;base64,AAEC"); // Uint8Array [0, 1, 2]
--- END CODE BLOCK ---
--- CODE BLOCK 31 ---
Uint8Array.fromBase64()
--- END CODE BLOCK ---
to convert between UTF-8 and single-byte representations of the string:
Copy to Clipboard
--- CODE BLOCK 32 ---
Uint8Array.prototype.toBase64()
--- END CODE BLOCK ---
Converting arbitrary binary data
--- CODE BLOCK 37 ---
WorkerGlobalScope.btoa()
--- END CODE BLOCK ---
--- CODE BLOCK 38 ---
Window.atob()
--- END CODE BLOCK ---
functions in the previous section can be used directly to convert between Base64 strings and
--- CODE BLOCK 39 ---
Uint8Array.prototype.toBase64()
--- END CODE BLOCK ---
For better performance, asynchronous conversion between base64 data URLs is possible natively within the web platform via the
[CODE_BLOCK_27]
[CODE_BLOCK_28]
APIs:
Copy to Clipboard
[CODE_BLOCK_29]
Note:
For supporting environments, also consider the native
[CODE_BLOCK_31]
[CODE_BLOCK_32]
, and
[CODE_BLOCK_33]
methods.
Specifications
Specification
HTML
dom-btoa-dev
Browser compatibility
See also
A polyfill of
[CODE_BLOCK_34]
is available in
[CODE_BLOCK_35]
[CODE_BLOCK_36]
URLs
[CODE_BLOCK_37]
: the same method, but in worker scopes.
[CODE_BLOCK_38]
[CODE_BLOCK_39]
Base64
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
Mar 17, 2025
MDN contributors
View this page on GitHub
Report a problem with this content