SOURCE URL: https://nextjs.org/docs/pages/guides/scripts
SCRAPED: 2025-06-19 17:24:03
================================================================================

Menu
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Pages Router
Guides
Scripts
You are currently viewing the documentation for Pages Router.
How to load and optimize scripts
Application Scripts
To load a third-party script for all routes, import
--- CODE BLOCK 1 ---
next/script
--- END CODE BLOCK ---
and include the script directly in your custom
--- CODE BLOCK 3 ---
import Script from 'next/script'
export default function MyApp({ Component, pageProps }) {
return (
<Component {...pageProps} />
<Script src="https://example.com/script.js" />
--- END CODE BLOCK ---
pages/_app.js
--- CODE BLOCK 4 ---
import Script from 'next/script'
export default function MyApp({ Component, pageProps }) {
return (
<Component {...pageProps} />
<Script src="https://example.com/script.js" />
--- END CODE BLOCK ---
This script will load and execute when
route in your application is accessed. Next.js will ensure the script will
only load once
, even if a user navigates between multiple pages.
Recommendation
: We recommend only including third-party scripts in specific pages or layouts in order to minimize any unnecessary impact to performance.
Strategy
Although the default behavior of
--- CODE BLOCK 7 ---
beforeInteractive
--- END CODE BLOCK ---
allows you to load third-party scripts in any page or layout, you can fine-tune its loading behavior by using the
--- CODE BLOCK 8 ---
afterInteractive
--- END CODE BLOCK ---
property:
--- CODE BLOCK 11 ---
next/script
--- END CODE BLOCK ---
: Load the script before any Next.js code and before any page hydration occurs.
--- CODE BLOCK 14 ---
nextScriptWorkers
--- END CODE BLOCK ---
default
) Load the script early but after some hydration on the page occurs.
--- CODE BLOCK 15 ---
next.config.js
--- END CODE BLOCK ---
: Load the script later during browser idle time.
--- CODE BLOCK 16 ---
module.exports = {
experimental: {
nextScriptWorkers: true,
--- END CODE BLOCK ---
: (experimental) Load the script in a web worker.
Refer to the
--- CODE BLOCK 17 ---
module.exports = {
experimental: {
nextScriptWorkers: true,
--- END CODE BLOCK ---
API reference documentation to learn more about each strategy and their use cases.
Offloading Scripts To A Web Worker (experimental)
Warning:
--- CODE BLOCK 19 ---
npm run dev
--- END CODE BLOCK ---
strategy is not yet stable and does not yet work with the App Router. Use with caution.
Scripts that use the
--- CODE BLOCK 21 ---
npm run dev
--- END CODE BLOCK ---
strategy are offloaded and executed in a web worker with
Partytown
. This can improve the performance of your site by dedicating the main thread to the rest of your application code.
This strategy is still experimental and can only be used if the
--- CODE BLOCK 22 ---
npm run dev
--- END CODE BLOCK ---
flag is enabled in
--- CODE BLOCK 23 ---
npm install @builder.io/partytown
--- END CODE BLOCK ---
next.config.js
--- CODE BLOCK 24 ---
strategy="worker"
--- END CODE BLOCK ---
Then, run
--- CODE BLOCK 26 ---
import Script from 'next/script'
export default function Home() {
return (
<Script src="https://example.com/script.js" strategy="worker" />
--- END CODE BLOCK ---
(normally
--- CODE BLOCK 30 ---
_document.js
--- END CODE BLOCK ---
--- CODE BLOCK 31 ---
import { Html, Head, Main, NextScript } from 'next/document'
export default function Document() {
return (
<Html>
<Head>
<script
data-partytown-config
dangerouslySetInnerHTML={{
__html: `
partytown = {
lib: "/_next/static/~partytown/",
debug: true
</Head>
<body>
<Main />
<NextScript />
</body>
</Html>
--- END CODE BLOCK ---
) and Next.js will guide you through the installation of the required packages to finish the setup:
Terminal
--- CODE BLOCK 32 ---
import { Html, Head, Main, NextScript } from 'next/document'
export default function Document() {
return (
<Html>
<Head>
<script
data-partytown-config
dangerouslySetInnerHTML={{
__html: `
partytown = {
lib: "/_next/static/~partytown/",
debug: true
</Head>
<body>
<Main />
<NextScript />
</body>
</Html>
--- END CODE BLOCK ---
You'll see instructions like these: Please install Partytown by running
--- CODE BLOCK 34 ---
lib: "/_next/static/~partytown/"
--- END CODE BLOCK ---
Once setup is complete, defining
--- CODE BLOCK 36 ---
<Script id="show-banner">
{`document.getElementById('banner').classList.remove('hidden')`}
</Script>
--- END CODE BLOCK ---
will automatically instantiate Partytown in your application and offload the script to a web worker.
pages/home.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 37 ---
<Script id="show-banner">
{`document.getElementById('banner').classList.remove('hidden')`}
</Script>
--- END CODE BLOCK ---
There are a number of trade-offs that need to be considered when loading a third-party script in a web worker. Please see Partytown's
tradeoffs
documentation for more information.
Using custom Partytown configuration
Although the
--- CODE BLOCK 39 ---
<Script
id="show-banner"
dangerouslySetInnerHTML={{
__html: `document.getElementById('banner').classList.remove('hidden')`,
--- END CODE BLOCK ---
strategy does not require any additional configuration to work, Partytown supports the use of a config object to modify some of its settings, including enabling
--- CODE BLOCK 40 ---
<Script
id="show-banner"
dangerouslySetInnerHTML={{
__html: `document.getElementById('banner').classList.remove('hidden')`,
--- END CODE BLOCK ---
mode and forwarding events and triggers.
If you would like to add additional configuration options, you can include it within the
--- CODE BLOCK 45 ---
next/script
--- END CODE BLOCK ---
component used in a
custom
--- CODE BLOCK 46 ---
"use client"
--- END CODE BLOCK ---
_pages/document.jsx
--- CODE BLOCK 47 ---
import Script from 'next/script'
export default function Page() {
return (
<Script
src="https://example.com/script.js"
onLoad={() => {
console.log('Script has loaded')
--- END CODE BLOCK ---
In order to modify Partytown's configuration, the following conditions must be met:
--- CODE BLOCK 49 ---
next/script
--- END CODE BLOCK ---
attribute must be used in order to overwrite the default configuration used by Next.js
Unless you decide to save Partytown's library files in a separate directory, the
--- CODE BLOCK 53 ---
import Script from 'next/script'
export default function Page() {
return (
<Script
src="https://example.com/script.js"
id="example-script"
nonce="XUENAJFW"
data-test="script"
--- END CODE BLOCK ---
property and value must be included in the configuration object in order to let Partytown know where Next.js stores the necessary static files.
Note
: If you are using an
asset prefix
and would like to modify Partytown's default configuration, you must include it as part of the
--- CODE BLOCK 54 ---
import Script from 'next/script'
export default function Page() {
return (
<Script
src="https://example.com/script.js"
id="example-script"
nonce="XUENAJFW"
data-test="script"
--- END CODE BLOCK ---
path.
Take a look at Partytown's
configuration options
to see the full list of other properties that can be added.
Inline Scripts
Inline scripts, or scripts not loaded from an external file, are also supported by the Script component. They can be written by placing the JavaScript within curly braces:
[CODE_BLOCK_36]
Or by using the
[CODE_BLOCK_38]
property:
[CODE_BLOCK_39]
Warning
: An
[CODE_BLOCK_41]
property must be assigned for inline scripts in order for Next.js to track and optimize the script.
Executing Additional Code
Event handlers can be used with the Script component to execute additional code after a certain event occurs:
[CODE_BLOCK_42]
: Execute code after the script has finished loading.
[CODE_BLOCK_43]
: Execute code after the script has finished loading and every time the component is mounted.
[CODE_BLOCK_44]
: Execute code if the script fails to load.
These handlers will only work when
[CODE_BLOCK_45]
is imported and used inside of a
Client Component
where
[CODE_BLOCK_46]
is defined as the first line of code:
pages/index.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_47]
Refer to the
[CODE_BLOCK_49]
API reference to learn more about each event handler and view examples.
Additional Attributes
There are many DOM attributes that can be assigned to a
[CODE_BLOCK_50]
element that are not used by the Script component, like
[CODE_BLOCK_51]
custom data attributes
. Including any additional attributes will automatically forward it to the final, optimized
[CODE_BLOCK_52]
element that is included in the HTML.
pages/index.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_53]
Was this helpful?
supported.
Send