SOURCE URL: https://nextjs.org/docs/app/guides/analytics
SCRAPED: 2025-06-19 17:30:14
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
App Router
Guides
Analytics
How to add analytics to your Next.js application
Next.js has built-in support for measuring and reporting performance metrics. You can either use the
--- CODE BLOCK 1 ---
useReportWebVitals
--- END CODE BLOCK ---
hook to manage reporting yourself, or alternatively, Vercel provides a
managed service
to automatically collect and visualize metrics for you.
Client Instrumentation
For more advanced analytics and monitoring needs, Next.js provides a
--- CODE BLOCK 2 ---
instrumentation-client.js|ts
--- END CODE BLOCK ---
file that runs before your application's frontend code starts executing. This is ideal for setting up global analytics, error tracking, or performance monitoring tools.
To use it, create an
--- CODE BLOCK 3 ---
instrumentation-client.js
--- END CODE BLOCK ---
--- CODE BLOCK 4 ---
instrumentation-client.ts
--- END CODE BLOCK ---
file in your application's root directory:
instrumentation-client.js
--- CODE BLOCK 5 ---
// Initialize analytics before the app starts
console.log('Analytics initialized')
// Set up global error tracking
window.addEventListener('error', (event) => {
// Send to your error tracking service
reportError(event.error)
--- END CODE BLOCK ---
Build Your Own
app/_components/web-vitals.js
--- CODE BLOCK 7 ---
'use client'
import { useReportWebVitals } from 'next/web-vitals'
export function WebVitals() {
useReportWebVitals((metric) => {
console.log(metric)
--- END CODE BLOCK ---
app/layout.js
--- CODE BLOCK 9 ---
import { WebVitals } from './_components/web-vitals'
export default function Layout({ children }) {
return (
<html>
<body>
<WebVitals />
{children}
</body>
</html>
--- END CODE BLOCK ---
Since the
--- CODE BLOCK 11 ---
useReportWebVitals
--- END CODE BLOCK ---
hook requires the
--- CODE BLOCK 12 ---
'use client'
--- END CODE BLOCK ---
directive, the most performant approach is to create a separate component that the root layout imports. This confines the client boundary exclusively to the
--- CODE BLOCK 15 ---
'use client'
import { useReportWebVitals } from 'next/web-vitals'
export function WebVitals() {
useReportWebVitals((metric) => {
switch (metric.name) {
case 'FCP': {
// handle FCP results
case 'LCP': {
// handle LCP results
// ...
--- END CODE BLOCK ---
component.
View the
API Reference
for more information.
Web Vitals
Web Vitals
are a set of useful metrics that aim to capture the user
experience of a web page. The following web vitals are all included:
Time to First Byte
(TTFB)
First Contentful Paint
(FCP)
Largest Contentful Paint
(LCP)
First Input Delay
(FID)
Cumulative Layout Shift
(CLS)
Interaction to Next Paint
(INP)
You can handle all the results of these metrics using the
--- CODE BLOCK 16 ---
'use client'
import { useReportWebVitals } from 'next/web-vitals'
export function WebVitals() {
useReportWebVitals((metric) => {
switch (metric.name) {
case 'FCP': {
// handle FCP results
case 'LCP': {
// handle LCP results
// ...
--- END CODE BLOCK ---
property.
app/_components/web-vitals.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 17 ---
useReportWebVitals((metric) => {
const body = JSON.stringify(metric)
const url = 'https://example.com/analytics'
// Use `navigator.sendBeacon()` if available, falling back to `fetch()`.
if (navigator.sendBeacon) {
navigator.sendBeacon(url, body)
} else {
fetch(url, { body, method: 'POST', keepalive: true })
--- END CODE BLOCK ---
Sending results to external systems
You can send results to any endpoint to measure and track
real user performance on your site. For example:
--- CODE BLOCK 20 ---
useReportWebVitals((metric) => {
// Use `window.gtag` if you initialized Google Analytics as this example:
// https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics
window.gtag('event', metric.name, {
value: Math.round(
metric.name === 'CLS' ? metric.value * 1000 : metric.value
), // values must be integers
event_label: metric.id, // id unique to current page load
non_interaction: true, // avoids affecting bounce rate.
--- END CODE BLOCK ---
Good to know
: If you use
Google Analytics
, using the
[CODE_BLOCK_19]
value can allow you to construct metric distributions manually (to calculate percentiles,
etc.)
[CODE_BLOCK_20]
Read more about
sending results to Google Analytics
Was this helpful?
supported.
Send