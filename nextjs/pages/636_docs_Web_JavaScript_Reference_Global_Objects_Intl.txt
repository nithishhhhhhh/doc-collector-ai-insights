SOURCE URL: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl
SCRAPED: 2025-06-19 18:21:57
================================================================================

--- CODE BLOCK 9 ---
options.localeMatcher
--- END CODE BLOCK ---
namespace object contains several constructors as well as functionality common to the internationalization constructors and other language sensitive functions. Collectively, they comprise the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, date and time formatting, and more.
Description
Unlike most global objects,
--- CODE BLOCK 14 ---
Intl.Locale
--- END CODE BLOCK ---
is not a constructor. You cannot use it with the
--- CODE BLOCK 17 ---
new Intl.DateTimeFormat("default")
--- END CODE BLOCK ---
operator
or invoke the
--- CODE BLOCK 21 ---
"zh-Hans-CN"
--- END CODE BLOCK ---
object as a function. All properties and methods of
--- CODE BLOCK 22 ---
"en-emodeng"
--- END CODE BLOCK ---
are static (just like the
--- CODE BLOCK 24 ---
"de-a-foo-a-foo"
--- END CODE BLOCK ---
object).
The internationalization constructors as well as several language sensitive methods of other constructors (listed under
See also
) use a common pattern for identifying locales and determining the one they will actually use: they all accept
--- CODE BLOCK 27 ---
"de-DE-u-co-phonebk"
--- END CODE BLOCK ---
--- CODE BLOCK 28 ---
"th-TH-u-nu-thai"
--- END CODE BLOCK ---
arguments, and negotiate the requested locale(s) against the locales they support using an algorithm specified in the
--- CODE BLOCK 29 ---
"ja-JP-u-ca-japanese"
--- END CODE BLOCK ---
property.
locales argument
--- CODE BLOCK 30 ---
"en-GB-u-ca-islamic-umalqura"
--- END CODE BLOCK ---
argument is used to determine the locale used in a given operation. The JavaScript implementation examines
--- CODE BLOCK 35 ---
"en-emodeng-emodeng"
--- END CODE BLOCK ---
, and then computes a locale it understands that comes closest to satisfying the expressed preference.
--- CODE BLOCK 37 ---
"de-t-en-emodeng-emodeng"
--- END CODE BLOCK ---
may be:
--- CODE BLOCK 42 ---
localeMatcher
--- END CODE BLOCK ---
(or omitted): The implementation's default locale will be used.
A locale: A locale identifier or an
--- CODE BLOCK 51 ---
Intl.Collator
--- END CODE BLOCK ---
object that wraps a locale identifier.
A list of locales: Any other value, that will be converted into an object and then treated as an array of locales.
In the latter two cases, the actual locale used is the best-supported locale determined by
locale negotiation
. If a locale identifier is not a string or an object, a
--- CODE BLOCK 53 ---
Intl.Collator
--- END CODE BLOCK ---
is thrown. If a locale identifier is a string that's syntactically invalid, a
--- CODE BLOCK 54 ---
Intl.DateTimeFormat
--- END CODE BLOCK ---
is thrown. If a locale identifier is well-formed but the implementation doesn't recognize it, it is ignored and the next locale in the list is considered, eventually falling back to the system's locale. However, you shouldn't rely on a particular locale name being ignored, because the implementation may add data for any locale in the future. For example,
--- CODE BLOCK 55 ---
Intl.DisplayNames
--- END CODE BLOCK ---
uses the implementation's default locale only because
--- CODE BLOCK 56 ---
Intl.DurationFormat
--- END CODE BLOCK ---
is syntactically valid but not recognized as any locale.
A locale identifier is a string that consists of:
A language subtag with 2–3 or 5–8 letters
A script subtag with 4 letters
Optional
A region subtag with either 2 letters or 3 digits
Optional
One or more variant subtags (all of which must be unique), each with either 5–8 alphanumerals or a digit followed by 3 alphanumerals
Optional
One or more BCP 47 extension sequences
Optional
A private-use extension sequence
Optional
Each subtag and sequence are separated by hyphens. Locale identifiers are case-insensitive
ASCII
. However, it's conventional to use title case (the first letter is capitalized, successive letters are lower case) for script subtags, upper case for region subtags, and lower case for everything else. For example:
--- CODE BLOCK 57 ---
Intl.ListFormat
--- END CODE BLOCK ---
: Hindi (language)
--- CODE BLOCK 58 ---
Intl.Locale
--- END CODE BLOCK ---
: German (language) as used in Austria (region)
--- CODE BLOCK 59 ---
Intl.NumberFormat
--- END CODE BLOCK ---
: Chinese (language) written in simplified characters (script) as used in China (region)
--- CODE BLOCK 60 ---
Intl.PluralRules
--- END CODE BLOCK ---
: English (language) in the "Early modern English" dialect (variant)
Subtags identifying languages, scripts, regions (including countries), and (rarely used) variants are registered in the
IANA Language Subtag Registry
. This registry is periodically updated over time, and implementations may not always be up to date, so don't rely too much on subtags being universally supported.
BCP 47 extension sequences consist of a single digit or letter (other than
--- CODE BLOCK 61 ---
Intl.RelativeTimeFormat
--- END CODE BLOCK ---
) and one or more two- to eight-letter or digit subtags separated by hyphens. Only one sequence is permitted for each digit or letter:
--- CODE BLOCK 62 ---
Intl.Segmenter
--- END CODE BLOCK ---
is invalid. BCP 47 extension subtags are defined in the
Unicode CLDR Project
. Currently only two extensions have defined semantics:
--- CODE BLOCK 63 ---
Intl[Symbol.toStringTag]
--- END CODE BLOCK ---
(Unicode) extension can be used to request additional customization of
--- CODE BLOCK 64 ---
[Symbol.toStringTag]
--- END CODE BLOCK ---
API objects. Examples:
--- CODE BLOCK 66 ---
Object.prototype.toString()
--- END CODE BLOCK ---
: Use the phonebook variant of the German sort order, which interprets umlauted vowels as corresponding character pairs: ä → ae, ö → oe, ü → ue.
--- CODE BLOCK 67 ---
Intl.getCanonicalLocales()
--- END CODE BLOCK ---
: Use Thai digits (๐, ๑, ๒, ๓, ๔, ๕, ๖, ๗, ๘, ๙) in number formatting.
--- CODE BLOCK 68 ---
Intl.supportedValuesOf()
--- END CODE BLOCK ---
: Use the Japanese calendar in date and time formatting, so that 2013 is expressed as the year 25 of the Heisei period, or 平成 25.
--- CODE BLOCK 70 ---
const count = 26254.39;
const date = new Date("2012-05-24");
function log(locale) {
console.log(
`${new Intl.DateTimeFormat(locale).format(date)} ${new Intl.NumberFormat(
locale,
).format(count)}`,
log("en-US"); // 5/24/2012 26,254.39
log("de-DE"); // 24.5.2012 26.254,39
--- END CODE BLOCK ---
: use British English with the Umm al-Qura (Hijri) calendar, where the Gregorian date 14 October, 2017 is the Hijri date 24 Muharram, 1439.
--- CODE BLOCK 71 ---
const count = 26254.39;
const date = new Date("2012-05-24");
function log(locale) {
console.log(
`${new Intl.DateTimeFormat(locale).format(date)} ${new Intl.NumberFormat(
locale,
).format(count)}`,
log("en-US"); // 5/24/2012 26,254.39
log("de-DE"); // 24.5.2012 26.254,39
--- END CODE BLOCK ---
(transformed) extension indicates transformed content: for example, text that was translated from another locale. No
--- CODE BLOCK 73 ---
navigator.language
--- END CODE BLOCK ---
functionality currently considers the
--- CODE BLOCK 74 ---
const date = new Date("2012-05-24");
const formattedDate = new Intl.DateTimeFormat(navigator.language).format(date);
--- END CODE BLOCK ---
extension. However, this extension sometimes contains a nested locale (with no extensions): for example, the transformed extension in
--- CODE BLOCK 75 ---
const date = new Date("2012-05-24");
const formattedDate = new Intl.DateTimeFormat(navigator.language).format(date);
--- END CODE BLOCK ---
contains the locale identifier for English. If a nested locale is present, it must be a valid locale identifier. For example, because
--- CODE BLOCK 76 ---
navigator.languages
--- END CODE BLOCK ---
is invalid (because it contains a duplicate
--- CODE BLOCK 78 ---
const count = 26254.39;
const formattedCount = new Intl.NumberFormat(navigator.languages).format(count);
--- END CODE BLOCK ---
variant subtag),
--- CODE BLOCK 79 ---
const count = 26254.39;
const formattedCount = new Intl.NumberFormat(navigator.languages).format(count);
--- END CODE BLOCK ---
is also invalid.
Finally, a private-use extension sequence using the letter
--- CODE BLOCK 80 ---
Keyboard.getLayoutMap()
--- END CODE BLOCK ---
may appear, followed by one or more one- to eight-letter or digit subtags separated by hyphens. This allows applications to encode information for their own private use, that will be ignored by all
--- CODE BLOCK 81 ---
navigator.language
--- END CODE BLOCK ---
operations.
options argument
--- CODE BLOCK 82 ---
navigator.languages
--- END CODE BLOCK ---
argument must be an object with properties that vary between constructors and functions. If the
[CODE_BLOCK_41]
argument is not provided or is undefined, default values are used for all properties.
One property is supported by all language sensitive constructors and functions: The
[CODE_BLOCK_42]
property, whose value must be a string
[CODE_BLOCK_43]
[CODE_BLOCK_44]
and which selects one of the locale matching algorithms described below.
Locale identification and negotiation
The list of locales specified by the
[CODE_BLOCK_45]
argument, after Unicode extensions have been removed from them, is interpreted as a prioritized request from the application. The runtime compares it against the locales it has available and picks the best one available. Two matching algorithms exist: the
[CODE_BLOCK_46]
matcher follows the Lookup algorithm specified in
BCP 47
; the
[CODE_BLOCK_47]
matcher lets the runtime provide a locale that's at least, but possibly more, suited for the request than the result of the Lookup algorithm. If the application doesn't provide a
[CODE_BLOCK_48]
argument, or the runtime doesn't have a locale that matches the request, then the runtime's default locale is used. The matcher can be selected using a property of the
[CODE_BLOCK_49]
argument (see below).
If the selected locale identifier had a Unicode extension sequence, that extension is now used to customize the constructed object or the behavior of the function. Each constructor or function supports only a subset of the keys defined for the Unicode extension, and the supported values often depend on the locale identifier. For example, the
[CODE_BLOCK_50]
key (collation) is only supported by
[CODE_BLOCK_51]
, and its
[CODE_BLOCK_52]
value is only supported for German.
Static properties
[CODE_BLOCK_53]
Constructor for collators, which are objects that enable language-sensitive string comparison.
[CODE_BLOCK_54]
Constructor for objects that enable language-sensitive date and time formatting.
[CODE_BLOCK_55]
Constructor for objects that enable the consistent translation of language, region and script display names.
[CODE_BLOCK_56]
Constructor for objects that enable locale-sensitive duration formatting.
[CODE_BLOCK_57]
Constructor for objects that enable language-sensitive list formatting.
[CODE_BLOCK_58]
Constructor for objects that represents a Unicode locale identifier.
[CODE_BLOCK_59]
Constructor for objects that enable language-sensitive number formatting.
[CODE_BLOCK_60]
Constructor for objects that enable plural-sensitive formatting and language-specific rules for plurals.
[CODE_BLOCK_61]
Constructor for objects that enable language-sensitive relative time formatting.
[CODE_BLOCK_62]
Constructor for objects that enable locale-sensitive text segmentation.
[CODE_BLOCK_63]
The initial value of the
[CODE_BLOCK_64]
property is the string
[CODE_BLOCK_65]
. This property is used in
[CODE_BLOCK_66]
Static methods
[CODE_BLOCK_67]
Returns canonical locale names.
[CODE_BLOCK_68]
Returns a sorted array containing the supported unique calendar, collation, currency, numbering systems, or unit values supported by the implementation.
Examples
Formatting dates and numbers
You can use
[CODE_BLOCK_69]
to format dates and numbers in a form that's conventional for a specific language and region:
Copy to Clipboard
[CODE_BLOCK_70]
Using the browser's preferred language
Instead of passing a hardcoded locale name to the
[CODE_BLOCK_72]
methods, you can use the user's preferred language provided by
[CODE_BLOCK_73]
Copy to Clipboard
[CODE_BLOCK_74]
Alternatively, the
[CODE_BLOCK_76]
property provides a sorted list of the user's preferred languages. This list can be passed directly to the
[CODE_BLOCK_77]
constructors to implement preference-based fallback selection of locales. The
locale negotiation
process is used to pick the most appropriate locale available:
Copy to Clipboard
[CODE_BLOCK_78]
Specifications
Specification
ECMAScript® 2026 Internationalization API Specification
intl-object
Browser compatibility
See also
[CODE_BLOCK_80]
[CODE_BLOCK_81]
[CODE_BLOCK_82]
The ECMAScript Internationalization API
by Norbert Lindenberg (2012)
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
Apr 10, 2025
MDN contributors
View this page on GitHub
Report a problem with this content