SOURCE URL: https://developer.mozilla.org/docs/Web/API/queueMicrotask
SCRAPED: 2025-06-19 18:18:00
================================================================================

--- CODE BLOCK 1 ---
queueMicrotask()
--- END CODE BLOCK ---
method of the
--- CODE BLOCK 3 ---
queueMicrotask()
--- END CODE BLOCK ---
interface
queues a microtask to be executed at a safe time prior to control returning to the
browser's event loop.
The microtask is a short function which will run after
the current task has completed its work and when there is no other code waiting to be
run before control of the execution context is returned to the browser's event loop.
This lets your code run without interfering with any other, potentially higher
priority, code that is pending, but before the browser regains control over the
execution context, potentially depending on work you need to complete. You can learn
more about how to use microtasks and why you might choose to do so in our
microtask guide
The importance of microtasks comes in its ability to perform tasks asynchronously but
in a specific order. See
Using microtasks in JavaScript with
--- CODE BLOCK 4 ---
queueMicrotask(callback)
--- END CODE BLOCK ---
for more details.
Microtasks are especially useful for libraries and frameworks that need to perform
final cleanup or other just-before-rendering tasks.
Syntax
Copy to Clipboard
--- CODE BLOCK 5 ---
queueMicrotask(callback)
--- END CODE BLOCK ---
Parameters
--- CODE BLOCK 10 ---
queueMicrotask(() => {
// function contents here
--- END CODE BLOCK ---
--- CODE BLOCK 11 ---
MyElement.prototype.loadData = function (url) {
if (this._cache[url]) {
queueMicrotask(() => {
this._setData(this._cache[url]);
this.dispatchEvent(new Event("load"));
} else {
fetch(url)
.then((res) => res.arrayBuffer())
.then((data) => {
this._cache[url] = data;
this._setData(data);
this.dispatchEvent(new Event("load"));
--- END CODE BLOCK ---
to be executed when the browser engine determines it is
safe to call your code. Enqueued microtasks are executed after all pending tasks have
completed but before yielding control to the browser's event loop.
Return value
None (
--- CODE BLOCK 12 ---
MyElement.prototype.loadData = function (url) {
if (this._cache[url]) {
queueMicrotask(() => {
this._setData(this._cache[url]);
this.dispatchEvent(new Event("load"));
} else {
fetch(url)
.then((res) => res.arrayBuffer())
.then((data) => {
this._cache[url] = data;
this._setData(data);
this.dispatchEvent(new Event("load"));
--- END CODE BLOCK ---
Examples
Copy to Clipboard
--- CODE BLOCK 13 ---
WorkerGlobalScope.queueMicrotask()
--- END CODE BLOCK ---
Taken from the
queueMicrotask spec
Copy to Clipboard
[CODE_BLOCK_11]
Specifications
Specification
HTML
microtask-queuing
Browser compatibility
See also
[CODE_BLOCK_13]
Polyfill of
[CODE_BLOCK_14]
[CODE_BLOCK_15]
Using microtasks in JavaScript with queueMicrotask()
Asynchronous JavaScript
queueMicrotask explainer
Tasks, microtasks, queues and schedules
by Jake Archibald
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
Dec 19, 2024
MDN contributors
View this page on GitHub
Report a problem with this content