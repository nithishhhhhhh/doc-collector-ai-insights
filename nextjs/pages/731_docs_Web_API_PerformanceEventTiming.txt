SOURCE URL: https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming
SCRAPED: 2025-06-19 18:32:50
================================================================================

--- CODE BLOCK 1 ---
PerformanceEventTiming
--- END CODE BLOCK ---
interface of the Event Timing API provides insights into the latency of certain event types triggered by user interaction.
Description
This API enables visibility into slow events by providing event timestamps and duration for certain event types (
see below
). For example, you can monitor the time between a user action and the start of its event handler, or the time an event handler takes to run.
This API is particularly useful for measuring the
Interaction to Next Paint
(INP): the longest time (minus some outliers) from the point when a user interacts with your app to the point until the browser was actually able to respond to that interaction.
You typically work with
--- CODE BLOCK 2 ---
PerformanceEventTiming
--- END CODE BLOCK ---
objects by creating a
--- CODE BLOCK 3 ---
PerformanceObserver
--- END CODE BLOCK ---
instance and then calling its
--- CODE BLOCK 6 ---
"first-input"
--- END CODE BLOCK ---
method, passing in
--- CODE BLOCK 8 ---
PerformanceObserver
--- END CODE BLOCK ---
--- CODE BLOCK 9 ---
PerformanceEventTiming
--- END CODE BLOCK ---
as the value of the
--- CODE BLOCK 10 ---
PerformanceEventTiming
--- END CODE BLOCK ---
option. The
--- CODE BLOCK 12 ---
PerformanceObserver
--- END CODE BLOCK ---
object's callback will then be called with a list of
--- CODE BLOCK 13 ---
durationThreshold
--- END CODE BLOCK ---
objects which you can analyze. See the
example below
for more.
By default,
--- CODE BLOCK 15 ---
PerformanceEntry
--- END CODE BLOCK ---
entries are exposed when their
--- CODE BLOCK 18 ---
contextmenu
--- END CODE BLOCK ---
is 104ms or greater. Research suggests that user input that is not handled within 100ms is considered slow and 104ms is the first multiple of 8 greater than 100ms (for security reasons, this API is rounded to the nearest multiple of 8ms).
However, you can set the
--- CODE BLOCK 20 ---
compositionend
--- END CODE BLOCK ---
to a different threshold using the
--- CODE BLOCK 21 ---
compositionstart
--- END CODE BLOCK ---
option in the
--- CODE BLOCK 22 ---
compositionupdate
--- END CODE BLOCK ---
method.
This interface inherits methods and properties from its parent,
--- CODE BLOCK 29 ---
beforeinput
--- END CODE BLOCK ---
PerformanceEntry
PerformanceEventTiming
Events exposed
The following event types are exposed by the Event Timing API:
Click events
--- CODE BLOCK 40 ---
pointerover
--- END CODE BLOCK ---
--- CODE BLOCK 41 ---
pointerenter
--- END CODE BLOCK ---
--- CODE BLOCK 42 ---
pointerdown
--- END CODE BLOCK ---
--- CODE BLOCK 44 ---
pointercancel
--- END CODE BLOCK ---
Composition events
--- CODE BLOCK 46 ---
pointerleave
--- END CODE BLOCK ---
--- CODE BLOCK 47 ---
gotpointercapture
--- END CODE BLOCK ---
--- CODE BLOCK 48 ---
lostpointercapture
--- END CODE BLOCK ---
Drag & drop events
--- CODE BLOCK 51 ---
touchcancel
--- END CODE BLOCK ---
--- CODE BLOCK 53 ---
pointermove
--- END CODE BLOCK ---
--- CODE BLOCK 54 ---
pointerrawupdate
--- END CODE BLOCK ---
--- CODE BLOCK 58 ---
performance.eventCounts
--- END CODE BLOCK ---
--- CODE BLOCK 59 ---
const exposedEventsList = [...performance.eventCounts.keys()];
--- END CODE BLOCK ---
--- CODE BLOCK 60 ---
const exposedEventsList = [...performance.eventCounts.keys()];
--- END CODE BLOCK ---
Input events
--- CODE BLOCK 61 ---
PerformanceEventTiming
--- END CODE BLOCK ---
--- CODE BLOCK 62 ---
PerformanceEntry
--- END CODE BLOCK ---
Keyboard events
--- CODE BLOCK 63 ---
PerformanceEntry.duration
--- END CODE BLOCK ---
--- CODE BLOCK 64 ---
DOMHighResTimeStamp
--- END CODE BLOCK ---
--- CODE BLOCK 66 ---
PerformanceEntry.entryType
--- END CODE BLOCK ---
Mouse events
--- CODE BLOCK 68 ---
"first-input"
--- END CODE BLOCK ---
--- CODE BLOCK 69 ---
PerformanceEntry.name
--- END CODE BLOCK ---
--- CODE BLOCK 70 ---
PerformanceEntry.startTime
--- END CODE BLOCK ---
--- CODE BLOCK 71 ---
DOMHighResTimeStamp
--- END CODE BLOCK ---
--- CODE BLOCK 73 ---
PerformanceEventTiming.cancelable
--- END CODE BLOCK ---
--- CODE BLOCK 75 ---
PerformanceEventTiming.interactionId
--- END CODE BLOCK ---
Pointer events
--- CODE BLOCK 76 ---
PerformanceEventTiming.processingStart
--- END CODE BLOCK ---
--- CODE BLOCK 77 ---
DOMHighResTimeStamp
--- END CODE BLOCK ---
--- CODE BLOCK 78 ---
processingStart-startTime
--- END CODE BLOCK ---
--- CODE BLOCK 79 ---
PerformanceEventTiming.processingEnd
--- END CODE BLOCK ---
--- CODE BLOCK 80 ---
DOMHighResTimeStamp
--- END CODE BLOCK ---
--- CODE BLOCK 81 ---
processingEnd-processingStart
--- END CODE BLOCK ---
--- CODE BLOCK 82 ---
PerformanceEventTiming.target
--- END CODE BLOCK ---
--- CODE BLOCK 83 ---
PerformanceEventTiming.toJSON()
--- END CODE BLOCK ---
--- CODE BLOCK 84 ---
PerformanceEventTiming
--- END CODE BLOCK ---
Touch events
--- CODE BLOCK 85 ---
PerformanceObserver
--- END CODE BLOCK ---
--- CODE BLOCK 88 ---
"first-input"
--- END CODE BLOCK ---
--- CODE BLOCK 92 ---
PerformanceObserver
--- END CODE BLOCK ---
Note that the following events are not included in the list because they are continuous events and no meaningful event counts or performance metrics can be obtained at this point:
--- CODE BLOCK 93 ---
PerformanceEventTiming
--- END CODE BLOCK ---
--- CODE BLOCK 94 ---
const observer = new PerformanceObserver((list) => {
list.getEntries().forEach((entry) => {
// Full duration
const duration = entry.duration;
// Input delay (before processing event)
const delay = entry.processingStart - entry.startTime;
// Synchronous event processing time
// (between start and end dispatch)
const eventHandlerTime = entry.processingEnd - entry.processingStart;
console.log(`Total duration: ${duration}`);
console.log(`Event delay: ${delay}`);
console.log(`Event handler duration: ${eventHandlerTime}`);
// Register the observer for events
observer.observe({ type: "event", buffered: true });
--- END CODE BLOCK ---
--- CODE BLOCK 95 ---
const observer = new PerformanceObserver((list) => {
list.getEntries().forEach((entry) => {
// Full duration
const duration = entry.duration;
// Input delay (before processing event)
const delay = entry.processingStart - entry.startTime;
// Synchronous event processing time
// (between start and end dispatch)
const eventHandlerTime = entry.processingEnd - entry.processingStart;
console.log(`Total duration: ${duration}`);
console.log(`Event delay: ${delay}`);
console.log(`Event handler duration: ${eventHandlerTime}`);
// Register the observer for events
observer.observe({ type: "event", buffered: true });
--- END CODE BLOCK ---
--- CODE BLOCK 96 ---
durationThreshold
--- END CODE BLOCK ---
--- CODE BLOCK 97 ---
observer.observe({ type: "event", durationThreshold: 16, buffered: true });
--- END CODE BLOCK ---
--- CODE BLOCK 98 ---
observer.observe({ type: "event", durationThreshold: 16, buffered: true });
--- END CODE BLOCK ---
To get a list of all exposed events, you can also look up keys in the
[CODE_BLOCK_58]
map:
Copy to Clipboard
[CODE_BLOCK_59]
Constructor
This interface has no constructor on its own. See the
example below
for how to typically get the information the
[CODE_BLOCK_61]
interface holds.
Instance properties
This interface extends the following
[CODE_BLOCK_62]
properties for event timing performance entry types by qualifying them as follows:
[CODE_BLOCK_63]
Read only
Returns a
[CODE_BLOCK_64]
representing the time from
[CODE_BLOCK_65]
to the next rendering paint (rounded to the nearest 8ms).
[CODE_BLOCK_66]
Read only
Returns
[CODE_BLOCK_67]
(for long events) or
[CODE_BLOCK_68]
(for the first user interaction).
[CODE_BLOCK_69]
Read only
Returns the associated event's type.
[CODE_BLOCK_70]
Read only
Returns a
[CODE_BLOCK_71]
representing the associated event's
[CODE_BLOCK_72]
property. This is the time the event was created and can be considered as a proxy for the time the user interaction occurred.
This interface also supports the following properties:
[CODE_BLOCK_73]
Read only
Returns the associated event's
[CODE_BLOCK_74]
property.
[CODE_BLOCK_75]
Read only
Experimental
Returns the ID that uniquely identifies the user interaction which triggered the associated event.
[CODE_BLOCK_76]
Read only
Returns a
[CODE_BLOCK_77]
representing the time at which event dispatch started. To measure the time between a user action and the time the event handler starts to run, calculate
[CODE_BLOCK_78]
[CODE_BLOCK_79]
Read only
Returns a
[CODE_BLOCK_80]
representing the time at which the event dispatch ended. To measure the time the event handler took to run, calculate
[CODE_BLOCK_81]
[CODE_BLOCK_82]
Read only
Returns the associated event's last target, if it is not removed.
Instance methods
[CODE_BLOCK_83]
Returns a JSON representation of the
[CODE_BLOCK_84]
object.
Examples
Getting event timing information
To get event timing information, create a
[CODE_BLOCK_85]
instance and then call its
[CODE_BLOCK_86]
method, passing in
[CODE_BLOCK_87]
[CODE_BLOCK_88]
as the value of the
[CODE_BLOCK_89]
option. You also need to set
[CODE_BLOCK_90]
[CODE_BLOCK_91]
to get access to events the user agent buffered while constructing the document. The
[CODE_BLOCK_92]
object's callback will then be called with a list of
[CODE_BLOCK_93]
objects which you can analyze.
Copy to Clipboard
[CODE_BLOCK_94]
You can also set a different
[CODE_BLOCK_96]
. The default is 104ms and the minimum possible duration threshold is 16ms.
Copy to Clipboard
[CODE_BLOCK_97]
Specifications
Specification
Event Timing API
sec-performance-event-timing
Browser compatibility
See also
Intersection Observer API
Page Visibility API
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
Nov 20, 2024
MDN contributors
View this page on GitHub
Report a problem with this content