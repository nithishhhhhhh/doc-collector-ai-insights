SOURCE URL: https://nextjs.org/docs/app/getting-started/server-and-client-components#examples#moving-client-components-down-the-tree
SCRAPED: 2025-06-19 18:01:54
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
App Router
Getting Started
Server and Client Components
Server and Client Components
By default, layouts and pages are
Server Components
, which lets you fetch data and render parts of your UI on the server, optionally cache the result, and stream it to the client. When you need interactivity or browser APIs, you can use
Client Components
to layer in functionality.
This page explains how Server and Client Components work in Next.js and when to use them, with examples of how to compose them together in your application.
When to use Server and Client Components?
The client and server environments have different capabilities. Server and Client components allow you to run logic in each environment depending on your use case.
Client Components
when you need:
State
event handlers
. E.g.
--- CODE BLOCK 4 ---
localStorage
--- END CODE BLOCK ---
--- CODE BLOCK 6 ---
Navigator.geolocation
--- END CODE BLOCK ---
Lifecycle logic
. E.g.
--- CODE BLOCK 8 ---
<LikeButton>
--- END CODE BLOCK ---
Browser-only APIs. E.g.
--- CODE BLOCK 9 ---
import LikeButton from '@/app/ui/like-button'
import { getPost } from '@/lib/data'
export default async function Page({ params }: { params: { id: string } }) {
const post = await getPost(params.id)
return (
<div>
<main>
<h1>{post.title}</h1>
{/* ... */}
<LikeButton likes={post.likes} />
</main>
</div>
--- END CODE BLOCK ---
--- CODE BLOCK 10 ---
import LikeButton from '@/app/ui/like-button'
import { getPost } from '@/lib/data'
export default async function Page({ params }: { params: { id: string } }) {
const post = await getPost(params.id)
return (
<div>
<main>
<h1>{post.title}</h1>
{/* ... */}
<LikeButton likes={post.likes} />
</main>
</div>
--- END CODE BLOCK ---
--- CODE BLOCK 11 ---
'use client'
import { useState } from 'react'
export default function LikeButton({ likes }: { likes: number }) {
// ...
--- END CODE BLOCK ---
, etc.
Custom hooks
Server Components
when you need:
Fetch data from databases or APIs close to the source.
Use API keys, tokens, and other secrets without exposing them to the client.
Reduce the amount of JavaScript sent to the browser.
Improve the
First Contentful Paint (FCP)
, and stream content progressively to the client.
For example, the
--- CODE BLOCK 12 ---
'use client'
import { useState } from 'react'
export default function LikeButton({ likes }: { likes: number }) {
// ...
--- END CODE BLOCK ---
component is a Server Component that fetches data about a post, and passes it as props to the
--- CODE BLOCK 13 ---
"use client"
--- END CODE BLOCK ---
which handles client-side interactivity.
app/[id]/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 14 ---
'use client'
import { useState } from 'react'
export default function Counter() {
const [count, setCount] = useState(0)
return (
<div>
<p>{count} likes</p>
<button onClick={() => setCount(count + 1)}>Click me</button>
</div>
--- END CODE BLOCK ---
app/ui/like-button.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 16 ---
"use client"
--- END CODE BLOCK ---
How do Server and Client Components work in Next.js?
On the server
On the server, Next.js uses React's APIs to orchestrate rendering. The rendering work is split into chunks, by individual route segments (
layouts and pages
Server Components
are rendered into a special data format called the React Server Component Payload (RSC Payload).
Client Components
and the RSC Payload are used to
prerender
HTML.
What is the React Server Component Payload (RSC)?
The RSC Payload is a compact binary representation of the rendered React Server Components tree. It's used by React on the client to update the browser's DOM. The RSC Payload contains:
The rendered result of Server Components
Placeholders for where Client Components should be rendered and references to their JavaScript files
Any props passed from a Server Component to a Client Component
On the client (first load)
Then, on the client:
HTML
is used to immediately show a fast non-interactive preview of the route to the user.
RSC Payload
is used to reconcile the Client and Server Component trees.
JavaScript
is used to hydrate Client Components and make the application interactive.
What is hydration?
Hydration is React's process for attaching
event handlers
to the DOM, to make the static HTML interactive.
Subsequent Navigations
On subsequent navigations:
RSC Payload
is prefetched and cached for instant navigation.
Client Components
are rendered entirely on the client, without the server-rendered HTML.
Examples
Using Client Components
You can create a Client Component by adding the
--- CODE BLOCK 18 ---
'use client'
--- END CODE BLOCK ---
directive at the top of the file, above your imports.
app/ui/counter.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 21 ---
// Client Component
import Search from './search'
// Server Component
import Logo from './logo'
// Layout is a Server Component by default
export default function Layout({ children }: { children: React.ReactNode }) {
return (
<nav>
<Logo />
<Search />
</nav>
<main>{children}</main>
--- END CODE BLOCK ---
--- CODE BLOCK 23 ---
'use client'
export default function Search() {
// ...
--- END CODE BLOCK ---
is used to declare a
boundary
between the Server and Client module graphs (trees).
Once a file is marked with
--- CODE BLOCK 24 ---
'use client'
export default function Search() {
// ...
--- END CODE BLOCK ---
all its imports and child components are considered part of the client bundle
. This means you don't need to add the directive to every component that is intended for the client.
Reducing JS bundle size
To reduce the size of your client JavaScript bundles, add
--- CODE BLOCK 25 ---
import LikeButton from '@/app/ui/like-button'
import { getPost } from '@/lib/data'
export default async function Page({ params }: { params: { id: string } }) {
const post = await getPost(params.id)
return <LikeButton likes={post.likes} />
--- END CODE BLOCK ---
to specific interactive components instead of marking large parts of your UI as Client Components.
For example, the
--- CODE BLOCK 26 ---
import LikeButton from '@/app/ui/like-button'
import { getPost } from '@/lib/data'
export default async function Page({ params }: { params: { id: string } }) {
const post = await getPost(params.id)
return <LikeButton likes={post.likes} />
--- END CODE BLOCK ---
component contains mostly static elements like a logo and navigation links, but includes an interactive search bar.
--- CODE BLOCK 27 ---
'use client'
export default function LikeButton({ likes }: { likes: number }) {
// ...
--- END CODE BLOCK ---
is interactive and needs to be a Client Component, however, the rest of the layout can remain a Server Component.
app/layout.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 28 ---
'use client'
export default function LikeButton({ likes }: { likes: number }) {
// ...
--- END CODE BLOCK ---
app/ui/search.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 34 ---
'use client'
export default function Modal({ children }: { children: React.ReactNode }) {
return <div>{children}</div>
--- END CODE BLOCK ---
Passing data from Server to Client Components
You can pass data from Server Components to Client Components using props.
app/[id]/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 39 ---
import Modal from './ui/modal'
import Cart from './ui/cart'
export default function Page() {
return (
<Modal>
<Cart />
</Modal>
--- END CODE BLOCK ---
app/ui/like-button.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 42 ---
'use client'
import { createContext } from 'react'
export const ThemeContext = createContext({})
export default function ThemeProvider({
children,
}: {
children: React.ReactNode
}) {
return <ThemeContext.Provider value="dark">{children}</ThemeContext.Provider>
--- END CODE BLOCK ---
Alternatively, you can stream data from a Server Component to a Client Component with the
--- CODE BLOCK 45 ---
import ThemeProvider from './theme-provider'
export default function RootLayout({
children,
}: {
children: React.ReactNode
}) {
return (
<html>
<body>
<ThemeProvider>{children}</ThemeProvider>
</body>
</html>
--- END CODE BLOCK ---
Hook
. See an
example
Good to know
: Props passed to Client Components need to be
serializable
by React.
Interleaving Server and Client Components
You can pass Server Components as a prop to a Client Component. This allows you to visually nest server-rendered UI within Client components.
A common pattern is to use
--- CODE BLOCK 46 ---
import ThemeProvider from './theme-provider'
export default function RootLayout({
children,
}: {
children: React.ReactNode
}) {
return (
<html>
<body>
<ThemeProvider>{children}</ThemeProvider>
</body>
</html>
--- END CODE BLOCK ---
to create a
slot
in a
--- CODE BLOCK 47 ---
ThemeProvider
--- END CODE BLOCK ---
. For example, a
--- CODE BLOCK 50 ---
<Carousel />
--- END CODE BLOCK ---
component that fetches data on the server, inside a
--- CODE BLOCK 51 ---
acme-carousel
--- END CODE BLOCK ---
component that uses client state to toggle visibility.
app/ui/modal.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 53 ---
"use client"
--- END CODE BLOCK ---
Then, in a parent Server Component (e.g.
--- CODE BLOCK 55 ---
'use client'
import { useState } from 'react'
import { Carousel } from 'acme-carousel'
export default function Gallery() {
const [isOpen, setIsOpen] = useState(false)
return (
<div>
<button onClick={() => setIsOpen(true)}>View pictures</button>
{/* Works, since Carousel is used within a Client Component */}
{isOpen && <Carousel />}
</div>
--- END CODE BLOCK ---
), you can pass a
--- CODE BLOCK 56 ---
'use client'
import { useState } from 'react'
import { Carousel } from 'acme-carousel'
export default function Gallery() {
const [isOpen, setIsOpen] = useState(false)
return (
<div>
<button onClick={() => setIsOpen(true)}>View pictures</button>
{/* Works, since Carousel is used within a Client Component */}
{isOpen && <Carousel />}
</div>
--- END CODE BLOCK ---
as the child of the
--- CODE BLOCK 57 ---
<Carousel />
--- END CODE BLOCK ---
app/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 58 ---
'use client'
import { Carousel } from 'acme-carousel'
export default Carousel
--- END CODE BLOCK ---
In this pattern, all Server Components will be rendered on the server ahead of time, including those as props. The resulting RSC payload will contain references of where Client Components should be rendered within the component tree.
Context providers
React context
is commonly used to share global state like the current theme. However, React context is not supported in Server Components.
To use context, create a Client Component that accepts
--- CODE BLOCK 60 ---
<Carousel />
--- END CODE BLOCK ---
app/theme-provider.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 61 ---
import Carousel from './carousel'
export default function Page() {
return (
<div>
<p>View pictures</p>
{/*  Works, since Carousel is a Client Component */}
<Carousel />
</div>
--- END CODE BLOCK ---
Then, import it into a Server Component (e.g.
--- CODE BLOCK 63 ---
"use client"
--- END CODE BLOCK ---
app/layout.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 64 ---
"use client"
--- END CODE BLOCK ---
Your Server Component will now be able to directly render your provider, and all other Client Components throughout your app will be able to consume this context.
Good to know
: You should render providers as deep as possible in the tree – notice how
--- CODE BLOCK 66 ---
export async function getData() {
const res = await fetch('https://external-service.com/data', {
headers: {
authorization: process.env.API_KEY,
return res.json()
--- END CODE BLOCK ---
only wraps
--- CODE BLOCK 67 ---
export async function getData() {
const res = await fetch('https://external-service.com/data', {
headers: {
authorization: process.env.API_KEY,
return res.json()
--- END CODE BLOCK ---
instead of the entire
--- CODE BLOCK 69 ---
NEXT_PUBLIC_
--- END CODE BLOCK ---
document. This makes it easier for Next.js to optimize the static parts of your Server Components.
Third-party components
When using a third-party component that relies on client-only features, you can wrap it in a Client Component to ensure it works as expected.
For example, the
--- CODE BLOCK 71 ---
server-only
--- END CODE BLOCK ---
can be imported from the
--- CODE BLOCK 72 ---
import 'server-only'
export async function getData() {
const res = await fetch('https://external-service.com/data', {
headers: {
authorization: process.env.API_KEY,
return res.json()
--- END CODE BLOCK ---
package. This component uses
--- CODE BLOCK 73 ---
import 'server-only'
export async function getData() {
const res = await fetch('https://external-service.com/data', {
headers: {
authorization: process.env.API_KEY,
return res.json()
--- END CODE BLOCK ---
, but it doesn't yet have the
--- CODE BLOCK 74 ---
client-only
--- END CODE BLOCK ---
directive.
If you use
--- CODE BLOCK 76 ---
server-only
--- END CODE BLOCK ---
within a Client Component, it will work as expected:
app/gallery.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 77 ---
client-only
--- END CODE BLOCK ---
However, if you try to use it directly within a Server Component, you'll see an error. This is because Next.js doesn't know
--- CODE BLOCK 79 ---
pnpm add server-only
--- END CODE BLOCK ---
is using client-only features.
To fix this, you can wrap third-party components that rely on client-only features in your own Client Components:
app/carousel.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 80 ---
server-only
--- END CODE BLOCK ---
Now, you can use
--- CODE BLOCK 82 ---
server-only
--- END CODE BLOCK ---
directly within a Server Component:
app/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 83 ---
client-only
--- END CODE BLOCK ---
Advice for Library Authors
If you’re building a component library, add the
[CODE_BLOCK_63]
directive to entry points that rely on client-only features. This lets your users import components into Server Components without needing to create wrappers.
It's worth noting some bundlers might strip out
[CODE_BLOCK_64]
directives. You can find an example of how to configure esbuild to include the
[CODE_BLOCK_65]
directive in the
React Wrap Balancer
Vercel Analytics
repositories.
Preventing environment poisoning
JavaScript modules can be shared between both Server and Client Components modules. This means it's possible to accidentally import server-only code into the client. For example, consider the following function:
lib/data.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_66]
This function contains an
[CODE_BLOCK_68]
that should never be exposed to the client.
In Next.js, only environment variables prefixed with
[CODE_BLOCK_69]
are included in the client bundle. If variables are not prefixed, Next.js replaces them with an empty string.
As a result, even though
[CODE_BLOCK_70]
can be imported and executed on the client, it won't work as expected.
To prevent accidental usage in Client Components, you can use the
[CODE_BLOCK_71]
package
Then, import the package into a file that contains server-only code:
lib/data.js
[CODE_BLOCK_72]
Now, if you try to import the module into a Client Component, there will be a build-time error.
The corresponding
[CODE_BLOCK_74]
package
can be used to mark modules that contain client-only logic like code that accesses the
[CODE_BLOCK_75]
object.
In Next.js, installing
[CODE_BLOCK_76]
[CODE_BLOCK_77]
optional
. However, if your linting rules flag extraneous dependencies, you may install them to avoid issues.
pnpm
yarn
Terminal
[CODE_BLOCK_78]
Next.js handles
[CODE_BLOCK_80]
[CODE_BLOCK_81]
imports internally to provide clearer error messages when a module is used in the wrong environment. The contents of these packages from NPM are not used by Next.js.
Next.js also provides its own type declarations for
[CODE_BLOCK_82]
[CODE_BLOCK_83]
, for TypeScript configurations where
[CODE_BLOCK_84]
is active.
Next Steps
Learn more about the APIs mentioned in this page.
use client
Learn how to use the use client directive to render a component on the client.
Was this helpful?
supported.
Send