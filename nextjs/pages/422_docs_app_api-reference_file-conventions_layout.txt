SOURCE URL: https://nextjs.org/docs/app/api-reference/file-conventions/layout#root-layout
SCRAPED: 2025-06-19 17:58:59
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
API Reference
File-system conventions
layout.js
layout.js
--- CODE BLOCK 2 ---
export default function DashboardLayout({
children,
}: {
children: React.ReactNode
}) {
return <section>{children}</section>
--- END CODE BLOCK ---
file is used to define a layout in your Next.js application.
app/dashboard/layout.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 3 ---
export default function DashboardLayout({
children,
}: {
children: React.ReactNode
}) {
return <section>{children}</section>
--- END CODE BLOCK ---
root layout
is the top-most layout in the root
--- CODE BLOCK 8 ---
export default function RootLayout({
children,
}: {
children: React.ReactNode
}) {
return (
<html lang="en">
<body>{children}</body>
</html>
--- END CODE BLOCK ---
directory. It is used to define the
--- CODE BLOCK 13 ---
export default async function Layout({
params,
}: {
params: Promise<{ team: string }>
}) {
const { team } = await params
--- END CODE BLOCK ---
--- CODE BLOCK 14 ---
export default async function Layout({
params,
}: {
params: Promise<{ team: string }>
}) {
const { team } = await params
--- END CODE BLOCK ---
tags and other globally shared UI.
app/layout.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 16 ---
app/dashboard/[team]/layout.js
--- END CODE BLOCK ---
Reference
Props
--- CODE BLOCK 18 ---
Promise<{ team: '1' }>
--- END CODE BLOCK ---
(required)
Layout components should accept and use a
--- CODE BLOCK 19 ---
app/shop/[tag]/[item]/layout.js
--- END CODE BLOCK ---
prop. During rendering,
--- CODE BLOCK 21 ---
Promise<{ tag: '1', item: '2' }>
--- END CODE BLOCK ---
will be populated with the route segments the layout is wrapping. These will primarily be the component of a child
Layout
(if it exists) or
Page
, but could also be other special files like
Loading
Error
when applicable.
--- CODE BLOCK 22 ---
app/blog/[...slug]/layout.js
--- END CODE BLOCK ---
(optional)
A promise that resolves to an object containing the
dynamic route parameters
object from the root segment down to that layout.
app/dashboard/[team]/layout.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 24 ---
Promise<{ slug: ['1', '2'] }>
--- END CODE BLOCK ---
Example Route
--- CODE BLOCK 30 ---
app/layout.js
--- END CODE BLOCK ---
--- CODE BLOCK 31 ---
export default function RootLayout({
children,
}: {
children: React.ReactNode
}) {
return (
<html>
<body>{children}</body>
</html>
--- END CODE BLOCK ---
--- CODE BLOCK 32 ---
export default function RootLayout({
children,
}: {
children: React.ReactNode
}) {
return (
<html>
<body>{children}</body>
</html>
--- END CODE BLOCK ---
--- CODE BLOCK 40 ---
app/(shop)/layout.js
--- END CODE BLOCK ---
--- CODE BLOCK 42 ---
app/(marketing)/layout.js
--- END CODE BLOCK ---
--- CODE BLOCK 45 ---
import { cookies } from 'next/headers'
export default async function Layout({ children }) {
const cookieStore = await cookies()
const theme = cookieStore.get('theme')
return '...'
--- END CODE BLOCK ---
--- CODE BLOCK 46 ---
import { cookies } from 'next/headers'
export default async function Layout({ children }) {
const cookieStore = await cookies()
const theme = cookieStore.get('theme')
return '...'
--- END CODE BLOCK ---
--- CODE BLOCK 47 ---
searchParams
--- END CODE BLOCK ---
--- CODE BLOCK 48 ---
useSearchParams
--- END CODE BLOCK ---
--- CODE BLOCK 49 ---
'use client'
import { useSearchParams } from 'next/navigation'
export default function Search() {
const searchParams = useSearchParams()
const search = searchParams.get('search')
return '...'
--- END CODE BLOCK ---
Since the
--- CODE BLOCK 50 ---
'use client'
import { useSearchParams } from 'next/navigation'
export default function Search() {
const searchParams = useSearchParams()
const search = searchParams.get('search')
return '...'
--- END CODE BLOCK ---
prop is a promise. You must use
--- CODE BLOCK 51 ---
import Search from '@/app/ui/search'
export default function Layout({ children }) {
return (
<Search />
{children}
--- END CODE BLOCK ---
or React's
--- CODE BLOCK 52 ---
import Search from '@/app/ui/search'
export default function Layout({ children }) {
return (
<Search />
{children}
--- END CODE BLOCK ---
function to access the values.
In version 14 and earlier,
--- CODE BLOCK 53 ---
usePathname
--- END CODE BLOCK ---
was a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.
Root Layout
--- CODE BLOCK 54 ---
'use client'
import { usePathname } from 'next/navigation'
// Simplified breadcrumbs logic
export default function Breadcrumbs() {
const pathname = usePathname()
const segments = pathname.split('/')
return (
<nav>
{segments.map((segment, index) => (
<span key={index}>
{' > '}
{segment}
</span>
</nav>
--- END CODE BLOCK ---
directory
must
include a root
--- CODE BLOCK 55 ---
'use client'
import { usePathname } from 'next/navigation'
// Simplified breadcrumbs logic
export default function Breadcrumbs() {
const pathname = usePathname()
const segments = pathname.split('/')
return (
<nav>
{segments.map((segment, index) => (
<span key={index}>
{' > '}
{segment}
</span>
</nav>
--- END CODE BLOCK ---
app/layout.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 56 ---
import { Breadcrumbs } from '@/app/ui/Breadcrumbs'
export default function Layout({ children }) {
return (
<Breadcrumbs />
<main>{children}</main>
--- END CODE BLOCK ---
The root layout
must
define
--- CODE BLOCK 61 ---
export async function getUser(id: string) {
const res = await fetch(`https://.../users/${id}`)
return res.json()
--- END CODE BLOCK ---
--- CODE BLOCK 62 ---
export async function getUser(id: string) {
const res = await fetch(`https://.../users/${id}`)
return res.json()
--- END CODE BLOCK ---
tags.
You should
manually add
--- CODE BLOCK 63 ---
import { getUser } from '@/app/lib/data'
import { UserName } from '@/app/ui/user-name'
export default async function Layout({ children }) {
const user = await getUser('1')
return (
<nav>
{/* ... */}
<UserName user={user.name} />
</nav>
{children}
--- END CODE BLOCK ---
tags such as
--- CODE BLOCK 64 ---
import { getUser } from '@/app/lib/data'
import { UserName } from '@/app/ui/user-name'
export default async function Layout({ children }) {
const user = await getUser('1')
return (
<nav>
{/* ... */}
<UserName user={user.name} />
</nav>
{children}
--- END CODE BLOCK ---
--- CODE BLOCK 65 ---
import { getUser } from '@/app/lib/data'
import { UserName } from '@/app/ui/user-name'
export default async function Page() {
const user = await getUser('1')
return (
<div>
<h1>Welcome {user.name}</h1>
</div>
--- END CODE BLOCK ---
to root layouts. Instead, you should use the
Metadata API
which automatically handles advanced requirements such as streaming and de-duplicating
--- CODE BLOCK 66 ---
import { getUser } from '@/app/lib/data'
import { UserName } from '@/app/ui/user-name'
export default async function Page() {
const user = await getUser('1')
return (
<div>
<h1>Welcome {user.name}</h1>
</div>
--- END CODE BLOCK ---
elements.
You can use
route groups
to create multiple root layouts.
Navigating
across multiple root layouts
will cause a
full page load
(as opposed to a client-side navigation). For example, navigating from
--- CODE BLOCK 67 ---
useSelectedLayoutSegment
--- END CODE BLOCK ---
that uses
--- CODE BLOCK 68 ---
useSelectedLayoutSegments
--- END CODE BLOCK ---
--- CODE BLOCK 69 ---
'use client'
import Link from 'next/link'
import { useSelectedLayoutSegment } from 'next/navigation'
export default function NavLink({
slug,
children,
}: {
slug: string
children: React.ReactNode
}) {
const segment = useSelectedLayoutSegment()
const isActive = slug === segment
return (
<Link
href={`/blog/${slug}`}
// Change style depending on whether the link is active
style={{ fontWeight: isActive ? 'bold' : 'normal' }}
{children}
</Link>
--- END CODE BLOCK ---
that uses
--- CODE BLOCK 70 ---
'use client'
import Link from 'next/link'
import { useSelectedLayoutSegment } from 'next/navigation'
export default function NavLink({
slug,
children,
}: {
slug: string
children: React.ReactNode
}) {
const segment = useSelectedLayoutSegment()
const isActive = slug === segment
return (
<Link
href={`/blog/${slug}`}
// Change style depending on whether the link is active
style={{ fontWeight: isActive ? 'bold' : 'normal' }}
{children}
</Link>
--- END CODE BLOCK ---
will cause a full page load. This
only
applies to multiple root layouts.
Caveats
Request Object
Layouts are cached in the client during navigation to avoid unnecessary server requests.
Layouts
do not rerender. They can be cached and reused to avoid unnecessary computation when navigating between pages. By restricting layouts from accessing the raw request, Next.js can prevent the execution of potentially slow or expensive user code within the layout, which could negatively impact performance.
To access the request object, you can use
--- CODE BLOCK 71 ---
import { NavLink } from './nav-link'
import getPosts from './get-posts'
export default async function Layout({
children,
}: {
children: React.ReactNode
}) {
const featuredPosts = await getPosts()
return (
<div>
{featuredPosts.map((post) => (
<div key={post.id}>
<NavLink slug={post.slug}>{post.title}</NavLink>
</div>
<div>{children}</div>
</div>
--- END CODE BLOCK ---
--- CODE BLOCK 72 ---
import { NavLink } from './nav-link'
import getPosts from './get-posts'
export default async function Layout({
children,
}: {
children: React.ReactNode
}) {
const featuredPosts = await getPosts()
return (
<div>
{featuredPosts.map((post) => (
<div key={post.id}>
<NavLink slug={post.slug}>{post.title}</NavLink>
</div>
<div>{children}</div>
</div>
--- END CODE BLOCK ---
APIs in
Server Components
and Functions.
app/shop/layout.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 77 ---
generateMetadata
--- END CODE BLOCK ---
Query params
Layouts do not rerender on navigation, so they cannot access search params which would otherwise become stale.
To access updated query parameters, you can use the Page
--- CODE BLOCK 79 ---
import type { Metadata } from 'next'
export const metadata: Metadata = {
title: 'Next.js',
export default function Layout({ children }: { children: React.ReactNode }) {
return '...'
--- END CODE BLOCK ---
prop, or read them inside a Client Component using the
--- CODE BLOCK 84 ---
usePathname
--- END CODE BLOCK ---
hook. Since Client Components re-render on navigation, they have access to the latest query parameters.
app/ui/search.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 85 ---
usePathname
--- END CODE BLOCK ---
app/shop/layout.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 87 ---
'use client'
import { usePathname } from 'next/navigation'
import Link from 'next/link'
export function NavLinks() {
const pathname = usePathname()
return (
<nav>
<Link className={`link ${pathname === '/' ? 'active' : ''}`} href="/">
Home
</Link>
<Link
className={`link ${pathname === '/about' ? 'active' : ''}`}
href="/about"
About
</Link>
</nav>
--- END CODE BLOCK ---
Pathname
Layouts do not re-render on navigation, so they do not access pathname which would otherwise become stale.
To access the current pathname, you can read it inside a Client Component using the
--- CODE BLOCK 89 ---
import { NavLinks } from '@/app/ui/nav-links'
export default function Layout({ children }: { children: React.ReactNode }) {
return (
<html lang="en">
<body>
<NavLinks />
<main>{children}</main>
</body>
</html>
--- END CODE BLOCK ---
hook. Since Client Components re-render during navigation, they have access to the latest pathname.
app/ui/breadcrumbs.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 92 ---
export default async function DashboardLayout({
children,
params,
}: {
children: React.ReactNode
params: Promise<{ team: string }>
}) {
const { team } = await params
return (
<section>
<header>
<h1>Welcome to {team}'s Dashboard</h1>
</header>
<main>{children}</main>
</section>
--- END CODE BLOCK ---
app/docs/layout.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 98 ---
'use client'
import { use } from 'react'
export default function Page({
params,
}: {
params: Promise<{ slug: string }>
}) {
const { slug } = use(params)
--- END CODE BLOCK ---
Fetching Data
Layouts cannot pass data to their
[CODE_BLOCK_58]
. However, you can fetch the same data in a route more than once, and use React
[CODE_BLOCK_59]
to dedupe the requests without affecting performance.
Alternatively, when using
[CODE_BLOCK_60]
in Next.js, requests are automatically deduped.
app/lib/data.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_61]
app/dashboard/layout.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_63]
app/dashboard/page.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_65]
Accessing child segments
Layouts do not have access to the route segments below itself. To access all route segments, you can use
[CODE_BLOCK_67]
[CODE_BLOCK_68]
in a Client Component.
app/ui/nav-link.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_69]
app/blog/layout.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_71]
Examples
Metadata
You can modify the
[CODE_BLOCK_73]
HTML elements such as
[CODE_BLOCK_74]
[CODE_BLOCK_75]
using the
[CODE_BLOCK_76]
object
[CODE_BLOCK_77]
function
app/layout.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_78]
Good to know
: You should
manually add
[CODE_BLOCK_80]
tags such as
[CODE_BLOCK_81]
[CODE_BLOCK_82]
to root layouts. Instead, use the
Metadata APIs
which automatically handles advanced requirements such as streaming and de-duplicating
[CODE_BLOCK_83]
elements.
Active Nav Links
You can use the
[CODE_BLOCK_84]
hook to determine if a nav link is active.
Since
[CODE_BLOCK_85]
is a client hook, you need to extract the nav links into a Client Component, which can be imported into your layout:
app/ui/nav-links.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_86]
app/layout.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_88]
Displaying content based on
[CODE_BLOCK_90]
Using
dynamic route segments
, you can display or fetch specific content based on the
[CODE_BLOCK_91]
prop.
app/dashboard/layout.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_92]
Reading
[CODE_BLOCK_94]
in Client Components
To use
[CODE_BLOCK_95]
in a Client Component (which cannot be
[CODE_BLOCK_96]
), you can use React's
[CODE_BLOCK_97]
function to read the promise:
app/page.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_98]
Version History
Version
Changes
[CODE_BLOCK_100]
[CODE_BLOCK_101]
is now a promise. A
codemod
is available.
[CODE_BLOCK_102]
[CODE_BLOCK_103]
introduced.
Was this helpful?
supported.
Send