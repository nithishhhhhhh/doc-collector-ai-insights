SOURCE URL: https://nextjs.org/docs/architecture/nextjs-compiler
SCRAPED: 2025-06-19 17:18:36
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
Next.js Docs
Architecture
Next.js Compiler
Next.js Compiler
The Next.js Compiler, written in Rust using
, allows Next.js to transform and minify your JavaScript code for production. This replaces Babel for individual files and Terser for minifying output bundles.
Compilation using the Next.js Compiler is 17x faster than Babel and enabled by default since Next.js version 12. If you have an existing Babel configuration or are using
unsupported features
, your application will opt-out of the Next.js Compiler and continue using Babel.
Why SWC?
is an extensible Rust-based platform for the next generation of fast developer tools.
SWC can be used for compilation, minification, bundling, and more â€“ and is designed to be extended. It's something you can call to perform code transformations (either built-in or custom). Running those transformations happens through higher-level tools like Next.js.
We chose to build on SWC for a few reasons:
Extensibility:
SWC can be used as a Crate inside Next.js, without having to fork the library or workaround design constraints.
Performance:
We were able to achieve ~3x faster Fast Refresh and ~5x faster builds in Next.js by switching to SWC, with more room for optimization still in progress.
WebAssembly:
Rust's support for WASM is essential for supporting all possible platforms and taking Next.js development everywhere.
Community:
The Rust community and ecosystem are amazing and still growing.
Supported Features
Styled Components
We're working to port
--- CODE BLOCK 1 ---
babel-plugin-styled-components
--- END CODE BLOCK ---
to the Next.js Compiler.
First, update to the latest version of Next.js:
--- CODE BLOCK 2 ---
npm install next@latest
--- END CODE BLOCK ---
. Then, update your
--- CODE BLOCK 3 ---
next.config.js
--- END CODE BLOCK ---
file:
next.config.js
--- CODE BLOCK 4 ---
module.exports = {
compiler: {
styledComponents: true,
--- END CODE BLOCK ---
For advanced use cases, you can configure individual properties for styled-components compilation.
Note:
--- CODE BLOCK 7 ---
displayName
--- END CODE BLOCK ---
--- CODE BLOCK 8 ---
styled-components
--- END CODE BLOCK ---
transforms are the main requirement for using
--- CODE BLOCK 9 ---
module.exports = {
compiler: {
// see https://styled-components.com/docs/tooling#babel-plugin for more info on the options.
styledComponents: {
// Enabled by default in development, disabled in production to reduce file size,
// setting this will override the default for all environments.
displayName?: boolean,
// Enabled by default.
ssr?: boolean,
// Enabled by default.
fileName?: boolean,
// Empty by default.
topLevelImportPaths?: string[],
// Defaults to ["index"].
meaninglessFileNames?: string[],
// Enabled by default.
minify?: boolean,
// Enabled by default.
transpileTemplateLiterals?: boolean,
// Empty by default.
namespace?: string,
// Disabled by default.
pure?: boolean,
// Enabled by default.
cssProp?: boolean,
--- END CODE BLOCK ---
in Next.js.
next.config.js
--- CODE BLOCK 10 ---
module.exports = {
compiler: {
// see https://styled-components.com/docs/tooling#babel-plugin for more info on the options.
styledComponents: {
// Enabled by default in development, disabled in production to reduce file size,
// setting this will override the default for all environments.
displayName?: boolean,
// Enabled by default.
ssr?: boolean,
// Enabled by default.
fileName?: boolean,
// Empty by default.
topLevelImportPaths?: string[],
// Defaults to ["index"].
meaninglessFileNames?: string[],
// Enabled by default.
minify?: boolean,
// Enabled by default.
transpileTemplateLiterals?: boolean,
// Empty by default.
namespace?: string,
// Disabled by default.
pure?: boolean,
// Enabled by default.
cssProp?: boolean,
--- END CODE BLOCK ---
Jest
The Next.js Compiler transpiles your tests and simplifies configuring Jest together with Next.js including:
Auto mocking of
--- CODE BLOCK 16 ---
process.env
--- END CODE BLOCK ---
--- CODE BLOCK 17 ---
node_modules
--- END CODE BLOCK ---
(and their
--- CODE BLOCK 19 ---
next.config.js
--- END CODE BLOCK ---
variants), and image imports
Automatically sets up
--- CODE BLOCK 20 ---
npm install next@latest
--- END CODE BLOCK ---
using SWC
Loading
--- CODE BLOCK 21 ---
jest.config.js
--- END CODE BLOCK ---
(and all variants) into
--- CODE BLOCK 22 ---
const nextJest = require('next/jest')
// Providing the path to your Next.js app which will enable loading next.config.js and .env files
const createJestConfig = nextJest({ dir: './' })
// Any custom config you want to pass to Jest
const customJestConfig = {
setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
// createJestConfig is exported in this way to ensure that next/jest can load the Next.js configuration, which is async
module.exports = createJestConfig(customJestConfig)
--- END CODE BLOCK ---
Ignores
--- CODE BLOCK 23 ---
const nextJest = require('next/jest')
// Providing the path to your Next.js app which will enable loading next.config.js and .env files
const createJestConfig = nextJest({ dir: './' })
// Any custom config you want to pass to Jest
const customJestConfig = {
setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
// createJestConfig is exported in this way to ensure that next/jest can load the Next.js configuration, which is async
module.exports = createJestConfig(customJestConfig)
--- END CODE BLOCK ---
from test resolving and transforms
Ignoring
--- CODE BLOCK 24 ---
module.exports = {
compiler: {
relay: {
// This should match relay.config.js
src: './',
artifactDirectory: './__generated__',
language: 'typescript',
eagerEsModules: false,
--- END CODE BLOCK ---
from test resolving
Loads
--- CODE BLOCK 25 ---
module.exports = {
compiler: {
relay: {
// This should match relay.config.js
src: './',
artifactDirectory: './__generated__',
language: 'typescript',
eagerEsModules: false,
--- END CODE BLOCK ---
for flags that enable experimental SWC transforms
First, update to the latest version of Next.js:
--- CODE BLOCK 27 ---
relay-compiler
--- END CODE BLOCK ---
. Then, update your
--- CODE BLOCK 28 ---
artifactDirectory
--- END CODE BLOCK ---
file:
jest.config.js
--- CODE BLOCK 30 ---
relay-compiler
--- END CODE BLOCK ---
Relay
To enable
Relay
support:
next.config.js
--- CODE BLOCK 32 ---
babel-plugin-react-remove-properties
--- END CODE BLOCK ---
Good to know
: In Next.js, all JavaScript files in
--- CODE BLOCK 35 ---
module.exports = {
compiler: {
reactRemoveProperties: true,
--- END CODE BLOCK ---
directory are considered routes. So, for
--- CODE BLOCK 36 ---
module.exports = {
compiler: {
// The regexes defined here are processed in Rust so the syntax is different from
// JavaScript `RegExp`s. See https://docs.rs/regex.
reactRemoveProperties: { properties: ['^data-custom$'] },
--- END CODE BLOCK ---
you'll need to specify
--- CODE BLOCK 37 ---
module.exports = {
compiler: {
// The regexes defined here are processed in Rust so the syntax is different from
// JavaScript `RegExp`s. See https://docs.rs/regex.
reactRemoveProperties: { properties: ['^data-custom$'] },
--- END CODE BLOCK ---
configuration settings outside of the
--- CODE BLOCK 39 ---
node_modules
--- END CODE BLOCK ---
, otherwise
--- CODE BLOCK 40 ---
babel-plugin-transform-remove-console
--- END CODE BLOCK ---
will generate files next to the source file in the
--- CODE BLOCK 42 ---
module.exports = {
compiler: {
removeConsole: true,
--- END CODE BLOCK ---
directory, and this file will be considered a route, which will break production builds.
Remove React Properties
Allows to remove JSX properties. This is often used for testing. Similar to
--- CODE BLOCK 43 ---
module.exports = {
compiler: {
removeConsole: true,
--- END CODE BLOCK ---
To remove properties matching the default regex
--- CODE BLOCK 45 ---
console.error
--- END CODE BLOCK ---
next.config.js
--- CODE BLOCK 46 ---
module.exports = {
compiler: {
removeConsole: {
exclude: ['error'],
--- END CODE BLOCK ---
To remove custom properties:
next.config.js
--- CODE BLOCK 48 ---
experimentalDecorators
--- END CODE BLOCK ---
Remove Console
This transform allows for removing all
--- CODE BLOCK 50 ---
tsconfig.json
--- END CODE BLOCK ---
calls in application code (not
--- CODE BLOCK 52 ---
npm install next@latest
--- END CODE BLOCK ---
). Similar to
--- CODE BLOCK 53 ---
jsconfig.json
--- END CODE BLOCK ---
Remove all
--- CODE BLOCK 54 ---
tsconfig.json
--- END CODE BLOCK ---
calls:
next.config.js
--- CODE BLOCK 55 ---
"compilerOptions": {
"experimentalDecorators": true
--- END CODE BLOCK ---
Remove
--- CODE BLOCK 57 ---
jsxImportSource
--- END CODE BLOCK ---
output except
--- CODE BLOCK 58 ---
jsconfig.json
--- END CODE BLOCK ---
next.config.js
--- CODE BLOCK 59 ---
tsconfig.json
--- END CODE BLOCK ---
Legacy Decorators
Next.js will automatically detect
--- CODE BLOCK 61 ---
jsconfig.json
--- END CODE BLOCK ---
--- CODE BLOCK 62 ---
tsconfig.json
--- END CODE BLOCK ---
--- CODE BLOCK 63 ---
"compilerOptions": {
"jsxImportSource": "theme-ui"
--- END CODE BLOCK ---
. Legacy decorators are commonly used with older versions of libraries like
--- CODE BLOCK 64 ---
"compilerOptions": {
"jsxImportSource": "theme-ui"
--- END CODE BLOCK ---
This flag is only supported for compatibility with existing applications. We do not recommend using legacy decorators in new applications.
First, update to the latest version of Next.js:
--- CODE BLOCK 65 ---
@emotion/babel-plugin
--- END CODE BLOCK ---
. Then, update your
--- CODE BLOCK 66 ---
npm install next@latest
--- END CODE BLOCK ---
--- CODE BLOCK 67 ---
next.config.js
--- END CODE BLOCK ---
file:
--- CODE BLOCK 68 ---
module.exports = {
compiler: {
emotion: boolean | {
// default is true. It will be disabled when build type is production.
sourceMap?: boolean,
// default is 'dev-only'.
autoLabel?: 'never' | 'dev-only' | 'always',
// default is '[local]'.
// Allowed values: `[local]` `[filename]` and `[dirname]`
// This option only works when autoLabel is set to 'dev-only' or 'always'.
// It allows you to define the format of the resulting label.
// The format is defined via string where variable parts are enclosed in square brackets [].
// For example labelFormat: "my-classname--[local]", where [local] will be replaced with the name of the variable the result is assigned to.
labelFormat?: string,
// default is undefined.
// This option allows you to tell the compiler what imports it should
// look at to determine what it should transform so if you re-export
// Emotion's exports, you can still use transforms.
importMap?: {
[packageName: string]: {
[exportName: string]: {
canonicalImport?: [string, string],
styledBaseImport?: [string, string],
--- END CODE BLOCK ---
importSource
Next.js will automatically detect
--- CODE BLOCK 70 ---
next.config.js
--- END CODE BLOCK ---
--- CODE BLOCK 72 ---
node_modules
--- END CODE BLOCK ---
--- CODE BLOCK 73 ---
next-transpile-modules
--- END CODE BLOCK ---
and apply that. This is commonly used with libraries like
Theme UI
First, update to the latest version of Next.js:
--- CODE BLOCK 74 ---
module.exports = {
transpilePackages: ['@acme/ui', 'lodash-es'],
--- END CODE BLOCK ---
. Then, update your
--- CODE BLOCK 75 ---
module.exports = {
transpilePackages: ['@acme/ui', 'lodash-es'],
--- END CODE BLOCK ---
--- CODE BLOCK 76 ---
optimizePackageImports
--- END CODE BLOCK ---
file:
--- CODE BLOCK 78 ---
compiler.define
--- END CODE BLOCK ---
Emotion
We're working to port
--- CODE BLOCK 80 ---
compiler.defineServer
--- END CODE BLOCK ---
to the Next.js Compiler.
First, update to the latest version of Next.js:
--- CODE BLOCK 81 ---
module.exports = {
compiler: {
define: {
MY_VARIABLE: 'my-string',
'process.env.MY_ENV_VAR': 'my-env-var',
defineServer: {
MY_SERVER_VARIABLE: 'my-server-var',
--- END CODE BLOCK ---
. Then, update your
--- CODE BLOCK 82 ---
module.exports = {
compiler: {
define: {
MY_VARIABLE: 'my-string',
'process.env.MY_ENV_VAR': 'my-env-var',
defineServer: {
MY_SERVER_VARIABLE: 'my-server-var',
--- END CODE BLOCK ---
file:
next.config.js
--- CODE BLOCK 83 ---
module.exports = {
compiler: {
runAfterProductionCompile: async ({ distDir, projectDir }) => {
// Your custom code here
--- END CODE BLOCK ---
Minification
Next.js' swc compiler is used for minification by default since v13. This is 7x faster than Terser.
Good to know:
Starting with v15, minification cannot be customized using
--- CODE BLOCK 88 ---
module.exports = {
experimental: {
swcTraceProfiling: true,
--- END CODE BLOCK ---
. Support for the
--- CODE BLOCK 89 ---
module.exports = {
experimental: {
swcTraceProfiling: true,
--- END CODE BLOCK ---
flag has been removed.
Module Transpilation
Next.js can automatically transpile and bundle dependencies from local packages (like monorepos) or from external dependencies (
--- CODE BLOCK 90 ---
swc-trace-profile-${timestamp}.json
--- END CODE BLOCK ---
). This replaces the
--- CODE BLOCK 92 ---
module.exports = {
experimental: {
swcPlugins: [
'plugin',
...pluginOptions,
--- END CODE BLOCK ---
package.
next.config.js
--- CODE BLOCK 93 ---
module.exports = {
experimental: {
swcPlugins: [
'plugin',
...pluginOptions,
--- END CODE BLOCK ---
Modularize Imports
This option has been superseded by
[CODE_BLOCK_76]
in Next.js 13.5. We recommend upgrading to use the new option that does not require manual configuration of import paths.
Define (Replacing variables during build)
[CODE_BLOCK_77]
option allows you to statically replace variables in your code at build-time.
The option takes an object as key-value pairs, where the keys are the variables that should be replaced with the corresponding values.
Use the
[CODE_BLOCK_78]
field in
[CODE_BLOCK_79]
to define variables for all environments (server, edge, and client). Or, use
[CODE_BLOCK_80]
to define variables only for server-side (server and edge) code:
next.config.js
[CODE_BLOCK_81]
Build Lifecycle Hooks
The Next.js Compiler supports lifecycle hooks that allow you to run custom code at specific points during the build process. Currently, the following hook is supported:
runAfterProductionCompile
A hook function that executes after production build compilation finishes, but before running post-compilation tasks such as type checking and static page generation. This hook provides access to project metadata including the project directory and build output directory, making it useful for third-party tools to collect build outputs like sourcemaps.
next.config.js
[CODE_BLOCK_83]
The hook receives an object with the following properties:
[CODE_BLOCK_85]
: The build output directory (defaults to
[CODE_BLOCK_86]
[CODE_BLOCK_87]
: The root directory of the project
Experimental Features
SWC Trace profiling
You can generate SWC's internal transform traces as chromium's
trace event format
next.config.js
[CODE_BLOCK_88]
Once enabled, swc will generate trace named as
[CODE_BLOCK_90]
under
[CODE_BLOCK_91]
. Chromium's trace viewer (chrome://tracing/,
https://ui.perfetto.dev/
), or compatible flamegraph viewer (
https://www.speedscope.app/
) can load & visualize generated traces.
SWC Plugins (experimental)
You can configure swc's transform to use SWC's experimental plugin support written in wasm to customize transformation behavior.
next.config.js
[CODE_BLOCK_92]
[CODE_BLOCK_94]
accepts an array of tuples for configuring plugins. A tuple for the plugin contains the path to the plugin and an object for plugin configuration. The path to the plugin can be an npm module package name or an absolute path to the
[CODE_BLOCK_95]
binary itself.
Unsupported Features
When your application has a
[CODE_BLOCK_96]
file, Next.js will automatically fall back to using Babel for transforming individual files. This ensures backwards compatibility with existing applications that leverage custom Babel plugins.
If you're using a custom Babel setup,
please share your configuration
. We're working to port as many commonly used Babel transformations as possible, as well as supporting plugins in the future.
Version History
Version
Changes
[CODE_BLOCK_97]
Module Transpilation
Modularize Imports
stable.
[CODE_BLOCK_98]
SWC Minifier enabled by default.
[CODE_BLOCK_99]
SWC Minifier
stable
[CODE_BLOCK_100]
SWC Plugins
experimental support added.
[CODE_BLOCK_101]
Added support for Styled Components, Jest, Relay, Remove React Properties, Legacy Decorators, Remove Console, and jsxImportSource.
[CODE_BLOCK_102]
Next.js Compiler
introduced
Was this helpful?
supported.
Send