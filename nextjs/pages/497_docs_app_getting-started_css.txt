SOURCE URL: https://nextjs.org/docs/app/getting-started/css#css-modules
SCRAPED: 2025-06-19 18:06:58
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
App Router
Getting Started
Next.js provides several ways to style your application using CSS, including:
CSS Modules
Global CSS
External Stylesheets
Tailwind CSS
Sass
CSS-in-JS
CSS Modules
CSS Modules locally scope CSS by generating unique class names. This allows you to use the same class in different files without worrying about naming collisions.
To start using CSS Modules, create a new file with the extension
--- CODE BLOCK 1 ---
.module.css
--- END CODE BLOCK ---
and import it into any component inside the
--- CODE BLOCK 3 ---
.blog {
padding: 24px;
--- END CODE BLOCK ---
directory:
app/blog/blog.module.css
--- CODE BLOCK 4 ---
.blog {
padding: 24px;
--- END CODE BLOCK ---
app/blog/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 6 ---
import styles from './blog.module.css'
export default function Page() {
return <main className={styles.blog}></main>
--- END CODE BLOCK ---
Global CSS
You can use global CSS to apply styles across your application.
Create a
--- CODE BLOCK 8 ---
body {
padding: 20px 20px 60px;
max-width: 680px;
margin: 0 auto;
--- END CODE BLOCK ---
file and import it in the root layout to apply the styles to
every route
in your application:
app/global.css
--- CODE BLOCK 9 ---
body {
padding: 20px 20px 60px;
max-width: 680px;
margin: 0 auto;
--- END CODE BLOCK ---
app/layout.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 11 ---
// These styles apply to every route in the application
import './global.css'
export default function RootLayout({
children,
}: {
children: React.ReactNode
}) {
return (
<html lang="en">
<body>{children}</body>
</html>
--- END CODE BLOCK ---
Good to know:
Global styles can be imported into any layout, page, or component inside the
--- CODE BLOCK 15 ---
import 'bootstrap/dist/css/bootstrap.css'
export default function RootLayout({
children,
}: {
children: React.ReactNode
}) {
return (
<html lang="en">
<body className="container">{children}</body>
</html>
--- END CODE BLOCK ---
directory. However, since Next.js uses React's built-in support for stylesheets to integrate with Suspense, this currently does not remove stylesheets as you navigate between routes which can lead to conflicts. We recommend using global styles for
truly
global CSS, and
CSS Modules
for scoped CSS.
External stylesheets
Stylesheets published by external packages can be imported anywhere in the
--- CODE BLOCK 16 ---
<link rel="stylesheet" href="..." />
--- END CODE BLOCK ---
directory, including colocated components:
app/layout.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 18 ---
base-button.module.css
--- END CODE BLOCK ---
Good to know:
In React 19,
--- CODE BLOCK 20 ---
<BaseButton>
--- END CODE BLOCK ---
can also be used. See the
React
--- CODE BLOCK 21 ---
page.module.css
--- END CODE BLOCK ---
documentation
for more information.
Ordering and Merging
Next.js optimizes CSS during production builds by automatically chunking (merging) stylesheets. The
order of your CSS
depends on the
order you import styles in your code
For example,
--- CODE BLOCK 22 ---
import { BaseButton } from './base-button'
import styles from './page.module.css'
export default function Page() {
return <BaseButton className={styles.primary} />
--- END CODE BLOCK ---
will be ordered before
--- CODE BLOCK 23 ---
import { BaseButton } from './base-button'
import styles from './page.module.css'
export default function Page() {
return <BaseButton className={styles.primary} />
--- END CODE BLOCK ---
since
--- CODE BLOCK 24 ---
import styles from './base-button.module.css'
export function BaseButton() {
return <button className={styles.primary} />
--- END CODE BLOCK ---
is imported before
--- CODE BLOCK 25 ---
import styles from './base-button.module.css'
export function BaseButton() {
return <button className={styles.primary} />
--- END CODE BLOCK ---
page.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 26 ---
<name>.module.css
--- END CODE BLOCK ---
base-button.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 29 ---
cssChunking
--- END CODE BLOCK ---
Recommendations
To keep CSS ordering predictable:
Try to contain CSS imports to a single JavaScript or TypeScript entry file
Import global styles and Tailwind stylesheets in the root of your application.
Use CSS Modules instead of global styles for nested components.
Use a consistent naming convention for your CSS modules. For example, using
[CODE_BLOCK_26]
over
[CODE_BLOCK_27]
Extract shared styles into shared components to avoid duplicate imports.
Turn off linters or formatters that auto-sort imports like ESLintâ€™s
[CODE_BLOCK_28]
You can use the
[CODE_BLOCK_29]
option in
[CODE_BLOCK_30]
to control how CSS is chunked.
Development vs Production
In development (
[CODE_BLOCK_31]
), CSS updates apply instantly with
Fast Refresh
In production (
[CODE_BLOCK_32]
), all CSS files are automatically concatenated into
many minified and code-split
[CODE_BLOCK_33]
files, ensuring the minimal amount of CSS is loaded for a route.
CSS still loads with JavaScript disabled in production, but JavaScript is required in development for Fast Refresh.
CSS ordering can behave differently in development, always ensure to check the build (
[CODE_BLOCK_34]
) to verify the final CSS order.
Next Steps
Learn more about the alternatives ways you can use CSS in your application.
Tailwind CSS
Style your Next.js Application using Tailwind CSS.
Sass
Style your Next.js application using Sass.
CSS-in-JS
Use CSS-in-JS libraries with Next.js
Was this helpful?
supported.
Send