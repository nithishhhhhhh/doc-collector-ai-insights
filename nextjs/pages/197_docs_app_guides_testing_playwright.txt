SOURCE URL: https://nextjs.org/docs/app/guides/testing/playwright
SCRAPED: 2025-06-19 17:32:24
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
Guides
Testing
Playwright
How to set up Playwright with Next.js
Playwright is a testing framework that lets you automate Chromium, Firefox, and WebKit with a single API. You can use it to write
End-to-End (E2E)
testing. This guide will show you how to set up Playwright with Next.js and write your first tests.
Quickstart
The fastest way to get started is to use
--- CODE BLOCK 1 ---
create-next-app
--- END CODE BLOCK ---
with the
with-playwright example
. This will create a Next.js project complete with Playwright configured.
Terminal
--- CODE BLOCK 2 ---
npx create-next-app@latest --example with-playwright with-playwright-app
--- END CODE BLOCK ---
Manual setup
To install Playwright, run the following command:
Terminal
--- CODE BLOCK 4 ---
npm init playwright
# or
yarn create playwright
# or
pnpm create playwright
--- END CODE BLOCK ---
This will take you through a series of prompts to setup and configure Playwright for your project, including adding a
--- CODE BLOCK 6 ---
playwright.config.ts
--- END CODE BLOCK ---
file. Please refer to the
Playwright installation guide
for the step-by-step guide.
Creating your first Playwright E2E test
Create two new Next.js pages:
app/page.tsx
--- CODE BLOCK 7 ---
import Link from 'next/link'
export default function Page() {
return (
<div>
<h1>Home</h1>
<Link href="/about">About</Link>
</div>
--- END CODE BLOCK ---
app/about/page.tsx
--- CODE BLOCK 9 ---
import Link from 'next/link'
export default function Page() {
return (
<div>
<h1>About</h1>
<Link href="/">Home</Link>
</div>
--- END CODE BLOCK ---
Then, add a test to verify that your navigation is working correctly:
tests/example.spec.ts
--- CODE BLOCK 11 ---
import { test, expect } from '@playwright/test'
test('should navigate to the about page', async ({ page }) => {
// Start from the index page (the baseURL is set via the webServer in the playwright.config.ts)
await page.goto('http://localhost:3000/')
// Find an element with the text 'About' and click on it
await page.click('text=About')
// The new URL should be "/about" (baseURL is used there)
await expect(page).toHaveURL('http://localhost:3000/about')
// The new page should contain an h1 with "About"
await expect(page.locator('h1')).toContainText('About')
--- END CODE BLOCK ---
Good to know
: You can use
--- CODE BLOCK 13 ---
page.goto("/")
--- END CODE BLOCK ---
instead of
--- CODE BLOCK 14 ---
page.goto("http://localhost:3000/")
--- END CODE BLOCK ---
, if you add
--- CODE BLOCK 15 ---
"baseURL": "http://localhost:3000"
--- END CODE BLOCK ---
to the
--- CODE BLOCK 16 ---
playwright.config.ts
--- END CODE BLOCK ---
configuration file
Running your Playwright tests
Playwright will simulate a user navigating your application using three browsers: Chromium, Firefox and Webkit, this requires your Next.js server to be running. We recommend running your tests against your production code to more closely resemble how your application will behave.
--- CODE BLOCK 17 ---
npm run build
--- END CODE BLOCK ---
--- CODE BLOCK 18 ---
npm run start
--- END CODE BLOCK ---
, then run
--- CODE BLOCK 19 ---
npx playwright test
--- END CODE BLOCK ---
in another terminal window to run the Playwright tests.
Good to know
: Alternatively, you can use the
--- CODE BLOCK 21 ---
npx playwright install-deps
--- END CODE BLOCK ---
feature to let Playwright start the development server and wait until it's fully available.
Running Playwright on Continuous Integration (CI)
Playwright will by default run your tests in the
headless mode
. To install all the Playwright dependencies, run
[CODE_BLOCK_21]
You can learn more about Playwright and Continuous Integration from these resources:
Next.js with Playwright example
Playwright on your CI provider
Playwright Discord
Was this helpful?
supported.
Send