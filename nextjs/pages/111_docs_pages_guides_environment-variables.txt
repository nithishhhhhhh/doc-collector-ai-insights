SOURCE URL: https://nextjs.org/docs/pages/guides/environment-variables
SCRAPED: 2025-06-19 17:22:09
================================================================================

Menu
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Pages Router
Guides
Environment Variables
You are currently viewing the documentation for Pages Router.
How to use environment variables in Next.js
Next.js comes with built-in support for environment variables, which allows you to do the following:
--- CODE BLOCK 2 ---
NEXT_PUBLIC_
--- END CODE BLOCK ---
to load environment variables
Bundle environment variables for the browser by prefixing with
--- CODE BLOCK 3 ---
create-next-app
--- END CODE BLOCK ---
Warning:
The default
--- CODE BLOCK 7 ---
process.env
--- END CODE BLOCK ---
template ensures all
--- CODE BLOCK 8 ---
DB_HOST=localhost
DB_USER=myuser
DB_PASS=mypassword
--- END CODE BLOCK ---
files are added to your
--- CODE BLOCK 9 ---
DB_HOST=localhost
DB_USER=myuser
DB_PASS=mypassword
--- END CODE BLOCK ---
. You almost never want to commit these files to your repository.
Loading Environment Variables
Next.js has built-in support for loading environment variables from
--- CODE BLOCK 10 ---
process.env.DB_HOST
--- END CODE BLOCK ---
files into
--- CODE BLOCK 11 ---
process.env.DB_USER
--- END CODE BLOCK ---
.env
--- CODE BLOCK 12 ---
process.env.DB_PASS
--- END CODE BLOCK ---
This loads
--- CODE BLOCK 14 ---
export async function getStaticProps() {
const db = await myDB.connect({
host: process.env.DB_HOST,
username: process.env.DB_USER,
password: process.env.DB_PASS,
// ...
--- END CODE BLOCK ---
--- CODE BLOCK 15 ---
export async function getStaticProps() {
const db = await myDB.connect({
host: process.env.DB_HOST,
username: process.env.DB_USER,
password: process.env.DB_PASS,
// ...
--- END CODE BLOCK ---
, and
--- CODE BLOCK 19 ---
loadEnvConfig
--- END CODE BLOCK ---
into the Node.js environment automatically allowing you to use them in
Next.js data fetching methods
API routes
For example, using
--- CODE BLOCK 20 ---
npm install @next/env
--- END CODE BLOCK ---
pages/index.js
--- CODE BLOCK 21 ---
npm install @next/env
--- END CODE BLOCK ---
Loading Environment Variables with
--- CODE BLOCK 23 ---
import { loadEnvConfig } from '@next/env'
const projectDir = process.cwd()
loadEnvConfig(projectDir)
--- END CODE BLOCK ---
If you need to load environment variables outside of the Next.js runtime, such as in a root config file for an ORM or test runner, you can use the
--- CODE BLOCK 24 ---
import './envConfig.ts'
export default defineConfig({
dbCredentials: {
connectionString: process.env.DATABASE_URL!,
--- END CODE BLOCK ---
package.
This package is used internally by Next.js to load environment variables from
--- CODE BLOCK 25 ---
import './envConfig.ts'
export default defineConfig({
dbCredentials: {
connectionString: process.env.DATABASE_URL!,
--- END CODE BLOCK ---
files.
To use it, install the package and use the
--- CODE BLOCK 29 ---
TWITTER_USER=nextjs
TWITTER_URL=https://x.com/$TWITTER_USER
--- END CODE BLOCK ---
function to load the environment variables:
--- CODE BLOCK 30 ---
TWITTER_USER=nextjs
TWITTER_URL=https://x.com/$TWITTER_USER
--- END CODE BLOCK ---
envConfig.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 32 ---
https://x.com/nextjs
--- END CODE BLOCK ---
Then, you can import the configuration where needed. For example:
orm.config.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 36 ---
process.env.[variable]
--- END CODE BLOCK ---
Referencing Other Variables
Next.js will automatically expand variables that use
--- CODE BLOCK 38 ---
NEXT_PUBLIC_ANALYTICS_ID=abcdefghijk
--- END CODE BLOCK ---
to reference other variables e.g.
--- CODE BLOCK 39 ---
NEXT_PUBLIC_ANALYTICS_ID=abcdefghijk
--- END CODE BLOCK ---
inside of your
--- CODE BLOCK 40 ---
process.env.NEXT_PUBLIC_ANALYTICS_ID
--- END CODE BLOCK ---
files. This allows you to reference other secrets. For example:
.env
--- CODE BLOCK 42 ---
NEXT_PUBLIC_
--- END CODE BLOCK ---
In the above example,
--- CODE BLOCK 44 ---
import setupAnalyticsService from '../lib/my-analytics-service'
// 'NEXT_PUBLIC_ANALYTICS_ID' can be used here as it's prefixed by 'NEXT_PUBLIC_'.
// It will be transformed at build time to `setupAnalyticsService('abcdefghijk')`.
setupAnalyticsService(process.env.NEXT_PUBLIC_ANALYTICS_ID)
function HomePage() {
return <h1>Hello World</h1>
export default HomePage
--- END CODE BLOCK ---
would be set to
--- CODE BLOCK 45 ---
// This will NOT be inlined, because it uses a variable
const varName = 'NEXT_PUBLIC_ANALYTICS_ID'
setupAnalyticsService(process.env[varName])
// This will NOT be inlined, because it uses a variable
const env = process.env
setupAnalyticsService(env.NEXT_PUBLIC_ANALYTICS_ID)
--- END CODE BLOCK ---
Good to know
: If you need to use variable with a
--- CODE BLOCK 46 ---
// This will NOT be inlined, because it uses a variable
const varName = 'NEXT_PUBLIC_ANALYTICS_ID'
setupAnalyticsService(process.env[varName])
// This will NOT be inlined, because it uses a variable
const env = process.env
setupAnalyticsService(env.NEXT_PUBLIC_ANALYTICS_ID)
--- END CODE BLOCK ---
in the actual value, it needs to be escaped e.g.
--- CODE BLOCK 47 ---
NEXT_PUBLIC_
--- END CODE BLOCK ---
Bundling Environment Variables for the Browser
Non-
--- CODE BLOCK 49 ---
getServerSideProps
--- END CODE BLOCK ---
environment variables are only available in the Node.js environment, meaning they aren't accessible to the browser (the client runs in a different
environment
In order to make the value of an environment variable accessible in the browser, Next.js can "inline" a value, at build time, into the js bundle that is delivered to the client, replacing all references to
--- CODE BLOCK 51 ---
runtimeConfig
--- END CODE BLOCK ---
with a hard-coded value. To tell it to do this, you just have to prefix the variable with
--- CODE BLOCK 52 ---
development
--- END CODE BLOCK ---
. For example:
Terminal
--- CODE BLOCK 57 ---
.env.development
--- END CODE BLOCK ---
This will tell Next.js to replace all references to
--- CODE BLOCK 65 ---
development
--- END CODE BLOCK ---
in the Node.js environment with the value from the environment in which you run
--- CODE BLOCK 70 ---
.env.test.local
--- END CODE BLOCK ---
, allowing you to use it anywhere in your code. It will be inlined into any JavaScript sent to the browser.
Note
: After being built, your app will no longer respond to changes to these environment variables. For instance, if you use a Heroku pipeline to promote slugs built in one environment to another environment, or if you build and deploy a single Docker image to multiple environments, all
--- CODE BLOCK 71 ---
.env*.local
--- END CODE BLOCK ---
variables will be frozen with the value evaluated at build time, so these values need to be set appropriately when the project is built. If you need access to runtime environment values, you'll have to setup your own API to provide them to the client (either on demand or during initialization).
pages/index.js
--- CODE BLOCK 73 ---
loadEnvConfig
--- END CODE BLOCK ---
Note that dynamic lookups will
be inlined, such as:
--- CODE BLOCK 76 ---
// The below can be used in a Jest global setup file or similar for your testing set-up
import { loadEnvConfig } from '@next/env'
export default async () => {
const projectDir = process.cwd()
loadEnvConfig(projectDir)
--- END CODE BLOCK ---
Runtime Environment Variables
Next.js can support both build time and runtime environment variables.
By default, environment variables are only available on the server
. To expose an environment variable to the browser, it must be prefixed with
--- CODE BLOCK 78 ---
.env.$(NODE_ENV).local
--- END CODE BLOCK ---
. However, these public environment variables will be inlined into the JavaScript bundle during
--- CODE BLOCK 82 ---
.env.$(NODE_ENV)
--- END CODE BLOCK ---
To read runtime environment variables, we recommend using
--- CODE BLOCK 85 ---
development
--- END CODE BLOCK ---
incrementally adopting the App Router
This allows you to use a singular Docker image that can be promoted through multiple environments with different values.
Good to know:
You can run code on server startup using the
--- CODE BLOCK 86 ---
.env.development.local
--- END CODE BLOCK ---
function
We do not recommend using the
--- CODE BLOCK 88 ---
.env.development.local
--- END CODE BLOCK ---
option, as this does not work with the standalone output mode. Instead, we recommend
incrementally adopting
the App Router if you need this feature.
Test Environment Variables
Apart from
--- CODE BLOCK 91 ---
development
--- END CODE BLOCK ---
--- CODE BLOCK 96 ---
development
--- END CODE BLOCK ---
environments, there is a 3rd option available:
--- CODE BLOCK 101 ---
NEXT_PUBLIC_
--- END CODE BLOCK ---
. In the same way you can set defaults for development or production environments, you can do the same with a
[CODE_BLOCK_55]
file for the
[CODE_BLOCK_56]
environment (though this one is not as common as the previous two). Next.js will not load environment variables from
[CODE_BLOCK_57]
[CODE_BLOCK_58]
in the
[CODE_BLOCK_59]
environment.
This one is useful when running tests with tools like
[CODE_BLOCK_60]
[CODE_BLOCK_61]
where you need to set specific environment vars only for testing purposes. Test default values will be loaded if
[CODE_BLOCK_62]
is set to
[CODE_BLOCK_63]
, though you usually don't need to do this manually as testing tools will address it for you.
There is a small difference between
[CODE_BLOCK_64]
environment, and both
[CODE_BLOCK_65]
[CODE_BLOCK_66]
that you need to bear in mind:
[CODE_BLOCK_67]
won't be loaded, as you expect tests to produce the same results for everyone. This way every test execution will use the same env defaults across different executions by ignoring your
[CODE_BLOCK_68]
(which is intended to override the default set).
Good to know
: similar to Default Environment Variables,
[CODE_BLOCK_69]
file should be included in your repository, but
[CODE_BLOCK_70]
shouldn't, as
[CODE_BLOCK_71]
are intended to be ignored through
[CODE_BLOCK_72]
While running unit tests you can make sure to load your environment variables the same way Next.js does by leveraging the
[CODE_BLOCK_73]
function from the
[CODE_BLOCK_74]
package.
[CODE_BLOCK_75]
Environment Variable Load Order
Environment variables are looked up in the following places, in order, stopping once the variable is found.
[CODE_BLOCK_77]
[CODE_BLOCK_78]
[CODE_BLOCK_79]
(Not checked when
[CODE_BLOCK_80]
[CODE_BLOCK_81]
[CODE_BLOCK_82]
[CODE_BLOCK_83]
For example, if
[CODE_BLOCK_84]
[CODE_BLOCK_85]
and you define a variable in both
[CODE_BLOCK_86]
[CODE_BLOCK_87]
, the value in
[CODE_BLOCK_88]
will be used.
Good to know
: The allowed values for
[CODE_BLOCK_89]
[CODE_BLOCK_90]
[CODE_BLOCK_91]
[CODE_BLOCK_92]
Good to know
If you are using a
[CODE_BLOCK_93]
directory
[CODE_BLOCK_94]
files should remain in the root of your project.
If the environment variable
[CODE_BLOCK_95]
is unassigned, Next.js automatically assigns
[CODE_BLOCK_96]
when running the
[CODE_BLOCK_97]
command, or
[CODE_BLOCK_98]
for all other commands.
Version History
Version
Changes
[CODE_BLOCK_99]
Support
[CODE_BLOCK_100]
[CODE_BLOCK_101]
introduced.
Was this helpful?
supported.
Send