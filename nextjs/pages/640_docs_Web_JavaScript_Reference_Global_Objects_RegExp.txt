SOURCE URL: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RegExp
SCRAPED: 2025-06-19 18:22:21
================================================================================

--- CODE BLOCK 4 ---
const re = /ab+c/i; // literal notation
// OR
const re = new RegExp("ab+c", "i"); // constructor with string pattern as first argument
// OR
const re = new RegExp(/ab+c/, "i"); // constructor with regular expression literal as first argument
--- END CODE BLOCK ---
object is used for matching text with a pattern.
For an introduction to regular expressions, read the
Regular expressions chapter
in the JavaScript guide. For detailed information of regular expression syntax, read the
regular expression reference
Description
Literal notation and constructor
There are two ways to create a
--- CODE BLOCK 5 ---
const re = /ab+c/i; // literal notation
// OR
const re = new RegExp("ab+c", "i"); // constructor with string pattern as first argument
// OR
const re = new RegExp(/ab+c/, "i"); // constructor with regular expression literal as first argument
--- END CODE BLOCK ---
object: a
literal notation
and a
constructor
literal notation
takes a pattern between two slashes, followed by optional
flags
, after the second slash.
constructor function
takes either a string or a
--- CODE BLOCK 7 ---
new RegExp('ab+c')
--- END CODE BLOCK ---
object as its first parameter and a string of optional
flags
as its second parameter.
The following three expressions create the same regular expression object:
Copy to Clipboard
--- CODE BLOCK 9 ---
new RegExp(/ab+c/, flags)
--- END CODE BLOCK ---
Before regular expressions can be used, they have to be compiled. This process allows them to perform matches more efficiently. More about the process can be found in
dotnet docs
The literal notation results in compilation of the regular expression when the expression is evaluated. On the other hand, the constructor of the
--- CODE BLOCK 13 ---
const re = /\w+/;
// OR
const re = new RegExp("\\w+");
--- END CODE BLOCK ---
object,
--- CODE BLOCK 17 ---
x[Symbol.match]
--- END CODE BLOCK ---
, results in runtime compilation of the regular expression.
Use a string as the first argument to the
--- CODE BLOCK 19 ---
x[Symbol.match]
--- END CODE BLOCK ---
constructor when you want to
build the regular expression from dynamic input
Flags in constructor
The expression
--- CODE BLOCK 25 ---
Symbol.match
--- END CODE BLOCK ---
will create a new
--- CODE BLOCK 26 ---
Symbol.match
--- END CODE BLOCK ---
using the source of the first parameter and the
flags
provided by the second.
When using the constructor function, the normal string escape rules (preceding special characters with
--- CODE BLOCK 28 ---
Symbol.match
--- END CODE BLOCK ---
when included in a string) are necessary.
For example, the following are equivalent:
Copy to Clipboard
--- CODE BLOCK 31 ---
[Symbol.replace]()
--- END CODE BLOCK ---
Special handling for regexes
Note:
Whether something is a "regex" can be
duck-typed
. It doesn't have to be a
--- CODE BLOCK 34 ---
[Symbol.match]()
--- END CODE BLOCK ---
Some built-in methods would treat regexes specially. They decide whether
--- CODE BLOCK 36 ---
String.prototype.endsWith()
--- END CODE BLOCK ---
is a regex through
multiple steps
--- CODE BLOCK 37 ---
startsWith()
--- END CODE BLOCK ---
must be an object (not a primitive).
--- CODE BLOCK 40 ---
String.prototype.matchAll()
--- END CODE BLOCK ---
is not
--- CODE BLOCK 41 ---
replaceAll()
--- END CODE BLOCK ---
, check if it's
truthy
Otherwise, if
--- CODE BLOCK 42 ---
[Symbol.matchAll]()
--- END CODE BLOCK ---
--- CODE BLOCK 43 ---
[Symbol.replace]()
--- END CODE BLOCK ---
, check if
--- CODE BLOCK 52 ---
String.prototype.endsWith()
--- END CODE BLOCK ---
had been created with the
--- CODE BLOCK 53 ---
"foobar".endsWith({ toString: () => "bar" }); // true
"foobar".endsWith(/bar/); // TypeError: First argument to String.prototype.endsWith must not be a regular expression
--- END CODE BLOCK ---
constructor. (This step should rarely happen, since if
--- CODE BLOCK 54 ---
"foobar".endsWith({ toString: () => "bar" }); // true
"foobar".endsWith(/bar/); // TypeError: First argument to String.prototype.endsWith must not be a regular expression
--- END CODE BLOCK ---
is a
--- CODE BLOCK 55 ---
[Symbol.match]
--- END CODE BLOCK ---
object that have not been tampered with, it should have a
--- CODE BLOCK 57 ---
String.prototype.match()
--- END CODE BLOCK ---
property.)
Note that in most cases, it would go through the
--- CODE BLOCK 58 ---
[Symbol.match]
--- END CODE BLOCK ---
check, which means:
An actual
--- CODE BLOCK 61 ---
re.toString()
--- END CODE BLOCK ---
object whose
--- CODE BLOCK 62 ---
const re = /bar/g;
re[Symbol.match] = false;
"/bar/g".endsWith(re); // true
re.exec("bar"); // [ 'bar', index: 0, input: 'bar', groups: undefined ]
"bar & bar".replace(re, "foo"); // 'foo & foo'
--- END CODE BLOCK ---
property's value is
falsy
but not
--- CODE BLOCK 63 ---
const re = /bar/g;
re[Symbol.match] = false;
"/bar/g".endsWith(re); // true
re.exec("bar"); // [ 'bar', index: 0, input: 'bar', groups: undefined ]
"bar & bar".replace(re, "foo"); // 'foo & foo'
--- END CODE BLOCK ---
(even with everything else intact, like
--- CODE BLOCK 70 ---
RegExp.input
--- END CODE BLOCK ---
--- CODE BLOCK 72 ---
RegExp.lastMatch
--- END CODE BLOCK ---
) can be used as if it's not a regex.
A non-
--- CODE BLOCK 74 ---
RegExp.lastParen
--- END CODE BLOCK ---
object with a
--- CODE BLOCK 76 ---
RegExp.leftContext
--- END CODE BLOCK ---
property will be treated as if it's a regex.
This choice was made because
--- CODE BLOCK 78 ---
RegExp.rightContext
--- END CODE BLOCK ---
is the most indicative property that something is intended to be used for matching. (
--- CODE BLOCK 80 ---
RegExp[Symbol.species]
--- END CODE BLOCK ---
could also be used, but because it's not a symbol property, there would be too many false positives.) The places that treat regexes specially include:
--- CODE BLOCK 81 ---
RegExp.escape()
--- END CODE BLOCK ---
--- CODE BLOCK 83 ---
RegExp.prototype
--- END CODE BLOCK ---
, and
--- CODE BLOCK 85 ---
RegExp.prototype.constructor
--- END CODE BLOCK ---
throw a
--- CODE BLOCK 88 ---
RegExp.prototype.dotAll
--- END CODE BLOCK ---
if the first argument is a regex.
--- CODE BLOCK 90 ---
RegExp.prototype.flags
--- END CODE BLOCK ---
--- CODE BLOCK 92 ---
RegExp.prototype.global
--- END CODE BLOCK ---
check whether the
global
flag is set if the first argument is a regex before invoking its
--- CODE BLOCK 93 ---
RegExp.prototype.hasIndices
--- END CODE BLOCK ---
--- CODE BLOCK 94 ---
RegExp.prototype.ignoreCase
--- END CODE BLOCK ---
method.
--- CODE BLOCK 95 ---
RegExp.prototype.multiline
--- END CODE BLOCK ---
constructor directly returns the
--- CODE BLOCK 96 ---
RegExp.prototype.source
--- END CODE BLOCK ---
argument only if
--- CODE BLOCK 97 ---
RegExp.prototype.sticky
--- END CODE BLOCK ---
is a regex (among a few other conditions). If
--- CODE BLOCK 98 ---
RegExp.prototype.unicode
--- END CODE BLOCK ---
is a regex, it would also interrogate
--- CODE BLOCK 99 ---
RegExp.prototype.unicodeSets
--- END CODE BLOCK ---
--- CODE BLOCK 104 ---
RegExp.prototype.compile()
--- END CODE BLOCK ---
--- CODE BLOCK 105 ---
RegExp.prototype.exec()
--- END CODE BLOCK ---
properties instead of coercing
--- CODE BLOCK 106 ---
RegExp.prototype.test()
--- END CODE BLOCK ---
to a string.
For example,
--- CODE BLOCK 107 ---
RegExp.prototype.toString()
--- END CODE BLOCK ---
would coerce all inputs to strings, but it would throw if the argument is a regex, because it's only designed to match strings, and using a regex is likely a developer mistake.
Copy to Clipboard
--- CODE BLOCK 108 ---
Object.prototype.toString()
--- END CODE BLOCK ---
You can get around the check by setting
--- CODE BLOCK 110 ---
RegExp.prototype[Symbol.matchAll]()
--- END CODE BLOCK ---
to a
falsy
value that's not
--- CODE BLOCK 111 ---
RegExp.prototype[Symbol.replace]()
--- END CODE BLOCK ---
. This would mean that the regex cannot be used for
--- CODE BLOCK 112 ---
RegExp.prototype[Symbol.search]()
--- END CODE BLOCK ---
(since without
--- CODE BLOCK 113 ---
RegExp.prototype[Symbol.split]()
--- END CODE BLOCK ---
--- CODE BLOCK 114 ---
String.prototype.replace()
--- END CODE BLOCK ---
would construct a new
--- CODE BLOCK 117 ---
const re = /(\w+)\s(\w+)/;
const str = "Maria Cruz";
const newStr = str.replace(re, "$2, $1");
console.log(newStr);
--- END CODE BLOCK ---
object with the two enclosing slashes added by
--- CODE BLOCK 118 ---
const re = /(\w+)\s(\w+)/;
const str = "Maria Cruz";
const newStr = str.replace(re, "$2, $1");
console.log(newStr);
--- END CODE BLOCK ---
), but it can be used for virtually everything else.
Copy to Clipboard
--- CODE BLOCK 119 ---
"Cruz, Maria"
--- END CODE BLOCK ---
Perl-like RegExp properties
Note that several of the
--- CODE BLOCK 121 ---
const text = "Some text\nAnd some more\r\nAnd yet\nThis is the end";
const lines = text.split(/\r?\n/);
console.log(lines); // [ 'Some text', 'And some more', 'And yet', 'This is the end' ]
--- END CODE BLOCK ---
properties have both long and short (Perl-like) names. Both names always refer to the same value. (Perl is the programming language from which JavaScript modeled its regular expressions.) See also
deprecated
--- CODE BLOCK 125 ---
const s = "Please yes\nmake my day!";
s.match(/yes.*day/);
// Returns null
s.match(/yes.*day/s);
// Returns ["yes\nmake my day"]
--- END CODE BLOCK ---
properties
Constructor
--- CODE BLOCK 126 ---
const s = "Please yes\nmake my day!";
s.match(/yes.*day/);
// Returns null
s.match(/yes.*day/s);
// Returns ["yes\nmake my day"]
--- END CODE BLOCK ---
Creates a new
--- CODE BLOCK 128 ---
RegExp.prototype.lastIndex
--- END CODE BLOCK ---
object.
Static properties
--- CODE BLOCK 129 ---
const str = "#foo#";
const regex = /foo/y;
regex.lastIndex = 1;
regex.test(str); // true
regex.lastIndex = 5;
regex.test(str); // false (lastIndex is taken into account with sticky flag)
regex.lastIndex; // 0 (reset after match failure)
--- END CODE BLOCK ---
, …,
--- CODE BLOCK 130 ---
const str = "#foo#";
const regex = /foo/y;
regex.lastIndex = 1;
regex.test(str); // true
regex.lastIndex = 5;
regex.test(str); // false (lastIndex is taken into account with sticky flag)
regex.lastIndex; // 0 (reset after match failure)
--- END CODE BLOCK ---
Deprecated
Static read-only properties that contain parenthesized substring matches.
--- CODE BLOCK 135 ---
const re = /\d/y;
let r;
while ((r = re.exec("123 456"))) {
console.log(r, "AND re.lastIndex", re.lastIndex);
// [ '1', index: 0, input: '123 456', groups: undefined ] AND re.lastIndex 1
// [ '2', index: 1, input: '123 456', groups: undefined ] AND re.lastIndex 2
// [ '3', index: 2, input: '123 456', groups: undefined ] AND re.lastIndex 3
//  … and no more match.
--- END CODE BLOCK ---
--- CODE BLOCK 136 ---
const re = /\d/y;
let r;
while ((r = re.exec("123 456"))) {
console.log(r, "AND re.lastIndex", re.lastIndex);
// [ '1', index: 0, input: '123 456', groups: undefined ] AND re.lastIndex 1
// [ '2', index: 1, input: '123 456', groups: undefined ] AND re.lastIndex 2
// [ '3', index: 2, input: '123 456', groups: undefined ] AND re.lastIndex 3
//  … and no more match.
--- END CODE BLOCK ---
Deprecated
A static property that contains the last string against which a regular expression was successfully matched.
--- CODE BLOCK 149 ---
const text = "Образец text на русском языке";
const regex = /[\u0400-\u04ff]+/g;
const match = regex.exec(text);
console.log(match[0]); // 'Образец'
console.log(regex.lastIndex); // 7
const match2 = regex.exec(text);
console.log(match2[0]); // 'на' (did not log 'text')
console.log(regex.lastIndex); // 15
// and so on
--- END CODE BLOCK ---
--- CODE BLOCK 150 ---
const text = "Образец text на русском языке";
const regex = /[\u0400-\u04ff]+/g;
const match = regex.exec(text);
console.log(match[0]); // 'Образец'
console.log(regex.lastIndex); // 7
const match2 = regex.exec(text);
console.log(match2[0]); // 'на' (did not log 'text')
console.log(regex.lastIndex); // 15
// and so on
--- END CODE BLOCK ---
Deprecated
A static read-only property that contains the last matched substring.
--- CODE BLOCK 151 ---
\p{scx=Cyrl}
--- END CODE BLOCK ---
--- CODE BLOCK 153 ---
const url = "http://xxx.domain.com";
console.log(/^https?:\/\/(.+?)\./.exec(url)[1]); // 'xxx'
--- END CODE BLOCK ---
Deprecated
A static read-only property that contains the last parenthesized substring match.
--- CODE BLOCK 154 ---
const url = "http://xxx.domain.com";
console.log(/^https?:\/\/(.+?)\./.exec(url)[1]); // 'xxx'
--- END CODE BLOCK ---
--- CODE BLOCK 155 ---
const breakfasts = ["bacon", "eggs", "oatmeal", "toast", "cereal"];
const order = "Let me get some bacon and eggs, please";
order.match(new RegExp(`\\b(${breakfasts.join("|")})\\b`, "g"));
// Returns ['bacon', 'eggs']
--- END CODE BLOCK ---
Deprecated
A static read-only property that contains the substring preceding the most recent match.
--- CODE BLOCK 156 ---
const breakfasts = ["bacon", "eggs", "oatmeal", "toast", "cereal"];
const order = "Let me get some bacon and eggs, please";
order.match(new RegExp(`\\b(${breakfasts.join("|")})\\b`, "g"));
// Returns ['bacon', 'eggs']
--- END CODE BLOCK ---
--- CODE BLOCK 158 ---
// Firefox 33 or older
"x".replace(/x(.)?/g, (m, group) => {
console.log(`group: ${JSON.stringify(group)}`);
// group: ""
// Firefox 34 or newer
"x".replace(/x(.)?/g, (m, group) => {
console.log(`group: ${group}`);
// group: undefined
--- END CODE BLOCK ---
Deprecated
A static read-only property that contains the substring following the most recent match.
--- CODE BLOCK 159 ---
// Firefox 33 or older
"x".replace(/x(.)?/g, (m, group) => {
console.log(`group: ${JSON.stringify(group)}`);
// group: ""
// Firefox 34 or newer
"x".replace(/x(.)?/g, (m, group) => {
console.log(`group: ${group}`);
// group: undefined
--- END CODE BLOCK ---
The constructor function that is used to create derived objects.
Static methods
--- CODE BLOCK 166 ---
String.prototype.match()
--- END CODE BLOCK ---
Escapes
any potential regex syntax characters in a string, and returns a new string that can be safely used as a
literal
pattern for the
--- CODE BLOCK 167 ---
String.prototype.replace()
--- END CODE BLOCK ---
constructor.
Instance properties
These properties are defined on
--- CODE BLOCK 168 ---
String.prototype.split()
--- END CODE BLOCK ---
and shared by all
[CODE_BLOCK_84]
instances.
[CODE_BLOCK_85]
The constructor function that created the instance object. For
[CODE_BLOCK_86]
instances, the initial value is the
[CODE_BLOCK_87]
constructor.
[CODE_BLOCK_88]
Whether
[CODE_BLOCK_89]
matches newlines or not.
[CODE_BLOCK_90]
A string that contains the flags of the
[CODE_BLOCK_91]
object.
[CODE_BLOCK_92]
Whether to test the regular expression against all possible matches in a string, or only against the first.
[CODE_BLOCK_93]
Whether the regular expression result exposes the start and end indices of captured substrings.
[CODE_BLOCK_94]
Whether to ignore case while attempting a match in a string.
[CODE_BLOCK_95]
Whether or not to search in strings across multiple lines.
[CODE_BLOCK_96]
The text of the pattern.
[CODE_BLOCK_97]
Whether or not the search is sticky.
[CODE_BLOCK_98]
Whether or not Unicode features are enabled.
[CODE_BLOCK_99]
Whether or not the
[CODE_BLOCK_100]
flag, an upgrade to the
[CODE_BLOCK_101]
mode, is enabled.
These properties are own properties of each
[CODE_BLOCK_102]
instance.
[CODE_BLOCK_103]
The index at which to start the next match.
Instance methods
[CODE_BLOCK_104]
Deprecated
(Re-)compiles a regular expression during execution of a script.
[CODE_BLOCK_105]
Executes a search for a match in its string parameter.
[CODE_BLOCK_106]
Tests for a match in its string parameter.
[CODE_BLOCK_107]
Returns a string representing the specified object. Overrides the
[CODE_BLOCK_108]
method.
[CODE_BLOCK_109]
Performs match to given string and returns match result.
[CODE_BLOCK_110]
Returns all matches of the regular expression against a string.
[CODE_BLOCK_111]
Replaces matches in given string with new substring.
[CODE_BLOCK_112]
Searches the match in given string and returns the index the pattern found in the string.
[CODE_BLOCK_113]
Splits given string into an array by separating the string into substrings.
Examples
Using a regular expression to change data format
The following script uses the
[CODE_BLOCK_114]
method to match a name in the format
first last
and output it in the format
last, first
In the replacement text, the script uses
[CODE_BLOCK_115]
[CODE_BLOCK_116]
to indicate the results of the corresponding matching parentheses in the regular expression pattern.
Copy to Clipboard
[CODE_BLOCK_117]
This displays
[CODE_BLOCK_119]
Using regular expression to split lines with different line endings/ends of line/line breaks
The default line ending varies depending on the platform (Unix, Windows, etc.). The line splitting provided in this example works on all platforms.
Copy to Clipboard
[CODE_BLOCK_120]
Note that the order of the patterns in the regular expression matters.
Using regular expression on multiple lines
By default, the
[CODE_BLOCK_122]
character does not match newlines. To make it match newlines, use the
[CODE_BLOCK_123]
flag (
[CODE_BLOCK_124]
mode).
Copy to Clipboard
[CODE_BLOCK_125]
Using a regular expression with the sticky flag
[CODE_BLOCK_127]
flag indicates that the regular expression performs sticky matching in the target string by attempting to match starting at
[CODE_BLOCK_128]
Copy to Clipboard
[CODE_BLOCK_129]
The difference between the sticky flag and the global flag
With the sticky flag
[CODE_BLOCK_131]
, the next match has to happen at the
[CODE_BLOCK_132]
position, while with the global flag
[CODE_BLOCK_133]
, the match can happen at the
[CODE_BLOCK_134]
position or later:
Copy to Clipboard
[CODE_BLOCK_135]
With the global flag
[CODE_BLOCK_137]
, all 6 digits would be matched, not just 3.
Regular expression and Unicode characters
[CODE_BLOCK_138]
[CODE_BLOCK_139]
only matches ASCII based characters; for example,
[CODE_BLOCK_140]
[CODE_BLOCK_141]
[CODE_BLOCK_142]
[CODE_BLOCK_143]
[CODE_BLOCK_144]
[CODE_BLOCK_145]
, and
[CODE_BLOCK_146]
To match characters from other languages such as Cyrillic or Hebrew, use
[CODE_BLOCK_147]
, where
[CODE_BLOCK_148]
is the character's Unicode value in hexadecimal.
This example demonstrates how one can separate out Unicode characters from a word.
Copy to Clipboard
[CODE_BLOCK_149]
Unicode property escapes
feature provides a simpler way to target particular Unicode ranges, by allowing for statements like
[CODE_BLOCK_151]
(to match any Cyrillic letter), or
[CODE_BLOCK_152]
(to match a letter from any language).
Extracting subdomain name from URL
Copy to Clipboard
[CODE_BLOCK_153]
Note:
Instead of using regular expressions for parsing URLs, it is usually better to use the browsers built-in URL parser by using the
URL API
Building a regular expression from dynamic inputs
Copy to Clipboard
[CODE_BLOCK_155]
Specifications
Specification
ECMAScript® 2026 Language Specification
sec-regexp-regular-expression-objects
Browser compatibility
Firefox-specific notes
Starting with Firefox 34, in the case of a capturing group with quantifiers preventing its exercise, the matched text for a capturing group is now
[CODE_BLOCK_157]
instead of an empty string:
Copy to Clipboard
[CODE_BLOCK_158]
Note that due to web compatibility,
[CODE_BLOCK_160]
will still return an empty string instead of
[CODE_BLOCK_161]
bug 1053944
See also
Polyfill of many modern
[CODE_BLOCK_162]
features (
[CODE_BLOCK_163]
[CODE_BLOCK_164]
flags, named capture groups, etc.) in
[CODE_BLOCK_165]
Regular expressions
guide
Regular expressions
[CODE_BLOCK_166]
[CODE_BLOCK_167]
[CODE_BLOCK_168]
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
May 22, 2025
MDN contributors
View this page on GitHub
Report a problem with this content