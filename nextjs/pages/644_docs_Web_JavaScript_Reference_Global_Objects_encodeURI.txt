SOURCE URL: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/encodeURI
SCRAPED: 2025-06-19 18:22:47
================================================================================

--- CODE BLOCK 1 ---
encodeURI()
--- END CODE BLOCK ---
function encodes a
by replacing each instance of certain characters by one, two, three, or four escape sequences representing the
UTF-8
encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to
--- CODE BLOCK 2 ---
encodeURIComponent()
--- END CODE BLOCK ---
, this function encodes fewer characters, preserving those that are part of the URI syntax.
Try it
--- CODE BLOCK 3 ---
const uri = "https://mozilla.org/?x=шеллы";
const encoded = encodeURI(uri);
console.log(encoded);
// Expected output: "https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B"
try {
console.log(decodeURI(encoded));
// Expected output: "https://mozilla.org/?x=шеллы"
} catch (e) {
// Catches a malformed URI
console.error(e);
--- END CODE BLOCK ---
Syntax
Copy to Clipboard
--- CODE BLOCK 5 ---
encodeURI(uri)
--- END CODE BLOCK ---
Parameters
--- CODE BLOCK 10 ---
encodeURI()
--- END CODE BLOCK ---
A string to be encoded as a URI.
Return value
A new string representing the provided string encoded as a URI.
Exceptions
--- CODE BLOCK 11 ---
encodeURI()
--- END CODE BLOCK ---
Thrown if
--- CODE BLOCK 13 ---
encodeURI()
--- END CODE BLOCK ---
contains a
lone surrogate
Description
--- CODE BLOCK 15 ---
encodeURI()
--- END CODE BLOCK ---
is a function property of the global object.
--- CODE BLOCK 16 ---
A–Z a–z 0–9 - _ . ! ~ * ' ( )
; / ? : @ & = + $ , #
--- END CODE BLOCK ---
function escapes characters by UTF-8 code units, with each octet encoded in the format
--- CODE BLOCK 17 ---
encodeURIComponent()
--- END CODE BLOCK ---
, left-padded with 0 if necessary. Because lone surrogates in UTF-16 do not encode any valid Unicode character, they cause
--- CODE BLOCK 18 ---
encodeURI()
--- END CODE BLOCK ---
to throw a
--- CODE BLOCK 19 ---
encodeURIComponent()
--- END CODE BLOCK ---
--- CODE BLOCK 21 ---
encodeURI()
--- END CODE BLOCK ---
escapes all characters
except
--- CODE BLOCK 22 ---
http://username:password@www.example.com:80/path/to/file.php?foo=316&bar=this+has+spaces#anchor
--- END CODE BLOCK ---
The characters on the second line are characters that may be part of the URI syntax, and are only escaped by
--- CODE BLOCK 23 ---
http://username:password@www.example.com:80/path/to/file.php?foo=316&bar=this+has+spaces#anchor
--- END CODE BLOCK ---
. Both
--- CODE BLOCK 25 ---
encodeURIComponent()
--- END CODE BLOCK ---
--- CODE BLOCK 26 ---
const name = "Ben & Jerry's";
// This is bad:
const link = encodeURI(`https://example.com/?choice=${name}`); // "https://example.com/?choice=Ben%20&%20Jerry's"
console.log([...new URL(link).searchParams]); // [['choice', 'Ben '], [" Jerry's", '']
// Instead:
const link = encodeURI(
`https://example.com/?choice=${encodeURIComponent(name)}`,
// "https://example.com/?choice=Ben%2520%2526%2520Jerry's"
console.log([...new URL(link).searchParams]); // [['choice', "Ben%20%26%20Jerry's"]]
--- END CODE BLOCK ---
do not encode the characters
--- CODE BLOCK 27 ---
const name = "Ben & Jerry's";
// This is bad:
const link = encodeURI(`https://example.com/?choice=${name}`); // "https://example.com/?choice=Ben%20&%20Jerry's"
console.log([...new URL(link).searchParams]); // [['choice', 'Ben '], [" Jerry's", '']
// Instead:
const link = encodeURI(
`https://example.com/?choice=${encodeURIComponent(name)}`,
// "https://example.com/?choice=Ben%2520%2526%2520Jerry's"
console.log([...new URL(link).searchParams]); // [['choice', "Ben%20%26%20Jerry's"]]
--- END CODE BLOCK ---
, known as "unreserved marks", which do not have a reserved purpose but are allowed in a URI "as is". (See
RFC2396
--- CODE BLOCK 28 ---
encodeURI()
--- END CODE BLOCK ---
function does not encode characters that have special meaning (reserved characters) for a URI. The following example shows all the parts that a URI can possibly contain. Note how certain characters are used to signify special meaning:
Copy to Clipboard
--- CODE BLOCK 29 ---
encodeURIComponent()
--- END CODE BLOCK ---
--- CODE BLOCK 31 ---
const set1 = ";/?:@&=+$,#"; // Reserved Characters
const set2 = "-.!~*'()"; // Unreserved Marks
const set3 = "ABC abc 123"; // Alphanumeric Characters + Space
console.log(encodeURI(set1)); // ;/?:@&=+$,#
console.log(encodeURI(set2)); // -.!~*'()
console.log(encodeURI(set3)); // ABC%20abc%20123 (the space gets encoded as %20)
console.log(encodeURIComponent(set1)); // %3B%2C%2F%3F%3A%40%26%3D%2B%24%23
console.log(encodeURIComponent(set2)); // -.!~*'()
console.log(encodeURIComponent(set3)); // ABC%20abc%20123 (the space gets encoded as %20)
--- END CODE BLOCK ---
, as the name implies, is used to encode a URL as a whole, assuming it is already well-formed. If you want to dynamically assemble string values into a URL, you probably want to use
--- CODE BLOCK 33 ---
// High-low pair OK
encodeURI("\uD800\uDFFF"); // "%F0%90%8F%BF"
// Lone high-surrogate code unit throws "URIError: malformed URI sequence"
encodeURI("\uD800");
// Lone low-surrogate code unit throws "URIError: malformed URI sequence"
encodeURI("\uDFFF");
--- END CODE BLOCK ---
on each dynamic segment instead, to avoid URL syntax characters in unwanted places.
Copy to Clipboard
--- CODE BLOCK 34 ---
// High-low pair OK
encodeURI("\uD800\uDFFF"); // "%F0%90%8F%BF"
// Lone high-surrogate code unit throws "URIError: malformed URI sequence"
encodeURI("\uD800");
// Lone low-surrogate code unit throws "URIError: malformed URI sequence"
encodeURI("\uDFFF");
--- END CODE BLOCK ---
Examples
encodeURI() vs. encodeURIComponent()
--- CODE BLOCK 36 ---
String.prototype.isWellFormed()
--- END CODE BLOCK ---
differs from
--- CODE BLOCK 37 ---
encodeURI()
--- END CODE BLOCK ---
as follows:
Copy to Clipboard
--- CODE BLOCK 38 ---
function encodeRFC3986URI(str) {
return encodeURI(str)
.replace(/%5B/g, "[")
.replace(/%5D/g, "]")
.replace(
/[!'()*]/g,
(c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`,
--- END CODE BLOCK ---
Encoding a lone surrogate throws
--- CODE BLOCK 40 ---
decodeURI()
--- END CODE BLOCK ---
will be thrown if one attempts to encode a surrogate which is not part of a high-low pair. For example:
Copy to Clipboard
--- CODE BLOCK 41 ---
encodeURIComponent()
--- END CODE BLOCK ---
You can use
[CODE_BLOCK_35]
, which replaces lone surrogates with the Unicode replacement character (U+FFFD), to avoid this error. You can also use
[CODE_BLOCK_36]
to check if a string contains lone surrogates before passing it to
[CODE_BLOCK_37]
Encoding for RFC3986
The more recent
RFC3986
makes square brackets reserved (for
IPv6
) and thus not encoded when forming something which could be part of a URL (such as a host). It also reserves !, ', (, ), and *, even though these characters have no formalized URI delimiting uses. The following function encodes a string for RFC3986-compliant URL format.
Copy to Clipboard
[CODE_BLOCK_38]
Specifications
Specification
ECMAScript® 2026 Language Specification
sec-encodeuri-uri
Browser compatibility
See also
[CODE_BLOCK_40]
[CODE_BLOCK_41]
[CODE_BLOCK_42]
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
Mar 13, 2025
MDN contributors
View this page on GitHub
Report a problem with this content