SOURCE URL: https://nextjs.org/docs/pages/building-your-application/routing/linking-and-navigating
SCRAPED: 2025-06-19 17:33:49
================================================================================

Menu
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Building Your Application
Routing
Linking and Navigating
You are currently viewing the documentation for Pages Router.
Linking and Navigating
The Next.js router allows you to do client-side route transitions between pages, similar to a single-page application.
A React component called
--- CODE BLOCK 2 ---
import Link from 'next/link'
function Home() {
return (
<ul>
<li>
<Link href="/">Home</Link>
</li>
<li>
<Link href="/about">About Us</Link>
</li>
<li>
<Link href="/blog/hello-world">Blog Post</Link>
</li>
</ul>
export default Home
--- END CODE BLOCK ---
is provided to do this client-side route transition.
--- CODE BLOCK 3 ---
import Link from 'next/link'
function Home() {
return (
<ul>
<li>
<Link href="/">Home</Link>
</li>
<li>
<Link href="/about">About Us</Link>
</li>
<li>
<Link href="/blog/hello-world">Blog Post</Link>
</li>
</ul>
export default Home
--- END CODE BLOCK ---
The example above uses multiple links. Each one maps a path (
--- CODE BLOCK 8 ---
pages/about.js
--- END CODE BLOCK ---
) to a known page:
--- CODE BLOCK 9 ---
/blog/hello-world
--- END CODE BLOCK ---
--- CODE BLOCK 10 ---
pages/blog/[slug].js
--- END CODE BLOCK ---
--- CODE BLOCK 13 ---
import Link from 'next/link'
function Posts({ posts }) {
return (
<ul>
{posts.map((post) => (
<li key={post.id}>
<Link href={`/blog/${encodeURIComponent(post.slug)}`}>
{post.title}
</Link>
</li>
</ul>
export default Posts
--- END CODE BLOCK ---
--- CODE BLOCK 14 ---
import Link from 'next/link'
function Posts({ posts }) {
return (
<ul>
{posts.map((post) => (
<li key={post.id}>
<Link href={`/blog/${encodeURIComponent(post.slug)}`}>
{post.title}
</Link>
</li>
</ul>
export default Posts
--- END CODE BLOCK ---
--- CODE BLOCK 15 ---
encodeURIComponent
--- END CODE BLOCK ---
--- CODE BLOCK 16 ---
import Link from 'next/link'
function Posts({ posts }) {
return (
<ul>
{posts.map((post) => (
<li key={post.id}>
<Link
href={{
pathname: '/blog/[slug]',
query: { slug: post.slug },
{post.title}
</Link>
</li>
</ul>
export default Posts
--- END CODE BLOCK ---
--- CODE BLOCK 17 ---
import Link from 'next/link'
function Posts({ posts }) {
return (
<ul>
{posts.map((post) => (
<li key={post.id}>
<Link
href={{
pathname: '/blog/[slug]',
query: { slug: post.slug },
{post.title}
</Link>
</li>
</ul>
export default Posts
--- END CODE BLOCK ---
in the viewport (initially or through scroll) will be prefetched by default (including the corresponding data) for pages using
Static Generation
. The corresponding data for
server-rendered
routes is fetched
only when
--- CODE BLOCK 21 ---
/blog/[slug]
--- END CODE BLOCK ---
is clicked.
Linking to dynamic paths
You can also use interpolation to create the path, which comes in handy for
dynamic route segments
. For example, to show a list of posts which have been passed to the component as a prop:
--- CODE BLOCK 29 ---
next/router
--- END CODE BLOCK ---
--- CODE BLOCK 32 ---
import { useRouter } from 'next/router'
export default function ReadMore() {
const router = useRouter()
return (
<button onClick={() => router.push('/about')}>
Click here to read more
</button>
--- END CODE BLOCK ---
is used in the example to keep the path utf-8 compatible.
Alternatively, using a URL Object:
--- CODE BLOCK 33 ---
getServerSideProps
--- END CODE BLOCK ---
Now, instead of using interpolation to create the path, we use a URL object in
--- CODE BLOCK 35 ---
getInitialProps
--- END CODE BLOCK ---
where:
--- CODE BLOCK 43 ---
import { useEffect } from 'react'
import { useRouter } from 'next/router'
// Current URL is '/'
function Page() {
const router = useRouter()
useEffect(() => {
// Always do navigations after the first render
router.push('/?counter=10', undefined, { shallow: true })
}, [])
useEffect(() => {
// The counter changed!
}, [router.query.counter])
export default Page
--- END CODE BLOCK ---
is the name of the page in the
--- CODE BLOCK 44 ---
import { useEffect } from 'react'
import { useRouter } from 'next/router'
// Current URL is '/'
function Page() {
const router = useRouter()
useEffect(() => {
// Always do navigations after the first render
router.push('/?counter=10', undefined, { shallow: true })
}, [])
useEffect(() => {
// The counter changed!
}, [router.query.counter])
export default Page
--- END CODE BLOCK ---
directory.
--- CODE BLOCK 45 ---
/?counter=10
--- END CODE BLOCK ---
in this case.
--- CODE BLOCK 46 ---
componentDidUpdate
--- END CODE BLOCK ---
is an object with the dynamic segment.
--- CODE BLOCK 47 ---
componentDidUpdate(prevProps) {
const { pathname, query } = this.props.router
// verify props have changed to avoid an infinite loop
if (query.counter !== prevProps.router.query.counter) {
// fetch data based on the new query
--- END CODE BLOCK ---
in this case.
Injecting the router
To access the
--- CODE BLOCK 48 ---
componentDidUpdate(prevProps) {
const { pathname, query } = this.props.router
// verify props have changed to avoid an infinite loop
if (query.counter !== prevProps.router.query.counter) {
// fetch data based on the new query
--- END CODE BLOCK ---
object
in a React component you can use
--- CODE BLOCK 49 ---
pages/about.js
--- END CODE BLOCK ---
--- CODE BLOCK 50 ---
router.push('/?counter=10', '/about?counter=10', { shallow: true })
--- END CODE BLOCK ---
In general we recommend using
--- CODE BLOCK 51 ---
router.push('/?counter=10', '/about?counter=10', { shallow: true })
--- END CODE BLOCK ---
Imperative Routing
[CODE_BLOCK_28]
should be able to cover most of your routing needs, but you can also do client-side navigations without it, take a look at the
documentation for
[CODE_BLOCK_29]
The following example shows how to do basic page navigations with
[CODE_BLOCK_30]
[CODE_BLOCK_31]
Shallow Routing
Examples
Shallow Routing
Shallow routing allows you to change the URL without running data fetching methods again, that includes
[CODE_BLOCK_33]
[CODE_BLOCK_34]
, and
[CODE_BLOCK_35]
You'll receive the updated
[CODE_BLOCK_36]
and the
[CODE_BLOCK_37]
via the
[CODE_BLOCK_38]
object
(added by
[CODE_BLOCK_39]
[CODE_BLOCK_40]
), without losing state.
To enable shallow routing, set the
[CODE_BLOCK_41]
option to
[CODE_BLOCK_42]
. Consider the following example:
[CODE_BLOCK_43]
The URL will get updated to
[CODE_BLOCK_45]
and the page won't get replaced, only the state of the route is changed.
You can also watch for URL changes via
[CODE_BLOCK_46]
as shown below:
[CODE_BLOCK_47]
Caveats
Shallow routing
only
works for URL changes in the current page. For example, let's assume we have another page called
[CODE_BLOCK_49]
, and you run this:
[CODE_BLOCK_50]
Since that's a new page, it'll unload the current page, load the new one and wait for data fetching even though we asked to do shallow routing.
When shallow routing is used with middleware it will not ensure the new page matches the current page like previously done without middleware. This is due to middleware being able to rewrite dynamically and can't be verified client-side without a data fetch which is skipped with shallow, so a shallow route change must always be treated as shallow.
Was this helpful?
supported.
Send