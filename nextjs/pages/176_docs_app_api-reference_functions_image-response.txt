SOURCE URL: https://nextjs.org/docs/app/api-reference/functions/image-response
SCRAPED: 2025-06-19 17:29:53
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
API Reference
Functions
ImageResponse
ImageResponse
--- CODE BLOCK 1 ---
ImageResponse
--- END CODE BLOCK ---
constructor allows you to generate dynamic images using JSX and CSS. This is useful for generating social media images such as Open Graph images, Twitter cards, and more.
Reference
Parameters
The following parameters are available for
--- CODE BLOCK 2 ---
ImageResponse
--- END CODE BLOCK ---
--- CODE BLOCK 3 ---
import { ImageResponse } from 'next/og'
new ImageResponse(
element: ReactElement,
options: {
width?: number = 1200
height?: number = 630
emoji?: 'twemoji' | 'blobmoji' | 'noto' | 'openmoji' = 'twemoji',
fonts?: {
name: string,
data: ArrayBuffer,
weight: number,
style: 'normal' | 'italic'
debug?: boolean = false
// Options that will be passed to the HTTP response
status?: number = 200
statusText?: string
headers?: Record<string, string>
--- END CODE BLOCK ---
Examples are available in the
Vercel OG Playground
Supported HTML and CSS features
--- CODE BLOCK 5 ---
ImageResponse
--- END CODE BLOCK ---
supports common CSS properties including flexbox and absolute positioning, custom fonts, text wrapping, centering, and nested images.
Please refer to
Satoriâ€™s documentation
for a list of supported HTML and CSS features.
Behavior
--- CODE BLOCK 6 ---
ImageResponse
--- END CODE BLOCK ---
uses
@vercel/og
Satori
, and Resvg to convert HTML and CSS into PNG.
Only flexbox and a subset of CSS properties are supported. Advanced layouts (e.g.
--- CODE BLOCK 7 ---
display: grid
--- END CODE BLOCK ---
) will not work.
Maximum bundle size of
--- CODE BLOCK 15 ---
ImageResponse
--- END CODE BLOCK ---
. The bundle size includes your JSX, CSS, fonts, images, and any other assets. If you exceed the limit, consider reducing the size of any assets or fetching at runtime.
Only
--- CODE BLOCK 16 ---
import { ImageResponse } from 'next/og'
export async function GET() {
try {
return new ImageResponse(
<div
style={{
height: '100%',
width: '100%',
display: 'flex',
flexDirection: 'column',
alignItems: 'center',
justifyContent: 'center',
backgroundColor: 'white',
padding: '40px',
<div
style={{
fontSize: 60,
fontWeight: 'bold',
color: 'black',
textAlign: 'center',
Welcome to My Site
</div>
<div
style={{
fontSize: 30,
color: '#666',
marginTop: '20px',
Generated with Next.js ImageResponse
</div>
</div>
width: 1200,
height: 630,
} catch (e) {
console.log(`${e.message}`)
return new Response(`Failed to generate the image`, {
status: 500,
--- END CODE BLOCK ---
--- CODE BLOCK 17 ---
import { ImageResponse } from 'next/og'
export async function GET() {
try {
return new ImageResponse(
<div
style={{
height: '100%',
width: '100%',
display: 'flex',
flexDirection: 'column',
alignItems: 'center',
justifyContent: 'center',
backgroundColor: 'white',
padding: '40px',
<div
style={{
fontSize: 60,
fontWeight: 'bold',
color: 'black',
textAlign: 'center',
Welcome to My Site
</div>
<div
style={{
fontSize: 30,
color: '#666',
marginTop: '20px',
Generated with Next.js ImageResponse
</div>
</div>
width: 1200,
height: 630,
} catch (e) {
console.log(`${e.message}`)
return new Response(`Failed to generate the image`, {
status: 500,
--- END CODE BLOCK ---
, and
--- CODE BLOCK 18 ---
ImageResponse
--- END CODE BLOCK ---
font formats are supported. To maximize the font parsing speed,
--- CODE BLOCK 19 ---
opengraph-image.tsx
--- END CODE BLOCK ---
--- CODE BLOCK 20 ---
import { ImageResponse } from 'next/og'
// Image metadata
export const alt = 'My site'
export const size = {
width: 1200,
height: 630,
export const contentType = 'image/png'
// Image generation
export default async function Image() {
return new ImageResponse(
// ImageResponse JSX element
<div
style={{
fontSize: 128,
background: 'white',
width: '100%',
height: '100%',
display: 'flex',
alignItems: 'center',
justifyContent: 'center',
My site
</div>
// ImageResponse options
// For convenience, we can re-use the exported opengraph-image
// size config to also set the ImageResponse's width and height.
...size,
--- END CODE BLOCK ---
are preferred over
--- CODE BLOCK 21 ---
import { ImageResponse } from 'next/og'
// Image metadata
export const alt = 'My site'
export const size = {
width: 1200,
height: 630,
export const contentType = 'image/png'
// Image generation
export default async function Image() {
return new ImageResponse(
// ImageResponse JSX element
<div
style={{
fontSize: 128,
background: 'white',
width: '100%',
height: '100%',
display: 'flex',
alignItems: 'center',
justifyContent: 'center',
My site
</div>
// ImageResponse options
// For convenience, we can re-use the exported opengraph-image
// size config to also set the ImageResponse's width and height.
...size,
--- END CODE BLOCK ---
Examples
Route Handlers
--- CODE BLOCK 22 ---
ImageResponse
--- END CODE BLOCK ---
can be used in Route Handlers to generate images dynamically at request time.
app/api/route.js
--- CODE BLOCK 24 ---
import { ImageResponse } from 'next/og'
import { readFile } from 'node:fs/promises'
import { join } from 'node:path'
// Image metadata
export const alt = 'My site'
export const size = {
width: 1200,
height: 630,
export const contentType = 'image/png'
// Image generation
export default async function Image() {
// Font loading, process.cwd() is Next.js project directory
const interSemiBold = await readFile(
join(process.cwd(), 'assets/Inter-SemiBold.ttf')
return new ImageResponse(
// ...
// ImageResponse options
// For convenience, we can re-use the exported opengraph-image
// size config to also set the ImageResponse's width and height.
...size,
fonts: [
name: 'Inter',
data: interSemiBold,
style: 'normal',
weight: 400,
--- END CODE BLOCK ---
File-based Metadata
You can use
--- CODE BLOCK 27 ---
ImageResponse
--- END CODE BLOCK ---
in a
--- CODE BLOCK 28 ---
next/server
--- END CODE BLOCK ---
file to generate Open Graph images at build time or dynamically at request time.
app/opengraph-image.tsx
--- CODE BLOCK 31 ---
ImageResponse
--- END CODE BLOCK ---
Custom fonts
You can use custom fonts in your
--- CODE BLOCK 34 ---
ImageResponse
--- END CODE BLOCK ---
by providing a
[CODE_BLOCK_23]
array in the options.
app/opengraph-image.tsx
[CODE_BLOCK_24]
Version History
Version
Changes
[CODE_BLOCK_26]
[CODE_BLOCK_27]
moved from
[CODE_BLOCK_28]
[CODE_BLOCK_29]
[CODE_BLOCK_30]
[CODE_BLOCK_31]
can be imported from
[CODE_BLOCK_32]
[CODE_BLOCK_33]
[CODE_BLOCK_34]
introduced via
[CODE_BLOCK_35]
package.
Was this helpful?
supported.
Send