SOURCE URL: https://nextjs.org/docs/pages/api-reference/turbopack
SCRAPED: 2025-06-19 17:10:06
================================================================================

Menu
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Pages Router
API Reference
Turbopack
You are currently viewing the documentation for Pages Router.
Turbopack
Turbopack is an
incremental bundler
optimized for JavaScript and TypeScript, written in Rust, and built into
Next.js
. You can use Turbopack with both the Pages and App Router for a
much faster
local development experience.
Why Turbopack?
We built Turbopack to push the performance of Next.js, including:
Unified Graph:
Next.js supports multiple output environments (e.g., client and server). Managing multiple compilers and stitching bundles together can be tedious. Turbopack uses a
single, unified graph
for all environments.
Bundling vs Native ESM:
Some tools skip bundling in development and rely on the browser's native ESM. This works well for small apps but can slow down large apps due to excessive network requests. Turbopack
bundles
in dev, but in an optimized way to keep large apps fast.
Incremental Computation:
Turbopack parallelizes work across cores and
caches
results down to the function level. Once a piece of work is done, Turbopack won’t repeat it.
Lazy Bundling:
Turbopack only bundles what is actually requested by the dev server. This lazy approach can reduce initial compile times and memory usage.
Getting started
To enable Turbopack in your Next.js project, add the
--- CODE BLOCK 1 ---
--turbopack
--- END CODE BLOCK ---
flag to the
--- CODE BLOCK 4 ---
package.json
--- END CODE BLOCK ---
--- CODE BLOCK 5 ---
"scripts": {
"dev": "next dev --turbopack",
"build": "next build --turbopack",
"start": "next start"
--- END CODE BLOCK ---
scripts in your
--- CODE BLOCK 6 ---
"scripts": {
"dev": "next dev --turbopack",
"build": "next build --turbopack",
"start": "next start"
--- END CODE BLOCK ---
file:
package.json
--- CODE BLOCK 9 ---
tsc --watch
--- END CODE BLOCK ---
Currently, Turbopack for
--- CODE BLOCK 14 ---
.module.css
--- END CODE BLOCK ---
is stable, while
--- CODE BLOCK 15 ---
postcss.config.js
--- END CODE BLOCK ---
is in alpha. We are actively working on production support as Turbopack moves closer to stability.
Supported features
Turbopack in Next.js has
zero-configuration
for the common use cases. Below is a summary of what is supported out of the box, plus some references to how you can configure Turbopack further when needed.
Language features
Feature
Status
Notes
JavaScript & TypeScript
Supported
Uses SWC under the hood. Type-checking is not done by Turbopack (run
--- CODE BLOCK 16 ---
:local/:global
--- END CODE BLOCK ---
or rely on your IDE for type checks).
ECMAScript (ESNext)
Supported
Turbopack supports the latest ECMAScript features, matching SWC’s coverage.
CommonJS
Supported
--- CODE BLOCK 17 ---
import img from './img.png'
--- END CODE BLOCK ---
syntax is handled out of the box.
Supported
Static and dynamic
--- CODE BLOCK 20 ---
tsconfig.json
--- END CODE BLOCK ---
are fully supported.
Babel
Partially Unsupported
Turbopack does not include Babel by default. However, you can
configure
--- CODE BLOCK 23 ---
resolveAlias
--- END CODE BLOCK ---
via the Turbopack config
Framework and React features
Feature
Status
Notes
JSX / TSX
Supported
SWC handles JSX/TSX compilation.
Fast Refresh
Supported
No configuration needed.
React Server Components (RSC)
Supported
For the Next.js App Router. Turbopack ensures correct server/client bundling.
Root layout creation
Unsupported
Automatic creation of a root layout in App Router is not supported. Turbopack will instruct you to create it manually.
CSS and styling
Feature
Status
Notes
Global CSS
Supported
Import
--- CODE BLOCK 24 ---
next.config.js
--- END CODE BLOCK ---
files directly in your application.
CSS Modules
Supported
--- CODE BLOCK 25 ---
webpack.resolve.alias
--- END CODE BLOCK ---
files work natively (Lightning CSS).
CSS Nesting
Supported
Lightning CSS supports
modern CSS nesting
@import syntax
Supported
Combine multiple CSS files.
PostCSS
Supported
Automatically processes
--- CODE BLOCK 26 ---
resolveExtensions
--- END CODE BLOCK ---
in a Node.js worker pool. Useful for Tailwind, Autoprefixer, etc.
Sass / SCSS
Supported
(Next.js)
For Next.js, Sass is supported out of the box. In the future, Turbopack standalone usage will likely require a loader config.
Less
Planned via plugins
Not yet supported by default. Will likely require a loader config once custom loaders are stable.
Lightning CSS
In Use
Handles CSS transformations. Some low-usage CSS Modules features (like
--- CODE BLOCK 27 ---
next.config.js
--- END CODE BLOCK ---
as standalone pseudo-classes) are not yet supported.
See below for more details.
Assets
Feature
Status
Notes
Static Assets
(images, fonts)
Supported
Importing
--- CODE BLOCK 30 ---
:global(...)
--- END CODE BLOCK ---
works out of the box. In Next.js, returns an object for the
--- CODE BLOCK 35 ---
.module.css
--- END CODE BLOCK ---
component.
JSON Imports
Supported
Named or default imports from
--- CODE BLOCK 41 ---
.module.css
--- END CODE BLOCK ---
are supported.
Module resolution
Feature
Status
Notes
Path Aliases
Supported
Reads
--- CODE BLOCK 48 ---
.module.css
--- END CODE BLOCK ---
--- CODE BLOCK 50 ---
next.config.js
--- END CODE BLOCK ---
--- CODE BLOCK 53 ---
experimental.urlImports
--- END CODE BLOCK ---
, matching Next.js behavior.
Manual Aliases
Supported
Configure
--- CODE BLOCK 54 ---
experimental.esmExternals
--- END CODE BLOCK ---
--- CODE BLOCK 55 ---
esmExternals
--- END CODE BLOCK ---
(similar to
--- CODE BLOCK 56 ---
experimental.typedRoutes
--- END CODE BLOCK ---
Custom Extensions
Supported
Configure
--- CODE BLOCK 57 ---
experimental.nextScriptWorkers
--- END CODE BLOCK ---
--- CODE BLOCK 58 ---
experimental.sri.algorithm
--- END CODE BLOCK ---
Partially Supported
Basic transforms work; advanced AMD usage is limited.
Performance and Fast Refresh
Feature
Status
Notes
Fast Refresh
Supported
Updates JavaScript, TypeScript, and CSS without a full refresh.
Incremental Bundling
Supported
Turbopack lazily builds only what’s requested by the dev server, speeding up large apps.
Unsupported and unplanned features
Some features are not yet implemented or not planned:
Legacy CSS Modules features
Standalone
--- CODE BLOCK 59 ---
experimental.fallbackNodePolyfills
--- END CODE BLOCK ---
--- CODE BLOCK 60 ---
next.config.js
--- END CODE BLOCK ---
pseudo-classes (only the function variant
--- CODE BLOCK 61 ---
next.config.ts
--- END CODE BLOCK ---
is supported).
--- CODE BLOCK 64 ---
resolveAlias
--- END CODE BLOCK ---
rule (superseded by CSS variables).
--- CODE BLOCK 65 ---
resolve.alias
--- END CODE BLOCK ---
--- CODE BLOCK 66 ---
resolveExtensions
--- END CODE BLOCK ---
ICSS rules.
--- CODE BLOCK 69 ---
'deterministic'
--- END CODE BLOCK ---
--- CODE BLOCK 70 ---
treeShaking
--- END CODE BLOCK ---
composing a
--- CODE BLOCK 71 ---
memoryLimit
--- END CODE BLOCK ---
file. In webpack this would treat the
--- CODE BLOCK 72 ---
module.exports = {
turbopack: {
// Example: adding an alias and custom file extension
resolveAlias: {
underscore: 'lodash',
resolveExtensions: ['.mdx', '.tsx', '.ts', '.jsx', '.js', '.json'],
--- END CODE BLOCK ---
file as a CSS Module, with Turbopack the
--- CODE BLOCK 73 ---
module.exports = {
turbopack: {
// Example: adding an alias and custom file extension
resolveAlias: {
underscore: 'lodash',
resolveExtensions: ['.mdx', '.tsx', '.ts', '.jsx', '.js', '.json'],
--- END CODE BLOCK ---
file will always be global. This means that if you want to use
--- CODE BLOCK 74 ---
NEXT_TURBOPACK_TRACING=1
--- END CODE BLOCK ---
in a CSS Module, you need to change the
--- CODE BLOCK 75 ---
NEXT_TURBOPACK_TRACING=1 next dev --turbopack
--- END CODE BLOCK ---
file to a
--- CODE BLOCK 76 ---
NEXT_TURBOPACK_TRACING=1 next dev --turbopack
--- END CODE BLOCK ---
file.
--- CODE BLOCK 77 ---
.next/trace-turbopack
--- END CODE BLOCK ---
in CSS Modules importing
--- CODE BLOCK 78 ---
next dev --turbopack
--- END CODE BLOCK ---
as a CSS Module. In webpack this would treat the
[CODE_BLOCK_44]
file as a CSS Module, with Turbopack the
[CODE_BLOCK_45]
file will always be global. This means that if you want to use
[CODE_BLOCK_46]
in a CSS Module, you need to change the
[CODE_BLOCK_47]
file to a
[CODE_BLOCK_48]
file.
[CODE_BLOCK_49]
configuration
[CODE_BLOCK_50]
Turbopack replaces webpack, so
[CODE_BLOCK_51]
configs are not recognized. Use the
[CODE_BLOCK_52]
config
instead.
Not planned for Turbopack support in Next.js.
Yarn PnP
Not planned for Turbopack support in Next.js.
[CODE_BLOCK_53]
Not planned for Turbopack.
[CODE_BLOCK_54]
Not planned. Turbopack does not support the legacy
[CODE_BLOCK_55]
configuration in Next.js.
Some Next.js Experimental Flags
[CODE_BLOCK_56]
[CODE_BLOCK_57]
[CODE_BLOCK_58]
[CODE_BLOCK_59]
We plan to implement these in the future.
For a full, detailed breakdown of each feature flag and its status, see the
Turbopack API Reference
Configuration
Turbopack can be configured via
[CODE_BLOCK_60]
[CODE_BLOCK_61]
) under the
[CODE_BLOCK_62]
key. Configuration options include:
[CODE_BLOCK_63]
Define additional
webpack loaders
for file transformations.
[CODE_BLOCK_64]
Create manual aliases (like
[CODE_BLOCK_65]
in webpack).
[CODE_BLOCK_66]
Change or extend file extensions for module resolution.
[CODE_BLOCK_67]
Set how module IDs are generated (
[CODE_BLOCK_68]
[CODE_BLOCK_69]
[CODE_BLOCK_70]
Enable or disable tree shaking in dev and future production builds.
[CODE_BLOCK_71]
Set a memory limit (in bytes) for Turbopack.
next.config.js
[CODE_BLOCK_72]
For more in-depth configuration examples, see the
Turbopack config documentation
Generating trace files for performance debugging
If you encounter performance or memory issues and want to help the Next.js team diagnose them, you can generate a trace file by appending
[CODE_BLOCK_74]
to your dev command:
[CODE_BLOCK_75]
This will produce a
[CODE_BLOCK_77]
file. Include that file when creating a GitHub issue on the
Next.js repo
to help us investigate.
Summary
Turbopack is a
Rust-based
incremental
bundler designed to make local development and builds fast—especially for large applications. It is integrated into Next.js, offering zero-config CSS, React, and TypeScript support.
Stay tuned for more updates as we continue to improve Turbopack and add production build support. In the meantime, give it a try with
[CODE_BLOCK_78]
and let us know your feedback.
Version Changes
Version
Changes
[CODE_BLOCK_79]
Experimental support for
[CODE_BLOCK_80]
[CODE_BLOCK_81]
Turbopack for
[CODE_BLOCK_82]
stable
Was this helpful?
supported.
Send