SOURCE URL: https://nextjs.org/docs/app/guides/prefetching
SCRAPED: 2025-06-19 17:41:22
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
App Router
Guides
Prefetching
Prefetching
Prefetching makes navigating between different routes in your application feel instant. Next.js tries to intelligently prefetch by default, based on the links used in your application code.
This guide will explain how prefetching works and show common implementation patterns:
Automatic prefetch
Manual prefetch
Hover-triggered prefetch
Extending or ejecting link
Disabled prefetch
How does prefetching work?
When navigating between routes, the browser requests assets for the page like HTML and JavaScript files. Prefetching is the process of fetching these resources
ahead
of time, before you navigate to a new route.
Next.js automatically splits your application into smaller JavaScript chunks based on routes. Instead of loading all the code upfront like traditional SPAs, only the code needed for the current route is loaded. This reduces the initial load time while other parts of the app are loaded in the background. By the time you click the link, the resources for the new route have already been loaded into the browser cache.
When navigating to the new page, there's no full page reload or browser loading spinner. Instead, Next.js performs a
client-side transition
, making the page navigation feel instant.
Prefetching static vs. dynamic routes
Static page
Dynamic page
Prefetched
Yes, full route
No, unless
--- CODE BLOCK 2 ---
import Link from 'next/link'
export default function NavLink() {
return <Link href="/about">About</Link>
--- END CODE BLOCK ---
Client Cache TTL
5 min (default)
Off, unless
enabled
Server roundtrip on click
Yes, streamed after
shell
Good to know:
During the initial navigation, the browser fetches the HTML, JavaScript, and React Server Components (RSC) Payload. For subsequent navigations, the browser will fetch the RSC Payload for Server Components and JS bundle for Client Components.
Automatic prefetch
app/ui/nav-link.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 3 ---
import Link from 'next/link'
export default function NavLink() {
return <Link href="/about">About</Link>
--- END CODE BLOCK ---
Context
Prefetched payload
Client Cache TTL
--- CODE BLOCK 7 ---
'use client'
import { useRouter } from 'next/navigation'
const router = useRouter()
router.prefetch('/pricing')
--- END CODE BLOCK ---
Entire page
Until app reload
With
--- CODE BLOCK 8 ---
'use client'
import { useRouter } from 'next/navigation'
const router = useRouter()
router.prefetch('/pricing')
--- END CODE BLOCK ---
Layout to first loading boundary
30s (
configurable
Automatic prefetching runs only in production. Disable with
--- CODE BLOCK 9 ---
router.prefetch()
--- END CODE BLOCK ---
or use the wrapper in
Disabled Prefetch
Manual prefetch
--- CODE BLOCK 11 ---
'use client'
import Link from 'next/link'
import { useState } from 'react'
export function HoverPrefetchLink({
href,
children,
}: {
href: string
children: React.ReactNode
}) {
const [active, setActive] = useState(false)
return (
<Link
href={href}
prefetch={active ? null : false}
onMouseEnter={() => setActive(true)}
{children}
</Link>
--- END CODE BLOCK ---
Call
--- CODE BLOCK 13 ---
prefetch={null}
--- END CODE BLOCK ---
to warm routes outside the viewport or in response to analytics, hover, scroll, etc.
Hover-triggered prefetch
Proceed with caution:
Extending
--- CODE BLOCK 17 ---
'use client'
import { useRouter } from 'next/navigation'
import { useEffect } from 'react'
function ManualPrefetchLink({
href,
children,
}: {
href: string
children: React.ReactNode
}) {
const router = useRouter()
useEffect(() => {
let cancelled = false
const poll = () => {
if (!cancelled) router.prefetch(href, { onInvalidate: poll })
poll()
return () => {
cancelled = true
}, [href, router])
return (
href={href}
onClick={(event) => {
event.preventDefault()
router.push(href)
{children}
</a>
--- END CODE BLOCK ---
opts you into maintaining prefetching, cache invalidation, and accessibility concerns. Proceed only if defaults are insufficient.
Next.js tries to do the right prefetching by default, but power users can eject and modify based on their needs. You have the control between performance and resource consumption.
For example, you might have to only trigger prefetches on hover, instead of when entering the viewport (the default behavior):
--- CODE BLOCK 18 ---
'use client'
import { useRouter } from 'next/navigation'
import { useEffect } from 'react'
function ManualPrefetchLink({
href,
children,
}: {
href: string
children: React.ReactNode
}) {
const router = useRouter()
useEffect(() => {
let cancelled = false
const poll = () => {
if (!cancelled) router.prefetch(href, { onInvalidate: poll })
poll()
return () => {
cancelled = true
}, [href, router])
return (
href={href}
onClick={(event) => {
event.preventDefault()
router.push(href)
{children}
</a>
--- END CODE BLOCK ---
--- CODE BLOCK 22 ---
router.push
--- END CODE BLOCK ---
restores default (static) prefetching once the user shows intent.
Extending or ejecting link
You can extend the
--- CODE BLOCK 23 ---
'use client'
import Link, { LinkProps } from 'next/link'
function NoPrefetchLink({
prefetch,
...rest
}: LinkProps & { children: React.ReactNode }) {
return <Link {...rest} prefetch={false} />
--- END CODE BLOCK ---
component to create your own custom prefetching strategy. For example, using the
ForesightJS
library which prefetches links by predicting the direction of the user's cursor.
Alternatively, you can use
--- CODE BLOCK 24 ---
'use client'
import Link, { LinkProps } from 'next/link'
function NoPrefetchLink({
prefetch,
...rest
}: LinkProps & { children: React.ReactNode }) {
return <Link {...rest} prefetch={false} />
--- END CODE BLOCK ---
to recreate some of the native
--- CODE BLOCK 26 ---
experimental.clientSegmentCache
--- END CODE BLOCK ---
behavior. However, be aware this opts you into maintaining prefetching and cache invalidation.
--- CODE BLOCK 27 ---
/dashboard/settings
--- END CODE BLOCK ---
--- CODE BLOCK 29 ---
revalidateTag
--- END CODE BLOCK ---
is invoked when Next.js suspects cached data is stale, allowing you to refresh the prefetch.
Good to know:
Using an
--- CODE BLOCK 30 ---
revalidatePath
--- END CODE BLOCK ---
tag will cause a full page navigation to the destination route, you can use
--- CODE BLOCK 32 ---
import { trackPageView } from '@/lib/analytics'
export default function Layout({ children }: { children: React.ReactNode }) {
// This runs during prefetch
trackPageView()
return <div>{children}</div>
--- END CODE BLOCK ---
to prevent the full page navigation, and then invoke
--- CODE BLOCK 33 ---
import { trackPageView } from '@/lib/analytics'
export default function Layout({ children }: { children: React.ReactNode }) {
// This runs during prefetch
trackPageView()
return <div>{children}</div>
--- END CODE BLOCK ---
to navigate to the destination.
Disabled prefetch
You can fully disable prefetching for certain routes for more fine-grained control over resource consumption.
--- CODE BLOCK 34 ---
'use client'
import { useEffect } from 'react'
import { trackPageView } from '@/lib/analytics'
export function AnalyticsTracker() {
useEffect(() => {
trackPageView()
}, [])
return null
--- END CODE BLOCK ---
For example, you may still want to have consistent usage of
--- CODE BLOCK 36 ---
import { AnalyticsTracker } from '@/app/ui/analytics-tracker'
export default function Layout({ children }: { children: React.ReactNode }) {
return (
<div>
<AnalyticsTracker />
{children}
</div>
--- END CODE BLOCK ---
in your application, but links in your footer might not need to be prefetched when entering the viewport.
Prefetching optimizations
Good to know:
Layout deduplication and prefetch scheduling are part of upcoming optimizations. Currently available in Next.js canary via the
--- CODE BLOCK 37 ---
import { AnalyticsTracker } from '@/app/ui/analytics-tracker'
export default function Layout({ children }: { children: React.ReactNode }) {
return (
<div>
<AnalyticsTracker />
{children}
</div>
--- END CODE BLOCK ---
flag.
Client cache
Next.js stores prefetched React Server Component payloads in memory, keyed by route segments. When navigating between sibling routes (e.g.
--- CODE BLOCK 42 ---
<Link prefetch={false} href={`/blog/${post.id}`}>
{post.title}
</Link>
--- END CODE BLOCK ---
--- CODE BLOCK 43 ---
<Link prefetch={false} href={`/blog/${post.id}`}>
{post.title}
</Link>
--- END CODE BLOCK ---
), it reuses the parent layout and only fetches the updated leaf page. This reduces network traffic and improves navigation speed.
Prefetch scheduling
Next.js maintains a small task queue, which prefetches in the following order:
Links in the viewport
Links showing user intent (hover or touch)
Newer links replace older ones
Links scrolled off-screen are discarded
The scheduler prioritizes likely navigations while minimizing unused downloads.
Partial Prerendering (PPR)
When PPR is enabled, a page is divided into a static shell and a streamed dynamic section:
The shell, which can be prefetched, streams immediately
Dynamic data streams when ready
Data invalidations (
--- CODE BLOCK 44 ---
'use client'
import Link from 'next/link'
import { useState } from 'react'
export function HoverPrefetchLink({
href,
children,
}: {
href: string
children: React.ReactNode
}) {
const [active, setActive] = useState(false)
return (
<Link
href={href}
prefetch={active ? null : false}
onMouseEnter={() => setActive(true)}
{children}
</Link>
--- END CODE BLOCK ---
--- CODE BLOCK 45 ---
'use client'
import Link from 'next/link'
import { useState } from 'react'
export function HoverPrefetchLink({
href,
children,
}: {
href: string
children: React.ReactNode
}) {
const [active, setActive] = useState(false)
return (
<Link
href={href}
prefetch={active ? null : false}
onMouseEnter={() => setActive(true)}
{children}
</Link>
--- END CODE BLOCK ---
) silently refresh associated prefetches
Troubleshooting
Triggering unwanted side-effects during prefetching
If your layouts or pages are not
pure
and have side-effects (e.g. tracking analytics), these might be triggered when the route is prefetched, not when the user visits the page.
To avoid this, you should move side-effects to a
[CODE_BLOCK_31]
hook or a Server Action triggered from a Client Component.
Before
app/dashboard/layout.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_32]
After
app/ui/analytics-tracker.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_34]
app/dashboard/layout.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_36]
Preventing too many prefetches
Next.js automatically prefetches links in the viewport when using the
[CODE_BLOCK_38]
component.
There may be cases where you want to prevent this to avoid unnecessary usage of resources, such as when rendering a large list of links (e.g. an infinite scroll table).
You can disable prefetching by setting the
[CODE_BLOCK_39]
prop of the
[CODE_BLOCK_40]
component to
[CODE_BLOCK_41]
app/ui/no-prefetch-link.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_42]
However, this means static routes will only be fetched on click, and dynamic routes will wait for the server to render before navigating.
To reduce resource usage without disabling prefetch entirely, you can defer prefetching until the user hovers over a link. This targets only links the user is likely to visit.
app/ui/hover-prefetch-link.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_44]
Was this helpful?
supported.
Send