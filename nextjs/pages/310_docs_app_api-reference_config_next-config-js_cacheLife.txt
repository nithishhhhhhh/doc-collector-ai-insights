SOURCE URL: https://nextjs.org/docs/app/api-reference/config/next-config-js/cacheLife
SCRAPED: 2025-06-19 17:45:54
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
Configuration
next.config.js
cacheLife
cacheLife
This feature is currently available in the canary channel and subject to change. Try it out by
upgrading Next.js
, and share your feedback on
GitHub
--- CODE BLOCK 6 ---
next.config.js
--- END CODE BLOCK ---
option allows you to define
custom cache profiles
when using the
--- CODE BLOCK 8 ---
import type { NextConfig } from 'next'
const nextConfig: NextConfig = {
experimental: {
dynamicIO: true,
cacheLife: {
blog: {
stale: 3600, // 1 hour
revalidate: 900, // 15 minutes
expire: 86400, // 1 day
export default nextConfig
--- END CODE BLOCK ---
function inside components or functions, and within the scope of the
--- CODE BLOCK 9 ---
import type { NextConfig } from 'next'
const nextConfig: NextConfig = {
experimental: {
dynamicIO: true,
cacheLife: {
blog: {
stale: 3600, // 1 hour
revalidate: 900, // 15 minutes
expire: 86400, // 1 day
export default nextConfig
--- END CODE BLOCK ---
directive
Usage
To define a profile, enable the
--- CODE BLOCK 11 ---
import { unstable_cacheLife as cacheLife } from 'next/cache'
export async function getCachedData() {
'use cache'
cacheLife('blog')
const data = await fetch('/api/data')
return data
--- END CODE BLOCK ---
flag
and add the cache profile in the
--- CODE BLOCK 12 ---
import { unstable_cacheLife as cacheLife } from 'next/cache'
export async function getCachedData() {
'use cache'
cacheLife('blog')
const data = await fetch('/api/data')
return data
--- END CODE BLOCK ---
object in the
[CODE_BLOCK_6]
file. For example, a
[CODE_BLOCK_7]
profile:
next.config.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_8]
You can now use this custom
[CODE_BLOCK_10]
configuration in your component or function as follows:
app/actions.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_11]
Reference
The configuration object has key values with the following format:
Property
Value
Description
Requirement
[CODE_BLOCK_13]
[CODE_BLOCK_14]
Duration the client should cache a value without checking the server.
Optional
[CODE_BLOCK_15]
[CODE_BLOCK_16]
Frequency at which the cache should refresh on the server; stale values may be served while revalidating.
Optional
[CODE_BLOCK_17]
[CODE_BLOCK_18]
Maximum duration for which a value can remain stale before switching to dynamic.
Optional - Must be longer than
[CODE_BLOCK_19]
Was this helpful?
supported.
Send