SOURCE URL: https://nextjs.org/docs/app/guides/draft-mode
SCRAPED: 2025-06-19 17:46:51
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
App Router
Guides
Draft Mode
How to preview content with Draft Mode in Next.js
Draft Mode
allows you to preview draft content from your headless CMS in your Next.js application. This is useful for static pages that are generated at build time as it allows you to switch to
dynamic rendering
and see the draft changes without having to rebuild your entire site.
This page walks through how to enable and use Draft Mode.
Step 1: Create a Route Handler
Create a
Route Handler
. It can have any name, for example,
--- CODE BLOCK 1 ---
app/api/draft/route.ts
--- END CODE BLOCK ---
app/api/draft/route.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 2 ---
export async function GET(request: Request) {
return new Response('')
--- END CODE BLOCK ---
Then, import the
--- CODE BLOCK 6 ---
import { draftMode } from 'next/headers'
export async function GET(request: Request) {
const draft = await draftMode()
draft.enable()
return new Response('Draft mode is enabled')
--- END CODE BLOCK ---
function and call the
--- CODE BLOCK 7 ---
import { draftMode } from 'next/headers'
export async function GET(request: Request) {
const draft = await draftMode()
draft.enable()
return new Response('Draft mode is enabled')
--- END CODE BLOCK ---
method.
app/api/draft/route.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 10 ---
__prerender_bypass
--- END CODE BLOCK ---
This will set a
cookie
to enable draft mode. Subsequent requests containing this cookie will trigger draft mode and change the behavior of statically generated pages.
You can test this manually by visiting
--- CODE BLOCK 12 ---
https://<your-site>/api/draft?secret=<token>&slug=<path>
--- END CODE BLOCK ---
and looking at your browser’s developer tools. Notice the
--- CODE BLOCK 13 ---
https://<your-site>/api/draft?secret=<token>&slug=<path>
--- END CODE BLOCK ---
response header with a cookie named
--- CODE BLOCK 14 ---
<your-site>
--- END CODE BLOCK ---
Step 2: Access the Route Handler from your Headless CMS
These steps assume that the headless CMS you’re using supports setting
custom draft URLs
. If it doesn’t, you can still use this method to secure your draft URLs, but you’ll need to construct and access the draft URL manually. The specific steps will vary depending on which headless CMS you’re using.
To securely access the Route Handler from your headless CMS:
Create a
secret token string
using a token generator of your choice. This secret will only be known by your Next.js app and your headless CMS.
If your headless CMS supports setting custom draft URLs, specify a draft URL (this assumes that your Route Handler is located at
--- CODE BLOCK 18 ---
&slug=/posts/one
--- END CODE BLOCK ---
). For example:
Terminal
--- CODE BLOCK 20 ---
&slug=/posts/{entry.fields.slug}
--- END CODE BLOCK ---
--- CODE BLOCK 24 ---
import { draftMode } from 'next/headers'
import { redirect } from 'next/navigation'
export async function GET(request: Request) {
// Parse query string parameters
const { searchParams } = new URL(request.url)
const secret = searchParams.get('secret')
const slug = searchParams.get('slug')
// Check the secret and next parameters
// This secret should only be known to this Route Handler and the CMS
if (secret !== 'MY_SECRET_TOKEN' || !slug) {
return new Response('Invalid token', { status: 401 })
// Fetch the headless CMS to check if the provided `slug` exists
// getPostBySlug would implement the required fetching logic to the headless CMS
const post = await getPostBySlug(slug)
// If the slug doesn't exist prevent draft mode from being enabled
if (!post) {
return new Response('Invalid slug', { status: 401 })
// Enable Draft Mode by setting the cookie
const draft = await draftMode()
draft.enable()
// Redirect to the path from the fetched post
// We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilities
redirect(post.slug)
--- END CODE BLOCK ---
should be your deployment domain.
--- CODE BLOCK 25 ---
import { draftMode } from 'next/headers'
import { redirect } from 'next/navigation'
export async function GET(request: Request) {
// Parse query string parameters
const { searchParams } = new URL(request.url)
const secret = searchParams.get('secret')
const slug = searchParams.get('slug')
// Check the secret and next parameters
// This secret should only be known to this Route Handler and the CMS
if (secret !== 'MY_SECRET_TOKEN' || !slug) {
return new Response('Invalid token', { status: 401 })
// Fetch the headless CMS to check if the provided `slug` exists
// getPostBySlug would implement the required fetching logic to the headless CMS
const post = await getPostBySlug(slug)
// If the slug doesn't exist prevent draft mode from being enabled
if (!post) {
return new Response('Invalid slug', { status: 401 })
// Enable Draft Mode by setting the cookie
const draft = await draftMode()
draft.enable()
// Redirect to the path from the fetched post
// We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilities
redirect(post.slug)
--- END CODE BLOCK ---
should be replaced with the secret token you generated.
--- CODE BLOCK 26 ---
draftMode().isEnabled
--- END CODE BLOCK ---
should be the path for the page that you want to view. If you want to view
--- CODE BLOCK 29 ---
// page that fetches data
import { draftMode } from 'next/headers'
async function getData() {
const { isEnabled } = await draftMode()
const url = isEnabled
? 'https://draft.example.com'
: 'https://production.example.com'
const res = await fetch(url)
return res.json()
export default async function Page() {
const { title, desc } = await getData()
return (
<main>
<h1>{title}</h1>
<p>{desc}</p>
</main>
--- END CODE BLOCK ---
, then you should use
--- CODE BLOCK 30 ---
// page that fetches data
import { draftMode } from 'next/headers'
async function getData() {
const { isEnabled } = await draftMode()
const url = isEnabled
? 'https://draft.example.com'
: 'https://production.example.com'
const res = await fetch(url)
return res.json()
export default async function Page() {
const { title, desc } = await getData()
return (
<main>
<h1>{title}</h1>
<p>{desc}</p>
</main>
--- END CODE BLOCK ---
Your headless CMS might allow you to include a variable in the draft URL so that
[CODE_BLOCK_19]
can be set dynamically based on the CMS’s data like so:
[CODE_BLOCK_20]
In your Route Handler, check that the secret matches and that the
[CODE_BLOCK_21]
parameter exists (if not, the request should fail), call
[CODE_BLOCK_22]
to set the cookie. Then, redirect the browser to the path specified by
[CODE_BLOCK_23]
app/api/draft/route.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_24]
If it succeeds, then the browser will be redirected to the path you want to view with the draft mode cookie.
Step 3: Preview the Draft Content
The next step is to update your page to check the value of
[CODE_BLOCK_26]
If you request a page which has the cookie set, then data will be fetched at
request time
(instead of at build time).
Furthermore, the value of
[CODE_BLOCK_27]
will be
[CODE_BLOCK_28]
app/page.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_29]
If you access the draft Route Handler (with
[CODE_BLOCK_31]
[CODE_BLOCK_32]
) from your headless CMS or manually using the URL, you should now be able to see the draft content. And, if you update your draft without publishing, you should be able to view the draft.
Next Steps
See the API reference for more information on how to use Draft Mode.
draftMode
API Reference for the draftMode function.
Was this helpful?
supported.
Send