SOURCE URL: https://eslint.org/docs/latest/rules/sort-imports
SCRAPED: 2025-06-19 17:54:40
================================================================================

sort-imports
Enforce sorted
--- CODE BLOCK 4 ---
// single - Import single member.
import myMember from "my-module.js";
import {myOtherMember} from "my-other-module.js";
// multiple - Import multiple members.
import {foo, bar} from "my-module.js";
// all - Import all members, where myModule contains all the exported bindings.
import * as myModule from "my-module.js";
123456789
--- END CODE BLOCK ---
declarations within modules
Fixable
Some problems reported by this rule are automatically fixable by the
--- CODE BLOCK 5 ---
// single - Import single member.
import myMember from "my-module.js";
import {myOtherMember} from "my-other-module.js";
// multiple - Import multiple members.
import {foo, bar} from "my-module.js";
// all - Import all members, where myModule contains all the exported bindings.
import * as myModule from "my-module.js";
--- END CODE BLOCK ---
command line
option
Frozen
This rule is currently
frozen
and is not accepting feature requests.
--- CODE BLOCK 7 ---
// none - Import module without exported bindings.
import "my-module.js"
--- END CODE BLOCK ---
statement is used to import members (functions, objects or primitives) that have been exported from an external module. Using a specific member syntax:
--- CODE BLOCK 8 ---
// none - Import module without exported bindings.
import "my-module.js"
--- END CODE BLOCK ---
Copy code to clipboard
--- CODE BLOCK 13 ---
import { a, b } from 'foo.js'
--- END CODE BLOCK ---
statement can also import a module without exported bindings. Used when the module does not export anything, but runs it own code or changes the global context object.
--- CODE BLOCK 16 ---
ignoreDeclarationSort
--- END CODE BLOCK ---
Copy code to clipboard
When declaring multiple imports, a sorted list of
--- CODE BLOCK 20 ---
memberSyntaxSortOrder
--- END CODE BLOCK ---
declarations make it easier for developers to read the code and find necessary imports later. This rule is purely a matter of style.
Rule Details
This rule checks all
--- CODE BLOCK 21 ---
["none", "all", "multiple", "single"]
--- END CODE BLOCK ---
declarations and verifies that all imports are first sorted by the used member syntax and then alphabetically by the first member or alias name.
--- CODE BLOCK 26 ---
allowSeparatedGroups
--- END CODE BLOCK ---
option on the command line automatically fixes some problems reported by this rule: multiple members on a single line are automatically sorted (e.g.
--- CODE BLOCK 28 ---
"sort-imports": ["error", {
"ignoreCase": false,
"ignoreDeclarationSort": false,
"ignoreMemberSort": false,
"memberSyntaxSortOrder": ["none", "all", "multiple", "single"],
"allowSeparatedGroups": false
123456789
--- END CODE BLOCK ---
is corrected to
--- CODE BLOCK 29 ---
"sort-imports": ["error", {
"ignoreCase": false,
"ignoreDeclarationSort": false,
"ignoreMemberSort": false,
"memberSyntaxSortOrder": ["none", "all", "multiple", "single"],
"allowSeparatedGroups": false
--- END CODE BLOCK ---
), but multiple lines are not reordered.
Options
This rule accepts an object with its properties as
--- CODE BLOCK 30 ---
/*eslint sort-imports: "error"*/
import 'module-without-export.js';
import * as bar from 'bar.js';
import * as foo from 'foo.js';
import {alpha, beta} from 'alpha.js';
import {delta, gamma} from 'delta.js';
import a from 'baz.js';
import {b} from 'qux.js';
12345678
--- END CODE BLOCK ---
(default:
--- CODE BLOCK 31 ---
/*eslint sort-imports: "error"*/
import 'module-without-export.js';
import * as bar from 'bar.js';
import * as foo from 'foo.js';
import {alpha, beta} from 'alpha.js';
import {delta, gamma} from 'delta.js';
import a from 'baz.js';
import {b} from 'qux.js';
--- END CODE BLOCK ---
--- CODE BLOCK 32 ---
/*eslint sort-imports: "error"*/
import a from 'foo.js';
import b from 'bar.js';
import c from 'baz.js';
1234
--- END CODE BLOCK ---
(default:
--- CODE BLOCK 33 ---
/*eslint sort-imports: "error"*/
import a from 'foo.js';
import b from 'bar.js';
import c from 'baz.js';
--- END CODE BLOCK ---
--- CODE BLOCK 34 ---
/*eslint sort-imports: "error"*/
import 'foo.js'
import * as bar from 'bar.js';
import {a, b} from 'baz.js';
import c from 'qux.js';
import {d} from 'quux.js';
123456
--- END CODE BLOCK ---
(default:
--- CODE BLOCK 35 ---
/*eslint sort-imports: "error"*/
import 'foo.js'
import * as bar from 'bar.js';
import {a, b} from 'baz.js';
import c from 'qux.js';
import {d} from 'quux.js';
--- END CODE BLOCK ---
--- CODE BLOCK 36 ---
/*eslint sort-imports: "error"*/
import {a, b, c} from 'foo.js'
--- END CODE BLOCK ---
(default:
--- CODE BLOCK 37 ---
/*eslint sort-imports: "error"*/
import {a, b, c} from 'foo.js'
--- END CODE BLOCK ---
); all 4 items must be present in the array, but you can change the order:
--- CODE BLOCK 38 ---
/*eslint sort-imports: "error"*/
import b from 'foo.js';
import a from 'bar.js';
--- END CODE BLOCK ---
= import module without exported bindings.
--- CODE BLOCK 39 ---
/*eslint sort-imports: "error"*/
import b from 'foo.js';
import a from 'bar.js';
--- END CODE BLOCK ---
= import all members provided by exported bindings.
--- CODE BLOCK 40 ---
/*eslint sort-imports: "error"*/
import a from 'foo.js';
import A from 'bar.js';
--- END CODE BLOCK ---
= import multiple members.
--- CODE BLOCK 41 ---
/*eslint sort-imports: "error"*/
import a from 'foo.js';
import A from 'bar.js';
--- END CODE BLOCK ---
= import single member.
--- CODE BLOCK 42 ---
/*eslint sort-imports: "error"*/
import {c, d} from 'foo.js';
import {a, b} from 'bar.js';
--- END CODE BLOCK ---
(default:
--- CODE BLOCK 43 ---
/*eslint sort-imports: "error"*/
import {c, d} from 'foo.js';
import {a, b} from 'bar.js';
--- END CODE BLOCK ---
Default option settings are:
--- CODE BLOCK 44 ---
/*eslint sort-imports: "error"*/
import a from 'foo.js';
import {b, c} from 'bar.js';
--- END CODE BLOCK ---
Copy code to clipboard
Examples
Default settings
Examples of
correct
code for this rule when using default options:
Open in Playground
--- CODE BLOCK 46 ---
/*eslint sort-imports: "error"*/
import {a} from 'foo.js';
import {b, c} from 'bar.js';
--- END CODE BLOCK ---
Open in Playground
--- CODE BLOCK 48 ---
/*eslint sort-imports: "error"*/
import a from 'foo.js';
import * as b from 'bar.js';
--- END CODE BLOCK ---
Open in Playground
--- CODE BLOCK 50 ---
/*eslint sort-imports: "error"*/
import {b, a, c} from 'foo.js'
--- END CODE BLOCK ---
Open in Playground
--- CODE BLOCK 55 ---
{ "ignoreCase": false }
--- END CODE BLOCK ---
Examples of
incorrect
code for this rule when using default options:
Open in Playground
--- CODE BLOCK 57 ---
/*eslint sort-imports: ["error", { "ignoreCase": false }]*/
import a from 'bar.js';
import B from 'foo.js';
import c from 'baz.js';
--- END CODE BLOCK ---
Open in Playground
--- CODE BLOCK 59 ---
/*eslint sort-imports: ["error", { "ignoreCase": false }]*/
import B from 'bar.js';
import a from 'foo.js';
import c from 'baz.js';
1234
--- END CODE BLOCK ---
Open in Playground
--- CODE BLOCK 61 ---
{ "ignoreCase": true }
--- END CODE BLOCK ---
Open in Playground
--- CODE BLOCK 63 ---
/*eslint sort-imports: ["error", { "ignoreCase": true }]*/
import a from 'bar.js';
import B from 'foo.js';
import c from 'baz.js';
--- END CODE BLOCK ---
Open in Playground
--- CODE BLOCK 65 ---
/*eslint sort-imports: ["error", { "ignoreCase": true }]*/
import B from 'foo.js';
import a from 'bar.js';
--- END CODE BLOCK ---
Open in Playground
--- CODE BLOCK 67 ---
ignoreDeclarationSort
--- END CODE BLOCK ---
Open in Playground
--- CODE BLOCK 71 ---
/*eslint sort-imports: ["error", { "ignoreDeclarationSort": false }]*/
import b from 'foo.js'
import a from 'bar.js'
--- END CODE BLOCK ---
--- CODE BLOCK 73 ---
{ "ignoreDeclarationSort": false }
--- END CODE BLOCK ---
When
--- CODE BLOCK 74 ---
/*eslint sort-imports: ["error", { "ignoreDeclarationSort": false }]*/
import a from 'bar.js';
import b from 'foo.js';
--- END CODE BLOCK ---
(default), uppercase letters of the alphabet must always precede lowercase letters.
When
--- CODE BLOCK 75 ---
/*eslint sort-imports: ["error", { "ignoreDeclarationSort": false }]*/
import a from 'bar.js';
import b from 'foo.js';
--- END CODE BLOCK ---
, the rule ignores the case-sensitivity of the imports local name.
Examples of
incorrect
code for this rule with the default
--- CODE BLOCK 76 ---
{ "ignoreDeclarationSort": true }
--- END CODE BLOCK ---
option:
Open in Playground
--- CODE BLOCK 77 ---
/*eslint sort-imports: ["error", { "ignoreDeclarationSort": true }]*/
import b from 'foo.js'
import a from 'bar.js'
--- END CODE BLOCK ---
Examples of
correct
code for this rule with the default
--- CODE BLOCK 79 ---
{ "ignoreDeclarationSort": true }
--- END CODE BLOCK ---
option:
Open in Playground
--- CODE BLOCK 80 ---
/*eslint sort-imports: ["error", { "ignoreDeclarationSort": true }]*/
import {b, a, c} from 'foo.js';
--- END CODE BLOCK ---
Examples of
correct
code for this rule with
--- CODE BLOCK 82 ---
ignoreMemberSort
--- END CODE BLOCK ---
option:
Open in Playground
--- CODE BLOCK 86 ---
{ "ignoreMemberSort": false }
--- END CODE BLOCK ---
Examples of
incorrect
code for this rule with the
--- CODE BLOCK 88 ---
/*eslint sort-imports: ["error", { "ignoreMemberSort": false }]*/
import {b, a, c} from 'foo.js'
--- END CODE BLOCK ---
option:
Open in Playground
--- CODE BLOCK 89 ---
{ "ignoreMemberSort": false }
--- END CODE BLOCK ---
--- CODE BLOCK 91 ---
/*eslint sort-imports: ["error", { "ignoreMemberSort": false }]*/
import {a, b, c} from 'foo.js';
--- END CODE BLOCK ---
When
--- CODE BLOCK 92 ---
{ "ignoreMemberSort": true }
--- END CODE BLOCK ---
, the rule ignores the sorting of import declaration statements. Default is
--- CODE BLOCK 93 ---
/*eslint sort-imports: ["error", { "ignoreMemberSort": true }]*/
import {b, a, c} from 'foo.js'
--- END CODE BLOCK ---
Examples of
incorrect
code for this rule with the default
--- CODE BLOCK 94 ---
/*eslint sort-imports: ["error", { "ignoreMemberSort": true }]*/
import {b, a, c} from 'foo.js'
--- END CODE BLOCK ---
option:
Open in Playground
--- CODE BLOCK 95 ---
{ "ignoreMemberSort": true }
--- END CODE BLOCK ---
Examples of
correct
code for this rule with the default
--- CODE BLOCK 97 ---
/*eslint sort-imports: ["error", { "ignoreMemberSort": true }]*/
import b from 'foo.js';
import a from 'bar.js';
--- END CODE BLOCK ---
option:
Open in Playground
--- CODE BLOCK 98 ---
memberSyntaxSortOrder
--- END CODE BLOCK ---
Examples of
correct
code for this rule with the
--- CODE BLOCK 104 ---
{ "memberSyntaxSortOrder": ["none", "all", "multiple", "single"] }
--- END CODE BLOCK ---
option:
Open in Playground
--- CODE BLOCK 105 ---
/*eslint sort-imports: "error"*/
import a from 'foo.js';
import * as b from 'bar.js';
--- END CODE BLOCK ---
Examples of
incorrect
code for this rule with the
--- CODE BLOCK 107 ---
{ "memberSyntaxSortOrder": ['single', 'all', 'multiple', 'none'] }
--- END CODE BLOCK ---
option:
Open in Playground
--- CODE BLOCK 108 ---
/*eslint sort-imports: ["error", { "memberSyntaxSortOrder": ['single', 'all', 'multiple', 'none'] }]*/
import a from 'foo.js';
import * as b from 'bar.js';
1234
--- END CODE BLOCK ---
--- CODE BLOCK 110 ---
{ "memberSyntaxSortOrder": ['all', 'single', 'multiple', 'none'] }
--- END CODE BLOCK ---
When
--- CODE BLOCK 111 ---
/*eslint sort-imports: ["error", { "memberSyntaxSortOrder": ['all', 'single', 'multiple', 'none'] }]*/
import * as foo from 'foo.js';
import z from 'zoo.js';
import {a, b} from 'foo.js';
12345
--- END CODE BLOCK ---
, the rule ignores the member sorting within a
--- CODE BLOCK 112 ---
/*eslint sort-imports: ["error", { "memberSyntaxSortOrder": ['all', 'single', 'multiple', 'none'] }]*/
import * as foo from 'foo.js';
import z from 'zoo.js';
import {a, b} from 'foo.js';
--- END CODE BLOCK ---
member import declaration. Default is
--- CODE BLOCK 113 ---
allowSeparatedGroups
--- END CODE BLOCK ---
Examples of
incorrect
code for this rule with the default
--- CODE BLOCK 116 ---
{ "allowSeparatedGroups": true }
--- END CODE BLOCK ---
option:
Open in Playground
--- CODE BLOCK 117 ---
/*eslint sort-imports: ["error", { "allowSeparatedGroups": true }]*/
import b from 'foo.js';
import c from 'bar.js';
import a from 'baz.js';
12345
--- END CODE BLOCK ---
Examples of
correct
code for this rule with the default
--- CODE BLOCK 119 ---
{ "allowSeparatedGroups": true }
--- END CODE BLOCK ---
option:
Open in Playground
--- CODE BLOCK 120 ---
/*eslint sort-imports: ["error", { "allowSeparatedGroups": true }]*/
import b from 'foo.js';
import c from 'bar.js';
import a from 'baz.js';
123456
--- END CODE BLOCK ---
Examples of
correct
code for this rule with the
--- CODE BLOCK 122 ---
/*eslint sort-imports: ["error", { "allowSeparatedGroups": true }]*/
import b from 'foo.js';
import c from 'bar.js';
// comment
import a from 'baz.js';
123456
--- END CODE BLOCK ---
option:
Open in Playground
--- CODE BLOCK 123 ---
/*eslint sort-imports: ["error", { "allowSeparatedGroups": true }]*/
import b from 'foo.js';
import c from 'bar.js';
// comment
import a from 'baz.js';
--- END CODE BLOCK ---
Examples of
incorrect
code for this rule with the
--- CODE BLOCK 125 ---
/*eslint sort-imports: ["error", { "allowSeparatedGroups": true }]*/
import b from 'foo.js';
import c from 'bar.js';
quux();
import a from 'baz.js';
--- END CODE BLOCK ---
option:
Open in Playground
[CODE_BLOCK_96]
[CODE_BLOCK_98]
This option takes an array with four predefined elements, the order of elements specifies the order of import styles.
Default order is
[CODE_BLOCK_99]
There are four different styles and the default member syntax sort order is:
[CODE_BLOCK_100]
- import module without exported bindings.
[CODE_BLOCK_101]
- import all members provided by exported bindings.
[CODE_BLOCK_102]
- import multiple members.
[CODE_BLOCK_103]
- import single member.
All four options must be specified in the array, but you can customize their order.
Examples of
incorrect
code for this rule with the default
[CODE_BLOCK_104]
option:
Open in Playground
[CODE_BLOCK_105]
Examples of
correct
code for this rule with the
[CODE_BLOCK_107]
option:
Open in Playground
[CODE_BLOCK_108]
Examples of
correct
code for this rule with the
[CODE_BLOCK_110]
option:
Open in Playground
[CODE_BLOCK_111]
[CODE_BLOCK_113]
When
[CODE_BLOCK_114]
, the rule checks the sorting of import declaration statements only for those that appear on consecutive lines. Default is
[CODE_BLOCK_115]
In other words, a blank line or a comment line or line with any other statement after an import declaration statement will reset the sorting of import declaration statements.
Examples of
incorrect
code for this rule with the
[CODE_BLOCK_116]
option:
Open in Playground
[CODE_BLOCK_117]
Examples of
correct
code for this rule with the
[CODE_BLOCK_119]
option:
Open in Playground
[CODE_BLOCK_120]
Open in Playground
[CODE_BLOCK_122]
Open in Playground
[CODE_BLOCK_124]
When Not To Use It
This rule is a formatting preference and not following it won’t negatively affect the quality of your code. If alphabetizing imports isn’t a part of your coding standards, then you can leave this rule disabled.
Related Rules
sort-keys
sort-vars
Version
This rule was introduced in ESLint v2.0.0-beta.1.
Resources
Rule source
Tests source
Edit this page