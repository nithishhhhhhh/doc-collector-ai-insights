SOURCE URL: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all
SCRAPED: 2025-06-19 18:32:04
================================================================================

--- CODE BLOCK 1 ---
Promise.all()
--- END CODE BLOCK ---
static method takes an iterable of promises as input and returns a single
--- CODE BLOCK 3 ---
const promise1 = Promise.resolve(3);
const promise2 = 42;
const promise3 = new Promise((resolve, reject) => {
setTimeout(resolve, 100, "foo");
Promise.all([promise1, promise2, promise3]).then((values) => {
console.log(values);
// Expected output: Array [3, 42, "foo"]
--- END CODE BLOCK ---
. This returned promise fulfills when all of the input's promises fulfill (including when an empty iterable is passed), with an array of the fulfillment values. It rejects when any of the input's promises rejects, with this first rejection reason.
Try it
--- CODE BLOCK 4 ---
const promise1 = Promise.resolve(3);
const promise2 = 42;
const promise3 = new Promise((resolve, reject) => {
setTimeout(resolve, 100, "foo");
Promise.all([promise1, promise2, promise3]).then((values) => {
console.log(values);
// Expected output: Array [3, 42, "foo"]
--- END CODE BLOCK ---
Syntax
Copy to Clipboard
--- CODE BLOCK 6 ---
Promise.all(iterable)
--- END CODE BLOCK ---
Parameters
--- CODE BLOCK 15 ---
Promise.all()
--- END CODE BLOCK ---
iterable
(such as an
--- CODE BLOCK 16 ---
Promise.allSettled()
--- END CODE BLOCK ---
) of promises.
Return value
--- CODE BLOCK 17 ---
allSettled()
--- END CODE BLOCK ---
that is:
Already fulfilled
, if the
--- CODE BLOCK 18 ---
Promise.all
--- END CODE BLOCK ---
passed is empty.
Asynchronously fulfilled
, when all the promises in the given
--- CODE BLOCK 19 ---
const p1 = Promise.resolve(3);
const p2 = 1337;
const p3 = new Promise((resolve, reject) => {
setTimeout(() => {
resolve("foo");
}, 100);
Promise.all([p1, p2, p3]).then((values) => {
console.log(values); // [3, 1337, "foo"]
--- END CODE BLOCK ---
fulfill. The fulfillment value is an array of fulfillment values, in the order of the promises passed, regardless of completion order. If the
--- CODE BLOCK 20 ---
const p1 = Promise.resolve(3);
const p2 = 1337;
const p3 = new Promise((resolve, reject) => {
setTimeout(() => {
resolve("foo");
}, 100);
Promise.all([p1, p2, p3]).then((values) => {
console.log(values); // [3, 1337, "foo"]
--- END CODE BLOCK ---
passed is non-empty but contains no pending promises, the returned promise is still asynchronously (instead of synchronously) fulfilled.
Asynchronously rejected
, when any of the promises in the given
--- CODE BLOCK 22 ---
// All values are non-promises, so the returned promise gets fulfilled
const p = Promise.all([1, 2, 3]);
// The only input promise is already fulfilled,
// so the returned promise gets fulfilled
const p2 = Promise.all([1, 2, 3, Promise.resolve(444)]);
// One (and the only) input promise is rejected,
// so the returned promise gets rejected
const p3 = Promise.all([1, 2, 3, Promise.reject(new Error("bad"))]);
// Using setTimeout, we can execute code after the queue is empty
setTimeout(() => {
console.log(p);
console.log(p2);
console.log(p3);
// Logs:
// Promise { <state>: "fulfilled", <value>: Array[3] }
// Promise { <state>: "fulfilled", <value>: Array[4] }
// Promise { <state>: "rejected", <reason>: Error: bad }
--- END CODE BLOCK ---
rejects. The rejection reason is the rejection reason of the first promise that was rejected.
Description
--- CODE BLOCK 23 ---
// All values are non-promises, so the returned promise gets fulfilled
const p = Promise.all([1, 2, 3]);
// The only input promise is already fulfilled,
// so the returned promise gets fulfilled
const p2 = Promise.all([1, 2, 3, Promise.resolve(444)]);
// One (and the only) input promise is rejected,
// so the returned promise gets rejected
const p3 = Promise.all([1, 2, 3, Promise.reject(new Error("bad"))]);
// Using setTimeout, we can execute code after the queue is empty
setTimeout(() => {
console.log(p);
console.log(p2);
console.log(p3);
// Logs:
// Promise { <state>: "fulfilled", <value>: Array[3] }
// Promise { <state>: "fulfilled", <value>: Array[4] }
// Promise { <state>: "rejected", <reason>: Error: bad }
--- END CODE BLOCK ---
method is one of the
promise concurrency
methods. It can be useful for aggregating the results of multiple promises. It is typically used when there are multiple related asynchronous tasks that the overall code relies on to work successfully â€” all of whom we want to fulfill before the code execution continues.
--- CODE BLOCK 24 ---
Promise.all
--- END CODE BLOCK ---
will reject immediately upon
of the input promises rejecting. In comparison, the promise returned by
--- CODE BLOCK 26 ---
// Passing an array of promises that are already resolved,
// to trigger Promise.all as soon as possible
const resolvedPromisesArray = [Promise.resolve(33), Promise.resolve(44)];
const p = Promise.all(resolvedPromisesArray);
// Immediately logging the value of p
console.log(p);
// Using setTimeout, we can execute code after the queue is empty
setTimeout(() => {
console.log("the queue is now empty");
console.log(p);
// Logs, in order:
// Promise { <state>: "pending" }
// the queue is now empty
// Promise { <state>: "fulfilled", <value>: Array[2] }
--- END CODE BLOCK ---
will wait for all input promises to complete, regardless of whether or not one rejects. Use
--- CODE BLOCK 27 ---
// Passing an array of promises that are already resolved,
// to trigger Promise.all as soon as possible
const resolvedPromisesArray = [Promise.resolve(33), Promise.resolve(44)];
const p = Promise.all(resolvedPromisesArray);
// Immediately logging the value of p
console.log(p);
// Using setTimeout, we can execute code after the queue is empty
setTimeout(() => {
console.log("the queue is now empty");
console.log(p);
// Logs, in order:
// Promise { <state>: "pending" }
// the queue is now empty
// Promise { <state>: "fulfilled", <value>: Array[2] }
--- END CODE BLOCK ---
if you need the final result of every promise in the input iterable.
Examples
Using Promise.all()
--- CODE BLOCK 28 ---
Promise.all
--- END CODE BLOCK ---
waits for all fulfillments (or the first rejection).
Copy to Clipboard
--- CODE BLOCK 29 ---
const mixedPromisesArray = [
Promise.resolve(33),
Promise.reject(new Error("bad")),
const p = Promise.all(mixedPromisesArray);
console.log(p);
setTimeout(() => {
console.log("the queue is now empty");
console.log(p);
// Logs:
// Promise { <state>: "pending" }
// the queue is now empty
// Promise { <state>: "rejected", <reason>: Error: bad }
--- END CODE BLOCK ---
If the
--- CODE BLOCK 31 ---
Promise.all
--- END CODE BLOCK ---
contains non-promise values, they will be ignored, but still counted in the returned promise array value (if the promise is fulfilled):
Copy to Clipboard
--- CODE BLOCK 33 ---
const p = Promise.all([]); // Will be immediately resolved
const p2 = Promise.all([1337, "hi"]); // Non-promise values are ignored, but the evaluation is done asynchronously
console.log(p);
console.log(p2);
setTimeout(() => {
console.log("the queue is now empty");
console.log(p2);
// Logs:
// Promise { <state>: "fulfilled", <value>: Array[0] }
// Promise { <state>: "pending" }
// the queue is now empty
// Promise { <state>: "fulfilled", <value>: Array[2] }
--- END CODE BLOCK ---
Asynchronicity or synchronicity of Promise.all
This following example demonstrates the asynchronicity of
--- CODE BLOCK 35 ---
function promptForDishChoice() {
return new Promise((resolve, reject) => {
const dialog = document.createElement("dialog");
dialog.innerHTML = `
<form method="dialog">
<p>What would you like to eat?</p>
<select>
<option value="pizza">Pizza</option>
<option value="pasta">Pasta</option>
<option value="salad">Salad</option>
</select>
<menu>
<li><button value="cancel">Cancel</button></li>
<li><button type="submit" value="ok">OK</button></li>
</menu>
</form>
dialog.addEventListener("close", () => {
if (dialog.returnValue === "ok") {
resolve(dialog.querySelector("select").value);
} else {
reject(new Error("User cancelled dialog"));
document.body.appendChild(dialog);
dialog.showModal();
async function fetchPrices() {
const response = await fetch("/prices");
return await response.json();
--- END CODE BLOCK ---
when a non-empty
--- CODE BLOCK 36 ---
function promptForDishChoice() {
return new Promise((resolve, reject) => {
const dialog = document.createElement("dialog");
dialog.innerHTML = `
<form method="dialog">
<p>What would you like to eat?</p>
<select>
<option value="pizza">Pizza</option>
<option value="pasta">Pasta</option>
<option value="salad">Salad</option>
</select>
<menu>
<li><button value="cancel">Cancel</button></li>
<li><button type="submit" value="ok">OK</button></li>
</menu>
</form>
dialog.addEventListener("close", () => {
if (dialog.returnValue === "ok") {
resolve(dialog.querySelector("select").value);
} else {
reject(new Error("User cancelled dialog"));
document.body.appendChild(dialog);
dialog.showModal();
async function fetchPrices() {
const response = await fetch("/prices");
return await response.json();
--- END CODE BLOCK ---
is passed:
Copy to Clipboard
--- CODE BLOCK 37 ---
async function getPrice() {
const choice = await promptForDishChoice();
const prices = await fetchPrices();
return prices[choice];
--- END CODE BLOCK ---
The same thing happens if
--- CODE BLOCK 39 ---
promptForDishChoice
--- END CODE BLOCK ---
rejects:
Copy to Clipboard
--- CODE BLOCK 40 ---
fetchPrices
--- END CODE BLOCK ---
--- CODE BLOCK 43 ---
async function getPrice() {
const [choice, prices] = await Promise.all([
promptForDishChoice(),
fetchPrices(),
return prices[choice];
--- END CODE BLOCK ---
resolves synchronously if and only if the
--- CODE BLOCK 44 ---
async function getPrice() {
const [choice, prices] = await Promise.all([
promptForDishChoice(),
fetchPrices(),
return prices[choice];
--- END CODE BLOCK ---
passed is empty:
Copy to Clipboard
--- CODE BLOCK 45 ---
Promise.all
--- END CODE BLOCK ---
Using Promise.all() with async functions
Within
async functions
, it's very common to "over-await" your code. For example, given the following functions:
Copy to Clipboard
--- CODE BLOCK 48 ---
Promise.all
--- END CODE BLOCK ---
You may write a function like this:
Copy to Clipboard
--- CODE BLOCK 50 ---
async function getPrice() {
const [choice, prices] = await Promise.all([
promptForDishChoice,
fetchPrices,
// `choice` and `prices` are still the original async functions;
// Promise.all() does nothing to non-promises
--- END CODE BLOCK ---
However, note that the execution of
--- CODE BLOCK 52 ---
Promise.all
--- END CODE BLOCK ---
--- CODE BLOCK 53 ---
const p1 = new Promise((resolve, reject) => {
setTimeout(() => resolve("one"), 1000);
const p2 = new Promise((resolve, reject) => {
setTimeout(() => resolve("two"), 2000);
const p3 = new Promise((resolve, reject) => {
setTimeout(() => resolve("three"), 3000);
const p4 = new Promise((resolve, reject) => {
setTimeout(() => resolve("four"), 4000);
const p5 = new Promise((resolve, reject) => {
reject(new Error("reject"));
// Using .catch:
Promise.all([p1, p2, p3, p4, p5])
.then((values) => {
console.log(values);
.catch((error) => {
console.error(error.message);
// Logs:
// "reject"
--- END CODE BLOCK ---
don't depend on the result of each other. While the user is choosing their dish, it's fine for the prices to be fetched in the background, but in the code above, the
--- CODE BLOCK 54 ---
const p1 = new Promise((resolve, reject) => {
setTimeout(() => resolve("one"), 1000);
const p2 = new Promise((resolve, reject) => {
setTimeout(() => resolve("two"), 2000);
const p3 = new Promise((resolve, reject) => {
setTimeout(() => resolve("three"), 3000);
const p4 = new Promise((resolve, reject) => {
setTimeout(() => resolve("four"), 4000);
const p5 = new Promise((resolve, reject) => {
reject(new Error("reject"));
// Using .catch:
Promise.all([p1, p2, p3, p4, p5])
.then((values) => {
console.log(values);
.catch((error) => {
console.error(error.message);
// Logs:
// "reject"
--- END CODE BLOCK ---
operator causes the async function to pause until the choice is made, and then again until the prices are fetched. We can use
--- CODE BLOCK 55 ---
const p1 = new Promise((resolve, reject) => {
setTimeout(() => resolve("p1_delayed_resolution"), 1000);
const p2 = new Promise((resolve, reject) => {
reject(new Error("p2_immediate_rejection"));
Promise.all([p1.catch((error) => error), p2.catch((error) => error)]).then(
(values) => {
console.log(values[0]); // "p1_delayed_resolution"
console.error(values[1]); // "Error: p2_immediate_rejection"
--- END CODE BLOCK ---
to run them concurrently, so that the user doesn't have to wait for the prices to be fetched before the result is given:
Copy to Clipboard
--- CODE BLOCK 56 ---
const p1 = new Promise((resolve, reject) => {
setTimeout(() => resolve("p1_delayed_resolution"), 1000);
const p2 = new Promise((resolve, reject) => {
reject(new Error("p2_immediate_rejection"));
Promise.all([p1.catch((error) => error), p2.catch((error) => error)]).then(
(values) => {
console.log(values[0]); // "p1_delayed_resolution"
console.error(values[1]); // "Error: p2_immediate_rejection"
--- END CODE BLOCK ---
--- CODE BLOCK 59 ---
Promise.any()
--- END CODE BLOCK ---
is the best choice of
concurrency method
here, because error handling is intuitive â€” if any of the promises reject, the result is no longer available, so the whole
--- CODE BLOCK 60 ---
Promise.race()
--- END CODE BLOCK ---
expression throws.
[CODE_BLOCK_47]
accepts an iterable of promises, so if you are using it to run several async functions concurrently, you need to call the async functions and use the returned promises. Directly passing the functions to
[CODE_BLOCK_48]
does not work, since they are not promises.
Copy to Clipboard
[CODE_BLOCK_49]
Promise.all fail-fast behavior
[CODE_BLOCK_51]
is rejected if any of the elements are rejected. For example, if you pass in four promises that resolve after a timeout and one promise that rejects immediately, then
[CODE_BLOCK_52]
will reject immediately.
Copy to Clipboard
[CODE_BLOCK_53]
It is possible to change this behavior by handling possible rejections:
Copy to Clipboard
[CODE_BLOCK_55]
Specifications
Specification
ECMAScriptÂ® 2026 LanguageÂ Specification
sec-promise.all
Browser compatibility
See also
[CODE_BLOCK_57]
[CODE_BLOCK_58]
[CODE_BLOCK_59]
[CODE_BLOCK_60]
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
May 22, 2025
MDN contributors
View this page on GitHub
Report a problem with this content