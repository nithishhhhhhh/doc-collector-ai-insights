SOURCE URL: https://developer.mozilla.org/docs/Web/API/Request
SCRAPED: 2025-06-19 18:04:32
================================================================================

Note:
This feature is available in
Web Workers
--- CODE BLOCK 5 ---
FetchEvent.request
--- END CODE BLOCK ---
interface of the
Fetch API
represents a resource request.
You can create a new
--- CODE BLOCK 8 ---
Request.body
--- END CODE BLOCK ---
object using the
--- CODE BLOCK 9 ---
ReadableStream
--- END CODE BLOCK ---
constructor, but you are more likely to encounter a
--- CODE BLOCK 10 ---
Request.bodyUsed
--- END CODE BLOCK ---
object being returned as the result of another API operation, such as a service worker
--- CODE BLOCK 13 ---
Request.cache
--- END CODE BLOCK ---
Constructor
--- CODE BLOCK 17 ---
Request.credentials
--- END CODE BLOCK ---
Creates a new
--- CODE BLOCK 19 ---
same-origin
--- END CODE BLOCK ---
object.
Instance properties
--- CODE BLOCK 21 ---
same-origin
--- END CODE BLOCK ---
Read only
--- CODE BLOCK 22 ---
Request.destination
--- END CODE BLOCK ---
of the body contents.
--- CODE BLOCK 23 ---
Request.headers
--- END CODE BLOCK ---
Read only
Stores
--- CODE BLOCK 25 ---
Request.integrity
--- END CODE BLOCK ---
--- CODE BLOCK 26 ---
sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=
--- END CODE BLOCK ---
to indicate whether or not the body has been used in a request yet.
--- CODE BLOCK 27 ---
Request.isHistoryNavigation
--- END CODE BLOCK ---
Read only
Contains the cache mode of the request (e.g.,
--- CODE BLOCK 28 ---
Request.keepalive
--- END CODE BLOCK ---
--- CODE BLOCK 32 ---
Request.method
--- END CODE BLOCK ---
--- CODE BLOCK 35 ---
Request.mode
--- END CODE BLOCK ---
--- CODE BLOCK 38 ---
same-origin
--- END CODE BLOCK ---
Read only
Contains a value controlling whether credentials should be included with the request (e.g.,
--- CODE BLOCK 40 ---
Request.redirect
--- END CODE BLOCK ---
--- CODE BLOCK 44 ---
Request.referrer
--- END CODE BLOCK ---
--- CODE BLOCK 46 ---
Request.referrerPolicy
--- END CODE BLOCK ---
). The default is
--- CODE BLOCK 47 ---
no-referrer
--- END CODE BLOCK ---
--- CODE BLOCK 48 ---
Request.signal
--- END CODE BLOCK ---
Read only
A string describing the type of content being requested.
--- CODE BLOCK 49 ---
AbortSignal
--- END CODE BLOCK ---
Read only
Contains the associated
--- CODE BLOCK 50 ---
Request.url
--- END CODE BLOCK ---
object of the request.
--- CODE BLOCK 51 ---
Request.arrayBuffer()
--- END CODE BLOCK ---
Read only
Contains the
subresource integrity
value of the request (e.g.,
--- CODE BLOCK 52 ---
ArrayBuffer
--- END CODE BLOCK ---
--- CODE BLOCK 53 ---
Request.blob()
--- END CODE BLOCK ---
Read only
A boolean indicating whether the request is a history navigation.
--- CODE BLOCK 55 ---
Request.bytes()
--- END CODE BLOCK ---
Read only
Contains the request's
--- CODE BLOCK 57 ---
Request.clone()
--- END CODE BLOCK ---
setting (
--- CODE BLOCK 59 ---
Request.formData()
--- END CODE BLOCK ---
--- CODE BLOCK 61 ---
Request.json()
--- END CODE BLOCK ---
), which indicates whether the browser will keep the associated request alive if the page that initiated it is unloaded before the request is complete.
--- CODE BLOCK 63 ---
Request.text()
--- END CODE BLOCK ---
Read only
Contains the request's method (
--- CODE BLOCK 65 ---
const request = new Request("https://www.mozilla.org/favicon.ico");
const url = request.url;
const method = request.method;
const credentials = request.credentials;
--- END CODE BLOCK ---
--- CODE BLOCK 66 ---
const request = new Request("https://www.mozilla.org/favicon.ico");
const url = request.url;
const method = request.method;
const credentials = request.credentials;
--- END CODE BLOCK ---
, etc.)
--- CODE BLOCK 69 ---
fetch(request)
.then((response) => response.blob())
.then((blob) => {
image.src = URL.createObjectURL(blob);
--- END CODE BLOCK ---
Read only
Contains the mode of the request (e.g.,
--- CODE BLOCK 70 ---
fetch(request)
.then((response) => response.blob())
.then((blob) => {
image.src = URL.createObjectURL(blob);
--- END CODE BLOCK ---
--- CODE BLOCK 72 ---
const request = new Request("https://example.com", {
method: "POST",
body: '{"foo": "bar"}',
const url = request.url;
const method = request.method;
const credentials = request.credentials;
const bodyUsed = request.bodyUsed;
--- END CODE BLOCK ---
--- CODE BLOCK 73 ---
const request = new Request("https://example.com", {
method: "POST",
body: '{"foo": "bar"}',
const url = request.url;
const method = request.method;
const credentials = request.credentials;
const bodyUsed = request.bodyUsed;
--- END CODE BLOCK ---
--- CODE BLOCK 75 ---
ArrayBuffer
--- END CODE BLOCK ---
--- CODE BLOCK 79 ---
URLSearchParams
--- END CODE BLOCK ---
Read only
Contains the mode for how redirects are handled. It may be one of
--- CODE BLOCK 80 ---
ReadableStream
--- END CODE BLOCK ---
--- CODE BLOCK 84 ---
fetch(request)
.then((response) => {
if (response.status !== 200) {
throw new Error("Something went wrong on API server!");
return response.json();
.then((response) => {
console.debug(response);
// …
.catch((error) => {
console.error(error);
--- END CODE BLOCK ---
, or
--- CODE BLOCK 85 ---
fetch(request)
.then((response) => {
if (response.status !== 200) {
throw new Error("Something went wrong on API server!");
return response.json();
.then((response) => {
console.debug(response);
// …
.catch((error) => {
console.error(error);
--- END CODE BLOCK ---
[CODE_BLOCK_44]
Read only
Contains the referrer of the request (e.g.,
[CODE_BLOCK_45]
[CODE_BLOCK_46]
Read only
Contains the referrer policy of the request (e.g.,
[CODE_BLOCK_47]
[CODE_BLOCK_48]
Read only
Returns the
[CODE_BLOCK_49]
associated with the request
[CODE_BLOCK_50]
Read only
Contains the URL of the request.
Instance methods
[CODE_BLOCK_51]
Returns a promise that resolves with an
[CODE_BLOCK_52]
representation of the request body.
[CODE_BLOCK_53]
Returns a promise that resolves with a
[CODE_BLOCK_54]
representation of the request body.
[CODE_BLOCK_55]
Returns a promise that resolves with a
[CODE_BLOCK_56]
representation of the request body.
[CODE_BLOCK_57]
Creates a copy of the current
[CODE_BLOCK_58]
object.
[CODE_BLOCK_59]
Returns a promise that resolves with a
[CODE_BLOCK_60]
representation of the request body.
[CODE_BLOCK_61]
Returns a promise that resolves with the result of parsing the request body as
[CODE_BLOCK_62]
[CODE_BLOCK_63]
Returns a promise that resolves with a text representation of the request body.
Note:
The request body functions can be run only once; subsequent calls will reject with TypeError showing that the body stream has already used.
Examples
In the following snippet, we create a new request using the
[CODE_BLOCK_64]
constructor (for an image file in the same directory as the script), then return some property values of the request:
Copy to Clipboard
[CODE_BLOCK_65]
You could then fetch this request by passing the
[CODE_BLOCK_67]
object in as a parameter to a
[CODE_BLOCK_68]
call, for example:
Copy to Clipboard
[CODE_BLOCK_69]
In the following snippet, we create a new request using the
[CODE_BLOCK_71]
constructor with some initial data and body content for an API request which needs a body payload:
Copy to Clipboard
[CODE_BLOCK_72]
Note:
The body can only be a
[CODE_BLOCK_74]
, an
[CODE_BLOCK_75]
[CODE_BLOCK_76]
[CODE_BLOCK_77]
[CODE_BLOCK_78]
[CODE_BLOCK_79]
[CODE_BLOCK_80]
, or a
[CODE_BLOCK_81]
object, as well as a string literal, so for adding a JSON object to the payload you need to stringify that object.
You could then fetch this API request by passing the
[CODE_BLOCK_82]
object in as a parameter to a
[CODE_BLOCK_83]
call, for example and get the response:
Copy to Clipboard
[CODE_BLOCK_84]
Specifications
Specification
Fetch
request-class
Browser compatibility
See also
ServiceWorker API
HTTP access control (CORS)
HTTP
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
May 23, 2025
MDN contributors
View this page on GitHub
Report a problem with this content