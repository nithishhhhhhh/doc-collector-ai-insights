SOURCE URL: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WeakMap
SCRAPED: 2025-06-19 18:18:29
================================================================================

--- CODE BLOCK 20 ---
WeakMap.prototype
--- END CODE BLOCK ---
is a collection of key/value pairs whose keys must be objects or
non-registered symbols
, with values of any arbitrary
JavaScript type
, and which does not create strong references to its keys. That is, an object's presence as a key in a
--- CODE BLOCK 22 ---
WeakMap.prototype.constructor
--- END CODE BLOCK ---
does not prevent the object from being garbage collected. Once an object used as a key has been collected, its corresponding values in any
--- CODE BLOCK 25 ---
WeakMap.prototype[Symbol.toStringTag]
--- END CODE BLOCK ---
become candidates for garbage collection as well — as long as they aren't strongly referred to elsewhere. The only primitive type that can be used as a
--- CODE BLOCK 26 ---
[Symbol.toStringTag]
--- END CODE BLOCK ---
key is symbol — more specifically,
non-registered symbols
— because non-registered symbols are guaranteed to be unique and cannot be re-created.
--- CODE BLOCK 28 ---
Object.prototype.toString()
--- END CODE BLOCK ---
allows associating data to objects in a way that doesn't prevent the key objects from being collected, even if the values reference the keys. However, a
--- CODE BLOCK 29 ---
WeakMap.prototype.delete()
--- END CODE BLOCK ---
doesn't allow observing the liveness of its keys, which is why it doesn't allow enumeration; if a
--- CODE BLOCK 31 ---
WeakMap.prototype.has(key)
--- END CODE BLOCK ---
exposed any method to obtain a list of its keys, the list would depend on the state of garbage collection, introducing non-determinism. If you want to have a list of keys, you should use a
--- CODE BLOCK 33 ---
WeakMap.prototype.get()
--- END CODE BLOCK ---
rather than a
--- CODE BLOCK 36 ---
WeakMap.prototype.has()
--- END CODE BLOCK ---
You can learn more about
--- CODE BLOCK 39 ---
WeakMap.prototype.set()
--- END CODE BLOCK ---
in the
WeakMap object
section of the
Keyed collections
guide.
Description
Keys of WeakMaps must be garbage-collectable. Most
primitive data types
can be arbitrarily created and don't have a lifetime, so they cannot be used as keys. Objects and
non-registered symbols
can be used as keys because they are garbage-collectable.
Why WeakMap?
A map API
could
be implemented in JavaScript with two arrays (one for keys, one for values) shared by the four API methods. Setting elements on this map would involve pushing a key and value onto the end of each of those arrays simultaneously. As a result, the indices of the key and value would correspond to both arrays. Getting values from the map would involve iterating through all keys to find a match, then using the index of this match to retrieve the corresponding value from the array of values.
Such an implementation would have two main inconveniences:
The first one is an
--- CODE BLOCK 44 ---
const wm1 = new WeakMap();
const wm2 = new WeakMap();
const wm3 = new WeakMap();
const o1 = {};
const o2 = () => {};
const o3 = window;
wm1.set(o1, 37);
wm1.set(o2, "azerty");
wm2.set(o1, o2); // a value can be anything, including an object or a function
wm2.set(o2, undefined);
wm2.set(wm1, wm2); // keys and values can be any objects. Even WeakMaps!
wm1.get(o2); // "azerty"
wm2.get(o2); // undefined, because that is the set value
wm2.get(o3); // undefined, because there is no key for o3 on wm2
wm1.has(o2); // true
wm2.has(o2); // true (even if the value itself is 'undefined')
wm2.has(o3); // false
wm3.set(o1, 37);
wm3.get(o1); // 37
wm1.has(o1); // true
wm1.delete(o1);
wm1.has(o1); // false
--- END CODE BLOCK ---
set and search (
being the number of keys in the map) since both operations must iterate through the list of keys to find a matching value.
The second inconvenience is a memory leak because the arrays ensure that references to each key and each value are maintained indefinitely. These references prevent the keys from being garbage collected, even if there are no other references to the object. This would also prevent the corresponding values from being garbage collected.
By contrast, in a
--- CODE BLOCK 45 ---
const wm1 = new WeakMap();
const wm2 = new WeakMap();
const wm3 = new WeakMap();
const o1 = {};
const o2 = () => {};
const o3 = window;
wm1.set(o1, 37);
wm1.set(o2, "azerty");
wm2.set(o1, o2); // a value can be anything, including an object or a function
wm2.set(o2, undefined);
wm2.set(wm1, wm2); // keys and values can be any objects. Even WeakMaps!
wm1.get(o2); // "azerty"
wm2.get(o2); // undefined, because that is the set value
wm2.get(o3); // undefined, because there is no key for o3 on wm2
wm1.has(o2); // true
wm2.has(o2); // true (even if the value itself is 'undefined')
wm2.has(o3); // false
wm3.set(o1, 37);
wm3.get(o1); // 37
wm1.has(o1); // true
wm1.delete(o1);
wm1.has(o1); // false
--- END CODE BLOCK ---
, a key object refers strongly to its contents as long as the key is not garbage collected, but weakly from then on. As such, a
--- CODE BLOCK 46 ---
class ClearableWeakMap {
#wm;
constructor(init) {
this.#wm = new WeakMap(init);
clear() {
this.#wm = new WeakMap();
delete(k) {
return this.#wm.delete(k);
get(k) {
return this.#wm.get(k);
has(k) {
return this.#wm.has(k);
set(k, v) {
this.#wm.set(k, v);
return this;
--- END CODE BLOCK ---
does not prevent garbage collection, which eventually removes references to the key object
allows garbage collection of any values if their key objects are not referenced from somewhere other than a
--- CODE BLOCK 47 ---
class ClearableWeakMap {
#wm;
constructor(init) {
this.#wm = new WeakMap(init);
clear() {
this.#wm = new WeakMap();
delete(k) {
return this.#wm.delete(k);
get(k) {
return this.#wm.get(k);
has(k) {
return this.#wm.has(k);
set(k, v) {
this.#wm.set(k, v);
return this;
--- END CODE BLOCK ---
--- CODE BLOCK 51 ---
Object.getOwnPropertySymbols
--- END CODE BLOCK ---
can be a particularly useful construct when mapping keys to information about the key that is valuable
only if
the key has not been garbage collected.
But because a
--- CODE BLOCK 52 ---
let Thing;
const privateScope = new WeakMap();
let counter = 0;
Thing = function () {
this.someProperty = "foo";
privateScope.set(this, {
hidden: ++counter,
Thing.prototype.showPublic = function () {
return this.someProperty;
Thing.prototype.showPrivate = function () {
return privateScope.get(this).hidden;
console.log(typeof privateScope);
// "undefined"
const thing = new Thing();
console.log(thing);
// Thing {someProperty: "foo"}
thing.showPublic();
// "foo"
thing.showPrivate();
// 1
--- END CODE BLOCK ---
doesn't allow observing the liveness of its keys, its keys are not enumerable. There is no method to obtain a list of the keys. If there were, the list would depend on the state of garbage collection, introducing non-determinism. If you want to have a list of keys, you should use a
--- CODE BLOCK 53 ---
let Thing;
const privateScope = new WeakMap();
let counter = 0;
Thing = function () {
this.someProperty = "foo";
privateScope.set(this, {
hidden: ++counter,
Thing.prototype.showPublic = function () {
return this.someProperty;
Thing.prototype.showPrivate = function () {
return privateScope.get(this).hidden;
console.log(typeof privateScope);
// "undefined"
const thing = new Thing();
console.log(thing);
// Thing {someProperty: "foo"}
thing.showPublic();
// "foo"
thing.showPrivate();
// 1
--- END CODE BLOCK ---
Constructor
--- CODE BLOCK 54 ---
class Thing {
static #counter = 0;
#hidden;
constructor() {
this.someProperty = "foo";
this.#hidden = ++Thing.#counter;
showPublic() {
return this.someProperty;
showPrivate() {
return this.#hidden;
console.log(thing);
// Thing {someProperty: "foo"}
thing.showPublic();
// "foo"
thing.showPrivate();
// 1
--- END CODE BLOCK ---
Creates a new
--- CODE BLOCK 55 ---
class Thing {
static #counter = 0;
#hidden;
constructor() {
this.someProperty = "foo";
this.#hidden = ++Thing.#counter;
showPublic() {
return this.someProperty;
showPrivate() {
return this.#hidden;
console.log(thing);
// Thing {someProperty: "foo"}
thing.showPublic();
// "foo"
thing.showPrivate();
// 1
--- END CODE BLOCK ---
object.
Instance properties
These properties are defined on
--- CODE BLOCK 57 ---
const buttons = document.querySelectorAll(".button");
buttons.forEach((button) => {
button.clicked = false;
button.addEventListener("click", () => {
button.clicked = true;
const currentButtons = [...document.querySelectorAll(".button")];
if (currentButtons.every((button) => button.clicked)) {
console.log("All buttons have been clicked!");
--- END CODE BLOCK ---
and shared by all
--- CODE BLOCK 58 ---
const buttons = document.querySelectorAll(".button");
buttons.forEach((button) => {
button.clicked = false;
button.addEventListener("click", () => {
button.clicked = true;
const currentButtons = [...document.querySelectorAll(".button")];
if (currentButtons.every((button) => button.clicked)) {
console.log("All buttons have been clicked!");
--- END CODE BLOCK ---
instances.
--- CODE BLOCK 60 ---
Object.keys(button)
--- END CODE BLOCK ---
The constructor function that created the instance object. For
--- CODE BLOCK 62 ---
Object.defineProperty()
--- END CODE BLOCK ---
instances, the initial value is the
--- CODE BLOCK 65 ---
Object.getOwnPropertySymbols()
--- END CODE BLOCK ---
constructor.
--- CODE BLOCK 67 ---
const buttons = document.querySelectorAll(".button");
const clicked = new WeakMap();
buttons.forEach((button) => {
clicked.set(button, false);
button.addEventListener("click", () => {
clicked.set(button, true);
const currentButtons = [...document.querySelectorAll(".button")];
if (currentButtons.every((button) => clicked.get(button))) {
console.log("All buttons have been clicked!");
--- END CODE BLOCK ---
The initial value of the
--- CODE BLOCK 68 ---
const buttons = document.querySelectorAll(".button");
const clicked = new WeakMap();
buttons.forEach((button) => {
clicked.set(button, false);
button.addEventListener("click", () => {
clicked.set(button, true);
const currentButtons = [...document.querySelectorAll(".button")];
if (currentButtons.every((button) => clicked.get(button))) {
console.log("All buttons have been clicked!");
--- END CODE BLOCK ---
property is the string
--- CODE BLOCK 70 ---
const cache = new WeakMap();
function handleObjectValues(obj) {
if (cache.has(obj)) {
return cache.get(obj);
const result = Object.values(obj).map(heavyComputation);
cache.set(obj, result);
return result;
--- END CODE BLOCK ---
. This property is used in
--- CODE BLOCK 71 ---
const cache = new WeakMap();
function handleObjectValues(obj) {
if (cache.has(obj)) {
return cache.get(obj);
const result = Object.values(obj).map(heavyComputation);
cache.set(obj, result);
return result;
--- END CODE BLOCK ---
Instance methods
[CODE_BLOCK_29]
Removes any value associated to the
[CODE_BLOCK_30]
[CODE_BLOCK_31]
will return
[CODE_BLOCK_32]
afterwards.
[CODE_BLOCK_33]
Returns the value associated to the
[CODE_BLOCK_34]
, or
[CODE_BLOCK_35]
if there is none.
[CODE_BLOCK_36]
Returns a Boolean asserting whether a value has been associated to the
[CODE_BLOCK_37]
in the
[CODE_BLOCK_38]
object or not.
[CODE_BLOCK_39]
Sets the
[CODE_BLOCK_40]
for the
[CODE_BLOCK_41]
in the
[CODE_BLOCK_42]
object. Returns the
[CODE_BLOCK_43]
object.
Examples
Using WeakMap
Copy to Clipboard
[CODE_BLOCK_44]
Implementing a WeakMap-like class with a .clear() method
Copy to Clipboard
[CODE_BLOCK_46]
Emulating private members
Developers can use a
[CODE_BLOCK_48]
to associate private data to an object, with the following benefits:
Compared to a
[CODE_BLOCK_49]
, a WeakMap does not hold strong references to the object used as the key, so the metadata shares the same lifetime as the object itself, avoiding memory leaks.
Compared to using non-enumerable and/or
[CODE_BLOCK_50]
properties, a WeakMap is external to the object and there is no way for user code to retrieve the metadata through reflective methods like
[CODE_BLOCK_51]
Compared to a
closure
, the same WeakMap can be reused for all instances created from a constructor, making it more memory-efficient, and allows different instances of the same class to read the private members of each other.
Copy to Clipboard
[CODE_BLOCK_52]
This is roughly equivalent to the following, using
private fields
Copy to Clipboard
[CODE_BLOCK_54]
Associating metadata
[CODE_BLOCK_56]
can be used to associate metadata with an object, without affecting the lifetime of the object itself. This is very similar to the private members example, since private members are also modelled as external metadata that doesn't participate in
prototypical inheritance
This use case can be extended to already-created objects. For example, on the web, we may want to associate extra data with a DOM element, which the DOM element may access later. A common approach is to attach the data as a property:
Copy to Clipboard
[CODE_BLOCK_57]
This approach works, but it has a few pitfalls:
[CODE_BLOCK_59]
property is enumerable, so it will show up in
[CODE_BLOCK_60]
[CODE_BLOCK_61]
loops, etc. This can be mitigated by using
[CODE_BLOCK_62]
, but that makes the code more verbose.
[CODE_BLOCK_63]
property is a normal string property, so it can be accessed and overwritten by other code. This can be mitigated by using a
[CODE_BLOCK_64]
key, but the key would still be accessible via
[CODE_BLOCK_65]
Using a
[CODE_BLOCK_66]
fixes these:
Copy to Clipboard
[CODE_BLOCK_67]
Here, only code that has access to
[CODE_BLOCK_69]
knows the clicked state of each button, and external code can't modify the states. In addition, if any of the buttons gets removed from the DOM, the associated metadata will automatically get garbage-collected.
Caching
You can associate objects passed to a function with the result of the function, so that if the same object is passed again, the cached result can be returned without re-executing the function. This is useful if the function is pure (i.e., it doesn't mutate any outside objects or cause other observable side effects).
Copy to Clipboard
[CODE_BLOCK_70]
This only works if your function's input is an object. Moreover, even if the input is never passed in again, the result still remains forever in the cache as long as the key (input) is alive. A more effective way is to use a
[CODE_BLOCK_72]
paired with
[CODE_BLOCK_73]
objects, which allows you to associate any type of input value with its respective (potentially large) computation result. See the
WeakRefs and FinalizationRegistry
example for more details.
Specifications
Specification
ECMAScript® 2026 Language Specification
sec-weakmap-objects
Browser compatibility
See also
Polyfill of
[CODE_BLOCK_74]
[CODE_BLOCK_75]
Keyed collections
Hiding Implementation Details with ECMAScript 6 WeakMaps
by Nick Fitzgerald (2014)
[CODE_BLOCK_76]
[CODE_BLOCK_77]
[CODE_BLOCK_78]
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
May 30, 2025
MDN contributors
View this page on GitHub
Report a problem with this content