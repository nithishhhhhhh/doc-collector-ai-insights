SOURCE URL: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object
SCRAPED: 2025-06-19 18:20:02
================================================================================

--- CODE BLOCK 4 ---
Object.prototype
--- END CODE BLOCK ---
type represents one of
JavaScript's data types
. It is used to store various keyed collections and more complex entities. Objects can be created using the
--- CODE BLOCK 5 ---
Object.prototype
--- END CODE BLOCK ---
constructor or the
object initializer / literal syntax
Description
Nearly all
objects
in JavaScript are instances of
--- CODE BLOCK 8 ---
Object.prototype
--- END CODE BLOCK ---
; a typical object inherits properties (including methods) from
--- CODE BLOCK 9 ---
Object.prototype
--- END CODE BLOCK ---
, although these properties may be shadowed (a.k.a. overridden). The only objects that don't inherit from
--- CODE BLOCK 10 ---
Object.prototype
--- END CODE BLOCK ---
are those with
--- CODE BLOCK 12 ---
Object.prototype
--- END CODE BLOCK ---
prototype
, or descended from other
--- CODE BLOCK 13 ---
Object.prototype
--- END CODE BLOCK ---
prototype objects.
Changes to the
--- CODE BLOCK 17 ---
toLocaleString()
--- END CODE BLOCK ---
object are seen by
objects through prototype chaining, unless the properties and methods subject to those changes are overridden further along the prototype chain. This provides a very powerful although potentially dangerous mechanism to override or extend object behavior. To make it more secure,
--- CODE BLOCK 20 ---
__defineGetter__()
--- END CODE BLOCK ---
is the only object in the core JavaScript language that has
immutable prototype
â€” the prototype of
--- CODE BLOCK 21 ---
__defineSetter__()
--- END CODE BLOCK ---
is always
--- CODE BLOCK 22 ---
__lookupGetter__()
--- END CODE BLOCK ---
and not changeable.
Object prototype properties
You should avoid calling any of the
--- CODE BLOCK 23 ---
__lookupSetter__()
--- END CODE BLOCK ---
methods directly from the instance, especially those that are not intended to be polymorphic (i.e., only its initial behavior makes sense and no descending object could override it in a meaningful way). All objects descending from
--- CODE BLOCK 24 ---
Object.defineProperty()
--- END CODE BLOCK ---
may define a custom own property that has the same name, but with entirely different semantics from what you expect. Furthermore, these properties are not inherited by
--- CODE BLOCK 25 ---
Object.getOwnPropertyDescriptor()
--- END CODE BLOCK ---
-prototype objects
. All modern JavaScript utilities for working with objects are
static
. More specifically:
--- CODE BLOCK 27 ---
Object.getPrototypeOf()
--- END CODE BLOCK ---
--- CODE BLOCK 28 ---
Object.setPrototypeOf()
--- END CODE BLOCK ---
, and
--- CODE BLOCK 29 ---
propertyIsEnumerable()
--- END CODE BLOCK ---
exist to be polymorphic and you should expect the object to define its own implementation with sensible behaviors, so you can call them as instance methods. However,
--- CODE BLOCK 30 ---
hasOwnProperty()
--- END CODE BLOCK ---
--- CODE BLOCK 31 ---
Object.getOwnPropertyDescriptor()
--- END CODE BLOCK ---
are usually implicitly called through
type conversion
and you don't need to call them yourself in your code.
--- CODE BLOCK 32 ---
Object.hasOwn()
--- END CODE BLOCK ---
--- CODE BLOCK 33 ---
isPrototypeOf()
--- END CODE BLOCK ---
--- CODE BLOCK 36 ---
Object.prototype
--- END CODE BLOCK ---
, and
--- CODE BLOCK 38 ---
Object.prototype
--- END CODE BLOCK ---
are deprecated and should not be used. Use the static alternatives
--- CODE BLOCK 39 ---
const obj = {
foo: 1,
// You should not define such a method on your own object,
// but you may not be able to prevent it from happening if
// you are receiving the object from external input
propertyIsEnumerable() {
return false;
obj.propertyIsEnumerable("foo"); // false; unexpected result
Object.prototype.propertyIsEnumerable.call(obj, "foo"); // true; expected result
--- END CODE BLOCK ---
--- CODE BLOCK 40 ---
const obj = {
foo: 1,
// You should not define such a method on your own object,
// but you may not be able to prevent it from happening if
// you are receiving the object from external input
propertyIsEnumerable() {
return false;
obj.propertyIsEnumerable("foo"); // false; unexpected result
Object.prototype.propertyIsEnumerable.call(obj, "foo"); // true; expected result
--- END CODE BLOCK ---
instead.
--- CODE BLOCK 41 ---
Map.prototype.delete()
--- END CODE BLOCK ---
property is deprecated and should not be used. The
--- CODE BLOCK 43 ---
Object.prototype
--- END CODE BLOCK ---
--- CODE BLOCK 45 ---
Object.create(null)
--- END CODE BLOCK ---
alternatives are static methods.
--- CODE BLOCK 46 ---
__proto__: null
--- END CODE BLOCK ---
--- CODE BLOCK 48 ---
Object.prototype.__proto__
--- END CODE BLOCK ---
methods can be replaced with the
--- CODE BLOCK 50 ---
Object.setPrototypeOf(obj, null)
--- END CODE BLOCK ---
--- CODE BLOCK 51 ---
const obj = Object.create(null);
const obj2 = { __proto__: null };
--- END CODE BLOCK ---
static methods, respectively.
--- CODE BLOCK 52 ---
const obj = Object.create(null);
const obj2 = { __proto__: null };
--- END CODE BLOCK ---
method can usually be replaced with
--- CODE BLOCK 54 ---
Object.prototype
--- END CODE BLOCK ---
, if you are checking the
--- CODE BLOCK 55 ---
Object.prototype.toString()
--- END CODE BLOCK ---
property of a constructor.
In case where a semantically equivalent static method doesn't exist, or if you really want to use the
--- CODE BLOCK 56 ---
const normalObj = {}; // create a normal object
const nullProtoObj = Object.create(null); // create an object with "null" prototype
console.log(`normalObj is: ${normalObj}`); // shows "normalObj is: [object Object]"
console.log(`nullProtoObj is: ${nullProtoObj}`); // throws error: Cannot convert object to primitive value
alert(normalObj); // shows [object Object]
alert(nullProtoObj); // throws error: Cannot convert object to primitive value
--- END CODE BLOCK ---
method, you should directly
--- CODE BLOCK 57 ---
const normalObj = {}; // create a normal object
const nullProtoObj = Object.create(null); // create an object with "null" prototype
console.log(`normalObj is: ${normalObj}`); // shows "normalObj is: [object Object]"
console.log(`nullProtoObj is: ${nullProtoObj}`); // throws error: Cannot convert object to primitive value
alert(normalObj); // shows [object Object]
alert(nullProtoObj); // throws error: Cannot convert object to primitive value
--- END CODE BLOCK ---
--- CODE BLOCK 58 ---
normalObj.valueOf(); // shows {}
nullProtoObj.valueOf(); // throws error: nullProtoObj.valueOf is not a function
normalObj.hasOwnProperty("p"); // shows "true"
nullProtoObj.hasOwnProperty("p"); // throws error: nullProtoObj.hasOwnProperty is not a function
normalObj.constructor; // shows "Object() { [native code] }"
nullProtoObj.constructor; // shows "undefined"
--- END CODE BLOCK ---
method on your target object instead, to prevent the object from having an overriding property that produces unexpected results.
Copy to Clipboard
--- CODE BLOCK 59 ---
normalObj.valueOf(); // shows {}
nullProtoObj.valueOf(); // throws error: nullProtoObj.valueOf is not a function
normalObj.hasOwnProperty("p"); // shows "true"
nullProtoObj.hasOwnProperty("p"); // throws error: nullProtoObj.hasOwnProperty is not a function
normalObj.constructor; // shows "Object() { [native code] }"
nullProtoObj.constructor; // shows "undefined"
--- END CODE BLOCK ---
Deleting a property from an object
There isn't any method in an Object itself to delete its own properties (such as
--- CODE BLOCK 62 ---
nullProtoObj.toString = Object.prototype.toString; // since new object lacks toString, add the original generic one back
console.log(nullProtoObj.toString()); // shows "[object Object]"
console.log(`nullProtoObj is: ${nullProtoObj}`); // shows "nullProtoObj is: [object Object]"
--- END CODE BLOCK ---
). To do so, one must use the
--- CODE BLOCK 65 ---
nullProtoObj
--- END CODE BLOCK ---
operator.
null-prototype objects
Almost all objects in JavaScript ultimately inherit from
--- CODE BLOCK 66 ---
nullProtoObj
--- END CODE BLOCK ---
(see
inheritance and the prototype chain
). However, you may create
--- CODE BLOCK 68 ---
Object.setPrototypeOf(nullProtoObj, Object.prototype)
--- END CODE BLOCK ---
-prototype objects using
--- CODE BLOCK 70 ---
Object.prototype
--- END CODE BLOCK ---
or the
object initializer syntax
with
--- CODE BLOCK 71 ---
const ages = { alice: 18, bob: 27 };
function hasPerson(name) {
return name in ages;
function getAge(name) {
return ages[name];
hasPerson("hasOwnProperty"); // true
getAge("toString"); // [Function: toString]
--- END CODE BLOCK ---
(note: the
--- CODE BLOCK 72 ---
const ages = { alice: 18, bob: 27 };
function hasPerson(name) {
return name in ages;
function getAge(name) {
return ages[name];
hasPerson("hasOwnProperty"); // true
getAge("toString"); // [Function: toString]
--- END CODE BLOCK ---
key in object literals is different from the deprecated
--- CODE BLOCK 75 ---
const ages = Object.create(null, {
alice: { value: 18, enumerable: true },
bob: { value: 27, enumerable: true },
hasPerson("hasOwnProperty"); // false
getAge("toString"); // undefined
--- END CODE BLOCK ---
property). You can also change the prototype of an existing object to
--- CODE BLOCK 76 ---
const ages = Object.create(null, {
alice: { value: 18, enumerable: true },
bob: { value: 27, enumerable: true },
hasPerson("hasOwnProperty"); // false
getAge("toString"); // undefined
--- END CODE BLOCK ---
by calling
--- CODE BLOCK 77 ---
Object.prototype
--- END CODE BLOCK ---
Copy to Clipboard
--- CODE BLOCK 78 ---
Object.prototype
--- END CODE BLOCK ---
An object with a
--- CODE BLOCK 80 ---
const user = {};
// A malicious script:
Object.prototype.authenticated = true;
// Unexpectedly allowing unauthenticated user to pass through
if (user.authenticated) {
// access confidential data
--- END CODE BLOCK ---
prototype can behave in unexpected ways, because it doesn't inherit any object methods from
--- CODE BLOCK 82 ---
Object.groupBy()
--- END CODE BLOCK ---
. This is especially true when debugging, since common object-property converting/detecting utility functions may generate errors, or lose information (especially if using silent error-traps that ignore errors).
For example, the lack of
--- CODE BLOCK 84 ---
indices.groups
--- END CODE BLOCK ---
often makes debugging intractable:
Copy to Clipboard
--- CODE BLOCK 85 ---
RegExp.prototype.exec()
--- END CODE BLOCK ---
Other methods will fail as well.
Copy to Clipboard
--- CODE BLOCK 87 ---
[Symbol.unscopables]
--- END CODE BLOCK ---
We can add the
--- CODE BLOCK 90 ---
import * as ns from "module";
--- END CODE BLOCK ---
method back to the null-prototype object by assigning it one:
Copy to Clipboard
--- CODE BLOCK 93 ---
Object.prototype
--- END CODE BLOCK ---
Unlike normal objects, in which
--- CODE BLOCK 103 ---
Object.prototype.valueOf()
--- END CODE BLOCK ---
is on the object's prototype, the
--- CODE BLOCK 104 ---
Object.prototype.valueOf.call(x)
--- END CODE BLOCK ---
method here is an own property of
--- CODE BLOCK 117 ---
Object.keys()
--- END CODE BLOCK ---
. This is because
--- CODE BLOCK 124 ---
Object.assign()
--- END CODE BLOCK ---
has no (
--- CODE BLOCK 125 ---
Object.create()
--- END CODE BLOCK ---
) prototype.
You can also revert a null-prototype object back to an ordinary object using
--- CODE BLOCK 126 ---
Object.defineProperties()
--- END CODE BLOCK ---
In practice, objects with
--- CODE BLOCK 127 ---
Object.defineProperty()
--- END CODE BLOCK ---
prototype are usually used as a cheap substitute for
maps
. The presence of
--- CODE BLOCK 128 ---
Object.entries()
--- END CODE BLOCK ---
properties will cause some bugs:
Copy to Clipboard
--- CODE BLOCK 129 ---
[key, value]
--- END CODE BLOCK ---
Using a null-prototype object removes this hazard without introducing too much complexity to the
--- CODE BLOCK 131 ---
Object.fromEntries()
--- END CODE BLOCK ---
--- CODE BLOCK 132 ---
[key, value]
--- END CODE BLOCK ---
functions:
Copy to Clipboard
--- CODE BLOCK 133 ---
Object.entries
--- END CODE BLOCK ---
In such case, the addition of any method should be done cautiously, as they can be confused with the other key-value pairs stored as data.
Making your object not inherit from
--- CODE BLOCK 135 ---
Object.getOwnPropertyDescriptors()
--- END CODE BLOCK ---
also prevents prototype pollution attacks. If a malicious script adds a property to
--- CODE BLOCK 136 ---
Object.getOwnPropertyNames()
--- END CODE BLOCK ---
, it will be accessible on every object in your program, except objects that have null prototype.
Copy to Clipboard
--- CODE BLOCK 137 ---
Object.getOwnPropertySymbols()
--- END CODE BLOCK ---
JavaScript also has built-in APIs that produce
--- CODE BLOCK 139 ---
[[Prototype]]
--- END CODE BLOCK ---
-prototype objects, especially those that use objects as ad hoc key-value collections. For example:
The return value of
--- CODE BLOCK 140 ---
Object.groupBy()
--- END CODE BLOCK ---
--- CODE BLOCK 141 ---
Object.hasOwn()
--- END CODE BLOCK ---
--- CODE BLOCK 144 ---
Object.is()
--- END CODE BLOCK ---
properties of the result of
--- CODE BLOCK 146 ---
IsLooselyEqual
--- END CODE BLOCK ---
--- CODE BLOCK 148 ---
IsStrictlyEqual
--- END CODE BLOCK ---
(all
--- CODE BLOCK 150 ---
Object.isExtensible()
--- END CODE BLOCK ---
objects should have
--- CODE BLOCK 151 ---
Object.isFrozen()
--- END CODE BLOCK ---
-prototype)
--- CODE BLOCK 152 ---
Object.isSealed()
--- END CODE BLOCK ---
Module namespace objects, obtained through
--- CODE BLOCK 153 ---
Object.keys()
--- END CODE BLOCK ---
--- CODE BLOCK 154 ---
Object.preventExtensions()
--- END CODE BLOCK ---
The term "
--- CODE BLOCK 155 ---
Object.seal()
--- END CODE BLOCK ---
-prototype object" often also includes any object without
--- CODE BLOCK 156 ---
Object.setPrototypeOf()
--- END CODE BLOCK ---
in its prototype chain. Such objects can be created with
--- CODE BLOCK 157 ---
[[Prototype]]
--- END CODE BLOCK ---
when using classes.
Object coercion
Many built-in operations that expect objects first coerce their arguments to objects.
The operation
can be summarized as follows:
Objects are returned as-is.
--- CODE BLOCK 158 ---
Object.values()
--- END CODE BLOCK ---
--- CODE BLOCK 159 ---
Object.prototype
--- END CODE BLOCK ---
throw a
--- CODE BLOCK 161 ---
Object.prototype.__proto__
--- END CODE BLOCK ---
--- CODE BLOCK 162 ---
Object.prototype.constructor
--- END CODE BLOCK ---
--- CODE BLOCK 165 ---
constructor
--- END CODE BLOCK ---
--- CODE BLOCK 166 ---
Constructor.prototype
--- END CODE BLOCK ---
--- CODE BLOCK 167 ---
Object.prototype.__defineGetter__()
--- END CODE BLOCK ---
--- CODE BLOCK 168 ---
Object.prototype.__defineSetter__()
--- END CODE BLOCK ---
primitives are wrapped into their corresponding object wrappers.
There are two ways to achieve nearly the same effect in JavaScript.
--- CODE BLOCK 169 ---
Object.prototype.__lookupGetter__()
--- END CODE BLOCK ---
--- CODE BLOCK 170 ---
Object.prototype.__lookupSetter__()
--- END CODE BLOCK ---
does exactly the object coercion steps explained above to convert
--- CODE BLOCK 171 ---
Object.prototype.hasOwnProperty()
--- END CODE BLOCK ---
--- CODE BLOCK 172 ---
Object.prototype.isPrototypeOf()
--- END CODE BLOCK ---
function:
--- CODE BLOCK 173 ---
Object.prototype.propertyIsEnumerable()
--- END CODE BLOCK ---
uses the same algorithm to convert
--- CODE BLOCK 174 ---
Object.prototype.toLocaleString()
--- END CODE BLOCK ---
, except that
--- CODE BLOCK 176 ---
Object.prototype.toString()
--- END CODE BLOCK ---
--- CODE BLOCK 177 ---
Object.prototype.valueOf()
--- END CODE BLOCK ---
don't throw a
--- CODE BLOCK 179 ---
const o1 = new Object();
const o2 = new Object(undefined);
const o3 = new Object(null);
--- END CODE BLOCK ---
, but return a plain object.
Places that use object coercion include:
--- CODE BLOCK 180 ---
const o1 = new Object();
const o2 = new Object(undefined);
const o3 = new Object(null);
--- END CODE BLOCK ---
parameter of
--- CODE BLOCK 186 ---
// Equivalent to const o1 = new Boolean(true)
const o1 = new Object(true);
// No equivalent because BigInt() can't be called as a constructor,
// and calling it as a regular function won't create an object
const o2 = new Object(1n);
--- END CODE BLOCK ---
loops.
--- CODE BLOCK 187 ---
// Equivalent to const o1 = new Boolean(true)
const o1 = new Object(true);
// No equivalent because BigInt() can't be called as a constructor,
// and calling it as a regular function won't create an object
const o2 = new Object(1n);
--- END CODE BLOCK ---
value of
--- CODE BLOCK 188 ---
Object.prototype
--- END CODE BLOCK ---
methods.
Parameters of
--- CODE BLOCK 191 ---
Node.prototype
--- END CODE BLOCK ---
methods such as
--- CODE BLOCK 192 ---
Function.prototype
--- END CODE BLOCK ---
Auto-boxing when a property is accessed on a primitive value, since primitives do not have properties.
--- CODE BLOCK 193 ---
const current = Object.prototype.valueOf;
// Since my property "-prop-value" is cross-cutting and isn't always
// on the same prototype chain, I want to modify Object.prototype:
Object.prototype.valueOf = function (...args) {
if (Object.hasOwn(this, "-prop-value")) {
return this["-prop-value"];
// It doesn't look like one of my objects, so let's fall back on
// the default behavior by reproducing the current behavior as best we can.
// The apply behaves like "super" in some other languages.
// Even though valueOf() doesn't take arguments, some other hook may.
return current.apply(this, args);
--- END CODE BLOCK ---
value when calling a non-strict function. Primitives are boxed while
--- CODE BLOCK 194 ---
const current = Object.prototype.valueOf;
// Since my property "-prop-value" is cross-cutting and isn't always
// on the same prototype chain, I want to modify Object.prototype:
Object.prototype.valueOf = function (...args) {
if (Object.hasOwn(this, "-prop-value")) {
return this["-prop-value"];
// It doesn't look like one of my objects, so let's fall back on
// the default behavior by reproducing the current behavior as best we can.
// The apply behaves like "super" in some other languages.
// Even though valueOf() doesn't take arguments, some other hook may.
return current.apply(this, args);
--- END CODE BLOCK ---
[CODE_BLOCK_120]
are replaced with the
global object
Unlike
conversion to primitives
, the object coercion process itself is not observable in any way, since it doesn't invoke custom code like
[CODE_BLOCK_121]
[CODE_BLOCK_122]
methods.
Constructor
[CODE_BLOCK_123]
Turns the input into an object.
Static methods
[CODE_BLOCK_124]
Copies the values of all enumerable own properties from one or more source objects to a target object.
[CODE_BLOCK_125]
Creates a new object with the specified prototype object and properties.
[CODE_BLOCK_126]
Adds the named properties described by the given descriptors to an object.
[CODE_BLOCK_127]
Adds the named property described by a given descriptor to an object.
[CODE_BLOCK_128]
Returns an array containing all of the
[CODE_BLOCK_129]
pairs of a given object's
enumerable string properties.
[CODE_BLOCK_130]
Freezes an object. Other code cannot delete or change its properties.
[CODE_BLOCK_131]
Returns a new object from an iterable of
[CODE_BLOCK_132]
pairs. (This is the reverse of
[CODE_BLOCK_133]
[CODE_BLOCK_134]
Returns a property descriptor for a named property on an object.
[CODE_BLOCK_135]
Returns an object containing all own property descriptors for an object.
[CODE_BLOCK_136]
Returns an array containing the names of all of the given object's
enumerable and non-enumerable properties.
[CODE_BLOCK_137]
Returns an array of all symbol properties found directly upon a given object.
[CODE_BLOCK_138]
Returns the prototype (internal
[CODE_BLOCK_139]
property) of the specified object.
[CODE_BLOCK_140]
Groups the elements of a given iterable according to the string values returned by a provided callback function. The returned object has separate properties for each group, containing arrays with the elements in the group.
[CODE_BLOCK_141]
Returns
[CODE_BLOCK_142]
if the specified object has the indicated property as its
property, or
[CODE_BLOCK_143]
if the property is inherited or does not exist.
[CODE_BLOCK_144]
Compares if two values are the same value. Equates all
[CODE_BLOCK_145]
values (which differs from both
[CODE_BLOCK_146]
used by
[CODE_BLOCK_147]
[CODE_BLOCK_148]
used by
[CODE_BLOCK_149]
[CODE_BLOCK_150]
Determines if extending of an object is allowed.
[CODE_BLOCK_151]
Determines if an object was frozen.
[CODE_BLOCK_152]
Determines if an object is sealed.
[CODE_BLOCK_153]
Returns an array containing the names of all of the given object's
enumerable string properties.
[CODE_BLOCK_154]
Prevents any extensions of an object.
[CODE_BLOCK_155]
Prevents other code from deleting properties of an object.
[CODE_BLOCK_156]
Sets the object's prototype (its internal
[CODE_BLOCK_157]
property).
[CODE_BLOCK_158]
Returns an array containing the values that correspond to all of a given object's
enumerable string properties.
Instance properties
These properties are defined on
[CODE_BLOCK_159]
and shared by all
[CODE_BLOCK_160]
instances.
[CODE_BLOCK_161]
Deprecated
Points to the object which was used as prototype when the object was instantiated.
[CODE_BLOCK_162]
The constructor function that created the instance object. For plain
[CODE_BLOCK_163]
instances, the initial value is the
[CODE_BLOCK_164]
constructor. Instances of other constructors each inherit the
[CODE_BLOCK_165]
property from their respective
[CODE_BLOCK_166]
object.
Instance methods
[CODE_BLOCK_167]
Deprecated
Associates a function with a property that, when accessed, executes that function and returns its return value.
[CODE_BLOCK_168]
Deprecated
Associates a function with a property that, when set, executes that function which modifies the property.
[CODE_BLOCK_169]
Deprecated
Returns the function bound as a getter to the specified property.
[CODE_BLOCK_170]
Deprecated
Returns the function bound as a setter to the specified property.
[CODE_BLOCK_171]
Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain.
[CODE_BLOCK_172]
Returns a boolean indicating whether the object this method is called upon is in the prototype chain of the specified object.
[CODE_BLOCK_173]
Returns a boolean indicating whether the specified property is the object's
enumerable own
property.
[CODE_BLOCK_174]
Calls
[CODE_BLOCK_175]
[CODE_BLOCK_176]
Returns a string representation of the object.
[CODE_BLOCK_177]
Returns the primitive value of the specified object.
Examples
Constructing empty objects
The following example creates empty objects using the
[CODE_BLOCK_178]
keyword with different arguments:
Copy to Clipboard
[CODE_BLOCK_179]
Using Object() constructor to turn primitives into an Object of their respective type
You can use the
[CODE_BLOCK_181]
constructor to create an object wrapper of a primitive value.
The following examples create variables
[CODE_BLOCK_182]
[CODE_BLOCK_183]
which are objects storing
[CODE_BLOCK_184]
[CODE_BLOCK_185]
values:
Copy to Clipboard
[CODE_BLOCK_186]
Object prototypes
When altering the behavior of existing
[CODE_BLOCK_188]
methods, consider injecting code by wrapping your extension before or after the existing logic. For example, this (untested) code will pre-conditionally execute custom logic before the built-in logic or someone else's extension is executed.
When modifying prototypes with hooks, pass
[CODE_BLOCK_189]
and the arguments (the call state) to the current behavior by calling
[CODE_BLOCK_190]
on the function. This pattern can be used for any prototype, such as
[CODE_BLOCK_191]
[CODE_BLOCK_192]
, etc.
Copy to Clipboard
[CODE_BLOCK_193]
Warning:
Modifying the
[CODE_BLOCK_195]
property of any built-in constructor is considered a bad practice and risks forward compatibility.
You can read more about prototypes in
Inheritance and the prototype chain
Specifications
Specification
ECMAScriptÂ® 2026 LanguageÂ Specification
sec-object-objects
Browser compatibility
See also
Object initializer
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
May 23, 2025
MDN contributors
View this page on GitHub
Report a problem with this content