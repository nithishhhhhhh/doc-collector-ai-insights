SOURCE URL: https://nextjs.org/docs/app/api-reference/functions/redirect
SCRAPED: 2025-06-19 17:15:44
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
API Reference
Functions
redirect
redirect
--- CODE BLOCK 5 ---
redirect(path, type)
--- END CODE BLOCK ---
function allows you to redirect the user to another URL.
--- CODE BLOCK 6 ---
redirect(path, type)
--- END CODE BLOCK ---
can be used in
Server Components
Route Handlers
, and
Server Actions
When used in a
streaming context
, this will insert a meta tag to emit the redirect on the client side. When used in a server action, it will serve a 303 HTTP redirect response to the caller. Otherwise, it will serve a 307 HTTP redirect response to the caller.
If a resource doesn't exist, you can use the
--- CODE BLOCK 20 ---
permanentRedirect
--- END CODE BLOCK ---
function
instead.
Reference
Parameters
--- CODE BLOCK 26 ---
next.config.js
--- END CODE BLOCK ---
function accepts two arguments:
--- CODE BLOCK 28 ---
NEXT_REDIRECT
--- END CODE BLOCK ---
Parameter
Type
Description
--- CODE BLOCK 30 ---
import { redirect } from 'next/navigation'
async function fetchTeam(id: string) {
const res = await fetch('https://...')
if (!res.ok) return undefined
return res.json()
export default async function Profile({
params,
}: {
params: Promise<{ id: string }>
}) {
const { id } = await params
const team = await fetchTeam(id)
if (!team) {
redirect('/login')
// ...
--- END CODE BLOCK ---
--- CODE BLOCK 32 ---
return redirect()
--- END CODE BLOCK ---
The URL to redirect to. Can be a relative or absolute path.
--- CODE BLOCK 35 ---
'use client'
import { redirect, usePathname } from 'next/navigation'
export function ClientRedirect() {
const pathname = usePathname()
if (pathname.startsWith('/admin') && !pathname.includes('/login')) {
redirect('/admin/login')
return <div>Login Page</div>
--- END CODE BLOCK ---
--- CODE BLOCK 36 ---
'use client'
import { redirect, usePathname } from 'next/navigation'
export function ClientRedirect() {
const pathname = usePathname()
if (pathname.startsWith('/admin') && !pathname.includes('/login')) {
redirect('/admin/login')
return <div>Login Page</div>
--- END CODE BLOCK ---
(default) or
--- CODE BLOCK 40 ---
'use client'
import { navigate } from './actions'
export function ClientRedirect() {
return (
<form action={navigate}>
<input type="text" name="id" />
<button>Submit</button>
</form>
--- END CODE BLOCK ---
(default in Server Actions)
The type of redirect to perform.
By default,
--- CODE BLOCK 41 ---
'use client'
import { navigate } from './actions'
export function ClientRedirect() {
return (
<form action={navigate}>
<input type="text" name="id" />
<button>Submit</button>
</form>
--- END CODE BLOCK ---
will use
--- CODE BLOCK 42 ---
'use server'
import { redirect } from 'next/navigation'
export async function navigate(data: FormData) {
redirect(`/posts/${data.get('id')}`)
--- END CODE BLOCK ---
(adding a new entry to the browser history stack) in
Server Actions
--- CODE BLOCK 43 ---
'use server'
import { redirect } from 'next/navigation'
export async function navigate(data: FormData) {
redirect(`/posts/${data.get('id')}`)
--- END CODE BLOCK ---
(replacing the current URL in the browser history stack) everywhere else. You can override this behavior by specifying the
[CODE_BLOCK_15]
parameter.
[CODE_BLOCK_16]
parameter has no effect when used in Server Components.
Returns
[CODE_BLOCK_17]
does not return a value.
Behavior
In Server Actions and Route Handlers,
[CODE_BLOCK_18]
should be called after the
[CODE_BLOCK_19]
block.
If you prefer to return a 308 (Permanent) HTTP redirect instead of 307 (Temporary), you can use the
[CODE_BLOCK_20]
function
instead.
[CODE_BLOCK_21]
internally throws an error so it should be called outside of
[CODE_BLOCK_22]
blocks.
[CODE_BLOCK_23]
can be called in Client Components during the rendering process but not in event handlers. You can use the
[CODE_BLOCK_24]
hook
instead.
[CODE_BLOCK_25]
also accepts absolute URLs and can be used to redirect to external links.
If you'd like to redirect before the render process, use
[CODE_BLOCK_26]
Middleware
Example
Server Component
Invoking the
[CODE_BLOCK_27]
function throws a
[CODE_BLOCK_28]
error and terminates rendering of the route segment in which it was thrown.
app/team/[id]/page.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_29]
Good to know
[CODE_BLOCK_31]
does not require you to use
[CODE_BLOCK_32]
as it uses the TypeScript
[CODE_BLOCK_33]
type.
Client Component
[CODE_BLOCK_34]
can be directly used in a Client Component.
components/client-redirect.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_35]
Good to know
: When using
[CODE_BLOCK_37]
in a Client Component on initial page load during Server-Side Rendering (SSR), it will perform a server-side redirect.
[CODE_BLOCK_38]
can be used in a Client Component through a Server Action. If you need to use an event handler to redirect the user, you can use the
[CODE_BLOCK_39]
hook.
app/client-redirect.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_40]
app/actions.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_42]
Why does
[CODE_BLOCK_44]
use 307 and 308?
When using
[CODE_BLOCK_45]
you may notice that the status codes used are
[CODE_BLOCK_46]
for a temporary redirect, and
[CODE_BLOCK_47]
for a permanent redirect. While traditionally a
[CODE_BLOCK_48]
was used for a temporary redirect, and a
[CODE_BLOCK_49]
for a permanent redirect, many browsers changed the request method of the redirect, from a
[CODE_BLOCK_50]
[CODE_BLOCK_51]
request when using a
[CODE_BLOCK_52]
, regardless of the origins request method.
Taking the following example of a redirect from
[CODE_BLOCK_53]
[CODE_BLOCK_54]
, if you make a
[CODE_BLOCK_55]
request to
[CODE_BLOCK_56]
to create a new user, and are conforming to a
[CODE_BLOCK_57]
temporary redirect, the request method will be changed from a
[CODE_BLOCK_58]
to a
[CODE_BLOCK_59]
request. This doesn't make sense, as to create a new user, you should be making a
[CODE_BLOCK_60]
request to
[CODE_BLOCK_61]
, and not a
[CODE_BLOCK_62]
request.
The introduction of the
[CODE_BLOCK_63]
status code means that the request method is preserved as
[CODE_BLOCK_64]
[CODE_BLOCK_65]
- Temporary redirect, will change the request method from
[CODE_BLOCK_66]
[CODE_BLOCK_67]
[CODE_BLOCK_68]
- Temporary redirect, will preserve the request method as
[CODE_BLOCK_69]
[CODE_BLOCK_70]
method uses a
[CODE_BLOCK_71]
by default, instead of a
[CODE_BLOCK_72]
temporary redirect, meaning your requests will
always
be preserved as
[CODE_BLOCK_73]
requests.
Learn more
about HTTP Redirects.
Version History
Version
Changes
[CODE_BLOCK_74]
[CODE_BLOCK_75]
introduced.
Next Steps
permanentRedirect
API Reference for the permanentRedirect function.
Was this helpful?
supported.
Send