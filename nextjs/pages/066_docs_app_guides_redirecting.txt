SOURCE URL: https://nextjs.org/docs/app/guides/redirecting
SCRAPED: 2025-06-19 17:16:48
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
App Router
Guides
Redirecting
How to handle redirects in Next.js
There are a few ways you can handle redirects in Next.js. This page will go through each available option, use cases, and how to manage large numbers of redirects.
Purpose
Where
Status Code
--- CODE BLOCK 2 ---
permanentRedirect
--- END CODE BLOCK ---
Redirect user after a mutation or event
Server Components, Server Actions, Route Handlers
307 (Temporary) or 303 (Server Action)
--- CODE BLOCK 5 ---
next.config.js
--- END CODE BLOCK ---
Redirect user after a mutation or event
Server Components, Server Actions, Route Handlers
308 (Permanent)
--- CODE BLOCK 6 ---
next.config.js
--- END CODE BLOCK ---
Perform a client-side navigation
Event Handlers in Client Components
--- CODE BLOCK 7 ---
NextResponse.redirect
--- END CODE BLOCK ---
--- CODE BLOCK 12 ---
'use server'
import { redirect } from 'next/navigation'
import { revalidatePath } from 'next/cache'
export async function createPost(id: string) {
try {
// Call database
} catch (error) {
// Handle errors
revalidatePath('/posts') // Update cached posts
redirect(`/post/${id}`) // Navigate to the new post page
--- END CODE BLOCK ---
Redirect an incoming request based on a path
--- CODE BLOCK 13 ---
'use server'
import { redirect } from 'next/navigation'
import { revalidatePath } from 'next/cache'
export async function createPost(id: string) {
try {
// Call database
} catch (error) {
// Handle errors
revalidatePath('/posts') // Update cached posts
redirect(`/post/${id}`) // Navigate to the new post page
--- END CODE BLOCK ---
file
307 (Temporary) or 308 (Permanent)
--- CODE BLOCK 20 ---
next.config.js
--- END CODE BLOCK ---
Redirect an incoming request based on a condition
Middleware
--- CODE BLOCK 22 ---
permanentRedirect
--- END CODE BLOCK ---
function
--- CODE BLOCK 23 ---
permanentRedirect
--- END CODE BLOCK ---
function allows you to redirect the user to another URL. You can call
--- CODE BLOCK 24 ---
permanentRedirect
--- END CODE BLOCK ---
Server Components
Route Handlers
, and
Server Actions
--- CODE BLOCK 25 ---
permanentRedirect
--- END CODE BLOCK ---
is often used after a mutation or event. For example, creating a post:
app/actions.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 26 ---
'use server'
import { permanentRedirect } from 'next/navigation'
import { revalidateTag } from 'next/cache'
export async function updateUsername(username: string, formData: FormData) {
try {
// Call database
} catch (error) {
// Handle errors
revalidateTag('username') // Update all references to the username
permanentRedirect(`/profile/${username}`) // Navigate to the new user profile
--- END CODE BLOCK ---
Good to know
--- CODE BLOCK 28 ---
permanentRedirect
--- END CODE BLOCK ---
returns a 307 (Temporary Redirect) status code by default. When used in a Server Action, it returns a 303 (See Other), which is commonly used for redirecting to a success page as a result of a POST request.
--- CODE BLOCK 29 ---
permanentRedirect
--- END CODE BLOCK ---
internally throws an error so it should be called outside of
--- CODE BLOCK 30 ---
next.config.js
--- END CODE BLOCK ---
blocks.
--- CODE BLOCK 31 ---
permanentRedirect
--- END CODE BLOCK ---
can be called in Client Components during the rendering process but not in event handlers. You can use the
--- CODE BLOCK 32 ---
useRouter()
--- END CODE BLOCK ---
hook
instead.
--- CODE BLOCK 35 ---
'use client'
import { useRouter } from 'next/navigation'
export default function Page() {
const router = useRouter()
return (
<button type="button" onClick={() => router.push('/dashboard')}>
Dashboard
</button>
--- END CODE BLOCK ---
also accepts absolute URLs and can be used to redirect to external links.
If you'd like to redirect before the render process, use
--- CODE BLOCK 36 ---
'use client'
import { useRouter } from 'next/navigation'
export default function Page() {
const router = useRouter()
return (
<button type="button" onClick={() => router.push('/dashboard')}>
Dashboard
</button>
--- END CODE BLOCK ---
Middleware
See the
--- CODE BLOCK 40 ---
next.config.js
--- END CODE BLOCK ---
API reference
for more information.
--- CODE BLOCK 42 ---
next.config.js
--- END CODE BLOCK ---
function
--- CODE BLOCK 45 ---
next.config.js
--- END CODE BLOCK ---
function allows you to
permanently
redirect the user to another URL. You can call
--- CODE BLOCK 46 ---
import type { NextConfig } from 'next'
const nextConfig: NextConfig = {
async redirects() {
return [
// Basic redirect
source: '/about',
destination: '/',
permanent: true,
// Wildcard path matching
source: '/blog/:slug',
destination: '/news/:slug',
permanent: true,
export default nextConfig
--- END CODE BLOCK ---
Server Components
Route Handlers
, and
Server Actions
--- CODE BLOCK 47 ---
import type { NextConfig } from 'next'
const nextConfig: NextConfig = {
async redirects() {
return [
// Basic redirect
source: '/about',
destination: '/',
permanent: true,
// Wildcard path matching
source: '/blog/:slug',
destination: '/news/:slug',
permanent: true,
export default nextConfig
--- END CODE BLOCK ---
is often used after a mutation or event that changes an entity's canonical URL, such as updating a user's profile URL after they change their username:
app/actions.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 53 ---
NextResponse.redirect
--- END CODE BLOCK ---
Good to know
--- CODE BLOCK 56 ---
import { NextResponse, NextRequest } from 'next/server'
import { authenticate } from 'auth-provider'
export function middleware(request: NextRequest) {
const isAuthenticated = authenticate(request)
// If the user is authenticated, continue as normal
if (isAuthenticated) {
return NextResponse.next()
// Redirect to login page if not authenticated
return NextResponse.redirect(new URL('/login', request.url))
export const config = {
matcher: '/dashboard/:path*',
--- END CODE BLOCK ---
returns a 308 (permanent redirect) status code by default.
--- CODE BLOCK 57 ---
import { NextResponse, NextRequest } from 'next/server'
import { authenticate } from 'auth-provider'
export function middleware(request: NextRequest) {
const isAuthenticated = authenticate(request)
// If the user is authenticated, continue as normal
if (isAuthenticated) {
return NextResponse.next()
// Redirect to login page if not authenticated
return NextResponse.redirect(new URL('/login', request.url))
export const config = {
matcher: '/dashboard/:path*',
--- END CODE BLOCK ---
also accepts absolute URLs and can be used to redirect to external links.
If you'd like to redirect before the render process, use
--- CODE BLOCK 59 ---
next.config.js
--- END CODE BLOCK ---
Middleware
See the
--- CODE BLOCK 60 ---
"/old": {
"destination": "/new",
"permanent": true
"/blog/post-old": {
"destination": "/blog/post-new",
"permanent": true
--- END CODE BLOCK ---
API reference
for more information.
--- CODE BLOCK 61 ---
"/old": {
"destination": "/new",
"permanent": true
"/blog/post-old": {
"destination": "/blog/post-new",
"permanent": true
--- END CODE BLOCK ---
hook
If you need to redirect inside an event handler in a Client Component, you can use the
--- CODE BLOCK 62 ---
import { NextResponse, NextRequest } from 'next/server'
import { get } from '@vercel/edge-config'
type RedirectEntry = {
destination: string
permanent: boolean
export async function middleware(request: NextRequest) {
const pathname = request.nextUrl.pathname
const redirectData = await get(pathname)
if (redirectData && typeof redirectData === 'string') {
const redirectEntry: RedirectEntry = JSON.parse(redirectData)
const statusCode = redirectEntry.permanent ? 308 : 307
return NextResponse.redirect(redirectEntry.destination, statusCode)
// No redirect found, continue without redirecting
return NextResponse.next()
--- END CODE BLOCK ---
method from the
--- CODE BLOCK 63 ---
import { NextResponse, NextRequest } from 'next/server'
import { get } from '@vercel/edge-config'
type RedirectEntry = {
destination: string
permanent: boolean
export async function middleware(request: NextRequest) {
const pathname = request.nextUrl.pathname
const redirectData = await get(pathname)
if (redirectData && typeof redirectData === 'string') {
const redirectEntry: RedirectEntry = JSON.parse(redirectData)
const statusCode = redirectEntry.permanent ? 308 : 307
return NextResponse.redirect(redirectEntry.destination, statusCode)
// No redirect found, continue without redirecting
return NextResponse.next()
--- END CODE BLOCK ---
hook. For example:
app/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 64 ---
import { NextResponse, NextRequest } from 'next/server'
import { ScalableBloomFilter } from 'bloom-filters'
import GeneratedBloomFilter from './redirects/bloom-filter.json'
type RedirectEntry = {
destination: string
permanent: boolean
// Initialize bloom filter from a generated JSON file
const bloomFilter = ScalableBloomFilter.fromJSON(GeneratedBloomFilter as any)
export async function middleware(request: NextRequest) {
// Get the path for the incoming request
const pathname = request.nextUrl.pathname
// Check if the path is in the bloom filter
if (bloomFilter.has(pathname)) {
// Forward the pathname to the Route Handler
const api = new URL(
`/api/redirects?pathname=${encodeURIComponent(request.nextUrl.pathname)}`,
request.nextUrl.origin
try {
// Fetch redirect data from the Route Handler
const redirectData = await fetch(api)
if (redirectData.ok) {
const redirectEntry: RedirectEntry | undefined =
await redirectData.json()
if (redirectEntry) {
// Determine the status code
const statusCode = redirectEntry.permanent ? 308 : 307
// Redirect to the destination
return NextResponse.redirect(redirectEntry.destination, statusCode)
} catch (error) {
console.error(error)
// No redirect found, continue the request without redirecting
return NextResponse.next()
--- END CODE BLOCK ---
Good to know
If you don't need to programmatically navigate a user, you should use a
--- CODE BLOCK 66 ---
import { NextRequest, NextResponse } from 'next/server'
import redirects from '@/app/redirects/redirects.json'
type RedirectEntry = {
destination: string
permanent: boolean
export function GET(request: NextRequest) {
const pathname = request.nextUrl.searchParams.get('pathname')
if (!pathname) {
return new Response('Bad Request', { status: 400 })
// Get the redirect entry from the redirects.json file
const redirect = (redirects as Record<string, RedirectEntry>)[pathname]
// Account for bloom filter false positives
if (!redirect) {
return new Response('No redirect', { status: 400 })
// Return the redirect entry
return NextResponse.json(redirect)
--- END CODE BLOCK ---
component.
See the
--- CODE BLOCK 67 ---
import { NextRequest, NextResponse } from 'next/server'
import redirects from '@/app/redirects/redirects.json'
type RedirectEntry = {
destination: string
permanent: boolean
export function GET(request: NextRequest) {
const pathname = request.nextUrl.searchParams.get('pathname')
if (!pathname) {
return new Response('Bad Request', { status: 400 })
// Get the redirect entry from the redirects.json file
const redirect = (redirects as Record<string, RedirectEntry>)[pathname]
// Account for bloom filter false positives
if (!redirect) {
return new Response('No redirect', { status: 400 })
// Return the redirect entry
return NextResponse.json(redirect)
--- END CODE BLOCK ---
API reference
for more information.
--- CODE BLOCK 68 ---
bloom-filters
--- END CODE BLOCK ---
[CODE_BLOCK_40]
[CODE_BLOCK_41]
option in the
[CODE_BLOCK_42]
file allows you to redirect an incoming request path to a different destination path. This is useful when you change the URL structure of pages or have a list of redirects that are known ahead of time.
[CODE_BLOCK_43]
supports
path
header, cookie, and query matching
, giving you the flexibility to redirect users based on an incoming request.
To use
[CODE_BLOCK_44]
, add the option to your
[CODE_BLOCK_45]
file:
next.config.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_46]
See the
[CODE_BLOCK_48]
API reference
for more information.
Good to know
[CODE_BLOCK_49]
can return a 307 (Temporary Redirect) or 308 (Permanent Redirect) status code with the
[CODE_BLOCK_50]
option.
[CODE_BLOCK_51]
may have a limit on platforms. For example, on Vercel, there's a limit of 1,024 redirects. To manage a large number of redirects (1000+), consider creating a custom solution using
Middleware
. See
managing redirects at scale
for more.
[CODE_BLOCK_52]
runs
before
Middleware.
[CODE_BLOCK_53]
in Middleware
Middleware allows you to run code before a request is completed. Then, based on the incoming request, redirect to a different URL using
[CODE_BLOCK_54]
. This is useful if you want to redirect users based on a condition (e.g. authentication, session management, etc) or have
a large number of redirects
For example, to redirect the user to a
[CODE_BLOCK_55]
page if they are not authenticated:
middleware.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_56]
Good to know
Middleware runs
after
[CODE_BLOCK_58]
[CODE_BLOCK_59]
before
rendering.
See the
Middleware
documentation for more information.
Managing redirects at scale (advanced)
To manage a large number of redirects (1000+), you may consider creating a custom solution using Middleware. This allows you to handle redirects programmatically without having to redeploy your application.
To do this, you'll need to consider:
Creating and storing a redirect map.
Optimizing data lookup performance.
Next.js Example
: See our
Middleware with Bloom filter
example for an implementation of the recommendations below.
1. Creating and storing a redirect map
A redirect map is a list of redirects that you can store in a database (usually a key-value store) or JSON file.
Consider the following data structure:
[CODE_BLOCK_60]
Middleware
, you can read from a database such as Vercel's
Edge Config
Redis
, and redirect the user based on the incoming request:
middleware.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_62]
2. Optimizing data lookup performance
Reading a large dataset for every incoming request can be slow and expensive. There are two ways you can optimize data lookup performance:
Use a database that is optimized for fast reads
Use a data lookup strategy such as a
Bloom filter
to efficiently check if a redirect exists
before
reading the larger redirects file or database.
Considering the previous example, you can import a generated bloom filter file into Middleware, then, check if the incoming request pathname exists in the bloom filter.
If it does, forward the request to a
Route Handler
which will check the actual file and redirect the user to the appropriate URL. This avoids importing a large redirects file into Middleware, which can slow down every incoming request.
middleware.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_64]
Then, in the Route Handler:
app/api/redirects/route.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_66]
Good to know:
To generate a bloom filter, you can use a library like
[CODE_BLOCK_68]
You should validate requests made to your Route Handler to prevent malicious requests.
Next Steps
redirect
API Reference for the redirect function.
permanentRedirect
API Reference for the permanentRedirect function.
middleware.js
API reference for the middleware.js file.
redirects
Add redirects to your Next.js app.
Was this helpful?
supported.
Send