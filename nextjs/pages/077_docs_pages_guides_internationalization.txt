SOURCE URL: https://nextjs.org/docs/pages/guides/internationalization
SCRAPED: 2025-06-19 17:18:07
================================================================================

Menu
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Pages Router
Guides
Internationalization
You are currently viewing the documentation for Pages Router.
How to implement internationalization in Next.js
Examples
i18n routing
Next.js has built-in support for internationalized (
i18n
) routing since
--- CODE BLOCK 3 ---
react-i18next
--- END CODE BLOCK ---
. You can provide a list of locales, the default locale, and domain-specific locales and Next.js will automatically handle the routing.
The i18n routing support is currently meant to complement existing i18n library solutions like
--- CODE BLOCK 7 ---
next-translate
--- END CODE BLOCK ---
--- CODE BLOCK 8 ---
next-multilingual
--- END CODE BLOCK ---
--- CODE BLOCK 10 ---
paraglide-next
--- END CODE BLOCK ---
--- CODE BLOCK 11 ---
next-intlayer
--- END CODE BLOCK ---
--- CODE BLOCK 13 ---
next.config.js
--- END CODE BLOCK ---
--- CODE BLOCK 14 ---
language-region-script
--- END CODE BLOCK ---
--- CODE BLOCK 20 ---
module.exports = {
i18n: {
// These are all the locales you want to support in
// your application
locales: ['en-US', 'fr', 'nl-NL'],
// This is the default locale you want to be used when visiting
// a non-locale prefixed path e.g. `/hello`
defaultLocale: 'en-US',
// This is a list of locale domains and the default locale they
// should handle (these are only required when setting up domain routing)
// Note: subdomains must be included in the domain value to be matched e.g. "fr.example.com".
domains: [
domain: 'example.com',
defaultLocale: 'en-US',
domain: 'example.nl',
defaultLocale: 'nl-NL',
domain: 'example.fr',
defaultLocale: 'fr',
// an optional http field can also be used to test
// locale domains locally with http instead of https
http: true,
--- END CODE BLOCK ---
--- CODE BLOCK 21 ---
module.exports = {
i18n: {
// These are all the locales you want to support in
// your application
locales: ['en-US', 'fr', 'nl-NL'],
// This is the default locale you want to be used when visiting
// a non-locale prefixed path e.g. `/hello`
defaultLocale: 'en-US',
// This is a list of locale domains and the default locale they
// should handle (these are only required when setting up domain routing)
// Note: subdomains must be included in the domain value to be matched e.g. "fr.example.com".
domains: [
domain: 'example.com',
defaultLocale: 'en-US',
domain: 'example.nl',
defaultLocale: 'nl-NL',
domain: 'example.fr',
defaultLocale: 'fr',
// an optional http field can also be used to test
// locale domains locally with http instead of https
http: true,
--- END CODE BLOCK ---
--- CODE BLOCK 22 ---
module.exports = {
i18n: {
locales: ['en-US', 'fr', 'nl-NL'],
defaultLocale: 'en-US',
--- END CODE BLOCK ---
--- CODE BLOCK 23 ---
module.exports = {
i18n: {
locales: ['en-US', 'fr', 'nl-NL'],
defaultLocale: 'en-US',
--- END CODE BLOCK ---
and others by streamlining the routes and locale parsing.
Getting started
To get started, add the
--- CODE BLOCK 28 ---
pages/blog.js
--- END CODE BLOCK ---
config to your
--- CODE BLOCK 31 ---
/nl-nl/blog
--- END CODE BLOCK ---
file.
Locales are
UTS Locale Identifiers
, a standardized format for defining locales.
Generally a Locale Identifier is made up of a language, region, and script separated by a dash:
--- CODE BLOCK 32 ---
module.exports = {
i18n: {
locales: ['en-US', 'fr', 'nl-NL', 'nl-BE'],
defaultLocale: 'en-US',
domains: [
// Note: subdomains must be included in the domain value to be matched
// e.g. www.example.com should be used if that is the expected hostname
domain: 'example.com',
defaultLocale: 'en-US',
domain: 'example.fr',
defaultLocale: 'fr',
domain: 'example.nl',
defaultLocale: 'nl-NL',
// specify other locales that should be redirected
// to this domain
locales: ['nl-BE'],
--- END CODE BLOCK ---
. The region and script are optional. An example:
--- CODE BLOCK 33 ---
module.exports = {
i18n: {
locales: ['en-US', 'fr', 'nl-NL', 'nl-BE'],
defaultLocale: 'en-US',
domains: [
// Note: subdomains must be included in the domain value to be matched
// e.g. www.example.com should be used if that is the expected hostname
domain: 'example.com',
defaultLocale: 'en-US',
domain: 'example.fr',
defaultLocale: 'fr',
domain: 'example.nl',
defaultLocale: 'nl-NL',
// specify other locales that should be redirected
// to this domain
locales: ['nl-BE'],
--- END CODE BLOCK ---
- English as spoken in the United States
--- CODE BLOCK 34 ---
pages/blog.js
--- END CODE BLOCK ---
- Dutch as spoken in the Netherlands
--- CODE BLOCK 35 ---
example.com/blog
--- END CODE BLOCK ---
- Dutch, no specific region
If user locale is
--- CODE BLOCK 36 ---
www.example.com/blog
--- END CODE BLOCK ---
and it is not listed in your configuration, they will be redirected to
--- CODE BLOCK 37 ---
example.fr/blog
--- END CODE BLOCK ---
if available, or to the default locale otherwise.
If you don't plan to support all regions of a country, it is therefore a good practice to include country locales that will act as fallbacks.
next.config.js
--- CODE BLOCK 38 ---
example.nl/blog
--- END CODE BLOCK ---
Locale Strategies
There are two locale handling strategies: Sub-path Routing and Domain Routing.
Sub-path Routing
Sub-path Routing puts the locale in the url path.
next.config.js
--- CODE BLOCK 41 ---
Accept-Language
--- END CODE BLOCK ---
With the above configuration
--- CODE BLOCK 44 ---
example.com
--- END CODE BLOCK ---
--- CODE BLOCK 48 ---
next.config.js
--- END CODE BLOCK ---
, and
--- CODE BLOCK 50 ---
module.exports = {
i18n: {
locales: ['default', 'en', 'de', 'fr'],
defaultLocale: 'default',
localeDetection: false,
trailingSlash: true,
--- END CODE BLOCK ---
will be available to be routed to, and
--- CODE BLOCK 51 ---
module.exports = {
i18n: {
locales: ['default', 'en', 'de', 'fr'],
defaultLocale: 'default',
localeDetection: false,
trailingSlash: true,
--- END CODE BLOCK ---
is the default locale. If you have a
--- CODE BLOCK 52 ---
import { NextRequest, NextResponse } from 'next/server'
const PUBLIC_FILE = /\.(.*)$/
export async function middleware(req: NextRequest) {
if (
req.nextUrl.pathname.startsWith('/_next') ||
req.nextUrl.pathname.includes('/api/') ||
PUBLIC_FILE.test(req.nextUrl.pathname)
return
if (req.nextUrl.locale === 'default') {
const locale = req.cookies.get('NEXT_LOCALE')?.value || 'en'
return NextResponse.redirect(
new URL(`/${locale}${req.nextUrl.pathname}${req.nextUrl.search}`, req.url)
--- END CODE BLOCK ---
the following urls would be available:
--- CODE BLOCK 53 ---
import { NextRequest, NextResponse } from 'next/server'
const PUBLIC_FILE = /\.(.*)$/
export async function middleware(req: NextRequest) {
if (
req.nextUrl.pathname.startsWith('/_next') ||
req.nextUrl.pathname.includes('/api/') ||
PUBLIC_FILE.test(req.nextUrl.pathname)
return
if (req.nextUrl.locale === 'default') {
const locale = req.cookies.get('NEXT_LOCALE')?.value || 'en'
return NextResponse.redirect(
new URL(`/${locale}${req.nextUrl.pathname}${req.nextUrl.search}`, req.url)
--- END CODE BLOCK ---
--- CODE BLOCK 55 ---
module.exports = {
i18n: {
localeDetection: false,
--- END CODE BLOCK ---
--- CODE BLOCK 56 ---
module.exports = {
i18n: {
localeDetection: false,
--- END CODE BLOCK ---
The default locale does not have a prefix.
Domain Routing
By using domain routing you can configure locales to be served from different domains:
next.config.js
--- CODE BLOCK 57 ---
localeDetection
--- END CODE BLOCK ---
For example if you have
--- CODE BLOCK 62 ---
defaultLocale
--- END CODE BLOCK ---
the following urls will be available:
--- CODE BLOCK 63 ---
getStaticProps
--- END CODE BLOCK ---
--- CODE BLOCK 64 ---
getServerSideProps
--- END CODE BLOCK ---
--- CODE BLOCK 65 ---
getStaticPaths
--- END CODE BLOCK ---
--- CODE BLOCK 67 ---
defaultLocale
--- END CODE BLOCK ---
--- CODE BLOCK 69 ---
next/router
--- END CODE BLOCK ---
Automatic Locale Detection
When a user visits the application root (generally
--- CODE BLOCK 74 ---
import Link from 'next/link'
export default function IndexPage(props) {
return (
<Link href="/another" locale="fr">
To /fr/another
</Link>
--- END CODE BLOCK ---
), Next.js will try to automatically detect which locale the user prefers based on the
--- CODE BLOCK 75 ---
import Link from 'next/link'
export default function IndexPage(props) {
return (
<Link href="/another" locale="fr">
To /fr/another
</Link>
--- END CODE BLOCK ---
header and the current domain.
If a locale other than the default locale is detected, the user will be redirected to either:
When using Sub-path Routing:
The locale prefixed path
When using Domain Routing:
The domain with that locale specified as the default
When using Domain Routing, if a user with the
--- CODE BLOCK 76 ---
next/router
--- END CODE BLOCK ---
header
--- CODE BLOCK 78 ---
import { useRouter } from 'next/router'
export default function IndexPage(props) {
const router = useRouter()
return (
<div
onClick={() => {
router.push('/another', '/another', { locale: 'fr' })
to /fr/another
</div>
--- END CODE BLOCK ---
visits
--- CODE BLOCK 79 ---
import { useRouter } from 'next/router'
export default function IndexPage(props) {
const router = useRouter()
return (
<div
onClick={() => {
router.push('/another', '/another', { locale: 'fr' })
to /fr/another
</div>
--- END CODE BLOCK ---
, they will be redirected to
--- CODE BLOCK 82 ---
import { useRouter } from 'next/router'
const router = useRouter()
const { pathname, asPath, query } = router
// change just the locale and maintain all other route information including href's query
router.push({ pathname, query }, asPath, { locale: nextLocale })
--- END CODE BLOCK ---
since that domain handles the
--- CODE BLOCK 83 ---
import { useRouter } from 'next/router'
const router = useRouter()
const { pathname, asPath, query } = router
// change just the locale and maintain all other route information including href's query
router.push({ pathname, query }, asPath, { locale: nextLocale })
--- END CODE BLOCK ---
locale by default.
When using Sub-path Routing, the user would be redirected to
--- CODE BLOCK 84 ---
router.push
--- END CODE BLOCK ---
Prefixing the Default Locale
With Next.js 12 and
Middleware
, we can add a prefix to the default locale with a
workaround
For example, here's a
--- CODE BLOCK 86 ---
import Link from 'next/link'
export default function IndexPage(props) {
return (
<Link href="/fr/another" locale={false}>
To /fr/another
</Link>
--- END CODE BLOCK ---
file with support for a few languages. Note the
--- CODE BLOCK 87 ---
import Link from 'next/link'
export default function IndexPage(props) {
return (
<Link href="/fr/another" locale={false}>
To /fr/another
</Link>
--- END CODE BLOCK ---
locale has been added intentionally.
next.config.js
--- CODE BLOCK 88 ---
NEXT_LOCALE
--- END CODE BLOCK ---
Next, we can use
Middleware
to add custom routing rules:
middleware.ts
--- CODE BLOCK 92 ---
NEXT_LOCALE=en
--- END CODE BLOCK ---
This
Middleware
skips adding the default prefix to
API Routes
public
files like fonts or images. If a request is made to the default locale, we redirect to our prefix
--- CODE BLOCK 102 ---
output: 'export'
--- END CODE BLOCK ---
Disabling Automatic Locale Detection
The automatic locale detection can be disabled with:
next.config.js
--- CODE BLOCK 103 ---
getStaticProps
--- END CODE BLOCK ---
When
--- CODE BLOCK 105 ---
getStaticPaths
--- END CODE BLOCK ---
is set to
--- CODE BLOCK 109 ---
export const getStaticPaths = ({ locales }) => {
return {
paths: [
// if no `locale` is provided only the defaultLocale will be generated
{ params: { slug: 'post-1' }, locale: 'en-US' },
{ params: { slug: 'post-1' }, locale: 'fr' },
fallback: true,
--- END CODE BLOCK ---
Next.js will no longer automatically redirect based on the user's preferred locale and will only provide locale information detected from either the locale based domain or locale path as described above.
Accessing the locale information
You can access the locale information via the Next.js router. For example, using the
--- CODE BLOCK 110 ---
export const getStaticPaths = ({ locales }) => {
return {
paths: [
// if no `locale` is provided only the defaultLocale will be generated
{ params: { slug: 'post-1' }, locale: 'en-US' },
{ params: { slug: 'post-1' }, locale: 'fr' },
fallback: true,
--- END CODE BLOCK ---
hook the following properties are available:
--- CODE BLOCK 111 ---
getStaticProps
--- END CODE BLOCK ---
contains the currently active locale.
--- CODE BLOCK 112 ---
getStaticProps
--- END CODE BLOCK ---
contains all configured locales.
--- CODE BLOCK 113 ---
getStaticProps
--- END CODE BLOCK ---
contains the configured default locale.
When
pre-rendering
pages with
--- CODE BLOCK 114 ---
getStaticProps
--- END CODE BLOCK ---
--- CODE BLOCK 115 ---
getStaticProps
--- END CODE BLOCK ---
, the locale information is provided in
the context
provided to the function.
When leveraging
--- CODE BLOCK 117 ---
getStaticPaths
--- END CODE BLOCK ---
, the configured locales are provided in the context parameter of the function under
--- CODE BLOCK 118 ---
getStaticProps
--- END CODE BLOCK ---
and the configured defaultLocale under
--- CODE BLOCK 119 ---
getStaticProps
--- END CODE BLOCK ---
Transition between locales
You can use
--- CODE BLOCK 121 ---
notFound: true
--- END CODE BLOCK ---
--- CODE BLOCK 122 ---
getStaticProps
--- END CODE BLOCK ---
to transition between locales.
--- CODE BLOCK 123 ---
export async function getStaticProps({ locale }) {
// Call an external API endpoint to get posts.
// You can use any data fetching library
const res = await fetch(`https://.../posts?locale=${locale}`)
const posts = await res.json()
if (posts.length === 0) {
return {
notFound: true,
// By returning { props: posts }, the Blog component
// will receive `posts` as a prop at build time
return {
props: {
posts,
--- END CODE BLOCK ---
--- CODE BLOCK 124 ---
export async function getStaticProps({ locale }) {
// Call an external API endpoint to get posts.
// You can use any data fetching library
const res = await fetch(`https://.../posts?locale=${locale}`)
const posts = await res.json()
if (posts.length === 0) {
return {
notFound: true,
// By returning { props: posts }, the Blog component
// will receive `posts` as a prop at build time
return {
props: {
posts,
--- END CODE BLOCK ---
prop can be provided to transition to a different locale from the currently active one. If no
[CODE_BLOCK_72]
prop is provided, the currently active
[CODE_BLOCK_73]
is used during client-transitions. For example:
[CODE_BLOCK_74]
When using the
[CODE_BLOCK_76]
methods directly, you can specify the
[CODE_BLOCK_77]
that should be used via the transition options. For example:
[CODE_BLOCK_78]
Note that to handle switching only the
[CODE_BLOCK_80]
while preserving all routing information such as
dynamic route
query values or hidden href query values, you can provide the
[CODE_BLOCK_81]
parameter as an object:
[CODE_BLOCK_82]
here
for more information on the object structure for
[CODE_BLOCK_84]
If you have a
[CODE_BLOCK_85]
that already includes the locale you can opt-out of automatically handling the locale prefixing:
[CODE_BLOCK_86]
Leveraging the
[CODE_BLOCK_88]
cookie
Next.js allows setting a
[CODE_BLOCK_89]
cookie, which takes priority over the accept-language header. This cookie can be set using a language switcher and then when a user comes back to the site it will leverage the locale specified in the cookie when redirecting from
[CODE_BLOCK_90]
to the correct locale location.
For example, if a user prefers the locale
[CODE_BLOCK_91]
in their accept-language header but a
[CODE_BLOCK_92]
cookie is set the
[CODE_BLOCK_93]
locale when visiting
[CODE_BLOCK_94]
the user will be redirected to the
[CODE_BLOCK_95]
locale location until the cookie is removed or expired.
Search Engine Optimization
Since Next.js knows what language the user is visiting it will automatically add the
[CODE_BLOCK_96]
attribute to the
[CODE_BLOCK_97]
tag.
Next.js doesn't know about variants of a page so it's up to you to add the
[CODE_BLOCK_98]
meta tags using
[CODE_BLOCK_99]
. You can learn more about
[CODE_BLOCK_100]
in the
Google Webmasters documentation
How does this work with Static Generation?
Note that Internationalized Routing does not integrate with
[CODE_BLOCK_101]
as it does not leverage the Next.js routing layer. Hybrid Next.js applications that do not use
[CODE_BLOCK_102]
are fully supported.
Dynamic Routes and
[CODE_BLOCK_103]
Pages
For pages using
[CODE_BLOCK_104]
with
Dynamic Routes
, all locale variants of the page desired to be prerendered need to be returned from
[CODE_BLOCK_105]
. Along with the
[CODE_BLOCK_106]
object returned for
[CODE_BLOCK_107]
, you can also return a
[CODE_BLOCK_108]
field specifying which locale you want to render. For example:
pages/blog/[slug].js
[CODE_BLOCK_109]
Automatically Statically Optimized
and non-dynamic
[CODE_BLOCK_111]
pages,
a version of the page will be generated for each locale
. This is important to consider because it can increase build times depending on how many locales are configured inside
[CODE_BLOCK_112]
For example, if you have 50 locales configured with 10 non-dynamic pages using
[CODE_BLOCK_113]
, this means
[CODE_BLOCK_114]
will be called 500 times. 50 versions of the 10 pages will be generated during each build.
To decrease the build time of dynamic pages with
[CODE_BLOCK_115]
, use a
[CODE_BLOCK_116]
mode
. This allows you to return only the most popular paths and locales from
[CODE_BLOCK_117]
for prerendering during the build. Then, Next.js will build the remaining pages at runtime as they are requested.
Automatically Statically Optimized Pages
For pages that are
automatically statically optimized
, a version of the page will be generated for each locale.
Non-dynamic getStaticProps Pages
For non-dynamic
[CODE_BLOCK_118]
pages, a version is generated for each locale like above.
[CODE_BLOCK_119]
is called with each
[CODE_BLOCK_120]
that is being rendered. If you would like to opt-out of a certain locale from being pre-rendered, you can return
[CODE_BLOCK_121]
from
[CODE_BLOCK_122]
and this variant of the page will not be generated.
[CODE_BLOCK_123]
Limits for the i18n config
[CODE_BLOCK_125]
: 100 total locales
[CODE_BLOCK_126]
: 100 total locale domain items
Good to know
: These limits have been added initially to prevent potential
performance issues at build time
. You can workaround these limits with custom routing using
Middleware
in Next.js 12.
Was this helpful?
supported.
Send