SOURCE URL: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Reflect
SCRAPED: 2025-06-19 18:18:34
================================================================================

--- CODE BLOCK 12 ---
deleteProperty
--- END CODE BLOCK ---
namespace object contains static methods for invoking interceptable JavaScript object internal methods. The methods are the same as those of
proxy handlers
Description
Unlike most global objects,
--- CODE BLOCK 14 ---
Reflect.deleteProperty()
--- END CODE BLOCK ---
is not a constructor. You cannot use it with the
--- CODE BLOCK 16 ---
targetObject
--- END CODE BLOCK ---
operator
or invoke the
--- CODE BLOCK 19 ---
const p = new Proxy(
deleteProperty(targetObject, property) {
// Custom functionality: log the deletion
console.log("Deleting property:", property);
// Execute the default introspection behavior
return Reflect.deleteProperty(targetObject, property);
--- END CODE BLOCK ---
object as a function. All properties and methods of
--- CODE BLOCK 20 ---
const p = new Proxy(
deleteProperty(targetObject, property) {
// Custom functionality: log the deletion
console.log("Deleting property:", property);
// Execute the default introspection behavior
return Reflect.deleteProperty(targetObject, property);
--- END CODE BLOCK ---
are static (just like the
--- CODE BLOCK 22 ---
Reflect.construct()
--- END CODE BLOCK ---
object).
--- CODE BLOCK 26 ---
Reflect.get()
--- END CODE BLOCK ---
object provides a collection of static functions which have the same names as the
proxy handler methods
The major use case of
--- CODE BLOCK 32 ---
Reflect[Symbol.toStringTag]
--- END CODE BLOCK ---
is to provide default forwarding behavior in
--- CODE BLOCK 33 ---
[Symbol.toStringTag]
--- END CODE BLOCK ---
handler traps. A
trap
is used to intercept an operation on an object — it provides a custom implementation for an
object internal method
. The
--- CODE BLOCK 35 ---
Object.prototype.toString()
--- END CODE BLOCK ---
API is used to invoke the corresponding internal method. For example, the code below creates a proxy
--- CODE BLOCK 36 ---
Reflect.apply()
--- END CODE BLOCK ---
with a
--- CODE BLOCK 38 ---
argumentsList
--- END CODE BLOCK ---
trap that intercepts the
--- CODE BLOCK 39 ---
Function.prototype.apply()
--- END CODE BLOCK ---
internal method.
--- CODE BLOCK 40 ---
Reflect.construct()
--- END CODE BLOCK ---
is used to invoke the default
--- CODE BLOCK 42 ---
new target(...argumentsList)
--- END CODE BLOCK ---
behavior on
--- CODE BLOCK 43 ---
Reflect.defineProperty()
--- END CODE BLOCK ---
directly. You can replace it with
--- CODE BLOCK 44 ---
Object.defineProperty()
--- END CODE BLOCK ---
, but using
--- CODE BLOCK 46 ---
Reflect.deleteProperty()
--- END CODE BLOCK ---
saves you from having to remember the syntax that each internal method corresponds to.
Copy to Clipboard
--- CODE BLOCK 48 ---
delete target[propertyKey]
--- END CODE BLOCK ---
--- CODE BLOCK 50 ---
target[propertyKey]
--- END CODE BLOCK ---
methods also allow finer control of how the internal method is invoked. For example,
--- CODE BLOCK 51 ---
Reflect.getOwnPropertyDescriptor()
--- END CODE BLOCK ---
is the only way to construct a target function with a specific
--- CODE BLOCK 52 ---
Object.getOwnPropertyDescriptor()
--- END CODE BLOCK ---
value. If you use the
--- CODE BLOCK 54 ---
Reflect.getPrototypeOf()
--- END CODE BLOCK ---
operator to invoke a function, the
--- CODE BLOCK 55 ---
Object.getPrototypeOf()
--- END CODE BLOCK ---
value is always the function itself. This has important effects with
subclassing
. For another example,
--- CODE BLOCK 56 ---
Reflect.has()
--- END CODE BLOCK ---
allows you to run a
getter
with a custom
--- CODE BLOCK 58 ---
Reflect.isExtensible()
--- END CODE BLOCK ---
value, while
property accessors
always use the current object as the
--- CODE BLOCK 59 ---
Object.isExtensible()
--- END CODE BLOCK ---
value.
Nearly every
--- CODE BLOCK 61 ---
Reflect.ownKeys()
--- END CODE BLOCK ---
method's behavior can be done with some other syntax or method. Some of these methods have corresponding static methods of the same name on
--- CODE BLOCK 62 ---
Reflect.preventExtensions()
--- END CODE BLOCK ---
, although they do have some subtle differences. For the exact differences, see the description for each
--- CODE BLOCK 63 ---
Object.preventExtensions()
--- END CODE BLOCK ---
method.
Static properties
--- CODE BLOCK 65 ---
Reflect.set()
--- END CODE BLOCK ---
The initial value of the
--- CODE BLOCK 67 ---
Reflect.setPrototypeOf()
--- END CODE BLOCK ---
property is the string
--- CODE BLOCK 69 ---
const duck = {
name: "Maurice",
color: "white",
greeting() {
console.log(`Quaaaack! My name is ${this.name}`);
Reflect.has(duck, "color");
// true
Reflect.has(duck, "haircut");
// false
--- END CODE BLOCK ---
. This property is used in
--- CODE BLOCK 70 ---
const duck = {
name: "Maurice",
color: "white",
greeting() {
console.log(`Quaaaack! My name is ${this.name}`);
Reflect.has(duck, "color");
// true
Reflect.has(duck, "haircut");
// false
--- END CODE BLOCK ---
Static methods
--- CODE BLOCK 71 ---
Reflect.ownKeys(duck);
// [ "name", "color", "greeting" ]
--- END CODE BLOCK ---
Calls a
--- CODE BLOCK 72 ---
Reflect.ownKeys(duck);
// [ "name", "color", "greeting" ]
--- END CODE BLOCK ---
function with arguments as specified by the
--- CODE BLOCK 73 ---
Reflect.set(duck, "eyes", "black");
// returns "true" if successful
// "duck" now contains the property "eyes: 'black'"
--- END CODE BLOCK ---
parameter. See also
--- CODE BLOCK 74 ---
Reflect.set(duck, "eyes", "black");
// returns "true" if successful
// "duck" now contains the property "eyes: 'black'"
--- END CODE BLOCK ---
[CODE_BLOCK_40]
[CODE_BLOCK_41]
operator
as a function. Equivalent to calling
[CODE_BLOCK_42]
. Also provides the option to specify a different prototype.
[CODE_BLOCK_43]
Similar to
[CODE_BLOCK_44]
. Returns a boolean that is
[CODE_BLOCK_45]
if the property was successfully defined.
[CODE_BLOCK_46]
[CODE_BLOCK_47]
operator
as a function. Equivalent to calling
[CODE_BLOCK_48]
[CODE_BLOCK_49]
Returns the value of the property. Works like getting a property from an object (
[CODE_BLOCK_50]
) as a function.
[CODE_BLOCK_51]
Similar to
[CODE_BLOCK_52]
. Returns a property descriptor of the given property if it exists on the object,
[CODE_BLOCK_53]
otherwise.
[CODE_BLOCK_54]
Same as
[CODE_BLOCK_55]
[CODE_BLOCK_56]
Returns a boolean indicating whether the target has the property. Either as own or inherited. Works like the
[CODE_BLOCK_57]
operator
as a function.
[CODE_BLOCK_58]
Same as
[CODE_BLOCK_59]
. Returns a boolean that is
[CODE_BLOCK_60]
if the target is extensible.
[CODE_BLOCK_61]
Returns an array of the target object's own (not inherited) property keys.
[CODE_BLOCK_62]
Similar to
[CODE_BLOCK_63]
. Returns a boolean that is
[CODE_BLOCK_64]
if the update was successful.
[CODE_BLOCK_65]
A function that assigns values to properties. Returns a boolean that is
[CODE_BLOCK_66]
if the update was successful.
[CODE_BLOCK_67]
A function that sets the prototype of an object. Returns a boolean that is
[CODE_BLOCK_68]
if the update was successful.
Examples
Detecting whether an object contains certain properties
Copy to Clipboard
[CODE_BLOCK_69]
Returning the object's own keys
Copy to Clipboard
[CODE_BLOCK_71]
Adding a new property to the object
Copy to Clipboard
[CODE_BLOCK_73]
Specifications
Specification
ECMAScript® 2026 Language Specification
sec-reflect-object
Browser compatibility
See also
[CODE_BLOCK_75]
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
Jul 12, 2024
MDN contributors
View this page on GitHub
Report a problem with this content