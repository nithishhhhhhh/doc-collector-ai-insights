SOURCE URL: https://nextjs.org/docs/app/guides/videos
SCRAPED: 2025-06-19 17:38:37
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
App Router
Guides
Videos
How to use and optimize videos
This page outlines how to use videos with Next.js applications, showing how to store and display video files without affecting performance.
Using
--- CODE BLOCK 7 ---
export function Video() {
return (
<video width="320" height="240" controls preload="none">
<source src="/path/to/video.mp4" type="video/mp4" />
<track
src="/path/to/captions.vtt"
kind="subtitles"
srcLang="en"
label="English"
Your browser does not support the video tag.
</video>
--- END CODE BLOCK ---
--- CODE BLOCK 8 ---
export function Video() {
return (
<video width="320" height="240" controls preload="none">
<source src="/path/to/video.mp4" type="video/mp4" />
<track
src="/path/to/captions.vtt"
kind="subtitles"
srcLang="en"
label="English"
Your browser does not support the video tag.
</video>
--- END CODE BLOCK ---
Videos can be embedded on the page using the HTML
--- CODE BLOCK 11 ---
<video src="/path/to/video.mp4" />
--- END CODE BLOCK ---
tag for direct video files and
--- CODE BLOCK 13 ---
<video width="320" />
--- END CODE BLOCK ---
for external platform-hosted videos.
--- CODE BLOCK 15 ---
<video height="240" />
--- END CODE BLOCK ---
The HTML
--- CODE BLOCK 17 ---
<video controls />
--- END CODE BLOCK ---
tag can embed self-hosted or directly served video content, allowing full control over the playback and appearance.
app/ui/video.jsx
--- CODE BLOCK 19 ---
<video autoPlay />
--- END CODE BLOCK ---
Common
--- CODE BLOCK 24 ---
<video muted />
--- END CODE BLOCK ---
tag attributes
Attribute
Description
Example Value
--- CODE BLOCK 29 ---
<video preload="none" />
--- END CODE BLOCK ---
Specifies the source of the video file.
--- CODE BLOCK 30 ---
playsInline
--- END CODE BLOCK ---
--- CODE BLOCK 31 ---
<video playsInline />
--- END CODE BLOCK ---
Sets the width of the video player.
--- CODE BLOCK 34 ---
playsInline
--- END CODE BLOCK ---
--- CODE BLOCK 40 ---
export default function Page() {
return (
<iframe src="https://www.youtube.com/embed/19g66ezsKAg" allowFullScreen />
--- END CODE BLOCK ---
Sets the height of the video player.
--- CODE BLOCK 41 ---
export default function Page() {
return (
<iframe src="https://www.youtube.com/embed/19g66ezsKAg" allowFullScreen />
--- END CODE BLOCK ---
--- CODE BLOCK 44 ---
<iframe src="https://example.com" />
--- END CODE BLOCK ---
If present, it displays the default set of playback controls.
--- CODE BLOCK 46 ---
<iframe width="500" />
--- END CODE BLOCK ---
--- CODE BLOCK 48 ---
<iframe height="300" />
--- END CODE BLOCK ---
Automatically starts playing the video when the page loads. Note: Autoplay policies vary across browsers.
--- CODE BLOCK 49 ---
allowFullScreen
--- END CODE BLOCK ---
--- CODE BLOCK 50 ---
<iframe allowFullScreen />
--- END CODE BLOCK ---
Loops the video playback.
--- CODE BLOCK 52 ---
<iframe sandbox />
--- END CODE BLOCK ---
--- CODE BLOCK 54 ---
<iframe loading="lazy" />
--- END CODE BLOCK ---
Mutes the audio by default. Often used with
--- CODE BLOCK 56 ---
<iframe title="Description" />
--- END CODE BLOCK ---
--- CODE BLOCK 59 ---
export default async function VideoComponent() {
const src = await getVideoSrc()
return <iframe src={src} allowFullScreen />
--- END CODE BLOCK ---
--- CODE BLOCK 60 ---
export default async function VideoComponent() {
const src = await getVideoSrc()
return <iframe src={src} allowFullScreen />
--- END CODE BLOCK ---
Specifies how the video is preloaded. Values:
--- CODE BLOCK 61 ---
import { Suspense } from 'react'
import VideoComponent from '../ui/VideoComponent.jsx'
export default function Page() {
return (
<section>
<Suspense fallback={<p>Loading video...</p>}>
<VideoComponent />
</Suspense>
{/* Other content of the page */}
</section>
--- END CODE BLOCK ---
--- CODE BLOCK 62 ---
import { Suspense } from 'react'
import VideoComponent from '../ui/VideoComponent.jsx'
export default function Page() {
return (
<section>
<Suspense fallback={<p>Loading video...</p>}>
<VideoComponent />
</Suspense>
{/* Other content of the page */}
</section>
--- END CODE BLOCK ---
--- CODE BLOCK 63 ---
import { Suspense } from 'react'
import VideoComponent from '../ui/VideoComponent.jsx'
import VideoSkeleton from '../ui/VideoSkeleton.jsx'
export default function Page() {
return (
<section>
<Suspense fallback={<VideoSkeleton />}>
<VideoComponent />
</Suspense>
{/* Other content of the page */}
</section>
--- END CODE BLOCK ---
--- CODE BLOCK 64 ---
import { Suspense } from 'react'
import VideoComponent from '../ui/VideoComponent.jsx'
import VideoSkeleton from '../ui/VideoSkeleton.jsx'
export default function Page() {
return (
<section>
<Suspense fallback={<VideoSkeleton />}>
<VideoComponent />
</Suspense>
{/* Other content of the page */}
</section>
--- END CODE BLOCK ---
--- CODE BLOCK 66 ---
import { Suspense } from 'react'
import { list } from '@vercel/blob'
export default function Page() {
return (
<Suspense fallback={<p>Loading video...</p>}>
<VideoComponent fileName="my-video.mp4" />
</Suspense>
async function VideoComponent({ fileName }) {
const { blobs } = await list({
prefix: fileName,
limit: 1,
const { url } = blobs[0]
return (
<video controls preload="none" aria-label="Video player">
<source src={url} type="video/mp4" />
Your browser does not support the video tag.
</video>
--- END CODE BLOCK ---
Enables inline playback on iOS devices, often necessary for autoplay to work on iOS Safari.
--- CODE BLOCK 67 ---
import { Suspense } from 'react'
import { list } from '@vercel/blob'
export default function Page() {
return (
<Suspense fallback={<p>Loading video...</p>}>
<VideoComponent fileName="my-video.mp4" />
</Suspense>
async function VideoComponent({ fileName }) {
const { blobs } = await list({
prefix: fileName,
limit: 1,
const { url } = blobs[0]
return (
<video controls preload="none" aria-label="Video player">
<source src={url} type="video/mp4" />
Your browser does not support the video tag.
</video>
--- END CODE BLOCK ---
Good to know
: When using the
--- CODE BLOCK 68 ---
@vercel/blob
--- END CODE BLOCK ---
attribute, it is important to also include the
--- CODE BLOCK 69 ---
VideoComponent
--- END CODE BLOCK ---
attribute to ensure the video plays automatically in most browsers and the
--- CODE BLOCK 72 ---
<VideoComponent>
--- END CODE BLOCK ---
attribute for compatibility with iOS devices.
For a comprehensive list of video attributes, refer to the
MDN documentation
Video best practices
Fallback Content:
When using the
--- CODE BLOCK 73 ---
async function VideoComponent({ fileName }) {
const { blobs } = await list({
prefix: fileName,
limit: 2,
const { url } = blobs[0]
const { url: captionsUrl } = blobs[1]
return (
<video controls preload="none" aria-label="Video player">
<source src={url} type="video/mp4" />
<track src={captionsUrl} kind="subtitles" srcLang="en" label="English" />
Your browser does not support the video tag.
</video>
--- END CODE BLOCK ---
tag, include fallback content inside the tag for browsers that do not support video playback.
Subtitles or Captions:
Include subtitles or captions for users who are deaf or hard of hearing. Utilize the
--- CODE BLOCK 74 ---
async function VideoComponent({ fileName }) {
const { blobs } = await list({
prefix: fileName,
limit: 2,
const { url } = blobs[0]
const { url: captionsUrl } = blobs[1]
return (
<video controls preload="none" aria-label="Video player">
<source src={url} type="video/mp4" />
<track src={captionsUrl} kind="subtitles" srcLang="en" label="English" />
Your browser does not support the video tag.
</video>
--- END CODE BLOCK ---
tag with your
--- CODE BLOCK 77 ---
next-video.dev
--- END CODE BLOCK ---
elements to specify caption file sources.
Accessible Controls:
Standard HTML5 video controls are recommended for keyboard navigation and screen reader compatibility. For advanced needs, consider third-party players like
react-player
video.js
, which offer accessible controls and consistent browser experience.
--- CODE BLOCK 78 ---
<CldVideoPlayer>
--- END CODE BLOCK ---
The HTML
[CODE_BLOCK_39]
tag allows you to embed videos from external platforms like YouTube or Vimeo.
app/page.jsx
[CODE_BLOCK_40]
Common
[CODE_BLOCK_42]
tag attributes
Attribute
Description
Example Value
[CODE_BLOCK_43]
The URL of the page to embed.
[CODE_BLOCK_44]
[CODE_BLOCK_45]
Sets the width of the iframe.
[CODE_BLOCK_46]
[CODE_BLOCK_47]
Sets the height of the iframe.
[CODE_BLOCK_48]
[CODE_BLOCK_49]
Allows the iframe content to be displayed in full-screen mode.
[CODE_BLOCK_50]
[CODE_BLOCK_51]
Enables an extra set of restrictions on the content within the iframe.
[CODE_BLOCK_52]
[CODE_BLOCK_53]
Optimize loading behavior (e.g., lazy loading).
[CODE_BLOCK_54]
[CODE_BLOCK_55]
Provides a title for the iframe to support accessibility.
[CODE_BLOCK_56]
For a comprehensive list of iframe attributes, refer to the
MDN documentation
Choosing a video embedding method
There are two ways you can embed videos in your Next.js application:
Self-hosted or direct video files:
Embed self-hosted videos using the
[CODE_BLOCK_57]
tag for scenarios requiring detailed control over the player's functionality and appearance. This integration method within Next.js allows for customization and control of your video content.
Using video hosting services (YouTube, Vimeo, etc.):
For video hosting services like YouTube or Vimeo, you'll embed their iframe-based players using the
[CODE_BLOCK_58]
tag. While this method limits some control over the player, it offers ease of use and features provided by these platforms.
Choose the embedding method that aligns with your application's requirements and the user experience you aim to deliver.
Embedding externally hosted videos
To embed videos from external platforms, you can use Next.js to fetch the video information and React Suspense to handle the fallback state while loading.
1. Create a Server Component for video embedding
The first step is to create a
Server Component
that generates the appropriate iframe for embedding the video. This component will fetch the source URL for the video and render the iframe.
app/ui/video-component.jsx
[CODE_BLOCK_59]
2. Stream the video component using React Suspense
After creating the Server Component to embed the video, the next step is to
stream
the component using
React Suspense
app/page.jsx
[CODE_BLOCK_61]
Good to know
: When embedding videos from external platforms, consider the following best practices:
Ensure the video embeds are responsive. Use CSS to make the iframe or video player adapt to different screen sizes.
Implement
strategies for loading videos
based on network conditions, especially for users with limited data plans.
This approach results in a better user experience as it prevents the page from blocking, meaning the user can interact with the page while the video component streams in.
For a more engaging and informative loading experience, consider using a loading skeleton as the fallback UI. So instead of showing a simple loading message, you can show a skeleton that resembles the video player like this:
app/page.jsx
[CODE_BLOCK_63]
Self-hosted videos
Self-hosting videos may be preferable for several reasons:
Complete control and independence
: Self-hosting gives you direct management over your video content, from playback to appearance, ensuring full ownership and control, free from external platform constraints.
Customization for specific needs
: Ideal for unique requirements, like dynamic background videos, it allows for tailored customization to align with design and functional needs.
Performance and scalability considerations
: Choose storage solutions that are both high-performing and scalable, to support increasing traffic and content size effectively.
Cost and integration
: Balance the costs of storage and bandwidth with the need for easy integration into your Next.js framework and broader tech ecosystem.
Using Vercel Blob for video hosting
Vercel Blob
offers an efficient way to host videos, providing a scalable cloud storage solution that works well with Next.js. Here's how you can host a video using Vercel Blob:
1. Uploading a video to Vercel Blob
In your Vercel dashboard, navigate to the "Storage" tab and select your
Vercel Blob
store. In the Blob table's upper-right corner, find and click the "Upload" button. Then, choose the video file you wish to upload. After the upload completes, the video file will appear in the Blob table.
Alternatively, you can upload your video using a server action. For detailed instructions, refer to the Vercel documentation on
server-side uploads
. Vercel also supports
client-side uploads
. This method may be preferable for certain use cases.
2. Displaying the video in Next.js
Once the video is uploaded and stored, you can display it in your Next.js application. Here's an example of how to do this using the
[CODE_BLOCK_65]
tag and React Suspense:
app/page.jsx
[CODE_BLOCK_66]
In this approach, the page uses the video's
[CODE_BLOCK_68]
URL to display the video using the
[CODE_BLOCK_69]
. React Suspense is used to show a fallback until the video URL is fetched and the video is ready to be displayed.
Adding subtitles to your video
If you have subtitles for your video, you can easily add them using the
[CODE_BLOCK_70]
element inside your
[CODE_BLOCK_71]
tag. You can fetch the subtitle file from
Vercel Blob
in a similar way as the video file. Here's how you can update the
[CODE_BLOCK_72]
to include subtitles.
app/page.jsx
[CODE_BLOCK_73]
By following this approach, you can effectively self-host and integrate videos into your Next.js applications.
Resources
To continue learning more about video optimization and best practices, please refer to the following resources:
Understanding video formats and codecs
: Choose the right format and codec, like MP4 for compatibility or WebM for web optimization, for your video needs. For more details, see
Mozilla's guide on video codecs
Video compression
: Use tools like FFmpeg to effectively compress videos, balancing quality with file size. Learn about compression techniques at
FFmpeg's official website
Resolution and bitrate adjustment
: Adjust
resolution and bitrate
based on the viewing platform, with lower settings for mobile devices.
Content Delivery Networks (CDNs)
: Utilize a CDN to enhance video delivery speed and manage high traffic. When using some storage solutions, such as Vercel Blob, CDN functionality is automatically handled for you.
Learn more
about CDNs and their benefits.
Explore these video streaming platforms for integrating video into your Next.js projects:
Open source
[CODE_BLOCK_75]
component
Provides a
[CODE_BLOCK_76]
component for Next.js, compatible with various hosting services including
Vercel Blob
, S3, Backblaze, and Mux.
Detailed documentation
for using
[CODE_BLOCK_77]
with different hosting services.
Cloudinary Integration
Official
documentation and integration guide
for using Cloudinary with Next.js.
Includes a
[CODE_BLOCK_78]
component for
drop-in video support
Find
examples
of integrating Cloudinary with Next.js including
Adaptive Bitrate Streaming
Other
Cloudinary libraries
including a Node.js SDK are also available.
Mux Video API
Mux provides a
starter template
for creating a video course with Mux and Next.js.
Learn about Mux's recommendations for embedding
high-performance video for your Next.js application
Explore an
example project
demonstrating Mux with Next.js.
Fastly
Learn more about integrating Fastly's solutions for
video on demand
and streaming media into Next.js.
ImageKit.io Integration
Check out the
official quick start guide
for integrating ImageKit with Next.js.
The integration provides an
[CODE_BLOCK_79]
component, offering
seamless video support
You can also explore other
ImageKit libraries
, such as the Node.js SDK, which is also available.
Was this helpful?
supported.
Send