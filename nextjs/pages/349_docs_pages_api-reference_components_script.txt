SOURCE URL: https://nextjs.org/docs/pages/api-reference/components/script
SCRAPED: 2025-06-19 17:50:33
================================================================================

Menu
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
API Reference
Components
Script
You are currently viewing the documentation for Pages Router.
Script
This API reference will help you understand how to use
props
available for the Script Component. For features and usage, please see the
Optimizing Scripts
page.
app/dashboard/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 1 ---
import Script from 'next/script'
export default function Dashboard() {
return (
<Script src="https://example.com/script.js" />
--- END CODE BLOCK ---
Props
Here's a summary of the props available for the Script Component:
Prop
Example
Type
Required
--- CODE BLOCK 4 ---
src="http://example.com/script"
--- END CODE BLOCK ---
--- CODE BLOCK 6 ---
strategy="lazyOnload"
--- END CODE BLOCK ---
String
Required unless inline script is used
--- CODE BLOCK 8 ---
onLoad={onLoadFunc}
--- END CODE BLOCK ---
--- CODE BLOCK 10 ---
onReady={onReadyFunc}
--- END CODE BLOCK ---
String
--- CODE BLOCK 12 ---
onError={onErrorFunc}
--- END CODE BLOCK ---
--- CODE BLOCK 18 ---
beforeInteractive
--- END CODE BLOCK ---
Function
--- CODE BLOCK 19 ---
afterInteractive
--- END CODE BLOCK ---
--- CODE BLOCK 22 ---
beforeInteractive
--- END CODE BLOCK ---
Function
--- CODE BLOCK 23 ---
beforeInteractive
--- END CODE BLOCK ---
--- CODE BLOCK 24 ---
beforeInteractive
--- END CODE BLOCK ---
Function
Required Props
--- CODE BLOCK 26 ---
pages/_document.js
--- END CODE BLOCK ---
component requires the following properties.
--- CODE BLOCK 27 ---
import { Html, Head, Main, NextScript } from 'next/document'
import Script from 'next/script'
export default function Document() {
return (
<Html>
<Head />
<body>
<Main />
<NextScript />
<Script
src="https://example.com/script.js"
strategy="beforeInteractive"
</body>
</Html>
--- END CODE BLOCK ---
A path string specifying the URL of an external script. This can be either an absolute external URL or an internal path. The
--- CODE BLOCK 28 ---
import { Html, Head, Main, NextScript } from 'next/document'
import Script from 'next/script'
export default function Document() {
return (
<Html>
<Head />
<body>
<Main />
<NextScript />
<Script
src="https://example.com/script.js"
strategy="beforeInteractive"
</body>
</Html>
--- END CODE BLOCK ---
property is required unless an inline script is used.
Optional Props
--- CODE BLOCK 29 ---
beforeInteractive
--- END CODE BLOCK ---
component accepts a number of additional properties beyond those which are required.
--- CODE BLOCK 31 ---
beforeInteractive
--- END CODE BLOCK ---
The loading strategy of the script. There are four different strategies that can be used:
--- CODE BLOCK 32 ---
afterInteractive
--- END CODE BLOCK ---
: Load before any Next.js code and before any page hydration occurs.
--- CODE BLOCK 33 ---
afterInteractive
--- END CODE BLOCK ---
default
) Load early but after some hydration on the page occurs.
--- CODE BLOCK 34 ---
afterInteractive
--- END CODE BLOCK ---
: Load during browser idle time.
--- CODE BLOCK 35 ---
import Script from 'next/script'
export default function Page() {
return (
<Script src="https://example.com/script.js" strategy="afterInteractive" />
--- END CODE BLOCK ---
: (experimental) Load in a web worker.
--- CODE BLOCK 36 ---
import Script from 'next/script'
export default function Page() {
return (
<Script src="https://example.com/script.js" strategy="afterInteractive" />
--- END CODE BLOCK ---
Scripts that load with the
--- CODE BLOCK 37 ---
afterInteractive
--- END CODE BLOCK ---
strategy are injected into the initial HTML from the server, downloaded before any Next.js module, and executed in the order they are placed.
Scripts denoted with this strategy are preloaded and fetched before any first-party code, but their execution
does not block page hydration from occurring
--- CODE BLOCK 41 ---
import Script from 'next/script'
export default function Page() {
return (
<Script src="https://example.com/script.js" strategy="lazyOnload" />
--- END CODE BLOCK ---
scripts must be placed inside the
--- CODE BLOCK 42 ---
import Script from 'next/script'
export default function Page() {
return (
<Script src="https://example.com/script.js" strategy="lazyOnload" />
--- END CODE BLOCK ---
Component (
--- CODE BLOCK 48 ---
nextScriptWorkers
--- END CODE BLOCK ---
) and are designed to load scripts that are needed by the entire site (i.e. the script will load when any page in the application has been loaded server-side).
This strategy should only be used for critical scripts that need to be fetched as soon as possible.
pages/_document.js
--- CODE BLOCK 49 ---
next.config.js
--- END CODE BLOCK ---
Good to know
: Scripts with
--- CODE BLOCK 51 ---
module.exports = {
experimental: {
nextScriptWorkers: true,
--- END CODE BLOCK ---
will always be injected inside the
--- CODE BLOCK 54 ---
import Script from 'next/script'
export default function Home() {
return (
<Script src="https://example.com/script.js" strategy="worker" />
--- END CODE BLOCK ---
of the HTML document regardless of where it's placed in the component.
Some examples of scripts that should be fetched as soon as possible with
--- CODE BLOCK 55 ---
import Script from 'next/script'
export default function Home() {
return (
<Script src="https://example.com/script.js" strategy="worker" />
--- END CODE BLOCK ---
include:
Bot detectors
Cookie consent managers
--- CODE BLOCK 59 ---
beforeInteractive
--- END CODE BLOCK ---
Scripts that use the
--- CODE BLOCK 61 ---
afterInteractive
--- END CODE BLOCK ---
strategy are injected into the HTML client-side and will load after some (or all) hydration occurs on the page.
This is the default strategy
of the Script component and should be used for any script that needs to load as soon as possible but not before any first-party Next.js code.
--- CODE BLOCK 64 ---
'use client'
import Script from 'next/script'
export default function Page() {
return (
<Script
src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js"
onLoad={() => {
console.log(_.sample([1, 2, 3, 4]))
--- END CODE BLOCK ---
scripts can be placed inside of any page or layout and will only load and execute when that page (or group of pages) is opened in the browser.
app/page.js
--- CODE BLOCK 65 ---
'use client'
import Script from 'next/script'
export default function Page() {
return (
<Script
src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js"
onLoad={() => {
console.log(_.sample([1, 2, 3, 4]))
--- END CODE BLOCK ---
Some examples of scripts that are good candidates for
--- CODE BLOCK 70 ---
import { useRef } from 'react'
import Script from 'next/script'
export default function Page() {
const mapRef = useRef()
return (
<div ref={mapRef}></div>
<Script
id="google-maps"
src="https://maps.googleapis.com/maps/api/js"
onReady={() => {
new google.maps.Map(mapRef.current, {
center: { lat: -34.397, lng: 150.644 },
zoom: 8,
--- END CODE BLOCK ---
include:
Tag managers
Analytics
--- CODE BLOCK 74 ---
beforeInteractive
--- END CODE BLOCK ---
Scripts that use the
--- CODE BLOCK 76 ---
import Script from 'next/script'
export default function Page() {
return (
<Script
src="https://example.com/script.js"
onError={(e: Error) => {
console.error('Script failed to load', e)
--- END CODE BLOCK ---
strategy are injected into the HTML client-side during browser idle time and will load after all resources on the page have been fetched. This strategy should be used for any background or low priority scripts that do not need to load early.
--- CODE BLOCK 77 ---
import Script from 'next/script'
export default function Page() {
return (
<Script
src="https://example.com/script.js"
onError={(e: Error) => {
console.error('Script failed to load', e)
--- END CODE BLOCK ---
scripts can be placed inside of any page or layout and will only load and execute when that page (or group of pages) is opened in the browser.
app/page.js
--- CODE BLOCK 79 ---
beforeInteractive
--- END CODE BLOCK ---
Examples of scripts that do not need to load immediately and can be fetched with
--- CODE BLOCK 85 ---
next/script
--- END CODE BLOCK ---
include:
Chat support plugins
Social media widgets
--- CODE BLOCK 86 ---
beforeInteractive
--- END CODE BLOCK ---
Warning:
--- CODE BLOCK 89 ---
next/script
--- END CODE BLOCK ---
strategy is not yet stable and does not yet work with the App Router. Use with caution.
Scripts that use the
[CODE_BLOCK_46]
strategy are off-loaded to a web worker in order to free up the main thread and ensure that only critical, first-party resources are processed on it. While this strategy can be used for any script, it is an advanced use case that is not guaranteed to support all third-party scripts.
To use
[CODE_BLOCK_47]
as a strategy, the
[CODE_BLOCK_48]
flag must be enabled in
[CODE_BLOCK_49]
next.config.js
[CODE_BLOCK_50]
[CODE_BLOCK_52]
scripts can
only currently be used in the
[CODE_BLOCK_53]
directory
pages/home.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_54]
[CODE_BLOCK_56]
Warning:
[CODE_BLOCK_57]
does not yet work with Server Components and can only be used in Client Components. Further,
[CODE_BLOCK_58]
can't be used with
[CODE_BLOCK_59]
â€“ consider using
[CODE_BLOCK_60]
instead.
Some third-party scripts require users to run JavaScript code once after the script has finished loading in order to instantiate content or call a function. If you are loading a script with either
[CODE_BLOCK_61]
[CODE_BLOCK_62]
as a loading strategy, you can execute code after it has loaded using the
[CODE_BLOCK_63]
property.
Here's an example of executing a lodash method only after the library has been loaded.
app/page.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_64]
[CODE_BLOCK_66]
Warning:
[CODE_BLOCK_67]
does not yet work with Server Components and can only be used in Client Components.
Some third-party scripts require users to run JavaScript code after the script has finished loading and every time the component is mounted (after a route navigation for example). You can execute code after the script's load event when it first loads and then after every subsequent component re-mount using the
[CODE_BLOCK_68]
property.
Here's an example of how to re-instantiate a Google Maps JS embed every time the component is mounted:
[CODE_BLOCK_69]
[CODE_BLOCK_71]
Warning:
[CODE_BLOCK_72]
does not yet work with Server Components and can only be used in Client Components.
[CODE_BLOCK_73]
cannot be used with the
[CODE_BLOCK_74]
loading strategy.
Sometimes it is helpful to catch when a script fails to load. These errors can be handled with the
[CODE_BLOCK_75]
property:
[CODE_BLOCK_76]
Version History
Version
Changes
[CODE_BLOCK_78]
[CODE_BLOCK_79]
[CODE_BLOCK_80]
is modified to support
[CODE_BLOCK_81]
[CODE_BLOCK_82]
[CODE_BLOCK_83]
prop added.
[CODE_BLOCK_84]
Allow
[CODE_BLOCK_85]
with
[CODE_BLOCK_86]
to be placed in
[CODE_BLOCK_87]
[CODE_BLOCK_88]
[CODE_BLOCK_89]
introduced.
Was this helpful?
supported.
Send