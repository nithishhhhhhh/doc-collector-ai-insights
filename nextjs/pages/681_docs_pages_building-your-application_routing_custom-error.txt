SOURCE URL: https://nextjs.org/docs/pages/building-your-application/routing/custom-error#500-page
SCRAPED: 2025-06-19 18:26:54
================================================================================

Menu
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Building Your Application
Routing
Custom Errors
You are currently viewing the documentation for Pages Router.
Custom Errors
404 Page
A 404 page may be accessed very often. Server-rendering an error page for every visit increases the load of the Next.js server. This can result in increased costs and slow experiences.
To avoid the above pitfalls, Next.js provides a static 404 page by default without having to add any additional files.
Customizing The 404 Page
To create a custom 404 page you can create a
--- CODE BLOCK 1 ---
pages/404.js
--- END CODE BLOCK ---
file. This file is statically generated at build time.
pages/404.js
--- CODE BLOCK 2 ---
export default function Custom404() {
return <h1>404 - Page Not Found</h1>
--- END CODE BLOCK ---
Good to know
: You can use
--- CODE BLOCK 4 ---
getStaticProps
--- END CODE BLOCK ---
inside this page if you need to fetch data at build time.
500 Page
Server-rendering an error page for every visit adds complexity to responding to errors. To help users get responses to errors as fast as possible, Next.js provides a static 500 page by default without having to add any additional files.
Customizing The 500 Page
To customize the 500 page you can create a
--- CODE BLOCK 5 ---
pages/500.js
--- END CODE BLOCK ---
file. This file is statically generated at build time.
pages/500.js
--- CODE BLOCK 6 ---
export default function Custom500() {
return <h1>500 - Server-side error occurred</h1>
--- END CODE BLOCK ---
Good to know
: You can use
--- CODE BLOCK 8 ---
getStaticProps
--- END CODE BLOCK ---
inside this page if you need to fetch data at build time.
More Advanced Error Page Customizing
500 errors are handled both client-side and server-side by the
--- CODE BLOCK 10 ---
pages/_error.js
--- END CODE BLOCK ---
component. If you wish to override it, define the file
--- CODE BLOCK 11 ---
function Error({ statusCode }) {
return (
{statusCode
? `An error ${statusCode} occurred on server`
: 'An error occurred on client'}
</p>
Error.getInitialProps = ({ res, err }) => {
const statusCode = res ? res.statusCode : err ? err.statusCode : 404
return { statusCode }
export default Error
--- END CODE BLOCK ---
and add the following code:
--- CODE BLOCK 12 ---
function Error({ statusCode }) {
return (
{statusCode
? `An error ${statusCode} occurred on server`
: 'An error occurred on client'}
</p>
Error.getInitialProps = ({ res, err }) => {
const statusCode = res ? res.statusCode : err ? err.statusCode : 404
return { statusCode }
export default Error
--- END CODE BLOCK ---
--- CODE BLOCK 15 ---
import Error from 'next/error'
export async function getServerSideProps() {
const res = await fetch('https://api.github.com/repos/vercel/next.js')
const errorCode = res.ok ? false : res.status
const json = await res.json()
return {
props: { errorCode, stars: json.stargazers_count },
export default function Page({ errorCode, stars }) {
if (errorCode) {
return <Error statusCode={errorCode} />
return <div>Next stars: {stars}</div>
--- END CODE BLOCK ---
is only used in production. In development youâ€™ll get an error with the call stack to know where the error originated from.
Reusing the built-in error page
If you want to render the built-in error page you can by importing the
--- CODE BLOCK 16 ---
import Error from 'next/error'
export async function getServerSideProps() {
const res = await fetch('https://api.github.com/repos/vercel/next.js')
const errorCode = res.ok ? false : res.status
const json = await res.json()
return {
props: { errorCode, stars: json.stargazers_count },
export default function Page({ errorCode, stars }) {
if (errorCode) {
return <Error statusCode={errorCode} />
return <div>Next stars: {stars}</div>
--- END CODE BLOCK ---
component:
--- CODE BLOCK 23 ---
getStaticProps
--- END CODE BLOCK ---
[CODE_BLOCK_17]
component also takes
[CODE_BLOCK_18]
as a property if you want to pass in a text message along with a
[CODE_BLOCK_19]
If you have a custom
[CODE_BLOCK_20]
component be sure to import that one instead.
[CODE_BLOCK_21]
exports the default component used by Next.js.
Caveats
[CODE_BLOCK_22]
does not currently support Next.js
Data Fetching methods
like
[CODE_BLOCK_23]
[CODE_BLOCK_24]
[CODE_BLOCK_25]
, like
[CODE_BLOCK_26]
, is a reserved pathname.
[CODE_BLOCK_27]
is used to define the customized layouts and behaviors of the error pages.
[CODE_BLOCK_28]
will render 404 when accessed directly via
routing
or rendering in a
custom server
Was this helpful?
supported.
Send