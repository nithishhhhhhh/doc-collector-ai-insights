SOURCE URL: https://nextjs.org/docs/app/getting-started/partial-prerendering#how-does-partial-prerendering-work
SCRAPED: 2025-06-19 17:57:14
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
App Router
Getting Started
Partial Prerendering
Partial Prerendering
This feature is currently experimental and subject to change, it's not recommended for production. Try it out and share your feedback on
GitHub
Partial Prerendering (PPR) is a rendering strategy that allows you to combine static and dynamic content in the same route. This improves the initial page performance while still supporting personalized, dynamic data.
When a user visits a route:
The server sends a
shell
containing the static content, ensuring a fast initial load.
The shell leaves
holes
for the dynamic content that will load in asynchronously.
The dynamic holes are
streamed in parallel
, reducing the overall load time of the page.
ðŸŽ¥ Watch:
Why PPR and how it works â†’
YouTube (10 minutes)
How does Partial Prerendering work?
To understand Partial Prerendering, it helps to be familiar with the rendering strategies available in Next.js.
Static Rendering
With Static Rendering, HTML is generated ahead of timeâ€”either at build time or through
revalidation
. The result is cached and shared across users and requests.
In Partial Prerendering, Next.js prerenders a
static shell
for a route. This can include the layout and any other components that don't depend on request-time data.
Dynamic Rendering
With Dynamic Rendering, HTML is generated at
request time
. This allows you to serve personalized content based on request-time data.
A component becomes dynamic if it uses the following APIs:
--- CODE BLOCK 5 ---
searchParams
--- END CODE BLOCK ---
--- CODE BLOCK 6 ---
unstable_noStore
--- END CODE BLOCK ---
--- CODE BLOCK 8 ---
{ cache: 'no-store' }
--- END CODE BLOCK ---
--- CODE BLOCK 10 ---
import { Suspense } from 'react'
import StaticComponent from './StaticComponent'
import DynamicComponent from './DynamicComponent'
import Fallback from './Fallback'
export const experimental_ppr = true
export default function Page() {
return (
<StaticComponent />
<Suspense fallback={<Fallback />}>
<DynamicComponent />
</Suspense>
--- END CODE BLOCK ---
--- CODE BLOCK 11 ---
import { Suspense } from 'react'
import StaticComponent from './StaticComponent'
import DynamicComponent from './DynamicComponent'
import Fallback from './Fallback'
export const experimental_ppr = true
export default function Page() {
return (
<StaticComponent />
<Suspense fallback={<Fallback />}>
<DynamicComponent />
</Suspense>
--- END CODE BLOCK ---
prop
--- CODE BLOCK 13 ---
next.config.ts
--- END CODE BLOCK ---
--- CODE BLOCK 14 ---
import type { NextConfig } from 'next'
const nextConfig: NextConfig = {
experimental: {
ppr: 'incremental',
export default nextConfig
--- END CODE BLOCK ---
with
--- CODE BLOCK 15 ---
import type { NextConfig } from 'next'
const nextConfig: NextConfig = {
experimental: {
ppr: 'incremental',
export default nextConfig
--- END CODE BLOCK ---
In Partial Prerendering, using these APIs throws a special React error that informs Next.js the component cannot be statically rendered, causing a build error. You can use a
Suspense
boundary to wrap your component to defer rendering until runtime.
Suspense
React
Suspense
is used to defer rendering parts of your application until some condition is met.
In Partial Prerendering, Suspense is used to mark
dynamic boundaries
in your component tree.
At build time, Next.js prerenders the static content and the
--- CODE BLOCK 16 ---
'incremental'
--- END CODE BLOCK ---
UI. The dynamic content is
postponed
until the user requests the route.
Wrapping a component in Suspense doesn't make the component itself dynamic (your API usage does), but rather Suspense is used as a boundary that encapsulates dynamic content and enable
streaming
app/page.js
--- CODE BLOCK 17 ---
export const experimental_ppr = true
export default function Layout({ children }: { children: React.ReactNode }) {
// ...
--- END CODE BLOCK ---
Streaming
Streaming splits the route into chunks and progressively streams them to the client as they become ready. This allows the user to see parts of the page immediately, before the entire content has finished rendering.
In Partial Prerendering, dynamic components wrapped in Suspense start streaming from the server in parallel.
To reduce network overhead, the full responseâ€”including static HTML and streamed dynamic partsâ€”is sent in a
single HTTP request
. This avoids extra roundtrips and improves both initial load and overall performance.
Enabling Partial Prerendering
You can enable PPR by adding the
--- CODE BLOCK 19 ---
export const experimental_ppr = true
export default function Layout({ children }) {
// ...
--- END CODE BLOCK ---
option to your
--- CODE BLOCK 20 ---
export const experimental_ppr = true
export default function Layout({ children }) {
// ...
--- END CODE BLOCK ---
file:
next.config.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 21 ---
experimental_ppr
--- END CODE BLOCK ---
--- CODE BLOCK 24 ---
experimental_ppr
--- END CODE BLOCK ---
value allows you to adopt PPR for specific routes:
/app/dashboard/layout.tsx
--- CODE BLOCK 28 ---
import { cookies } from 'next/headers'
export async function User() {
const session = (await cookies()).get('session')?.value
return '...'
--- END CODE BLOCK ---
/app/dashboard/layout.js
--- CODE BLOCK 32 ---
import { Suspense } from 'react'
import { User, AvatarSkeleton } from './user'
export const experimental_ppr = true
export default function Page() {
return (
<section>
<h1>This will be prerendered</h1>
<Suspense fallback={<AvatarSkeleton />}>
<User />
</Suspense>
</section>
--- END CODE BLOCK ---
Routes that don't have
--- CODE BLOCK 34 ---
searchParams
--- END CODE BLOCK ---
will default to
--- CODE BLOCK 36 ---
import { Table, TableSkeleton } from './table'
import { Suspense } from 'react'
export default function Page({
searchParams,
}: {
searchParams: Promise<{ sort: string }>
}) {
return (
<section>
<h1>This will be prerendered</h1>
<Suspense fallback={<TableSkeleton />}>
<Table searchParams={searchParams} />
</Suspense>
</section>
--- END CODE BLOCK ---
and will not be prerendered using PPR. You need to explicitly opt-in to PPR for each route.
Good to know
--- CODE BLOCK 37 ---
import { Table, TableSkeleton } from './table'
import { Suspense } from 'react'
export default function Page({
searchParams,
}: {
searchParams: Promise<{ sort: string }>
}) {
return (
<section>
<h1>This will be prerendered</h1>
<Suspense fallback={<TableSkeleton />}>
<Table searchParams={searchParams} />
</Suspense>
</section>
--- END CODE BLOCK ---
will apply to all children of the route segment, including nested layouts and pages. You don't have to add it to every file, only the top segment of a route.
To disable PPR for children segments, you can set
--- CODE BLOCK 38 ---
searchParams
--- END CODE BLOCK ---
--- CODE BLOCK 39 ---
export async function Table({
searchParams,
}: {
searchParams: Promise<{ sort: string }>
}) {
const sort = (await searchParams).sort === 'true'
return '...'
--- END CODE BLOCK ---
in the child segment.
Examples
Dynamic APIs
When using Dynamic APIs that require looking at the incoming request, Next.js will opt into dynamic rendering for the route. To continue using PPR, wrap the component with Suspense. For example, the
--- CODE BLOCK 40 ---
export async function Table({
searchParams,
}: {
searchParams: Promise<{ sort: string }>
}) {
const sort = (await searchParams).sort === 'true'
return '...'
--- END CODE BLOCK ---
component is dynamic because it uses the
[CODE_BLOCK_27]
API:
app/user.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_28]
[CODE_BLOCK_30]
component will be streamed while any other content inside
[CODE_BLOCK_31]
will be prerendered and become part of the static shell.
app/page.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_32]
Passing dynamic props
Components only opt into dynamic rendering when the value is accessed. For example, if you are reading
[CODE_BLOCK_34]
from a
[CODE_BLOCK_35]
component, you can forward this value to another component as a prop:
app/page.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_36]
Inside of the table component, accessing the value from
[CODE_BLOCK_38]
will make the component dynamic while the rest of the page will be prerendered.
app/table.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_39]
Next Steps
Learn more about the config option for Partial Prerendering.
Learn how to enable Partial Prerendering in Next.js.
Was this helpful?
supported.
Send