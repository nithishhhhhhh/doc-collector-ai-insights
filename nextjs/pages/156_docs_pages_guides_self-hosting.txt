SOURCE URL: https://nextjs.org/docs/pages/guides/self-hosting
SCRAPED: 2025-06-19 17:27:31
================================================================================

Menu
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Pages Router
Guides
Self-Hosting
You are currently viewing the documentation for Pages Router.
How to self-host your Next.js application
When
deploying
your Next.js app, you may want to configure how different features are handled based on your infrastructure.
ðŸŽ¥ Watch:
Learn more about self-hosting Next.js â†’
YouTube (45 minutes)
Image Optimization
Image Optimization
through
--- CODE BLOCK 3 ---
next.config.js
--- END CODE BLOCK ---
works self-hosted with zero configuration when deploying using
--- CODE BLOCK 6 ---
next.config.js
--- END CODE BLOCK ---
. If you would prefer to have a separate service to optimize images, you can
configure an image loader
Image Optimization can be used with a
static export
by defining a custom image loader in
--- CODE BLOCK 7 ---
NEXT_PUBLIC_
--- END CODE BLOCK ---
. Note that images are optimized at runtime, not during the build.
Good to know:
On glibc-based Linux systems, Image Optimization may require
additional configuration
to prevent excessive memory usage.
Learn more about the
caching behavior of optimized images
and how to configure the TTL.
You can also
disable Image Optimization
and still retain other benefits of using
--- CODE BLOCK 9 ---
getServerSideProps
--- END CODE BLOCK ---
if you prefer. For example, if you are optimizing images yourself separately.
Middleware
Middleware
works self-hosted with zero configuration when deploying using
--- CODE BLOCK 11 ---
Cache-Control
--- END CODE BLOCK ---
. Since it requires access to the incoming request, it is not supported when using a
static export
Middleware uses the
Edge runtime
, a subset of all available Node.js APIs to help ensure low latency, since it may run in front of every route or asset in your application. If you do not want this, you can use the
full Node.js runtime
to run Middleware.
If you are looking to add logic (or use an external package) that requires all Node.js APIs, you might be able to move this logic to a
layout
as a
Server Component
. For example, checking
headers
redirecting
. You can also use headers, cookies, or query parameters to
redirect
rewrite
through
--- CODE BLOCK 12 ---
public, max-age=31536000, immutable
--- END CODE BLOCK ---
. If that does not work, you can also use a
custom server
Environment Variables
Next.js can support both build time and runtime environment variables.
By default, environment variables are only available on the server
. To expose an environment variable to the browser, it must be prefixed with
--- CODE BLOCK 13 ---
Cache-Control
--- END CODE BLOCK ---
. However, these public environment variables will be inlined into the JavaScript bundle during
--- CODE BLOCK 14 ---
s-maxage: <revalidate in getStaticProps>, stale-while-revalidate
--- END CODE BLOCK ---
To read runtime environment variables, we recommend using
--- CODE BLOCK 15 ---
getStaticProps
--- END CODE BLOCK ---
incrementally adopting the App Router
This allows you to use a singular Docker image that can be promoted through multiple environments with different values.
Good to know:
You can run code on server startup using the
--- CODE BLOCK 16 ---
revalidate: false
--- END CODE BLOCK ---
function
We do not recommend using the
runtimeConfig
option, as this does not work with the standalone output mode. Instead, we recommend
incrementally adopting
the App Router.
Caching and ISR
Next.js can cache responses, generated static pages, build outputs, and other static assets like images, fonts, and scripts.
Caching and revalidating pages (with
Incremental Static Regeneration
) use the
same shared cache
. By default, this cache is stored to the filesystem (on disk) on your Next.js server.
This works automatically when self-hosting
using both the Pages and App Router.
You can configure the Next.js cache location if you want to persist cached pages and data to durable storage, or share the cache across multiple containers or instances of your Next.js application.
Automatic Caching
Next.js sets the
--- CODE BLOCK 17 ---
Cache-Control
--- END CODE BLOCK ---
header of
--- CODE BLOCK 18 ---
private, no-cache, no-store, max-age=0, must-revalidate
--- END CODE BLOCK ---
to truly immutable assets. It cannot be overridden. These immutable files contain a SHA-hash in the file name, so they can be safely cached indefinitely. For example,
Static Image Imports
. You can
configure the TTL
for images.
Incremental Static Regeneration (ISR) sets the
--- CODE BLOCK 19 ---
assetPrefix
--- END CODE BLOCK ---
header of
--- CODE BLOCK 20 ---
next.config.js
--- END CODE BLOCK ---
. This revalidation time is defined in your
--- CODE BLOCK 21 ---
assetPrefix
--- END CODE BLOCK ---
function
in seconds. If you set
--- CODE BLOCK 22 ---
next.config.js
--- END CODE BLOCK ---
, it will default to a one-year cache duration.
Dynamically rendered pages set a
--- CODE BLOCK 23 ---
module.exports = {
cacheHandler: require.resolve('./cache-handler.js'),
cacheMaxMemorySize: 0, // disable default in-memory caching
--- END CODE BLOCK ---
header of
--- CODE BLOCK 24 ---
module.exports = {
cacheHandler: require.resolve('./cache-handler.js'),
cacheMaxMemorySize: 0, // disable default in-memory caching
--- END CODE BLOCK ---
to prevent user-specific data from being cached. This applies to both the App Router and Pages Router. This also includes
Draft Mode
Static Assets
If you want to host static assets on a different domain or CDN, you can use the
--- CODE BLOCK 25 ---
cache-handler.js
--- END CODE BLOCK ---
configuration
--- CODE BLOCK 26 ---
const cache = new Map()
module.exports = class CacheHandler {
constructor(options) {
this.options = options
async get(key) {
// This could be stored anywhere, like durable storage
return cache.get(key)
async set(key, data, ctx) {
// This could be stored anywhere, like durable storage
cache.set(key, {
value: data,
lastModified: Date.now(),
tags: ctx.tags,
async revalidateTag(tags) {
// tags is either a string or an array of strings
tags = [tags].flat()
// Iterate over all entries in the cache
for (let [key, value] of cache) {
// If the value's tags include the specified tag, delete this entry
if (value.tags.some((tag) => tags.includes(tag))) {
cache.delete(key)
// If you want to have temporary in memory cache for a single request that is reset
// before the next request you can leverage this method
resetRequestCache() {}
--- END CODE BLOCK ---
. Next.js will use this asset prefix when retrieving JavaScript or CSS files. Separating your assets to a different domain does come with the downside of extra time spent on DNS and TLS resolution.
Learn more about
--- CODE BLOCK 27 ---
const cache = new Map()
module.exports = class CacheHandler {
constructor(options) {
this.options = options
async get(key) {
// This could be stored anywhere, like durable storage
return cache.get(key)
async set(key, data, ctx) {
// This could be stored anywhere, like durable storage
cache.set(key, {
value: data,
lastModified: Date.now(),
tags: ctx.tags,
async revalidateTag(tags) {
// tags is either a string or an array of strings
tags = [tags].flat()
// Iterate over all entries in the cache
for (let [key, value] of cache) {
// If the value's tags include the specified tag, delete this entry
if (value.tags.some((tag) => tags.includes(tag))) {
cache.delete(key)
// If you want to have temporary in memory cache for a single request that is reset
// before the next request you can leverage this method
resetRequestCache() {}
--- END CODE BLOCK ---
Configuring Caching
By default, generated cache assets will be stored in memory (defaults to 50mb) and on disk. If you are hosting Next.js using a container orchestration platform like Kubernetes, each pod will have a copy of the cache. To prevent stale data from being shown since the cache is not shared between pods by default, you can configure the Next.js cache to provide a cache handler and disable in-memory caching.
To configure the ISR/Data Cache location when self-hosting, you can configure a custom handler in your
--- CODE BLOCK 28 ---
revalidatePath
--- END CODE BLOCK ---
file:
next.config.js
--- CODE BLOCK 29 ---
revalidatePath
--- END CODE BLOCK ---
Then, create
--- CODE BLOCK 32 ---
generateBuildId
--- END CODE BLOCK ---
in the root of your project, for example:
cache-handler.js
--- CODE BLOCK 33 ---
next.config.js
--- END CODE BLOCK ---
Using a custom cache handler will allow you to ensure consistency across all pods hosting your Next.js application. For instance, you can save the cached values anywhere, like
Redis
or AWS S3.
Good to know:
--- CODE BLOCK 35 ---
module.exports = {
generateBuildId: async () => {
// This could be anything, using the latest git hash
return process.env.GIT_HASH
--- END CODE BLOCK ---
is a convenience layer on top of cache tags. Calling
--- CODE BLOCK 36 ---
deploymentId
--- END CODE BLOCK ---
will call the
--- CODE BLOCK 40 ---
NEXT_MANUAL_SIG_HANDLE
--- END CODE BLOCK ---
function with a special default tag for the provided page.
Build Cache
Next.js generates an ID during
--- CODE BLOCK 42 ---
_document.js
--- END CODE BLOCK ---
to identify which version of your application is being served. The same build should be used and boot up multiple containers.
If you are rebuilding for each stage of your environment, you will need to generate a consistent build ID to use between containers. Use the
--- CODE BLOCK 43 ---
package.json
--- END CODE BLOCK ---
command in
--- CODE BLOCK 46 ---
"scripts": {
"dev": "next dev",
"build": "next build",
"start": "NEXT_MANUAL_SIG_HANDLE=true next start"
--- END CODE BLOCK ---
next.config.js
--- CODE BLOCK 47 ---
"scripts": {
"dev": "next dev",
"build": "next build",
"start": "NEXT_MANUAL_SIG_HANDLE=true next start"
--- END CODE BLOCK ---
Version Skew
Next.js will automatically mitigate most instances of
version skew
and automatically reload the application to retrieve new assets when detected. For example, if there is a mismatch in the
--- CODE BLOCK 49 ---
if (process.env.NEXT_MANUAL_SIG_HANDLE) {
process.on('SIGTERM', () => {
console.log('Received SIGTERM: cleaning up')
process.exit(0)
process.on('SIGINT', () => {
console.log('Received SIGINT: cleaning up')
process.exit(0)
--- END CODE BLOCK ---
, transitions between pages will perform a hard navigation versus using a prefetched value.
When the application is reloaded, there may be a loss of application state if it's not designed to persist between page navigations. For example, using URL state or local storage would persist state after a page refresh. However, component state like
[CODE_BLOCK_37]
would be lost in such navigations.
Manual Graceful Shutdowns
When self-hosting, you might want to run code when the server shuts down on
[CODE_BLOCK_38]
[CODE_BLOCK_39]
signals.
You can set the env variable
[CODE_BLOCK_40]
[CODE_BLOCK_41]
and then register a handler for that signal inside your
[CODE_BLOCK_42]
file. You will need to register the environment variable directly in the
[CODE_BLOCK_43]
script, and not in the
[CODE_BLOCK_44]
file.
Good to know
: Manual signal handling is not available in
[CODE_BLOCK_45]
package.json
[CODE_BLOCK_46]
pages/_document.js
[CODE_BLOCK_48]
Was this helpful?
supported.
Send