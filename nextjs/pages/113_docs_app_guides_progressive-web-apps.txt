SOURCE URL: https://nextjs.org/docs/app/guides/progressive-web-apps
SCRAPED: 2025-06-19 17:22:23
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
App Router
Guides
PWAs
How to build a Progressive Web Application (PWA) with Next.js
Progressive Web Applications (PWAs) offer the reach and accessibility of web applications combined with the features and user experience of native mobile apps. With Next.js, you can create PWAs that provide a seamless, app-like experience across all platforms without the need for multiple codebases or app store approvals.
PWAs allow you to:
Deploy updates instantly without waiting for app store approval
Create cross-platform applications with a single codebase
Provide native-like features such as home screen installation and push notifications
Creating a PWA with Next.js
1. Creating the Web App Manifest
Next.js provides built-in support for creating a
web app manifest
using the App Router. You can create either a static or dynamic manifest file:
For example, create a
--- CODE BLOCK 1 ---
app/manifest.ts
--- END CODE BLOCK ---
--- CODE BLOCK 2 ---
app/manifest.json
--- END CODE BLOCK ---
file:
app/manifest.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 3 ---
import type { MetadataRoute } from 'next'
export default function manifest(): MetadataRoute.Manifest {
return {
name: 'Next.js PWA',
short_name: 'NextPWA',
description: 'A Progressive Web App built with Next.js',
start_url: '/',
display: 'standalone',
background_color: '#ffffff',
theme_color: '#000000',
icons: [
src: '/icon-192x192.png',
sizes: '192x192',
type: 'image/png',
src: '/icon-512x512.png',
sizes: '512x512',
type: 'image/png',
--- END CODE BLOCK ---
This file should contain information about the name, icons, and how it should be displayed as an icon on the user's device. This will allow users to install your PWA on their home screen, providing a native app-like experience.
You can use tools like
favicon generators
to create the different icon sets and place the generated files in your
--- CODE BLOCK 6 ---
app/page.tsx
--- END CODE BLOCK ---
folder.
2. Implementing Web Push Notifications
Web Push Notifications are supported with all modern browsers, including:
iOS 16.4+ for applications installed to the home screen
Safari 16 for macOS 13 or later
Chromium based browsers
Firefox
This makes PWAs a viable alternative to native apps. Notably, you can trigger install prompts without needing offline support.
Web Push Notifications allow you to re-engage users even when they're not actively using your app. Here's how to implement them in a Next.js application:
First, let's create the main page component in
--- CODE BLOCK 7 ---
'use client'
import { useState, useEffect } from 'react'
import { subscribeUser, unsubscribeUser, sendNotification } from './actions'
function urlBase64ToUint8Array(base64String: string) {
const padding = '='.repeat((4 - (base64String.length % 4)) % 4)
const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/')
const rawData = window.atob(base64)
const outputArray = new Uint8Array(rawData.length)
for (let i = 0; i < rawData.length; ++i) {
outputArray[i] = rawData.charCodeAt(i)
return outputArray
--- END CODE BLOCK ---
. We'll break it down into smaller parts for better understanding. First, we’ll add some of the imports and utilities we’ll need. It’s okay that the referenced Server Actions do not yet exist:
--- CODE BLOCK 8 ---
'use client'
import { useState, useEffect } from 'react'
import { subscribeUser, unsubscribeUser, sendNotification } from './actions'
function urlBase64ToUint8Array(base64String: string) {
const padding = '='.repeat((4 - (base64String.length % 4)) % 4)
const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/')
const rawData = window.atob(base64)
const outputArray = new Uint8Array(rawData.length)
for (let i = 0; i < rawData.length; ++i) {
outputArray[i] = rawData.charCodeAt(i)
return outputArray
--- END CODE BLOCK ---
Let’s now add a component to manage subscribing, unsubscribing, and sending push notifications.
--- CODE BLOCK 10 ---
function PushNotificationManager() {
const [isSupported, setIsSupported] = useState(false)
const [subscription, setSubscription] = useState<PushSubscription | null>(
null
const [message, setMessage] = useState('')
useEffect(() => {
if ('serviceWorker' in navigator && 'PushManager' in window) {
setIsSupported(true)
registerServiceWorker()
}, [])
async function registerServiceWorker() {
const registration = await navigator.serviceWorker.register('/sw.js', {
scope: '/',
updateViaCache: 'none',
const sub = await registration.pushManager.getSubscription()
setSubscription(sub)
async function subscribeToPush() {
const registration = await navigator.serviceWorker.ready
const sub = await registration.pushManager.subscribe({
userVisibleOnly: true,
applicationServerKey: urlBase64ToUint8Array(
process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!
setSubscription(sub)
const serializedSub = JSON.parse(JSON.stringify(sub))
await subscribeUser(serializedSub)
async function unsubscribeFromPush() {
await subscription?.unsubscribe()
setSubscription(null)
await unsubscribeUser()
async function sendTestNotification() {
if (subscription) {
await sendNotification(message)
setMessage('')
if (!isSupported) {
return <p>Push notifications are not supported in this browser.</p>
return (
<div>
<h3>Push Notifications</h3>
{subscription ? (
<p>You are subscribed to push notifications.</p>
<button onClick={unsubscribeFromPush}>Unsubscribe</button>
<input
type="text"
placeholder="Enter notification message"
value={message}
onChange={(e) => setMessage(e.target.value)}
<button onClick={sendTestNotification}>Send Test</button>
) : (
<p>You are not subscribed to push notifications.</p>
<button onClick={subscribeToPush}>Subscribe</button>
</div>
--- END CODE BLOCK ---
Finally, let’s create a component to show a message for iOS devices to instruct them to install to their home screen, and only show this if the app is not already installed.
--- CODE BLOCK 12 ---
function InstallPrompt() {
const [isIOS, setIsIOS] = useState(false)
const [isStandalone, setIsStandalone] = useState(false)
useEffect(() => {
setIsIOS(
/iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream
setIsStandalone(window.matchMedia('(display-mode: standalone)').matches)
}, [])
if (isStandalone) {
return null // Don't show install button if already installed
return (
<div>
<h3>Install App</h3>
<button>Add to Home Screen</button>
{isIOS && (
To install this app on your iOS device, tap the share button
<span role="img" aria-label="share icon">
{' '}
⎋{' '}
</span>
and then "Add to Home Screen"
<span role="img" aria-label="plus icon">
{' '}
➕{' '}
</span>.
</p>
</div>
export default function Page() {
return (
<div>
<PushNotificationManager />
<InstallPrompt />
</div>
--- END CODE BLOCK ---
Now, let’s create the Server Actions which this file calls.
3. Implementing Server Actions
Create a new file to contain your actions at
--- CODE BLOCK 14 ---
'use server'
import webpush from 'web-push'
webpush.setVapidDetails(
'<mailto:your-email@example.com>',
process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!,
process.env.VAPID_PRIVATE_KEY!
let subscription: PushSubscription | null = null
export async function subscribeUser(sub: PushSubscription) {
subscription = sub
// In a production environment, you would want to store the subscription in a database
// For example: await db.subscriptions.create({ data: sub })
return { success: true }
export async function unsubscribeUser() {
subscription = null
// In a production environment, you would want to remove the subscription from the database
// For example: await db.subscriptions.delete({ where: { ... } })
return { success: true }
export async function sendNotification(message: string) {
if (!subscription) {
throw new Error('No subscription available')
try {
await webpush.sendNotification(
subscription,
JSON.stringify({
title: 'Test Notification',
body: message,
icon: '/icon.png',
return { success: true }
} catch (error) {
console.error('Error sending push notification:', error)
return { success: false, error: 'Failed to send notification' }
--- END CODE BLOCK ---
. This file will handle creating subscriptions, deleting subscriptions, and sending notifications.
app/actions.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 15 ---
'use server'
import webpush from 'web-push'
webpush.setVapidDetails(
'<mailto:your-email@example.com>',
process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!,
process.env.VAPID_PRIVATE_KEY!
let subscription: PushSubscription | null = null
export async function subscribeUser(sub: PushSubscription) {
subscription = sub
// In a production environment, you would want to store the subscription in a database
// For example: await db.subscriptions.create({ data: sub })
return { success: true }
export async function unsubscribeUser() {
subscription = null
// In a production environment, you would want to remove the subscription from the database
// For example: await db.subscriptions.delete({ where: { ... } })
return { success: true }
export async function sendNotification(message: string) {
if (!subscription) {
throw new Error('No subscription available')
try {
await webpush.sendNotification(
subscription,
JSON.stringify({
title: 'Test Notification',
body: message,
icon: '/icon.png',
return { success: true }
} catch (error) {
console.error('Error sending push notification:', error)
return { success: false, error: 'Failed to send notification' }
--- END CODE BLOCK ---
Sending a notification will be handled by our service worker, created in step 5.
In a production environment, you would want to store the subscription in a database for persistence across server restarts and to manage multiple users' subscriptions.
4. Generating VAPID Keys
To use the Web Push API, you need to generate
VAPID
keys. The simplest way is to use the web-push CLI directly:
First, install web-push globally:
Terminal
--- CODE BLOCK 17 ---
npm install -g web-push
--- END CODE BLOCK ---
Generate the VAPID keys by running:
Terminal
--- CODE BLOCK 19 ---
web-push generate-vapid-keys
--- END CODE BLOCK ---
Copy the output and paste the keys into your
--- CODE BLOCK 22 ---
NEXT_PUBLIC_VAPID_PUBLIC_KEY=your_public_key_here
VAPID_PRIVATE_KEY=your_private_key_here
--- END CODE BLOCK ---
file:
--- CODE BLOCK 23 ---
public/sw.js
--- END CODE BLOCK ---
5. Creating a Service Worker
Create a
--- CODE BLOCK 25 ---
self.addEventListener('push', function (event) {
if (event.data) {
const data = event.data.json()
const options = {
body: data.body,
icon: data.icon || '/icon.png',
badge: '/badge.png',
vibrate: [100, 50, 100],
data: {
dateOfArrival: Date.now(),
primaryKey: '2',
event.waitUntil(self.registration.showNotification(data.title, options))
self.addEventListener('notificationclick', function (event) {
console.log('Notification click received.')
event.notification.close()
event.waitUntil(clients.openWindow('<https://your-website.com>'))
--- END CODE BLOCK ---
file for your service worker:
public/sw.js
--- CODE BLOCK 30 ---
'https://your-website.com'
--- END CODE BLOCK ---
This service worker supports custom images and notifications. It handles incoming push events and notification clicks.
You can set custom icons for notifications using the
--- CODE BLOCK 32 ---
InstallPrompt
--- END CODE BLOCK ---
--- CODE BLOCK 33 ---
beforeinstallprompt
--- END CODE BLOCK ---
properties.
--- CODE BLOCK 34 ---
next dev --experimental-https
--- END CODE BLOCK ---
pattern can be adjusted to create custom vibration alerts on supported devices.
Additional data can be attached to the notification using the
--- CODE BLOCK 35 ---
next.config.js
--- END CODE BLOCK ---
property.
Remember to test your service worker thoroughly to ensure it behaves as expected across different devices and browsers. Also, make sure to update the
--- CODE BLOCK 36 ---
module.exports = {
async headers() {
return [
source: '/(.*)',
headers: [
key: 'X-Content-Type-Options',
value: 'nosniff',
key: 'X-Frame-Options',
value: 'DENY',
key: 'Referrer-Policy',
value: 'strict-origin-when-cross-origin',
source: '/sw.js',
headers: [
key: 'Content-Type',
value: 'application/javascript; charset=utf-8',
key: 'Cache-Control',
value: 'no-cache, no-store, must-revalidate',
key: 'Content-Security-Policy',
value: "default-src 'self'; script-src 'self'",
--- END CODE BLOCK ---
link in the
--- CODE BLOCK 37 ---
module.exports = {
async headers() {
return [
source: '/(.*)',
headers: [
key: 'X-Content-Type-Options',
value: 'nosniff',
key: 'X-Frame-Options',
value: 'DENY',
key: 'Referrer-Policy',
value: 'strict-origin-when-cross-origin',
source: '/sw.js',
headers: [
key: 'Content-Type',
value: 'application/javascript; charset=utf-8',
key: 'Cache-Control',
value: 'no-cache, no-store, must-revalidate',
key: 'Content-Security-Policy',
value: "default-src 'self'; script-src 'self'",
--- END CODE BLOCK ---
event listener to the appropriate URL for your application.
6. Adding to Home Screen
--- CODE BLOCK 38 ---
X-Content-Type-Options: nosniff
--- END CODE BLOCK ---
component defined in step 2 shows a message for iOS devices to instruct them to install to their home screen.
To ensure your application can be installed to a mobile home screen, you must have:
A valid web app manifest (created in step 1)
The website served over HTTPS
Modern browsers will automatically show an installation prompt to users when these criteria are met. You can provide a custom installation button with
--- CODE BLOCK 39 ---
X-Frame-Options: DENY
--- END CODE BLOCK ---
, however, we do not recommend this as it is not cross browser and platform (does not work on Safari iOS).
7. Testing Locally
To ensure you can view notifications locally, ensure that:
You are
running locally with HTTPS
--- CODE BLOCK 40 ---
Referrer-Policy: strict-origin-when-cross-origin
--- END CODE BLOCK ---
for testing
Your browser (Chrome, Safari, Firefox) has notifications enabled
When prompted locally, accept permissions to use notifications
Ensure notifications are not disabled globally for the entire browser
If you are still not seeing notifications, try using another browser to debug
8. Securing your application
Security is a crucial aspect of any web application, especially for PWAs. Next.js allows you to configure security headers using the
--- CODE BLOCK 41 ---
Content-Type: application/javascript; charset=utf-8
--- END CODE BLOCK ---
file. For example:
next.config.js
--- CODE BLOCK 42 ---
Cache-Control: no-cache, no-store, must-revalidate
--- END CODE BLOCK ---
Let’s go over each of these options:
Global Headers (applied to all routes):
[CODE_BLOCK_38]
: Prevents MIME type sniffing, reducing the risk of malicious file uploads.
[CODE_BLOCK_39]
: Protects against clickjacking attacks by preventing your site from being embedded in iframes.
[CODE_BLOCK_40]
: Controls how much referrer information is included with requests, balancing security and functionality.
Service Worker Specific Headers:
[CODE_BLOCK_41]
: Ensures the service worker is interpreted correctly as JavaScript.
[CODE_BLOCK_42]
: Prevents caching of the service worker, ensuring users always get the latest version.
[CODE_BLOCK_43]
: Implements a strict Content Security Policy for the service worker, only allowing scripts from the same origin.
Learn more about defining
Content Security Policies
with Next.js.
Next Steps
Exploring PWA Capabilities
: PWAs can leverage various web APIs to provide advanced functionality. Consider exploring features like background sync, periodic background sync, or the File System Access API to enhance your application. For inspiration and up-to-date information on PWA capabilities, you can refer to resources like
What PWA Can Do Today
Static Exports:
If your application requires not running a server, and instead using a static export of files, you can update the Next.js configuration to enable this change. Learn more in the
Next.js Static Export documentation
. However, you will need to move from Server Actions to calling an external API, as well as moving your defined headers to your proxy.
Offline Support
: To provide offline functionality, one option is
Serwist
with Next.js. You can find an example of how to integrate Serwist with Next.js in their
documentation
Note:
this plugin currently requires webpack configuration.
Security Considerations
: Ensure that your service worker is properly secured. This includes using HTTPS, validating the source of push messages, and implementing proper error handling.
User Experience
: Consider implementing progressive enhancement techniques to ensure your app works well even when certain PWA features are not supported by the user's browser.
Next Steps
manifest.json
API Reference for manifest.json file.
Was this helpful?
supported.
Send