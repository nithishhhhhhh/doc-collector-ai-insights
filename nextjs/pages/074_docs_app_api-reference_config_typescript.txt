SOURCE URL: https://nextjs.org/docs/app/api-reference/config/typescript
SCRAPED: 2025-06-19 17:17:46
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
API Reference
Configuration
TypeScript
TypeScript
Next.js comes with built-in TypeScript, automatically installing the necessary packages and configuring the proper settings when you create a new project with
--- CODE BLOCK 1 ---
create-next-app
--- END CODE BLOCK ---
To add TypeScript to an existing project, rename a file to
--- CODE BLOCK 6 ---
tsconfig.json
--- END CODE BLOCK ---
--- CODE BLOCK 7 ---
jsconfig.json
--- END CODE BLOCK ---
. Run
--- CODE BLOCK 9 ---
jsconfig.json
--- END CODE BLOCK ---
--- CODE BLOCK 10 ---
tsconfig.json
--- END CODE BLOCK ---
to automatically install the necessary dependencies and add a
--- CODE BLOCK 11 ---
jsconfig.json
--- END CODE BLOCK ---
file with the recommended config options.
Good to know
: If you already have a
--- CODE BLOCK 16 ---
'use client'
--- END CODE BLOCK ---
file, copy the
--- CODE BLOCK 26 ---
async function getData() {
const res = await fetch('https://api.example.com/...')
// The return value is *not* serialized
// You can return Date, Map, Set, etc.
return res.json()
export default async function Page() {
const name = await getData()
return '...'
--- END CODE BLOCK ---
compiler option from the old
--- CODE BLOCK 27 ---
async function getData() {
const res = await fetch('https://api.example.com/...')
// The return value is *not* serialized
// You can return Date, Map, Set, etc.
return res.json()
export default async function Page() {
const name = await getData()
return '...'
--- END CODE BLOCK ---
into the new
--- CODE BLOCK 28 ---
next.config.ts
--- END CODE BLOCK ---
file, and delete the old
--- CODE BLOCK 29 ---
next.config.ts
--- END CODE BLOCK ---
file.
IDE Plugin
Next.js includes a custom TypeScript plugin and type checker, which VSCode and other code editors can use for advanced type-checking and auto-completion.
You can enable the plugin in VS Code by:
Opening the command palette (
--- CODE BLOCK 30 ---
import type { NextConfig } from 'next'
const nextConfig: NextConfig = {
/* config options here */
export default nextConfig
--- END CODE BLOCK ---
--- CODE BLOCK 31 ---
import type { NextConfig } from 'next'
const nextConfig: NextConfig = {
/* config options here */
export default nextConfig
--- END CODE BLOCK ---
--- CODE BLOCK 32 ---
next.config.ts
--- END CODE BLOCK ---
Searching for "TypeScript: Select TypeScript Version"
Selecting "Use Workspace Version"
Now, when editing files, the custom plugin will be enabled. When running
--- CODE BLOCK 34 ---
next.config.ts
--- END CODE BLOCK ---
, the custom type checker will be used.
The TypeScript plugin can help with:
Warning if the invalid values for
segment config options
are passed.
Showing available options and in-context documentation.
Ensuring the
--- CODE BLOCK 35 ---
next.config.js
--- END CODE BLOCK ---
directive is used correctly.
Ensuring client hooks (like
--- CODE BLOCK 36 ---
// @ts-check
/** @type {import('next').NextConfig} */
const nextConfig = {
/* config options here */
module.exports = nextConfig
--- END CODE BLOCK ---
) are only used in Client Components.
ðŸŽ¥ Watch:
Learn about the built-in TypeScript plugin â†’
YouTube (3 minutes)
End-to-End Type Safety
The Next.js App Router has
enhanced type safety
. This includes:
No serialization of data between fetching function and page
: You can
--- CODE BLOCK 37 ---
// @ts-check
/** @type {import('next').NextConfig} */
const nextConfig = {
/* config options here */
module.exports = nextConfig
--- END CODE BLOCK ---
directly in components, layouts, and pages on the server. This data
does not
need to be serialized (converted to a string) to be passed to the client side for consumption in React. Instead, since
--- CODE BLOCK 39 ---
experimental.typedRoutes
--- END CODE BLOCK ---
uses Server Components by default, we can use values like
--- CODE BLOCK 40 ---
import type { NextConfig } from 'next'
const nextConfig: NextConfig = {
experimental: {
typedRoutes: true,
export default nextConfig
--- END CODE BLOCK ---
--- CODE BLOCK 41 ---
import type { NextConfig } from 'next'
const nextConfig: NextConfig = {
experimental: {
typedRoutes: true,
export default nextConfig
--- END CODE BLOCK ---
--- CODE BLOCK 42 ---
.next/types
--- END CODE BLOCK ---
, and more without any extra steps. Previously, you needed to manually type the boundary between server and client with Next.js-specific types.
Streamlined data flow between components
: With the removal of
--- CODE BLOCK 45 ---
import type { Route } from 'next';
import Link from 'next/link'
// No TypeScript errors if href is a valid route
<Link href="/about" />
<Link href="/blog/nextjs" />
<Link href={`/blog/${slug}`} />
<Link href={('/blog' + slug) as Route} />
// TypeScript errors if href is not a valid route
<Link href="/aboot" />
--- END CODE BLOCK ---
in favor of root layouts, it is now easier to visualize the data flow between components and pages. Previously, data flowing between individual
--- CODE BLOCK 46 ---
import type { Route } from 'next';
import Link from 'next/link'
// No TypeScript errors if href is a valid route
<Link href="/about" />
<Link href="/blog/nextjs" />
<Link href={`/blog/${slug}`} />
<Link href={('/blog' + slug) as Route} />
// TypeScript errors if href is not a valid route
<Link href="/aboot" />
--- END CODE BLOCK ---
--- CODE BLOCK 49 ---
import type { Route } from 'next'
import Link from 'next/link'
function Card<T extends string>({ href }: { href: Route<T> | URL }) {
return (
<Link href={href}>
<div>My Card</div>
</Link>
--- END CODE BLOCK ---
were difficult to type and could introduce confusing bugs. With
colocated data fetching
in the App Router, this is no longer an issue.
Data Fetching in Next.js
now provides as close to end-to-end type safety as possible without being prescriptive about your database or content provider selection.
We're able to type the response data as you would expect with normal TypeScript. For example:
app/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 50 ---
import type { Route } from 'next'
import Link from 'next/link'
function Card<T extends string>({ href }: { href: Route<T> | URL }) {
return (
<Link href={href}>
<div>My Card</div>
</Link>
--- END CODE BLOCK ---
complete
end-to-end type safety, this also requires your database or content provider to support TypeScript. This could be through using an
or type-safe query builder.
Examples
Type checking
--- CODE BLOCK 62 ---
@types/react
--- END CODE BLOCK ---
You can use TypeScript and import types in your Next.js configuration by using
--- CODE BLOCK 64 ---
'Promise<Element>' is not a valid JSX element
--- END CODE BLOCK ---
next.config.ts
--- CODE BLOCK 65 ---
@types/react
--- END CODE BLOCK ---
Good to know
: Module resolution in
--- CODE BLOCK 69 ---
next.config.ts
--- END CODE BLOCK ---
is currently limited to
--- CODE BLOCK 70 ---
ignoreBuildErrors
--- END CODE BLOCK ---
. This may cause incompatibilities with ESM only packages being loaded in
--- CODE BLOCK 72 ---
import type { NextConfig } from 'next'
const nextConfig: NextConfig = {
typescript: {
// !! WARN !!
// Dangerously allow production builds to successfully complete even if
// your project has type errors.
// !! WARN !!
ignoreBuildErrors: true,
export default nextConfig
--- END CODE BLOCK ---
When using the
--- CODE BLOCK 73 ---
import type { NextConfig } from 'next'
const nextConfig: NextConfig = {
typescript: {
// !! WARN !!
// Dangerously allow production builds to successfully complete even if
// your project has type errors.
// !! WARN !!
ignoreBuildErrors: true,
export default nextConfig
--- END CODE BLOCK ---
file, you can add some type checking in your IDE using JSDoc as below:
next.config.js
--- CODE BLOCK 74 ---
tsc --noEmit
--- END CODE BLOCK ---
Statically Typed Links
Next.js can statically type links to prevent typos and other errors when using
--- CODE BLOCK 76 ---
new-types.d.ts
--- END CODE BLOCK ---
, improving type safety when navigating between pages.
To opt-into this feature,
--- CODE BLOCK 77 ---
tsconfig.json
--- END CODE BLOCK ---
need to be enabled and the project needs to be using TypeScript.
next.config.ts
--- CODE BLOCK 78 ---
"compilerOptions": {
"skipLibCheck": true
//...truncated...
"include": [
"new-types.d.ts",
"next-env.d.ts",
".next/types/**/*.ts",
"**/*.ts",
"**/*.tsx"
"exclude": ["node_modules"]
--- END CODE BLOCK ---
Next.js will generate a link definition in
--- CODE BLOCK 81 ---
next.config.ts
--- END CODE BLOCK ---
that contains information about all existing routes in your application, which TypeScript can then use to provide feedback in your editor about invalid links.
Currently, experimental support includes any string literal, including dynamic segments. For non-literal strings, you currently need to manually cast the
--- CODE BLOCK 85 ---
tsconfig.json
--- END CODE BLOCK ---
with
[CODE_BLOCK_44]
[CODE_BLOCK_45]
To accept
[CODE_BLOCK_47]
in a custom component wrapping
[CODE_BLOCK_48]
, use a generic:
[CODE_BLOCK_49]
How does it work?
When running
[CODE_BLOCK_51]
[CODE_BLOCK_52]
, Next.js generates a hidden
[CODE_BLOCK_53]
file inside
[CODE_BLOCK_54]
that contains information about all existing routes in your application (all valid routes as the
[CODE_BLOCK_55]
type of
[CODE_BLOCK_56]
). This
[CODE_BLOCK_57]
file is included in
[CODE_BLOCK_58]
and the TypeScript compiler will check that
[CODE_BLOCK_59]
and provide feedback in your editor about invalid links.
With Async Server Components
To use an
[CODE_BLOCK_60]
Server Component with TypeScript, ensure you are using TypeScript
[CODE_BLOCK_61]
or higher and
[CODE_BLOCK_62]
[CODE_BLOCK_63]
or higher.
If you are using an older version of TypeScript, you may see a
[CODE_BLOCK_64]
type error. Updating to the latest version of TypeScript and
[CODE_BLOCK_65]
should resolve this issue.
Incremental type checking
Since
[CODE_BLOCK_66]
Next.js supports
incremental type checking
when enabled in your
[CODE_BLOCK_67]
, this can help speed up type checking in larger applications.
Disabling TypeScript errors in production
Next.js fails your
production build
[CODE_BLOCK_68]
) when TypeScript errors are present in your project.
If you'd like Next.js to dangerously produce production code even when your application has errors, you can disable the built-in type checking step.
If disabled, be sure you are running type checks as part of your build or deploy process, otherwise this can be very dangerous.
Open
[CODE_BLOCK_69]
and enable the
[CODE_BLOCK_70]
option in the
[CODE_BLOCK_71]
config:
next.config.ts
[CODE_BLOCK_72]
Good to know
: You can run
[CODE_BLOCK_74]
to check for TypeScript errors yourself before building. This is useful for CI/CD pipelines where you'd like to check for TypeScript errors before deploying.
Custom type declarations
When you need to declare custom types, you might be tempted to modify
[CODE_BLOCK_75]
. However, this file is automatically generated, so any changes you make will be overwritten. Instead, you should create a new file, let's call it
[CODE_BLOCK_76]
, and reference it in your
[CODE_BLOCK_77]
tsconfig.json
[CODE_BLOCK_78]
Version Changes
Version
Changes
[CODE_BLOCK_80]
[CODE_BLOCK_81]
support added for TypeScript projects.
[CODE_BLOCK_82]
Statically typed links are available in beta.
[CODE_BLOCK_83]
is now used by default to compile TypeScript and TSX for faster builds.
[CODE_BLOCK_84]
Incremental type checking
support added when enabled in your
[CODE_BLOCK_85]
Was this helpful?
supported.
Send