SOURCE URL: https://nextjs.org/docs/pages/building-your-application/rendering/automatic-static-optimization
SCRAPED: 2025-06-19 17:21:40
================================================================================

Menu
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Building Your Application
Rendering
Automatic Static Optimization
You are currently viewing the documentation for Pages Router.
Automatic Static Optimization
Next.js automatically determines that a page is static (can be prerendered) if it has no blocking data requirements. This determination is made by the absence of
--- CODE BLOCK 1 ---
getServerSideProps
--- END CODE BLOCK ---
--- CODE BLOCK 2 ---
getInitialProps
--- END CODE BLOCK ---
in the page.
This feature allows Next.js to emit hybrid applications that contain
both server-rendered and statically generated pages
Good to know
: Statically generated pages are still reactive. Next.js will hydrate your application client-side to give it full interactivity.
One of the main benefits of this feature is that optimized pages require no server-side computation, and can be instantly streamed to the end-user from multiple CDN locations. The result is an
ultra fast
loading experience for your users.
How it works
--- CODE BLOCK 3 ---
getServerSideProps
--- END CODE BLOCK ---
--- CODE BLOCK 4 ---
getInitialProps
--- END CODE BLOCK ---
is present in a page, Next.js will switch to render the page on-demand, per-request (meaning
Server-Side Rendering
If the above is not the case, Next.js will
statically optimize
your page automatically by prerendering the page to static HTML.
During prerendering, the router's
--- CODE BLOCK 8 ---
next.config.js
--- END CODE BLOCK ---
object will be empty since we do not have
--- CODE BLOCK 11 ---
next/router
--- END CODE BLOCK ---
information to provide during this phase. After hydration, Next.js will trigger an update to your application to provide the route parameters in the
--- CODE BLOCK 12 ---
getStaticProps
--- END CODE BLOCK ---
object.
The cases where the query will be updated after hydration triggering another render are:
The page is a
dynamic-route
The page has query values in the URL.
Rewrites
are configured in your
--- CODE BLOCK 16 ---
pages/about.js
--- END CODE BLOCK ---
since these can have parameters that may need to be parsed and provided in the
--- CODE BLOCK 17 ---
.next/server/pages/about.html
--- END CODE BLOCK ---
To be able to distinguish if the query is fully updated and ready for use, you can leverage the
--- CODE BLOCK 18 ---
.next/server/pages/about.html
--- END CODE BLOCK ---
field on
--- CODE BLOCK 19 ---
getServerSideProps
--- END CODE BLOCK ---
Good to know
: Parameters added with
dynamic routes
to a page that's using
--- CODE BLOCK 20 ---
.next/server/pages/about.js
--- END CODE BLOCK ---
will always be available inside the
--- CODE BLOCK 21 ---
.next/server/pages/about.js
--- END CODE BLOCK ---
object.
--- CODE BLOCK 23 ---
getInitialProps
--- END CODE BLOCK ---
will emit
--- CODE BLOCK 25 ---
getInitialProps
--- END CODE BLOCK ---
files for statically optimized pages. For example, the result for the page
--- CODE BLOCK 30 ---
next/router
--- END CODE BLOCK ---
would be:
Terminal
--- CODE BLOCK 34 ---
active-class-name
--- END CODE BLOCK ---
And if you add
[CODE_BLOCK_19]
to the page, it will then be JavaScript, like so:
Terminal
[CODE_BLOCK_20]
Caveats
If you have a
custom
[CODE_BLOCK_22]
with
[CODE_BLOCK_23]
then this optimization will be turned off in pages without
Static Generation
If you have a
custom
[CODE_BLOCK_24]
with
[CODE_BLOCK_25]
be sure you check if
[CODE_BLOCK_26]
is defined before assuming the page is server-side rendered.
[CODE_BLOCK_27]
will be
[CODE_BLOCK_28]
for pages that are prerendered.
Avoid using the
[CODE_BLOCK_29]
value on
[CODE_BLOCK_30]
in the rendering tree until the router's
[CODE_BLOCK_31]
field is
[CODE_BLOCK_32]
. Statically optimized pages only know
[CODE_BLOCK_33]
on the client and not the server, so using it as a prop may lead to mismatch errors. The
[CODE_BLOCK_34]
example
demonstrates one way to use
[CODE_BLOCK_35]
as a prop.
Was this helpful?
supported.
Send