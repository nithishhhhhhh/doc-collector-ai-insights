SOURCE URL: https://nextjs.org/docs/pages/api-reference/functions/get-static-paths
SCRAPED: 2025-06-19 17:20:58
================================================================================

Menu
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
API Reference
Functions
getStaticPaths
You are currently viewing the documentation for Pages Router.
getStaticPaths
When exporting a function called
--- CODE BLOCK 1 ---
getStaticPaths
--- END CODE BLOCK ---
from a page that uses
Dynamic Routes
, Next.js will statically pre-render all the paths specified by
--- CODE BLOCK 2 ---
getStaticPaths
--- END CODE BLOCK ---
pages/repo/[name].tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 3 ---
import type {
InferGetStaticPropsType,
GetStaticProps,
GetStaticPaths,
} from 'next'
type Repo = {
name: string
stargazers_count: number
export const getStaticPaths = (async () => {
return {
paths: [
params: {
name: 'next.js',
}, // See the "paths" section below
fallback: true, // false or "blocking"
}) satisfies GetStaticPaths
export const getStaticProps = (async (context) => {
const res = await fetch('https://api.github.com/repos/vercel/next.js')
const repo = await res.json()
return { props: { repo } }
}) satisfies GetStaticProps<{
repo: Repo
export default function Page({
repo,
}: InferGetStaticPropsType<typeof getStaticProps>) {
return repo.stargazers_count
--- END CODE BLOCK ---
getStaticPaths return values
--- CODE BLOCK 5 ---
getStaticPaths
--- END CODE BLOCK ---
function should return an object with the following
required
properties:
--- CODE BLOCK 8 ---
pages/posts/[id].js
--- END CODE BLOCK ---
--- CODE BLOCK 9 ---
getStaticPaths
--- END CODE BLOCK ---
key determines which paths will be pre-rendered. For example, suppose that you have a page that uses
Dynamic Routes
named
--- CODE BLOCK 11 ---
return {
paths: [
{ params: { id: '1' }},
params: { id: '2' },
// with i18n configured the locale for the path can be returned as well
locale: "en",
fallback: ...
--- END CODE BLOCK ---
. If you export
--- CODE BLOCK 12 ---
return {
paths: [
{ params: { id: '1' }},
params: { id: '2' },
// with i18n configured the locale for the path can be returned as well
locale: "en",
fallback: ...
--- END CODE BLOCK ---
from this page and return the following for
--- CODE BLOCK 16 ---
pages/posts/[id].js
--- END CODE BLOCK ---
--- CODE BLOCK 18 ---
pages/posts/[postId]/[commentId]
--- END CODE BLOCK ---
Then, Next.js will statically generate
--- CODE BLOCK 25 ---
['hello', 'world']
--- END CODE BLOCK ---
--- CODE BLOCK 26 ---
/hello/world
--- END CODE BLOCK ---
during
--- CODE BLOCK 31 ---
slug: false
--- END CODE BLOCK ---
using the page component in
--- CODE BLOCK 32 ---
pages/[[...slug]]
--- END CODE BLOCK ---
The value for each
--- CODE BLOCK 41 ---
fallback: false
--- END CODE BLOCK ---
object must match the parameters used in the page name:
If the page name is
--- CODE BLOCK 44 ---
getStaticPaths
--- END CODE BLOCK ---
, then
--- CODE BLOCK 46 ---
getStaticPaths
--- END CODE BLOCK ---
should contain
--- CODE BLOCK 47 ---
fallback: false
--- END CODE BLOCK ---
--- CODE BLOCK 48 ---
getStaticPaths
--- END CODE BLOCK ---
If the page name uses
catch-all routes
like
--- CODE BLOCK 49 ---
fallback: false
--- END CODE BLOCK ---
, then
--- CODE BLOCK 51 ---
pages/posts/[id].js
--- END CODE BLOCK ---
should contain
--- CODE BLOCK 52 ---
getStaticPaths
--- END CODE BLOCK ---
(which is an array). If this array is
--- CODE BLOCK 53 ---
getStaticProps
--- END CODE BLOCK ---
, then Next.js will statically generate the page at
--- CODE BLOCK 54 ---
function Post({ post }) {
// Render post...
// This function gets called at build time
export async function getStaticPaths() {
// Call an external API endpoint to get posts
const res = await fetch('https://.../posts')
const posts = await res.json()
// Get the paths we want to pre-render based on posts
const paths = posts.map((post) => ({
params: { id: post.id },
// We'll pre-render only these paths at build time.
// { fallback: false } means other routes should 404.
return { paths, fallback: false }
// This also gets called at build time
export async function getStaticProps({ params }) {
// params contains the post `id`.
// If the route is like /posts/1, then params.id is 1
const res = await fetch(`https://.../posts/${params.id}`)
const post = await res.json()
// Pass post data to the page via props
return { props: { post } }
export default Post
--- END CODE BLOCK ---
If the page uses an
optional catch-all route
, use
--- CODE BLOCK 55 ---
function Post({ post }) {
// Render post...
// This function gets called at build time
export async function getStaticPaths() {
// Call an external API endpoint to get posts
const res = await fetch('https://.../posts')
const posts = await res.json()
// Get the paths we want to pre-render based on posts
const paths = posts.map((post) => ({
params: { id: post.id },
// We'll pre-render only these paths at build time.
// { fallback: false } means other routes should 404.
return { paths, fallback: false }
// This also gets called at build time
export async function getStaticProps({ params }) {
// params contains the post `id`.
// If the route is like /posts/1, then params.id is 1
const res = await fetch(`https://.../posts/${params.id}`)
const post = await res.json()
// Pass post data to the page via props
return { props: { post } }
export default Post
--- END CODE BLOCK ---
--- CODE BLOCK 56 ---
fallback: true
--- END CODE BLOCK ---
--- CODE BLOCK 59 ---
getStaticProps
--- END CODE BLOCK ---
--- CODE BLOCK 60 ---
getStaticPaths
--- END CODE BLOCK ---
to render the root-most route. For example, if you supply
--- CODE BLOCK 62 ---
getStaticProps
--- END CODE BLOCK ---
--- CODE BLOCK 63 ---
fallback: 'blocking'
--- END CODE BLOCK ---
, Next.js will statically generate the page
--- CODE BLOCK 64 ---
fallback: true
--- END CODE BLOCK ---
--- CODE BLOCK 66 ---
next/router
--- END CODE BLOCK ---
strings are
case-sensitive
and ideally should be normalized to ensure the paths are generated correctly. For example, if
--- CODE BLOCK 67 ---
fallback: 'blocking'
--- END CODE BLOCK ---
is returned for a param it will only match if
--- CODE BLOCK 70 ---
getStaticProps
--- END CODE BLOCK ---
is the actual path visited, not
--- CODE BLOCK 72 ---
fallback: true
--- END CODE BLOCK ---
--- CODE BLOCK 73 ---
output: 'export'
--- END CODE BLOCK ---
Separate of the
--- CODE BLOCK 74 ---
fallback: true
--- END CODE BLOCK ---
object a
--- CODE BLOCK 75 ---
fallback: true
--- END CODE BLOCK ---
field can be returned when
i18n is configured
, which configures the locale for the path being generated.
--- CODE BLOCK 76 ---
fallback: true
--- END CODE BLOCK ---
--- CODE BLOCK 77 ---
getStaticProps
--- END CODE BLOCK ---
--- CODE BLOCK 78 ---
fallback: true
--- END CODE BLOCK ---
, then any paths not returned by
--- CODE BLOCK 79 ---
fallback: 'blocking'
--- END CODE BLOCK ---
will result in a
404 page
When
--- CODE BLOCK 82 ---
getStaticPaths
--- END CODE BLOCK ---
is run, Next.js will check if
--- CODE BLOCK 84 ---
getStaticProps
--- END CODE BLOCK ---
returned
--- CODE BLOCK 85 ---
getStaticPaths
--- END CODE BLOCK ---
, it will then build
only
the paths returned by
--- CODE BLOCK 87 ---
getStaticProps
--- END CODE BLOCK ---
. This option is useful if you have a small number of paths to create, or new page data is not added often. If you find that you need to add more paths, and you have
--- CODE BLOCK 90 ---
fallback: 'blocking'
--- END CODE BLOCK ---
, you will need to run
--- CODE BLOCK 91 ---
fallback: 'blocking'
--- END CODE BLOCK ---
again so that the new paths can be generated.
The following example pre-renders one blog post per page called
--- CODE BLOCK 92 ---
fallback: 'blocking'
--- END CODE BLOCK ---
. The list of blog posts will be fetched from a CMS and returned by
--- CODE BLOCK 93 ---
output: 'export'
--- END CODE BLOCK ---
. Then, for each page, it fetches the post data from a CMS using
--- CODE BLOCK 94 ---
router.isFallback
--- END CODE BLOCK ---
pages/posts/[id].js
--- CODE BLOCK 97 ---
import { useRouter } from 'next/router'
function Post({ post }) {
const router = useRouter()
// If the page is not yet generated, this will be displayed
// initially until getStaticProps() finishes running
if (router.isFallback) {
return <div>Loading...</div>
// Render post...
// This function gets called at build time
export async function getStaticPaths() {
return {
// Only `/posts/1` and `/posts/2` are generated at build time
paths: [{ params: { id: '1' } }, { params: { id: '2' } }],
// Enable statically generating additional pages
// For example: `/posts/3`
fallback: true,
// This also gets called at build time
export async function getStaticProps({ params }) {
// params contains the post `id`.
// If the route is like /posts/1, then params.id is 1
const res = await fetch(`https://.../posts/${params.id}`)
const post = await res.json()
// Pass post data to the page via props
return {
props: { post },
// Re-generate the post at most once per second
// if a request comes in
revalidate: 1,
export default Post
--- END CODE BLOCK ---
--- CODE BLOCK 100 ---
generateStaticParams()
--- END CODE BLOCK ---
Examples
Static generation of a large number of pages
--- CODE BLOCK 105 ---
getStaticPaths
--- END CODE BLOCK ---
[CODE_BLOCK_58]
, then the behavior of
[CODE_BLOCK_59]
changes in the following ways:
The paths returned from
[CODE_BLOCK_60]
will be rendered to
[CODE_BLOCK_61]
at build time by
[CODE_BLOCK_62]
The paths that have not been generated at build time will
result in a 404 page. Instead, Next.js will serve a
“fallback”
version of the page on the first request to such a path. Web crawlers, such as Google, won't be served a fallback and instead the path will behave as in
[CODE_BLOCK_63]
When a page with
[CODE_BLOCK_64]
is navigated to through
[CODE_BLOCK_65]
[CODE_BLOCK_66]
(client-side) Next.js will
serve a fallback and instead the page will behave as
[CODE_BLOCK_67]
In the background, Next.js will statically generate the requested path
[CODE_BLOCK_68]
[CODE_BLOCK_69]
. This includes running
[CODE_BLOCK_70]
When complete, the browser receives the
[CODE_BLOCK_71]
for the generated path. This will be used to automatically render the page with the required props. From the user’s perspective, the page will be swapped from the fallback page to the full page.
At the same time, Next.js adds this path to the list of pre-rendered pages. Subsequent requests to the same path will serve the generated page, like other pages pre-rendered at build time.
Good to know
[CODE_BLOCK_72]
is not supported when using
[CODE_BLOCK_73]
When is
[CODE_BLOCK_74]
useful?
[CODE_BLOCK_75]
is useful if your app has a very large number of static pages that depend on data (such as a very large e-commerce site). If you want to pre-render all product pages, the builds would take a very long time.
Instead, you may statically generate a small subset of pages and use
[CODE_BLOCK_76]
for the rest. When someone requests a page that is not generated yet, the user will see the page with a loading indicator or skeleton component.
Shortly after,
[CODE_BLOCK_77]
finishes and the page will be rendered with the requested data. From now on, everyone who requests the same page will get the statically pre-rendered page.
This ensures that users always have a fast experience while preserving fast builds and the benefits of Static Generation.
[CODE_BLOCK_78]
will not
update
generated pages, for that take a look at
Incremental Static Regeneration
[CODE_BLOCK_79]
[CODE_BLOCK_80]
[CODE_BLOCK_81]
, new paths not returned by
[CODE_BLOCK_82]
will wait for the
[CODE_BLOCK_83]
to be generated, identical to SSR (hence why
blocking
), and then be cached for future requests so it only happens once per path.
[CODE_BLOCK_84]
will behave as follows:
The paths returned from
[CODE_BLOCK_85]
will be rendered to
[CODE_BLOCK_86]
at build time by
[CODE_BLOCK_87]
The paths that have not been generated at build time will
result in a 404 page. Instead, Next.js will SSR on the first request and return the generated
[CODE_BLOCK_88]
When complete, the browser receives the
[CODE_BLOCK_89]
for the generated path. From the user’s perspective, it will transition from "the browser is requesting the page" to "the full page is loaded". There is no flash of loading/fallback state.
At the same time, Next.js adds this path to the list of pre-rendered pages. Subsequent requests to the same path will serve the generated page, like other pages pre-rendered at build time.
[CODE_BLOCK_90]
will not
update
generated pages by default. To update generated pages, use
Incremental Static Regeneration
in conjunction with
[CODE_BLOCK_91]
Good to know
[CODE_BLOCK_92]
is not supported when using
[CODE_BLOCK_93]
Fallback pages
In the “fallback” version of a page:
The page’s props will be empty.
Using the
router
, you can detect if the fallback is being rendered,
[CODE_BLOCK_94]
will be
[CODE_BLOCK_95]
The following example showcases using
[CODE_BLOCK_96]
pages/posts/[id].js
[CODE_BLOCK_97]
Version History
Version
Changes
[CODE_BLOCK_99]
App Router
is now stable with simplified data fetching, including
[CODE_BLOCK_100]
[CODE_BLOCK_101]
On-Demand Incremental Static Regeneration
is stable.
[CODE_BLOCK_102]
On-Demand Incremental Static Regeneration
added (beta).
[CODE_BLOCK_103]
Stable
Incremental Static Regeneration
[CODE_BLOCK_104]
[CODE_BLOCK_105]
introduced.
Was this helpful?
supported.
Send