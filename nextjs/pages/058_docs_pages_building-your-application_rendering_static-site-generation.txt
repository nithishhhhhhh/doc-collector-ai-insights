SOURCE URL: https://nextjs.org/docs/pages/building-your-application/rendering/static-site-generation
SCRAPED: 2025-06-19 17:15:51
================================================================================

Menu
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Building Your Application
Rendering
Static Site Generation (SSG)
You are currently viewing the documentation for Pages Router.
Static Site Generation (SSG)
Examples
Agility CMS Example
Demo
Builder.io Example
Demo
ButterCMS Example
Demo
Contentful Example
Demo
Cosmic Example
Demo
DatoCMS Example
Demo
DotCMS Example
Demo
Drupal Example
Demo
Enterspeed Example
Demo
GraphCMS Example
Demo
Keystone Example
Demo
Kontent.ai Example
Demo
Makeswift Example
Demo
Plasmic Example
Demo
Prepr Example
Demo
Prismic Example
Demo
Sanity Example
Demo
Sitecore XM Cloud Example
Demo
Storyblok Example
Demo
Strapi Example
Demo
TakeShape Example
Demo
Tina Example
Demo
Umbraco Example
Demo
Umbraco Heartcore Example
Demo
Webiny Example
Demo
WordPress Example
Demo
Blog Starter Example
Demo
Static Tweet (Demo)
If a page uses
Static Generation
, the page HTML is generated at
build time
. That means in production, the page HTML is generated when you run
--- CODE BLOCK 2 ---
function About() {
return <div>About</div>
export default About
--- END CODE BLOCK ---
. This HTML will then be reused on each request. It can be cached by a CDN.
In Next.js, you can statically generate pages
with or without data
. Let's take a look at each case.
Static Generation without data
By default, Next.js pre-renders pages using Static Generation without fetching data. Here's an example:
--- CODE BLOCK 3 ---
function About() {
return <div>About</div>
export default About
--- END CODE BLOCK ---
Note that this page does not need to fetch any external data to be pre-rendered. In cases like this, Next.js generates a single HTML file per page during build time.
Static Generation with data
Some pages require fetching external data for pre-rendering. There are two scenarios, and one or both might apply. In each case, you can use these functions that Next.js provides:
Your page
content
depends on external data: Use
--- CODE BLOCK 5 ---
getStaticPaths
--- END CODE BLOCK ---
Your page
paths
depend on external data: Use
--- CODE BLOCK 6 ---
getStaticProps
--- END CODE BLOCK ---
(usually in addition to
--- CODE BLOCK 7 ---
// TODO: Need to fetch `posts` (by calling some API endpoint)
//       before this page can be pre-rendered.
export default function Blog({ posts }) {
return (
<ul>
{posts.map((post) => (
<li>{post.title}</li>
</ul>
--- END CODE BLOCK ---
Scenario 1: Your page content depends on external data
Example
: Your blog page might need to fetch the list of blog posts from a CMS (content management system).
--- CODE BLOCK 8 ---
// TODO: Need to fetch `posts` (by calling some API endpoint)
//       before this page can be pre-rendered.
export default function Blog({ posts }) {
return (
<ul>
{posts.map((post) => (
<li>{post.title}</li>
</ul>
--- END CODE BLOCK ---
To fetch this data on pre-render, Next.js allows you to
--- CODE BLOCK 13 ---
export default function Blog({ posts }) {
// Render posts...
// This function gets called at build time
export async function getStaticProps() {
// Call an external API endpoint to get posts
const res = await fetch('https://.../posts')
const posts = await res.json()
// By returning { props: { posts } }, the Blog component
// will receive `posts` as a prop at build time
return {
props: {
posts,
--- END CODE BLOCK ---
--- CODE BLOCK 14 ---
export default function Blog({ posts }) {
// Render posts...
// This function gets called at build time
export async function getStaticProps() {
// Call an external API endpoint to get posts
const res = await fetch('https://.../posts')
const posts = await res.json()
// By returning { props: { posts } }, the Blog component
// will receive `posts` as a prop at build time
return {
props: {
posts,
--- END CODE BLOCK ---
function called
--- CODE BLOCK 15 ---
getStaticProps
--- END CODE BLOCK ---
from the same file. This function gets called at build time and lets you pass fetched data to the page's
--- CODE BLOCK 16 ---
pages/posts/[id].js
--- END CODE BLOCK ---
on pre-render.
--- CODE BLOCK 27 ---
getStaticPaths
--- END CODE BLOCK ---
To learn more about how
--- CODE BLOCK 29 ---
// This function gets called at build time
export async function getStaticPaths() {
// Call an external API endpoint to get posts
const res = await fetch('https://.../posts')
const posts = await res.json()
// Get the paths we want to pre-render based on posts
const paths = posts.map((post) => ({
params: { id: post.id },
// We'll pre-render only these paths at build time.
// { fallback: false } means other routes should 404.
return { paths, fallback: false }
--- END CODE BLOCK ---
works, check out the
Data Fetching documentation
Scenario 2: Your page paths depend on external data
Next.js allows you to create pages with
dynamic routes
. For example, you can create a file called
--- CODE BLOCK 30 ---
// This function gets called at build time
export async function getStaticPaths() {
// Call an external API endpoint to get posts
const res = await fetch('https://.../posts')
const posts = await res.json()
// Get the paths we want to pre-render based on posts
const paths = posts.map((post) => ({
params: { id: post.id },
// We'll pre-render only these paths at build time.
// { fallback: false } means other routes should 404.
return { paths, fallback: false }
--- END CODE BLOCK ---
to show a single blog post based on
--- CODE BLOCK 31 ---
pages/posts/[id].js
--- END CODE BLOCK ---
. This will allow you to show a blog post with
--- CODE BLOCK 32 ---
getStaticProps
--- END CODE BLOCK ---
when you access
--- CODE BLOCK 34 ---
export default function Post({ post }) {
// Render post...
export async function getStaticPaths() {
// ...
// This also gets called at build time
export async function getStaticProps({ params }) {
// params contains the post `id`.
// If the route is like /posts/1, then params.id is 1
const res = await fetch(`https://.../posts/${params.id}`)
const post = await res.json()
// Pass post data to the page via props
return { props: { post } }
--- END CODE BLOCK ---
To learn more about dynamic routing, check the
Dynamic Routing documentation
However, which
--- CODE BLOCK 35 ---
export default function Post({ post }) {
// Render post...
export async function getStaticPaths() {
// ...
// This also gets called at build time
export async function getStaticProps({ params }) {
// params contains the post `id`.
// If the route is like /posts/1, then params.id is 1
const res = await fetch(`https://.../posts/${params.id}`)
const post = await res.json()
// Pass post data to the page via props
return { props: { post } }
--- END CODE BLOCK ---
you want to pre-render at build time might depend on external data.
Example
: suppose that you've only added one blog post (with
--- CODE BLOCK 36 ---
getStaticPaths
--- END CODE BLOCK ---
) to the database. In this case, you'd only want to pre-render
[CODE_BLOCK_22]
at build time.
Later, you might add the second post with
[CODE_BLOCK_23]
. Then you'd want to pre-render
[CODE_BLOCK_24]
as well.
So your page
paths
that are pre-rendered depend on external data. To handle this, Next.js lets you
[CODE_BLOCK_25]
[CODE_BLOCK_26]
function called
[CODE_BLOCK_27]
from a dynamic page (
[CODE_BLOCK_28]
in this case). This function gets called at build time and lets you specify which paths you want to pre-render.
[CODE_BLOCK_29]
Also in
[CODE_BLOCK_31]
, you need to export
[CODE_BLOCK_32]
so that you can fetch the data about the post with this
[CODE_BLOCK_33]
and use it to pre-render the page:
[CODE_BLOCK_34]
To learn more about how
[CODE_BLOCK_36]
works, check out the
Data Fetching documentation
When should I use Static Generation?
We recommend using
Static Generation
(with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.
You can use Static Generation for many types of pages, including:
Marketing pages
Blog posts and portfolios
E-commerce product listings
Help and documentation
You should ask yourself: "Can I pre-render this page
ahead
of a user's request?" If the answer is yes, then you should choose Static Generation.
On the other hand, Static Generation is
a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request.
In cases like this, you can do one of the following:
Use Static Generation with
Client-side data fetching:
You can skip pre-rendering some parts of a page and then use client-side JavaScript to populate them. To learn more about this approach, check out the
Data Fetching documentation
Server-Side Rendering:
Next.js pre-renders a page on each request. It will be slower because the page cannot be cached by a CDN, but the pre-rendered page will always be up-to-date. We'll talk about this approach below.
Was this helpful?
supported.
Send