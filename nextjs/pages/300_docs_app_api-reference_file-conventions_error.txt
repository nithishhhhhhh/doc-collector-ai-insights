SOURCE URL: https://nextjs.org/docs/app/api-reference/file-conventions/error
SCRAPED: 2025-06-19 17:44:42
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
API Reference
File-system conventions
error.js
error.js
error
file allows you to handle unexpected runtime errors and display fallback UI.
app/dashboard/error.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 1 ---
'use client' // Error boundaries must be Client Components
import { useEffect } from 'react'
export default function Error({
error,
reset,
}: {
error: Error & { digest?: string }
reset: () => void
}) {
useEffect(() => {
// Log the error to an error reporting service
console.error(error)
}, [error])
return (
<div>
<h2>Something went wrong!</h2>
<button
onClick={
// Attempt to recover by trying to re-render the segment
() => reset()
Try again
</button>
</div>
--- END CODE BLOCK ---
--- CODE BLOCK 12 ---
error.message
--- END CODE BLOCK ---
wraps a route segment and its nested children in a
React Error Boundary
. When an error throws within the boundary, the
--- CODE BLOCK 14 ---
errors.digest
--- END CODE BLOCK ---
component shows as the fallback UI.
Good to know
React DevTools
allow you to toggle error boundaries to test error states.
If you want errors to bubble up to the parent error boundary, you can
--- CODE BLOCK 15 ---
error.digest
--- END CODE BLOCK ---
when rendering the
--- CODE BLOCK 18 ---
'use client' // Error boundaries must be Client Components
export default function Error({
error,
reset,
}: {
error: Error & { digest?: string }
reset: () => void
}) {
return (
<div>
<h2>Something went wrong!</h2>
<button onClick={() => reset()}>Try again</button>
</div>
--- END CODE BLOCK ---
component.
Reference
Props
--- CODE BLOCK 19 ---
'use client' // Error boundaries must be Client Components
export default function Error({
error,
reset,
}: {
error: Error & { digest?: string }
reset: () => void
}) {
return (
<div>
<h2>Something went wrong!</h2>
<button onClick={() => reset()}>Try again</button>
</div>
--- END CODE BLOCK ---
An instance of an
--- CODE BLOCK 20 ---
global-error.js
--- END CODE BLOCK ---
object forwarded to the
--- CODE BLOCK 23 ---
'use client' // Error boundaries must be Client Components
export default function GlobalError({
error,
reset,
}: {
error: Error & { digest?: string }
reset: () => void
}) {
return (
// global-error must include html and body tags
<html>
<body>
<h2>Something went wrong!</h2>
<button onClick={() => reset()}>Try again</button>
</body>
</html>
--- END CODE BLOCK ---
Client Component.
Good to know:
During development, the
--- CODE BLOCK 24 ---
'use client' // Error boundaries must be Client Components
export default function GlobalError({
error,
reset,
}: {
error: Error & { digest?: string }
reset: () => void
}) {
return (
// global-error must include html and body tags
<html>
<body>
<h2>Something went wrong!</h2>
<button onClick={() => reset()}>Try again</button>
</body>
</html>
--- END CODE BLOCK ---
object forwarded to the client will be serialized and include the
--- CODE BLOCK 25 ---
GracefullyDegradingErrorBoundary
--- END CODE BLOCK ---
of the original error for easier debugging. However,
this behavior is different in production
to avoid leaking potentially sensitive details included in the error to the client.
--- CODE BLOCK 26 ---
'use client'
import React, { Component, ErrorInfo, ReactNode } from 'react'
interface ErrorBoundaryProps {
children: ReactNode
onError?: (error: Error, errorInfo: ErrorInfo) => void
interface ErrorBoundaryState {
hasError: boolean
export class GracefullyDegradingErrorBoundary extends Component<
ErrorBoundaryProps,
ErrorBoundaryState
private contentRef: React.RefObject<HTMLDivElement>
constructor(props: ErrorBoundaryProps) {
super(props)
this.state = { hasError: false }
this.contentRef = React.createRef()
static getDerivedStateFromError(_: Error): ErrorBoundaryState {
return { hasError: true }
componentDidCatch(error: Error, errorInfo: ErrorInfo) {
if (this.props.onError) {
this.props.onError(error, errorInfo)
render() {
if (this.state.hasError) {
// Render the current HTML content without hydration
return (
<div
ref={this.contentRef}
suppressHydrationWarning
dangerouslySetInnerHTML={{
__html: this.contentRef.current?.innerHTML || '',
<div className="fixed bottom-0 left-0 right-0 bg-red-600 text-white py-4 px-6 text-center">
<p className="font-semibold">
An error occurred during page rendering
</p>
</div>
return <div ref={this.contentRef}>{this.props.children}</div>
export default GracefullyDegradingErrorBoundary
--- END CODE BLOCK ---
Errors forwarded from Client Components show the original
--- CODE BLOCK 27 ---
'use client'
import React, { Component, ErrorInfo, ReactNode } from 'react'
interface ErrorBoundaryProps {
children: ReactNode
onError?: (error: Error, errorInfo: ErrorInfo) => void
interface ErrorBoundaryState {
hasError: boolean
export class GracefullyDegradingErrorBoundary extends Component<
ErrorBoundaryProps,
ErrorBoundaryState
private contentRef: React.RefObject<HTMLDivElement>
constructor(props: ErrorBoundaryProps) {
super(props)
this.state = { hasError: false }
this.contentRef = React.createRef()
static getDerivedStateFromError(_: Error): ErrorBoundaryState {
return { hasError: true }
componentDidCatch(error: Error, errorInfo: ErrorInfo) {
if (this.props.onError) {
this.props.onError(error, errorInfo)
render() {
if (this.state.hasError) {
// Render the current HTML content without hydration
return (
<div
ref={this.contentRef}
suppressHydrationWarning
dangerouslySetInnerHTML={{
__html: this.contentRef.current?.innerHTML || '',
<div className="fixed bottom-0 left-0 right-0 bg-red-600 text-white py-4 px-6 text-center">
<p className="font-semibold">
An error occurred during page rendering
</p>
</div>
return <div ref={this.contentRef}>{this.props.children}</div>
export default GracefullyDegradingErrorBoundary
--- END CODE BLOCK ---
message.
Errors forwarded from Server Components show a generic message with an identifier. This is to prevent leaking sensitive details. You can use the identifier, under
--- CODE BLOCK 29 ---
global-error
--- END CODE BLOCK ---
, to match the corresponding server-side logs.
--- CODE BLOCK 31 ---
global-error
--- END CODE BLOCK ---
An automatically generated hash of the error thrown. It can be used to match the corresponding error in server-side logs.
[CODE_BLOCK_16]
The cause of an error can sometimes be temporary. In these cases, trying again might resolve the issue.
An error component can use the
[CODE_BLOCK_17]
function to prompt the user to attempt to recover from the error. When executed, the function will try to re-render the error boundary's contents. If successful, the fallback error component is replaced with the result of the re-render.
app/dashboard/error.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_18]
Examples
Global Error
While less common, you can handle errors in the root layout or template using
[CODE_BLOCK_20]
, located in the root app directory, even when leveraging
internationalization
. Global error UI must define its own
[CODE_BLOCK_21]
[CODE_BLOCK_22]
tags. This file replaces the root layout or template when active.
app/global-error.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_23]
Graceful error recovery with a custom error boundary
When rendering fails on the client, it can be useful to show the last known server rendered UI for a better user experience.
[CODE_BLOCK_25]
is an example of a custom error boundary that captures and preserves the current HTML before an error occurs. If a rendering error happens, it re-renders the captured HTML and displays a persistent notification bar to inform the user.
app/dashboard/error.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_26]
Version History
Version
Changes
[CODE_BLOCK_28]
Also display
[CODE_BLOCK_29]
in development.
[CODE_BLOCK_30]
[CODE_BLOCK_31]
introduced.
[CODE_BLOCK_32]
[CODE_BLOCK_33]
introduced.
Learn more about error handling
Error Handling
Learn how to display expected errors and handle uncaught exceptions.
Was this helpful?
supported.
Send