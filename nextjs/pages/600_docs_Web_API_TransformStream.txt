SOURCE URL: https://developer.mozilla.org/docs/Web/API/TransformStream
SCRAPED: 2025-06-19 18:18:23
================================================================================

Note:
This feature is available in
Web Workers
--- CODE BLOCK 1 ---
TransformStream
--- END CODE BLOCK ---
interface of the
Streams API
represents a concrete implementation of the
pipe chain
transform stream
concept.
It may be passed to the
--- CODE BLOCK 2 ---
ReadableStream.pipeThrough()
--- END CODE BLOCK ---
method in order to transform a stream of data from one format into another.
For example, it might be used to decode (or encode) video frames, decompress data, or convert the stream from XML to JSON.
A transformation algorithm may be provided as an optional argument to the object constructor.
If not supplied, data is not modified when piped through the stream.
--- CODE BLOCK 3 ---
TransformStream
--- END CODE BLOCK ---
is a
transferable object
Constructor
--- CODE BLOCK 4 ---
TransformStream()
--- END CODE BLOCK ---
Creates and returns a transform stream object, optionally specifying a transformation object and queuing strategies for the streams.
Instance properties
--- CODE BLOCK 5 ---
TransformStream.readable
--- END CODE BLOCK ---
Read only
--- CODE BLOCK 7 ---
TransformStream
--- END CODE BLOCK ---
end of a
--- CODE BLOCK 8 ---
TransformStream.writable
--- END CODE BLOCK ---
--- CODE BLOCK 10 ---
TransformStream
--- END CODE BLOCK ---
Read only
--- CODE BLOCK 12 ---
const transformContent = {
start() {}, // required.
async transform(chunk, controller) {
chunk = await chunk;
switch (typeof chunk) {
case "object":
// just say the stream is done I guess
if (chunk === null) {
controller.terminate();
} else if (ArrayBuffer.isView(chunk)) {
controller.enqueue(
new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength),
} else if (
Array.isArray(chunk) &&
chunk.every((value) => typeof value === "number")
controller.enqueue(new Uint8Array(chunk));
} else if (
typeof chunk.valueOf === "function" &&
chunk.valueOf() !== chunk
this.transform(chunk.valueOf(), controller); // hack
} else if ("toJSON" in chunk) {
this.transform(JSON.stringify(chunk), controller);
break;
case "symbol":
controller.error("Cannot send a symbol as a chunk part");
break;
case "undefined":
controller.error("Cannot send undefined as a chunk part");
break;
default:
controller.enqueue(this.textencoder.encode(String(chunk)));
break;
flush() {
/* do any destructor work here */
class AnyToU8Stream extends TransformStream {
constructor() {
super({ ...transformContent, textencoder: new TextEncoder() });
--- END CODE BLOCK ---
end of a
--- CODE BLOCK 13 ---
const transformContent = {
start() {}, // required.
async transform(chunk, controller) {
chunk = await chunk;
switch (typeof chunk) {
case "object":
// just say the stream is done I guess
if (chunk === null) {
controller.terminate();
} else if (ArrayBuffer.isView(chunk)) {
controller.enqueue(
new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength),
} else if (
Array.isArray(chunk) &&
chunk.every((value) => typeof value === "number")
controller.enqueue(new Uint8Array(chunk));
} else if (
typeof chunk.valueOf === "function" &&
chunk.valueOf() !== chunk
this.transform(chunk.valueOf(), controller); // hack
} else if ("toJSON" in chunk) {
this.transform(JSON.stringify(chunk), controller);
break;
case "symbol":
controller.error("Cannot send a symbol as a chunk part");
break;
case "undefined":
controller.error("Cannot send undefined as a chunk part");
break;
default:
controller.enqueue(this.textencoder.encode(String(chunk)));
break;
flush() {
/* do any destructor work here */
class AnyToU8Stream extends TransformStream {
constructor() {
super({ ...transformContent, textencoder: new TextEncoder() });
--- END CODE BLOCK ---
Instance methods
None
Examples
Anything-to-uint8array stream
In the following example, a transform stream passes through all chunks it receives as
--- CODE BLOCK 14 ---
let responses = [
/* conjoined response tree */
let { readable, writable } = new TransformStream();
responses.reduce(
(a, res, i, arr) =>
a.then(() => res.pipeTo(writable, { preventClose: i + 1 !== arr.length })),
Promise.resolve(),
--- END CODE BLOCK ---
values.
Copy to Clipboard
--- CODE BLOCK 15 ---
let responses = [
/* conjoined response tree */
let { readable, writable } = new TransformStream();
responses.reduce(
(a, res, i, arr) =>
a.then(() => res.pipeTo(writable, { preventClose: i + 1 !== arr.length })),
Promise.resolve(),
--- END CODE BLOCK ---
Chaining multiple ReadableStreams together
This is a useful one, where multiple streams can be conjoined. Examples include building a PWA with progressive loading and progressive streaming.
Copy to Clipboard
[CODE_BLOCK_14]
Note that this is not resilient to other influences.
Specifications
Specification
Streams
ts-class
Browser compatibility
See also
WHATWG Stream Visualizer
, for a basic visualization of readable, writable, and transform streams.
Streamsâ€”The Definitive Guide
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
Oct 16, 2024
MDN contributors
View this page on GitHub
Report a problem with this content