SOURCE URL: https://nextjs.org/docs/pages/guides/forms
SCRAPED: 2025-06-19 17:18:43
================================================================================

Menu
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Pages Router
Guides
Forms
You are currently viewing the documentation for Pages Router.
How to create forms with API Routes
Forms enable you to create and update data in web applications. Next.js provides a powerful way to handle data mutations using
API Routes
. This guide will walk you through how to handle form submission on the server.
Server Forms
To handle form submissions on the server, create an API endpoint securely mutate data.
pages/api/submit.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 1 ---
import type { NextApiRequest, NextApiResponse } from 'next'
export default async function handler(
req: NextApiRequest,
res: NextApiResponse
const data = req.body
const id = await createItem(data)
res.status(200).json({ id })
--- END CODE BLOCK ---
Then, call the API Route from the client with an event handler:
pages/index.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 3 ---
import { FormEvent } from 'react'
export default function Page() {
async function onSubmit(event: FormEvent<HTMLFormElement>) {
event.preventDefault()
const formData = new FormData(event.currentTarget)
const response = await fetch('/api/submit', {
method: 'POST',
body: formData,
// Handle response if necessary
const data = await response.json()
// ...
return (
<form onSubmit={onSubmit}>
<input type="text" name="name" />
<button type="submit">Submit</button>
</form>
--- END CODE BLOCK ---
Good to know:
API Routes
do not specify CORS headers
, meaning they are same-origin only by default.
Since API Routes run on the server, we're able to use sensitive values (like API keys) through
Environment Variables
without exposing them to the client. This is critical for the security of your application.
Form validation
We recommend using HTML validation like
--- CODE BLOCK 6 ---
type="email"
--- END CODE BLOCK ---
--- CODE BLOCK 7 ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { z } from 'zod'
const schema = z.object({
// ...
export default async function handler(
req: NextApiRequest,
res: NextApiResponse
const parsed = schema.parse(req.body)
// ...
--- END CODE BLOCK ---
for basic client-side form validation.
For more advanced server-side validation, you can use a schema validation library like
to validate the form fields before mutating the data:
pages/api/submit.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 8 ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { z } from 'zod'
const schema = z.object({
// ...
export default async function handler(
req: NextApiRequest,
res: NextApiResponse
const parsed = schema.parse(req.body)
// ...
--- END CODE BLOCK ---
Error handling
You can use React state to show an error message when a form submission fails:
pages/index.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 10 ---
import React, { useState, FormEvent } from 'react'
export default function Page() {
const [isLoading, setIsLoading] = useState<boolean>(false)
const [error, setError] = useState<string | null>(null)
async function onSubmit(event: FormEvent<HTMLFormElement>) {
event.preventDefault()
setIsLoading(true)
setError(null) // Clear previous errors when a new request starts
try {
const formData = new FormData(event.currentTarget)
const response = await fetch('/api/submit', {
method: 'POST',
body: formData,
if (!response.ok) {
throw new Error('Failed to submit the data. Please try again.')
// Handle response if necessary
const data = await response.json()
// ...
} catch (error) {
// Capture the error message to display to the user
setError(error.message)
console.error(error)
} finally {
setIsLoading(false)
return (
<div>
{error && <div style={{ color: 'red' }}>{error}</div>}
<form onSubmit={onSubmit}>
<input type="text" name="name" />
<button type="submit" disabled={isLoading}>
{isLoading ? 'Loading...' : 'Submit'}
</button>
</form>
</div>
--- END CODE BLOCK ---
Displaying loading state
You can use React state to show a loading state when a form is submitting on the server:
pages/index.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 12 ---
import React, { useState, FormEvent } from 'react'
export default function Page() {
const [isLoading, setIsLoading] = useState<boolean>(false)
async function onSubmit(event: FormEvent<HTMLFormElement>) {
event.preventDefault()
setIsLoading(true) // Set loading to true when the request starts
try {
const formData = new FormData(event.currentTarget)
const response = await fetch('/api/submit', {
method: 'POST',
body: formData,
// Handle response if necessary
const data = await response.json()
// ...
} catch (error) {
// Handle error if necessary
console.error(error)
} finally {
setIsLoading(false) // Set loading to false when the request completes
return (
<form onSubmit={onSubmit}>
<input type="text" name="name" />
<button type="submit" disabled={isLoading}>
{isLoading ? 'Loading...' : 'Submit'}
</button>
</form>
--- END CODE BLOCK ---
Redirecting
If you would like to redirect the user to a different route after a mutation, you can
--- CODE BLOCK 15 ---
import type { NextApiRequest, NextApiResponse } from 'next'
export default async function handler(
req: NextApiRequest,
res: NextApiResponse
const id = await addPost()
res.redirect(307, `/post/${id}`)
--- END CODE BLOCK ---
to any absolute or relative URL:
pages/api/submit.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_14]
Was this helpful?
supported.
Send