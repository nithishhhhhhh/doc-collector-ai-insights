SOURCE URL: https://nextjs.org/docs/app/guides/custom-server
SCRAPED: 2025-06-19 17:41:00
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
App Router
Guides
Custom Server
How to set up a custom server in Next.js
Next.js includes its own server with
--- CODE BLOCK 3 ---
import { createServer } from 'http'
import { parse } from 'url'
import next from 'next'
const port = parseInt(process.env.PORT || '3000', 10)
const dev = process.env.NODE_ENV !== 'production'
const app = next({ dev })
const handle = app.getRequestHandler()
app.prepare().then(() => {
createServer((req, res) => {
const parsedUrl = parse(req.url!, true)
handle(req, res, parsedUrl)
}).listen(port)
console.log(
`> Server listening at http://localhost:${port} as ${
dev ? 'development' : process.env.NODE_ENV
--- END CODE BLOCK ---
by default. If you have an existing backend, you can still use it with Next.js (this is not a custom server). A custom Next.js server allows you to programmatically start a server for custom patterns. The majority of the time, you will not need this approach. However, it's available if you need to eject.
Good to know
Before deciding to use a custom server, keep in mind that it should only be used when the integrated router of Next.js can't meet your app requirements. A custom server will remove important performance optimizations, like
Automatic Static Optimization
When using standalone output mode, it does not trace custom server files. This mode outputs a separate minimal
--- CODE BLOCK 4 ---
import { createServer } from 'http'
import { parse } from 'url'
import next from 'next'
const port = parseInt(process.env.PORT || '3000', 10)
const dev = process.env.NODE_ENV !== 'production'
const app = next({ dev })
const handle = app.getRequestHandler()
app.prepare().then(() => {
createServer((req, res) => {
const parsedUrl = parse(req.url!, true)
handle(req, res, parsedUrl)
}).listen(port)
console.log(
`> Server listening at http://localhost:${port} as ${
dev ? 'development' : process.env.NODE_ENV
--- END CODE BLOCK ---
file, instead. These cannot be used together.
Take a look at the
following example
of a custom server:
server.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 7 ---
package.json
--- END CODE BLOCK ---
--- CODE BLOCK 9 ---
"scripts": {
"dev": "node server.js",
"build": "next build",
"start": "NODE_ENV=production node server.js"
--- END CODE BLOCK ---
does not run through the Next.js Compiler or bundling process. Make sure the syntax and source code this file requires are compatible with the current Node.js version you are using.
View an example
To run the custom server, you'll need to update the
--- CODE BLOCK 11 ---
import next from 'next'
const app = next({})
--- END CODE BLOCK ---
--- CODE BLOCK 12 ---
import next from 'next'
const app = next({})
--- END CODE BLOCK ---
like so:
package.json
--- CODE BLOCK 16 ---
next.config.js
--- END CODE BLOCK ---
Alternatively, you can set up
[CODE_BLOCK_10]
example
). The custom server uses the following import to connect the server with the Next.js application:
[CODE_BLOCK_11]
The above
[CODE_BLOCK_13]
import is a function that receives an object with the following options:
Option
Type
Description
[CODE_BLOCK_14]
[CODE_BLOCK_15]
The same object you would use in
[CODE_BLOCK_16]
. Defaults to
[CODE_BLOCK_17]
[CODE_BLOCK_18]
[CODE_BLOCK_19]
Optional
) Whether or not to launch Next.js in dev mode. Defaults to
[CODE_BLOCK_20]
[CODE_BLOCK_21]
[CODE_BLOCK_22]
Optional
) Location of the Next.js project. Defaults to
[CODE_BLOCK_23]
[CODE_BLOCK_24]
[CODE_BLOCK_25]
Optional
) Hide error messages containing server information. Defaults to
[CODE_BLOCK_26]
[CODE_BLOCK_27]
[CODE_BLOCK_28]
Optional
) The hostname the server is running behind
[CODE_BLOCK_29]
[CODE_BLOCK_30]
Optional
) The port the server is running behind
[CODE_BLOCK_31]
[CODE_BLOCK_32]
Optional
) The HTTP Server that Next.js is running behind
[CODE_BLOCK_33]
[CODE_BLOCK_34]
Optional
) Enable Turbopack
The returned
[CODE_BLOCK_35]
can then be used to let Next.js handle requests as required.
Was this helpful?
supported.
Send