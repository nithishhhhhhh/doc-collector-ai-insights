SOURCE URL: https://nextjs.org/docs/app/getting-started/project-structure#component-hierarchy
SCRAPED: 2025-06-19 18:30:36
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
App Router
Getting Started
Project Structure
Project structure and organization
This page provides an overview of
the folder and file conventions in Next.js, and recommendations for organizing your project.
Folder and file conventions
Top-level folders
Top-level folders are used to organize your application's code and static assets.
--- CODE BLOCK 5 ---
next.config.js
--- END CODE BLOCK ---
App Router
--- CODE BLOCK 6 ---
package.json
--- END CODE BLOCK ---
Pages Router
--- CODE BLOCK 7 ---
instrumentation.ts
--- END CODE BLOCK ---
Static assets to be served
--- CODE BLOCK 8 ---
middleware.ts
--- END CODE BLOCK ---
Optional application source folder
Top-level files
Top-level files are used to configure your application, manage dependencies, run middleware, integrate monitoring tools, and define environment variables.
Next.js
--- CODE BLOCK 11 ---
.env.production
--- END CODE BLOCK ---
Configuration file for Next.js
--- CODE BLOCK 12 ---
.env.development
--- END CODE BLOCK ---
Project dependencies and scripts
--- CODE BLOCK 13 ---
.eslintrc.json
--- END CODE BLOCK ---
OpenTelemetry and Instrumentation file
--- CODE BLOCK 15 ---
next-env.d.ts
--- END CODE BLOCK ---
Next.js request middleware
--- CODE BLOCK 16 ---
tsconfig.json
--- END CODE BLOCK ---
Environment variables
--- CODE BLOCK 17 ---
jsconfig.json
--- END CODE BLOCK ---
Local environment variables
--- CODE BLOCK 38 ---
global-error
--- END CODE BLOCK ---
Production environment variables
--- CODE BLOCK 54 ---
folder/folder
--- END CODE BLOCK ---
Development environment variables
--- CODE BLOCK 56 ---
[...folder]
--- END CODE BLOCK ---
Configuration file for ESLint
--- CODE BLOCK 57 ---
[[...folder]]
--- END CODE BLOCK ---
Git files and folders to ignore
--- CODE BLOCK 63 ---
(..)(..)folder
--- END CODE BLOCK ---
TypeScript declaration file for Next.js
--- CODE BLOCK 64 ---
(...)folder
--- END CODE BLOCK ---
Configuration file for TypeScript
--- CODE BLOCK 85 ---
opengraph-image
--- END CODE BLOCK ---
Configuration file for JavaScript
Routing Files
--- CODE BLOCK 90 ---
opengraph-image
--- END CODE BLOCK ---
--- CODE BLOCK 94 ---
twitter-image
--- END CODE BLOCK ---
--- CODE BLOCK 99 ---
twitter-image
--- END CODE BLOCK ---
--- CODE BLOCK 114 ---
template.js
--- END CODE BLOCK ---
Layout
--- CODE BLOCK 117 ---
not-found.js
--- END CODE BLOCK ---
--- CODE BLOCK 128 ---
_folderName
--- END CODE BLOCK ---
--- CODE BLOCK 131 ---
%5FfolderName
--- END CODE BLOCK ---
--- CODE BLOCK 132 ---
(folderName)
--- END CODE BLOCK ---
Page
--- CODE BLOCK 147 ---
(marketing)
--- END CODE BLOCK ---
--- CODE BLOCK 149 ---
(marketing)
--- END CODE BLOCK ---
--- CODE BLOCK 157 ---
/(overview)
--- END CODE BLOCK ---
--- CODE BLOCK 158 ---
loading.tsx
--- END CODE BLOCK ---
Loading UI
--- CODE BLOCK 159 ---
loading.tsx
--- END CODE BLOCK ---
--- CODE BLOCK 164 ---
(marketing)
--- END CODE BLOCK ---
[CODE_BLOCK_32]
[CODE_BLOCK_33]
Not found UI
[CODE_BLOCK_34]
[CODE_BLOCK_35]
[CODE_BLOCK_36]
[CODE_BLOCK_37]
Error UI
[CODE_BLOCK_38]
[CODE_BLOCK_39]
[CODE_BLOCK_40]
[CODE_BLOCK_41]
Global error UI
[CODE_BLOCK_42]
[CODE_BLOCK_43]
[CODE_BLOCK_44]
API endpoint
[CODE_BLOCK_45]
[CODE_BLOCK_46]
[CODE_BLOCK_47]
[CODE_BLOCK_48]
Re-rendered layout
[CODE_BLOCK_49]
[CODE_BLOCK_50]
[CODE_BLOCK_51]
[CODE_BLOCK_52]
Parallel route fallback page
Nested routes
[CODE_BLOCK_53]
Route segment
[CODE_BLOCK_54]
Nested route segment
Dynamic routes
[CODE_BLOCK_55]
Dynamic route segment
[CODE_BLOCK_56]
Catch-all route segment
[CODE_BLOCK_57]
Optional catch-all route segment
Route Groups and private folders
[CODE_BLOCK_58]
Group routes without affecting routing
[CODE_BLOCK_59]
Opt folder and all child segments out of routing
Parallel and Intercepted Routes
[CODE_BLOCK_60]
Named slot
[CODE_BLOCK_61]
Intercept same level
[CODE_BLOCK_62]
Intercept one level above
[CODE_BLOCK_63]
Intercept two levels above
[CODE_BLOCK_64]
Intercept from root
Metadata file conventions
App icons
[CODE_BLOCK_65]
[CODE_BLOCK_66]
Favicon file
[CODE_BLOCK_67]
[CODE_BLOCK_68]
[CODE_BLOCK_69]
[CODE_BLOCK_70]
[CODE_BLOCK_71]
[CODE_BLOCK_72]
App Icon file
[CODE_BLOCK_73]
[CODE_BLOCK_74]
[CODE_BLOCK_75]
[CODE_BLOCK_76]
Generated App Icon
[CODE_BLOCK_77]
[CODE_BLOCK_78]
[CODE_BLOCK_79]
[CODE_BLOCK_80]
Apple App Icon file
[CODE_BLOCK_81]
[CODE_BLOCK_82]
[CODE_BLOCK_83]
[CODE_BLOCK_84]
Generated Apple App Icon
Open Graph and Twitter images
[CODE_BLOCK_85]
[CODE_BLOCK_86]
[CODE_BLOCK_87]
[CODE_BLOCK_88]
[CODE_BLOCK_89]
Open Graph image file
[CODE_BLOCK_90]
[CODE_BLOCK_91]
[CODE_BLOCK_92]
[CODE_BLOCK_93]
Generated Open Graph image
[CODE_BLOCK_94]
[CODE_BLOCK_95]
[CODE_BLOCK_96]
[CODE_BLOCK_97]
[CODE_BLOCK_98]
Twitter image file
[CODE_BLOCK_99]
[CODE_BLOCK_100]
[CODE_BLOCK_101]
[CODE_BLOCK_102]
Generated Twitter image
[CODE_BLOCK_103]
[CODE_BLOCK_104]
Sitemap file
[CODE_BLOCK_105]
[CODE_BLOCK_106]
[CODE_BLOCK_107]
Generated Sitemap
[CODE_BLOCK_108]
[CODE_BLOCK_109]
Robots file
[CODE_BLOCK_110]
[CODE_BLOCK_111]
[CODE_BLOCK_112]
Generated Robots file
Organizing your project
Next.js is
unopinionated
about how you organize and colocate your project files. But it does provide several features to help you organize your project.
Component hierarchy
The components defined in special files are rendered in a specific hierarchy:
[CODE_BLOCK_113]
[CODE_BLOCK_114]
[CODE_BLOCK_115]
(React error boundary)
[CODE_BLOCK_116]
(React suspense boundary)
[CODE_BLOCK_117]
(React error boundary)
[CODE_BLOCK_118]
or nested
[CODE_BLOCK_119]
The components are rendered recursively in nested routes, meaning the components of a route segment will be nested
inside
the components of its parent segment.
Colocation
In the
[CODE_BLOCK_120]
directory, nested folders define route structure. Each folder represents a route segment that is mapped to a corresponding segment in a URL path.
However, even though route structure is defined through folders, a route is
not publicly accessible
until a
[CODE_BLOCK_121]
[CODE_BLOCK_122]
file is added to a route segment.
And, even when a route is made publicly accessible, only the
content returned
[CODE_BLOCK_123]
[CODE_BLOCK_124]
is sent to the client.
This means that
project files
can be
safely colocated
inside route segments in the
[CODE_BLOCK_125]
directory without accidentally being routable.
Good to know
: While you
colocate your project files in
[CODE_BLOCK_126]
you don't
have
to. If you prefer, you can
keep them outside the
[CODE_BLOCK_127]
directory
Private folders
Private folders can be created by prefixing a folder with an underscore:
[CODE_BLOCK_128]
This indicates the folder is a private implementation detail and should not be considered by the routing system, thereby
opting the folder and all its subfolders
out of routing.
Since files in the
[CODE_BLOCK_129]
directory can be
safely colocated by default
, private folders are not required for colocation. However, they can be useful for:
Separating UI logic from routing logic.
Consistently organizing internal files across a project and the Next.js ecosystem.
Sorting and grouping files in code editors.
Avoiding potential naming conflicts with future Next.js file conventions.
Good to know
While not a framework convention, you might also consider marking files outside private folders as "private" using the same underscore pattern.
You can create URL segments that start with an underscore by prefixing the folder name with
[CODE_BLOCK_130]
(the URL-encoded form of an underscore):
[CODE_BLOCK_131]
If you don't use private folders, it would be helpful to know Next.js
special file conventions
to prevent unexpected naming conflicts.
Route groups
Route groups can be created by wrapping a folder in parenthesis:
[CODE_BLOCK_132]
This indicates the folder is for organizational purposes and should
not be included
in the route's URL path.
Route groups are useful for:
Organizing routes by site section, intent, or team. e.g. marketing pages, admin pages, etc.
Enabling nested layouts in the same route segment level:
Creating multiple nested layouts in the same segment, including multiple root layouts
Adding a layout to a subset of routes in a common segment
[CODE_BLOCK_133]
folder
Next.js supports storing application code (including
[CODE_BLOCK_134]
) inside an optional
[CODE_BLOCK_135]
folder
. This separates application code from project configuration files which mostly live in the root of a project.
Examples
The following section lists a very high-level overview of common strategies. The simplest takeaway is to choose a strategy that works for you and your team and be consistent across the project.
Good to know
: In our examples below, we're using
[CODE_BLOCK_136]
[CODE_BLOCK_137]
folders as generalized placeholders, their naming has no special framework significance and your projects might use other folders like
[CODE_BLOCK_138]
[CODE_BLOCK_139]
[CODE_BLOCK_140]
[CODE_BLOCK_141]
, etc.
Store project files outside of
[CODE_BLOCK_142]
This strategy stores all application code in shared folders in the
root of your project
and keeps the
[CODE_BLOCK_143]
directory purely for routing purposes.
Store project files in top-level folders inside of
[CODE_BLOCK_144]
This strategy stores all application code in shared folders in the
root of the
[CODE_BLOCK_145]
directory
Split project files by feature or route
This strategy stores globally shared application code in the root
[CODE_BLOCK_146]
directory and
splits
more specific application code into the route segments that use them.
Organize routes without affecting the URL path
To organize routes without affecting the URL, create a group to keep related routes together. The folders in parenthesis will be omitted from the URL (e.g.
[CODE_BLOCK_147]
[CODE_BLOCK_148]
Even though routes inside
[CODE_BLOCK_149]
[CODE_BLOCK_150]
share the same URL hierarchy, you can create a different layout for each group by adding a
[CODE_BLOCK_151]
file inside their folders.
Opting specific segments into a layout
To opt specific routes into a layout, create a new route group (e.g.
[CODE_BLOCK_152]
) and move the routes that share the same layout into the group (e.g.
[CODE_BLOCK_153]
[CODE_BLOCK_154]
). The routes outside of the group will not share the layout (e.g.
[CODE_BLOCK_155]
Opting for loading skeletons on a specific route
To apply a
loading skeleton
via a
[CODE_BLOCK_156]
file to a specific route, create a new route group (e.g.,
[CODE_BLOCK_157]
) and then move your
[CODE_BLOCK_158]
inside that route group.
Now, the
[CODE_BLOCK_159]
file will only apply to your dashboard → overview page instead of all your dashboard pages without affecting the URL path structure.
Creating multiple root layouts
To create multiple
root layouts
, remove the top-level
[CODE_BLOCK_160]
file, and add a
[CODE_BLOCK_161]
file inside each route group. This is useful for partitioning an application into sections that have a completely different UI or experience. The
[CODE_BLOCK_162]
[CODE_BLOCK_163]
tags need to be added to each root layout.
In the example above, both
[CODE_BLOCK_164]
[CODE_BLOCK_165]
have their own root layout.
Was this helpful?
supported.
Send