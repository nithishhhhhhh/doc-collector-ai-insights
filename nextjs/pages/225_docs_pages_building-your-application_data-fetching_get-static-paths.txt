SOURCE URL: https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-paths
SCRAPED: 2025-06-19 17:35:44
================================================================================

Menu
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Building Your Application
Data Fetching
getStaticPaths
You are currently viewing the documentation for Pages Router.
getStaticPaths
If a page has
Dynamic Routes
and uses
--- CODE BLOCK 1 ---
getStaticProps
--- END CODE BLOCK ---
, it needs to define a list of paths to be statically generated.
When you export a function called
--- CODE BLOCK 2 ---
getStaticPaths
--- END CODE BLOCK ---
(Static Site Generation) from a page that uses dynamic routes, Next.js will statically pre-render all the paths specified by
--- CODE BLOCK 3 ---
getStaticPaths
--- END CODE BLOCK ---
pages/repo/[name].tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 4 ---
import type {
InferGetStaticPropsType,
GetStaticProps,
GetStaticPaths,
} from 'next'
type Repo = {
name: string
stargazers_count: number
export const getStaticPaths = (async () => {
return {
paths: [
params: {
name: 'next.js',
}, // See the "paths" section below
fallback: true, // false or "blocking"
}) satisfies GetStaticPaths
export const getStaticProps = (async (context) => {
const res = await fetch('https://api.github.com/repos/vercel/next.js')
const repo = await res.json()
return { props: { repo } }
}) satisfies GetStaticProps<{
repo: Repo
export default function Page({
repo,
}: InferGetStaticPropsType<typeof getStaticProps>) {
return repo.stargazers_count
--- END CODE BLOCK ---
--- CODE BLOCK 6 ---
getStaticPaths
--- END CODE BLOCK ---
API reference
covers all parameters and props that can be used with
--- CODE BLOCK 7 ---
getStaticPaths
--- END CODE BLOCK ---
When should I use getStaticPaths?
You should use
--- CODE BLOCK 8 ---
getStaticPaths
--- END CODE BLOCK ---
if you’re statically pre-rendering pages that use dynamic routes and:
The data comes from a headless CMS
The data comes from a database
The data comes from the filesystem
The data can be publicly cached (not user-specific)
The page must be pre-rendered (for SEO) and be very fast —
--- CODE BLOCK 9 ---
getStaticProps
--- END CODE BLOCK ---
generates
--- CODE BLOCK 12 ---
getStaticPaths
--- END CODE BLOCK ---
--- CODE BLOCK 13 ---
getStaticPaths
--- END CODE BLOCK ---
files, both of which can be cached by a CDN for performance
When does getStaticPaths run
--- CODE BLOCK 14 ---
getStaticProps
--- END CODE BLOCK ---
will only run during build in production, it will not be called during runtime. You can validate code written inside
--- CODE BLOCK 17 ---
getStaticProps
--- END CODE BLOCK ---
is removed from the client-side bundle
with this tool
How does getStaticProps run with regards to getStaticPaths
--- CODE BLOCK 18 ---
fallback: true
--- END CODE BLOCK ---
runs during
--- CODE BLOCK 19 ---
getStaticProps
--- END CODE BLOCK ---
for any
--- CODE BLOCK 20 ---
fallback: blocking
--- END CODE BLOCK ---
returned during build
--- CODE BLOCK 21 ---
getStaticPaths
--- END CODE BLOCK ---
runs in the background when using
--- CODE BLOCK 22 ---
getStaticProps
--- END CODE BLOCK ---
--- CODE BLOCK 23 ---
getStaticPaths
--- END CODE BLOCK ---
is called before initial render when using
--- CODE BLOCK 24 ---
getServerSideProps
--- END CODE BLOCK ---
Where can I use getStaticPaths
--- CODE BLOCK 25 ---
getStaticPaths
--- END CODE BLOCK ---
must
be used with
--- CODE BLOCK 26 ---
getStaticProps
--- END CODE BLOCK ---
cannot
--- CODE BLOCK 27 ---
getStaticPaths
--- END CODE BLOCK ---
with
--- CODE BLOCK 29 ---
getStaticPaths
--- END CODE BLOCK ---
You can export
--- CODE BLOCK 31 ---
getStaticPaths
--- END CODE BLOCK ---
from a
Dynamic Route
that also uses
--- CODE BLOCK 32 ---
getStaticPaths
--- END CODE BLOCK ---
cannot
export
--- CODE BLOCK 35 ---
export async function getStaticPaths() {
// When this is true (in preview environments) don't
// prerender any static pages
// (faster builds, but slower initial page load)
if (process.env.SKIP_BUILD_STATIC_GENERATION) {
return {
paths: [],
fallback: 'blocking',
// Call an external API endpoint to get posts
const res = await fetch('https://.../posts')
const posts = await res.json()
// Get the paths we want to prerender based on posts
// In production environments, prerender all pages
// (slower builds, but faster initial page load)
const paths = posts.map((post) => ({
params: { id: post.id },
// { fallback: false } means other routes should 404
return { paths, fallback: false }
--- END CODE BLOCK ---
from non-page file (e.g. your
--- CODE BLOCK 36 ---
export async function getStaticPaths() {
// When this is true (in preview environments) don't
// prerender any static pages
// (faster builds, but slower initial page load)
if (process.env.SKIP_BUILD_STATIC_GENERATION) {
return {
paths: [],
fallback: 'blocking',
// Call an external API endpoint to get posts
const res = await fetch('https://.../posts')
const posts = await res.json()
// Get the paths we want to prerender based on posts
// In production environments, prerender all pages
// (slower builds, but faster initial page load)
const paths = posts.map((post) => ({
params: { id: post.id },
// { fallback: false } means other routes should 404
return { paths, fallback: false }
--- END CODE BLOCK ---
folder)
You must export
[CODE_BLOCK_29]
as a standalone function, and not a property of the page component
Runs on every request in development
In development (
[CODE_BLOCK_30]
[CODE_BLOCK_31]
will be called on every request.
Generating paths on-demand
[CODE_BLOCK_32]
allows you to control which pages are generated during the build instead of on-demand with
[CODE_BLOCK_33]
. Generating more pages during a build will cause slower builds.
You can defer generating all pages on-demand by returning an empty array for
[CODE_BLOCK_34]
. This can be especially helpful when deploying your Next.js application to multiple environments. For example, you can have faster builds by generating all pages on-demand for previews (but not production builds). This is helpful for sites with hundreds/thousands of static pages.
pages/posts/[id].js
[CODE_BLOCK_35]
Was this helpful?
supported.
Send