SOURCE URL: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/DataView
SCRAPED: 2025-06-19 18:21:51
================================================================================

--- CODE BLOCK 2 ---
ArrayBuffer
--- END CODE BLOCK ---
view provides a low-level interface for reading and writing multiple number types in a binary
--- CODE BLOCK 5 ---
WebAssembly.Memory
--- END CODE BLOCK ---
, without having to care about the platform's
endianness
Description
Endianness
Multi-byte number formats are represented in memory differently depending on machine architecture — see
Endianness
for an explanation.
--- CODE BLOCK 6 ---
const littleEndian = (() => {
const buffer = new ArrayBuffer(2);
new DataView(buffer).setInt16(0, 256, true /* littleEndian */);
// Int16Array uses the platform's endianness.
return new Int16Array(buffer)[0] === 256;
})();
console.log(littleEndian); // true or false
--- END CODE BLOCK ---
accessors provide explicit control of how data is accessed, regardless of the executing computer's endianness. For example,
WebAssembly
memory is always little-endian, so you should use
--- CODE BLOCK 7 ---
const littleEndian = (() => {
const buffer = new ArrayBuffer(2);
new DataView(buffer).setInt16(0, 256, true /* littleEndian */);
// Int16Array uses the platform's endianness.
return new Int16Array(buffer)[0] === 256;
})();
console.log(littleEndian); // true or false
--- END CODE BLOCK ---
instead of typed arrays to read and write multi-byte values. See
--- CODE BLOCK 11 ---
DataView.prototype
--- END CODE BLOCK ---
for an example.
Copy to Clipboard
--- CODE BLOCK 13 ---
DataView.prototype.buffer
--- END CODE BLOCK ---
Note:
--- CODE BLOCK 15 ---
DataView.prototype.byteLength
--- END CODE BLOCK ---
defaults to big-endian read and write, but most platforms use little-endian.
Constructor
--- CODE BLOCK 16 ---
DataView.prototype.byteOffset
--- END CODE BLOCK ---
Creates a new
--- CODE BLOCK 17 ---
ArrayBuffer
--- END CODE BLOCK ---
object.
Instance properties
These properties are defined on
--- CODE BLOCK 18 ---
DataView.prototype.constructor
--- END CODE BLOCK ---
and shared by all
--- CODE BLOCK 21 ---
DataView.prototype[Symbol.toStringTag]
--- END CODE BLOCK ---
instances.
--- CODE BLOCK 22 ---
[Symbol.toStringTag]
--- END CODE BLOCK ---
--- CODE BLOCK 24 ---
Object.prototype.toString()
--- END CODE BLOCK ---
referenced by this view. Fixed at construction time and thus
read only.
--- CODE BLOCK 25 ---
DataView.prototype.getBigInt64()
--- END CODE BLOCK ---
The length (in bytes) of this view. Fixed at construction time and thus
read only.
--- CODE BLOCK 27 ---
DataView.prototype.getBigUint64()
--- END CODE BLOCK ---
The offset (in bytes) of this view from the start of its
--- CODE BLOCK 29 ---
DataView.prototype.getFloat16()
--- END CODE BLOCK ---
. Fixed at construction time and thus
read only.
--- CODE BLOCK 31 ---
DataView.prototype.getFloat32()
--- END CODE BLOCK ---
The constructor function that created the instance object. For
--- CODE BLOCK 33 ---
DataView.prototype.getFloat64()
--- END CODE BLOCK ---
instances, the initial value is the
--- CODE BLOCK 35 ---
DataView.prototype.getInt16()
--- END CODE BLOCK ---
constructor.
--- CODE BLOCK 37 ---
DataView.prototype.getInt32()
--- END CODE BLOCK ---
The initial value of the
--- CODE BLOCK 39 ---
DataView.prototype.getInt8()
--- END CODE BLOCK ---
property is the string
--- CODE BLOCK 41 ---
DataView.prototype.getUint16()
--- END CODE BLOCK ---
. This property is used in
--- CODE BLOCK 43 ---
DataView.prototype.getUint32()
--- END CODE BLOCK ---
Instance methods
--- CODE BLOCK 45 ---
DataView.prototype.getUint8()
--- END CODE BLOCK ---
Reads 8 bytes starting at the specified byte offset of this
--- CODE BLOCK 47 ---
DataView.prototype.setBigInt64()
--- END CODE BLOCK ---
and interprets them as a 64-bit signed integer.
--- CODE BLOCK 49 ---
DataView.prototype.setBigUint64()
--- END CODE BLOCK ---
Reads 8 bytes starting at the specified byte offset of this
--- CODE BLOCK 51 ---
DataView.prototype.setFloat16()
--- END CODE BLOCK ---
and interprets them as a 64-bit unsigned integer.
--- CODE BLOCK 53 ---
DataView.prototype.setFloat32()
--- END CODE BLOCK ---
Reads 2 bytes starting at the specified byte offset of this
--- CODE BLOCK 55 ---
DataView.prototype.setFloat64()
--- END CODE BLOCK ---
and interprets them as a 16-bit floating point number.
--- CODE BLOCK 57 ---
DataView.prototype.setInt16()
--- END CODE BLOCK ---
Reads 4 bytes starting at the specified byte offset of this
--- CODE BLOCK 59 ---
DataView.prototype.setInt32()
--- END CODE BLOCK ---
and interprets them as a 32-bit floating point number.
--- CODE BLOCK 61 ---
DataView.prototype.setInt8()
--- END CODE BLOCK ---
Reads 8 bytes starting at the specified byte offset of this
--- CODE BLOCK 63 ---
DataView.prototype.setUint16()
--- END CODE BLOCK ---
and interprets them as a 64-bit floating point number.
--- CODE BLOCK 65 ---
DataView.prototype.setUint32()
--- END CODE BLOCK ---
Reads 2 bytes starting at the specified byte offset of this
--- CODE BLOCK 67 ---
DataView.prototype.setUint8()
--- END CODE BLOCK ---
and interprets them as a 16-bit signed integer.
--- CODE BLOCK 69 ---
const buffer = new ArrayBuffer(16);
const view = new DataView(buffer, 0);
view.setInt16(1, 42);
view.getInt16(1); // 42
--- END CODE BLOCK ---
Reads 4 bytes starting at the specified byte offset of this
--- CODE BLOCK 70 ---
const buffer = new ArrayBuffer(16);
const view = new DataView(buffer, 0);
view.setInt16(1, 42);
view.getInt16(1); // 42
--- END CODE BLOCK ---
and interprets them as a 32-bit signed integer.
--- CODE BLOCK 73 ---
ArrayBuffer
--- END CODE BLOCK ---
Reads 1 byte at the specified byte offset of this
--- CODE BLOCK 74 ---
SharedArrayBuffer
--- END CODE BLOCK ---
and interprets it as an 8-bit signed integer.
[CODE_BLOCK_41]
Reads 2 bytes starting at the specified byte offset of this
[CODE_BLOCK_42]
and interprets them as a 16-bit unsigned integer.
[CODE_BLOCK_43]
Reads 4 bytes starting at the specified byte offset of this
[CODE_BLOCK_44]
and interprets them as a 32-bit unsigned integer.
[CODE_BLOCK_45]
Reads 1 byte at the specified byte offset of this
[CODE_BLOCK_46]
and interprets it as an 8-bit unsigned integer.
[CODE_BLOCK_47]
Takes a BigInt and stores it as a 64-bit signed integer in the 8 bytes starting at the specified byte offset of this
[CODE_BLOCK_48]
[CODE_BLOCK_49]
Takes a BigInt and stores it as a 64-bit unsigned integer in the 8 bytes starting at the specified byte offset of this
[CODE_BLOCK_50]
[CODE_BLOCK_51]
Takes a number and stores it as a 16-bit float in the 2 bytes starting at the specified byte offset of this
[CODE_BLOCK_52]
[CODE_BLOCK_53]
Takes a number and stores it as a 32-bit float in the 4 bytes starting at the specified byte offset of this
[CODE_BLOCK_54]
[CODE_BLOCK_55]
Takes a number and stores it as a 64-bit float in the 8 bytes starting at the specified byte offset of this
[CODE_BLOCK_56]
[CODE_BLOCK_57]
Takes a number and stores it as a 16-bit signed integer in the 2 bytes at the specified byte offset of this
[CODE_BLOCK_58]
[CODE_BLOCK_59]
Takes a number and stores it as a 32-bit signed integer in the 4 bytes at the specified byte offset of this
[CODE_BLOCK_60]
[CODE_BLOCK_61]
Takes a number and stores it as an 8-bit signed integer in the byte at the specified byte offset of this
[CODE_BLOCK_62]
[CODE_BLOCK_63]
Takes a number and stores it as a 16-bit unsigned integer in the 2 bytes at the specified byte offset of this
[CODE_BLOCK_64]
[CODE_BLOCK_65]
Takes a number and stores it as a 32-bit unsigned integer in the 4 bytes at the specified byte offset of this
[CODE_BLOCK_66]
[CODE_BLOCK_67]
Takes a number and stores it as an 8-bit unsigned integer in the byte at the specified byte offset of this
[CODE_BLOCK_68]
Examples
Using DataView
Copy to Clipboard
[CODE_BLOCK_69]
Specifications
Specification
ECMAScript® 2026 Language Specification
sec-dataview-objects
Browser compatibility
See also
Polyfill of
[CODE_BLOCK_71]
[CODE_BLOCK_72]
[CODE_BLOCK_73]
[CODE_BLOCK_74]
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
Jan 31, 2025
MDN contributors
View this page on GitHub
Report a problem with this content