SOURCE URL: https://nextjs.org/docs/pages/api-reference/file-conventions/middleware
SCRAPED: 2025-06-19 17:41:29
================================================================================

Menu
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
API Reference
File-system conventions
Middleware
You are currently viewing the documentation for Pages Router.
Middleware
--- CODE BLOCK 1 ---
middleware.js|ts
--- END CODE BLOCK ---
file is used to write
Middleware
and run code on the server before a request is completed. Then, based on the incoming request, you can modify the response by rewriting, redirecting, modifying the request or response headers, or responding directly.
Middleware executes before routes are rendered. It's particularly useful for implementing custom server-side logic like authentication, logging, or handling redirects.
Use the file
--- CODE BLOCK 2 ---
middleware.ts
--- END CODE BLOCK ---
(or .js) in the root of your project to define Middleware. For example, at the same level as
--- CODE BLOCK 6 ---
import { NextResponse, NextRequest } from 'next/server'
// This function can be marked `async` if using `await` inside
export function middleware(request: NextRequest) {
return NextResponse.redirect(new URL('/home', request.url))
export const config = {
matcher: '/about/:path*',
--- END CODE BLOCK ---
--- CODE BLOCK 7 ---
import { NextResponse, NextRequest } from 'next/server'
// This function can be marked `async` if using `await` inside
export function middleware(request: NextRequest) {
return NextResponse.redirect(new URL('/home', request.url))
export const config = {
matcher: '/about/:path*',
--- END CODE BLOCK ---
, or inside
--- CODE BLOCK 9 ---
// Example of default export
export default function middleware(request) {
// Middleware logic
--- END CODE BLOCK ---
if applicable.
middleware.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 10 ---
// Example of default export
export default function middleware(request) {
// Middleware logic
--- END CODE BLOCK ---
Exports
Middleware function
The file must export a single function, either as a default export or named
--- CODE BLOCK 16 ---
export const config = {
matcher: ['/about/:path*', '/dashboard/:path*'],
--- END CODE BLOCK ---
. Note that multiple middleware from the same file are not supported.
middleware.js
--- CODE BLOCK 17 ---
export const config = {
matcher: ['/about/:path*', '/dashboard/:path*'],
--- END CODE BLOCK ---
Config object (optional)
Optionally, a config object can be exported alongside the Middleware function. This object includes the
matcher
to specify paths where the Middleware applies.
Matcher
--- CODE BLOCK 27 ---
export const config = {
matcher: [
source: '/api/*',
regexp: '^/api/(.*)',
locale: false,
has: [
{ type: 'header', key: 'Authorization', value: 'Bearer Token' },
{ type: 'query', key: 'userId', value: '123' },
missing: [{ type: 'cookie', key: 'session', value: 'active' }],
--- END CODE BLOCK ---
option allows you to target specific paths for the Middleware to run on. You can specify these paths in several ways:
For a single path: Directly use a string to define the path, like
--- CODE BLOCK 28 ---
export const config = {
matcher: [
source: '/api/*',
regexp: '^/api/(.*)',
locale: false,
has: [
{ type: 'header', key: 'Authorization', value: 'Bearer Token' },
{ type: 'query', key: 'userId', value: '123' },
missing: [{ type: 'cookie', key: 'session', value: 'active' }],
--- END CODE BLOCK ---
For multiple paths: Use an array to list multiple paths, such as
--- CODE BLOCK 30 ---
/about/:path
--- END CODE BLOCK ---
, which applies the Middleware to both
--- CODE BLOCK 35 ---
/about/:path*
--- END CODE BLOCK ---
--- CODE BLOCK 36 ---
/about/a/b/c
--- END CODE BLOCK ---
middleware.js
--- CODE BLOCK 40 ---
/about/(.*)
--- END CODE BLOCK ---
Additionally, the
--- CODE BLOCK 44 ---
/public/index
--- END CODE BLOCK ---
option supports complex path specifications through regular expressions, such as
--- CODE BLOCK 45 ---
/public/:path
--- END CODE BLOCK ---
, enabling precise control over which paths to include or exclude.
--- CODE BLOCK 48 ---
NextRequest
--- END CODE BLOCK ---
option accepts an array of objects with the following keys:
--- CODE BLOCK 49 ---
import type { NextRequest } from 'next/server'
export function middleware(request: NextRequest) {
// Middleware logic goes here
--- END CODE BLOCK ---
: The path or pattern used to match the request paths. It can be a string for direct path matching or a pattern for more complex matching.
--- CODE BLOCK 50 ---
import type { NextRequest } from 'next/server'
export function middleware(request: NextRequest) {
// Middleware logic goes here
--- END CODE BLOCK ---
(optional): A regular expression string that fine-tunes the matching based on the source. It provides additional control over which paths are included or excluded.
--- CODE BLOCK 51 ---
NextRequest
--- END CODE BLOCK ---
(optional): A boolean that, when set to
--- CODE BLOCK 52 ---
NextResponse
--- END CODE BLOCK ---
, ignores locale-based routing in path matching.
--- CODE BLOCK 53 ---
NextResponse
--- END CODE BLOCK ---
(optional): Specifies conditions based on the presence of specific request elements such as headers, query parameters, or cookies.
--- CODE BLOCK 56 ---
getServerSideProps
--- END CODE BLOCK ---
(optional): Focuses on conditions where certain request elements are absent, like missing headers or cookies.
middleware.js
--- CODE BLOCK 59 ---
NextResponse
--- END CODE BLOCK ---
Configured matchers:
MUST start with
--- CODE BLOCK 63 ---
next.config.js
--- END CODE BLOCK ---
Can include named parameters:
--- CODE BLOCK 66 ---
beforeFiles
--- END CODE BLOCK ---
matches
--- CODE BLOCK 68 ---
next.config.js
--- END CODE BLOCK ---
--- CODE BLOCK 70 ---
_next/static/
--- END CODE BLOCK ---
but not
--- CODE BLOCK 75 ---
next.config.js
--- END CODE BLOCK ---
Can have modifiers on named parameters (starting with
--- CODE BLOCK 76 ---
/blog/[slug]
--- END CODE BLOCK ---
--- CODE BLOCK 79 ---
next.config.js
--- END CODE BLOCK ---
matches
--- CODE BLOCK 80 ---
next.config
--- END CODE BLOCK ---
because
--- CODE BLOCK 81 ---
import type { NextConfig } from 'next'
const nextConfig: NextConfig = {
experimental: {
nodeMiddleware: true,
export default nextConfig
--- END CODE BLOCK ---
zero or more
--- CODE BLOCK 82 ---
import type { NextConfig } from 'next'
const nextConfig: NextConfig = {
experimental: {
nodeMiddleware: true,
export default nextConfig
--- END CODE BLOCK ---
zero or one
--- CODE BLOCK 85 ---
export const config = {
runtime: 'nodejs',
--- END CODE BLOCK ---
one or more
Can use regular expression enclosed in parenthesis:
--- CODE BLOCK 86 ---
export const config = {
runtime: 'nodejs',
--- END CODE BLOCK ---
is the same as
--- CODE BLOCK 88 ---
skipMiddlewareUrlNormalize
--- END CODE BLOCK ---
Read more details on
path-to-regexp
documentation.
Good to know
--- CODE BLOCK 89 ---
skipTrailingSlashRedirect
--- END CODE BLOCK ---
values need to be constants so they can be statically analyzed at build-time. Dynamic values such as variables will be ignored.
For backward compatibility, Next.js always considers
--- CODE BLOCK 90 ---
skipTrailingSlashRedirect
--- END CODE BLOCK ---
--- CODE BLOCK 91 ---
module.exports = {
skipTrailingSlashRedirect: true,
--- END CODE BLOCK ---
. Therefore, a matcher of
--- CODE BLOCK 92 ---
module.exports = {
skipTrailingSlashRedirect: true,
--- END CODE BLOCK ---
will match.
Params
--- CODE BLOCK 93 ---
const legacyPrefixes = ['/docs', '/blog']
export default async function middleware(req) {
const { pathname } = req.nextUrl
if (legacyPrefixes.some((prefix) => pathname.startsWith(prefix))) {
return NextResponse.next()
// apply trailing slash handling
if (
!pathname.endsWith('/') &&
!pathname.match(/((?!\.well-known(?:\/.*)?)(?:[^/]+\/)*[^/]+\.\w+)/)
return NextResponse.redirect(
new URL(`${req.nextUrl.pathname}/`, req.nextUrl)
--- END CODE BLOCK ---
When defining Middleware, the default export function accepts a single parameter,
--- CODE BLOCK 94 ---
const legacyPrefixes = ['/docs', '/blog']
export default async function middleware(req) {
const { pathname } = req.nextUrl
if (legacyPrefixes.some((prefix) => pathname.startsWith(prefix))) {
return NextResponse.next()
// apply trailing slash handling
if (
!pathname.endsWith('/') &&
!pathname.match(/((?!\.well-known(?:\/.*)?)(?:[^/]+\/)*[^/]+\.\w+)/)
return NextResponse.redirect(
new URL(`${req.nextUrl.pathname}/`, req.nextUrl)
--- END CODE BLOCK ---
. This parameter is an instance of
--- CODE BLOCK 95 ---
skipMiddlewareUrlNormalize
--- END CODE BLOCK ---
, which represents the incoming HTTP request.
middleware.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 96 ---
module.exports = {
skipMiddlewareUrlNormalize: true,
--- END CODE BLOCK ---
Good to know
--- CODE BLOCK 98 ---
export default async function middleware(req) {
const { pathname } = req.nextUrl
// GET /_next/data/build-id/hello.json
console.log(pathname)
// with the flag this now /_next/data/build-id/hello.json
// without the flag this would be normalized to /hello
--- END CODE BLOCK ---
is a type that represents incoming HTTP requests in Next.js Middleware, whereas
--- CODE BLOCK 99 ---
export default async function middleware(req) {
const { pathname } = req.nextUrl
// GET /_next/data/build-id/hello.json
console.log(pathname)
// with the flag this now /_next/data/build-id/hello.json
// without the flag this would be normalized to /hello
--- END CODE BLOCK ---
is a class used to manipulate and send back HTTP responses.
NextResponse
--- CODE BLOCK 100 ---
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
export function middleware(request: NextRequest) {
if (request.nextUrl.pathname.startsWith('/about')) {
return NextResponse.rewrite(new URL('/about-2', request.url))
if (request.nextUrl.pathname.startsWith('/dashboard')) {
return NextResponse.rewrite(new URL('/dashboard/user', request.url))
--- END CODE BLOCK ---
API allows you to:
--- CODE BLOCK 101 ---
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
export function middleware(request: NextRequest) {
if (request.nextUrl.pathname.startsWith('/about')) {
return NextResponse.rewrite(new URL('/about-2', request.url))
if (request.nextUrl.pathname.startsWith('/dashboard')) {
return NextResponse.rewrite(new URL('/dashboard/user', request.url))
--- END CODE BLOCK ---
the incoming request to a different URL
--- CODE BLOCK 107 ---
NextRequest
--- END CODE BLOCK ---
the response by displaying a given URL
Set request headers for API Routes,
--- CODE BLOCK 108 ---
NextResponse
--- END CODE BLOCK ---
, and
--- CODE BLOCK 121 ---
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
export function middleware(request: NextRequest) {
// Assume a "Cookie:nextjs=fast" header to be present on the incoming request
// Getting cookies from the request using the `RequestCookies` API
let cookie = request.cookies.get('nextjs')
console.log(cookie) // => { name: 'nextjs', value: 'fast', Path: '/' }
const allCookies = request.cookies.getAll()
console.log(allCookies) // => [{ name: 'nextjs', value: 'fast' }]
request.cookies.has('nextjs') // => true
request.cookies.delete('nextjs')
request.cookies.has('nextjs') // => false
// Setting cookies on the response using the `ResponseCookies` API
const response = NextResponse.next()
response.cookies.set('vercel', 'fast')
response.cookies.set({
name: 'vercel',
value: 'fast',
path: '/',
cookie = response.cookies.get('vercel')
console.log(cookie) // => { name: 'vercel', value: 'fast', Path: '/' }
// The outgoing response will have a `Set-Cookie:vercel=fast;path=/` header.
return response
--- END CODE BLOCK ---
destinations
Set response cookies
Set response headers
To produce a response from Middleware, you can:
--- CODE BLOCK 122 ---
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
export function middleware(request: NextRequest) {
// Assume a "Cookie:nextjs=fast" header to be present on the incoming request
// Getting cookies from the request using the `RequestCookies` API
let cookie = request.cookies.get('nextjs')
console.log(cookie) // => { name: 'nextjs', value: 'fast', Path: '/' }
const allCookies = request.cookies.getAll()
console.log(allCookies) // => [{ name: 'nextjs', value: 'fast' }]
request.cookies.has('nextjs') // => true
request.cookies.delete('nextjs')
request.cookies.has('nextjs') // => false
// Setting cookies on the response using the `ResponseCookies` API
const response = NextResponse.next()
response.cookies.set('vercel', 'fast')
response.cookies.set({
name: 'vercel',
value: 'fast',
path: '/',
cookie = response.cookies.get('vercel')
console.log(cookie) // => { name: 'vercel', value: 'fast', Path: '/' }
// The outgoing response will have a `Set-Cookie:vercel=fast;path=/` header.
return response
--- END CODE BLOCK ---
to a route (
Page
Edge API Route
) that produces a response
return a
--- CODE BLOCK 123 ---
NextResponse
--- END CODE BLOCK ---
directly. See
Producing a Response
Execution order
Middleware will be invoked for
every route in your project
. Given this, it's crucial to use
matchers
to precisely target or exclude specific routes. The following is the execution order:
--- CODE BLOCK 124 ---
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
export function middleware(request: NextRequest) {
// Clone the request headers and set a new header `x-hello-from-middleware1`
const requestHeaders = new Headers(request.headers)
requestHeaders.set('x-hello-from-middleware1', 'hello')
// You can also set request headers in NextResponse.next
const response = NextResponse.next({
request: {
// New request headers
headers: requestHeaders,
// Set a new response header `x-hello-from-middleware2`
response.headers.set('x-hello-from-middleware2', 'hello')
return response
--- END CODE BLOCK ---
from
--- CODE BLOCK 125 ---
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
export function middleware(request: NextRequest) {
// Clone the request headers and set a new header `x-hello-from-middleware1`
const requestHeaders = new Headers(request.headers)
requestHeaders.set('x-hello-from-middleware1', 'hello')
// You can also set request headers in NextResponse.next
const response = NextResponse.next({
request: {
// New request headers
headers: requestHeaders,
// Set a new response header `x-hello-from-middleware2`
response.headers.set('x-hello-from-middleware2', 'hello')
return response
--- END CODE BLOCK ---
--- CODE BLOCK 126 ---
import { NextRequest, NextResponse } from 'next/server'
const allowedOrigins = ['https://acme.com', 'https://my-app.org']
const corsOptions = {
'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
'Access-Control-Allow-Headers': 'Content-Type, Authorization',
export function middleware(request: NextRequest) {
// Check the origin from the request
const origin = request.headers.get('origin') ?? ''
const isAllowedOrigin = allowedOrigins.includes(origin)
// Handle preflighted requests
const isPreflight = request.method === 'OPTIONS'
if (isPreflight) {
const preflightHeaders = {
...(isAllowedOrigin && { 'Access-Control-Allow-Origin': origin }),
...corsOptions,
return NextResponse.json({}, { headers: preflightHeaders })
// Handle simple requests
const response = NextResponse.next()
if (isAllowedOrigin) {
response.headers.set('Access-Control-Allow-Origin', origin)
Object.entries(corsOptions).forEach(([key, value]) => {
response.headers.set(key, value)
return response
export const config = {
matcher: '/api/:path*',
--- END CODE BLOCK ---
from
--- CODE BLOCK 127 ---
import { NextRequest, NextResponse } from 'next/server'
const allowedOrigins = ['https://acme.com', 'https://my-app.org']
const corsOptions = {
'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
'Access-Control-Allow-Headers': 'Content-Type, Authorization',
export function middleware(request: NextRequest) {
// Check the origin from the request
const origin = request.headers.get('origin') ?? ''
const isAllowedOrigin = allowedOrigins.includes(origin)
// Handle preflighted requests
const isPreflight = request.method === 'OPTIONS'
if (isPreflight) {
const preflightHeaders = {
...(isAllowedOrigin && { 'Access-Control-Allow-Origin': origin }),
...corsOptions,
return NextResponse.json({}, { headers: preflightHeaders })
// Handle simple requests
const response = NextResponse.next()
if (isAllowedOrigin) {
response.headers.set('Access-Control-Allow-Origin', origin)
Object.entries(corsOptions).forEach(([key, value]) => {
response.headers.set(key, value)
return response
export const config = {
matcher: '/api/:path*',
--- END CODE BLOCK ---
Middleware (
--- CODE BLOCK 129 ---
NextResponse
--- END CODE BLOCK ---
--- CODE BLOCK 130 ---
import type { NextRequest } from 'next/server'
import { isAuthenticated } from '@lib/auth'
// Limit the middleware to paths starting with `/api/`
export const config = {
matcher: '/api/:function*',
export function middleware(request: NextRequest) {
// Call our authentication function to check the request
if (!isAuthenticated(request)) {
// Respond with JSON indicating an error message
return Response.json(
{ success: false, message: 'authentication failed' },
{ status: 401 }
--- END CODE BLOCK ---
, etc.)
--- CODE BLOCK 131 ---
import type { NextRequest } from 'next/server'
import { isAuthenticated } from '@lib/auth'
// Limit the middleware to paths starting with `/api/`
export const config = {
matcher: '/api/:function*',
export function middleware(request: NextRequest) {
// Call our authentication function to check the request
if (!isAuthenticated(request)) {
// Respond with JSON indicating an error message
return Response.json(
{ success: false, message: 'authentication failed' },
{ status: 401 }
--- END CODE BLOCK ---
--- CODE BLOCK 133 ---
export const config = {
matcher: [
* Match all request paths except for the ones starting with:
* - api (API routes)
* - _next/static (static files)
* - _next/image (image optimization files)
* - favicon.ico, sitemap.xml, robots.txt (metadata files)
'/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',
--- END CODE BLOCK ---
) from
--- CODE BLOCK 134 ---
export const config = {
matcher: [
* Match all request paths except for the ones starting with:
* - api (API routes)
* - _next/static (static files)
* - _next/image (image optimization files)
* - favicon.ico, sitemap.xml, robots.txt (metadata files)
'/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',
--- END CODE BLOCK ---
Filesystem routes (
--- CODE BLOCK 137 ---
export const config = {
matcher: [
* Match all request paths except for the ones starting with:
* - api (API routes)
* - _next/static (static files)
* - _next/image (image optimization files)
* - favicon.ico, sitemap.xml, robots.txt (metadata files)
source:
'/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',
missing: [
{ type: 'header', key: 'next-router-prefetch' },
{ type: 'header', key: 'purpose', value: 'prefetch' },
source:
'/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',
has: [
{ type: 'header', key: 'next-router-prefetch' },
{ type: 'header', key: 'purpose', value: 'prefetch' },
source:
'/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',
has: [{ type: 'header', key: 'x-present' }],
missing: [{ type: 'header', key: 'x-missing', value: 'prefetch' }],
--- END CODE BLOCK ---
--- CODE BLOCK 138 ---
export const config = {
matcher: [
* Match all request paths except for the ones starting with:
* - api (API routes)
* - _next/static (static files)
* - _next/image (image optimization files)
* - favicon.ico, sitemap.xml, robots.txt (metadata files)
source:
'/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',
missing: [
{ type: 'header', key: 'next-router-prefetch' },
{ type: 'header', key: 'purpose', value: 'prefetch' },
source:
'/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',
has: [
{ type: 'header', key: 'next-router-prefetch' },
{ type: 'header', key: 'purpose', value: 'prefetch' },
source:
'/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',
has: [{ type: 'header', key: 'x-present' }],
missing: [{ type: 'header', key: 'x-missing', value: 'prefetch' }],
--- END CODE BLOCK ---
--- CODE BLOCK 140 ---
NextFetchEvent
--- END CODE BLOCK ---
--- CODE BLOCK 141 ---
NextFetchEvent
--- END CODE BLOCK ---
, etc.)
--- CODE BLOCK 143 ---
waitUntil()
--- END CODE BLOCK ---
--- CODE BLOCK 144 ---
waitUntil()
--- END CODE BLOCK ---
) from
--- CODE BLOCK 145 ---
import { NextResponse } from 'next/server'
import type { NextFetchEvent, NextRequest } from 'next/server'
export function middleware(req: NextRequest, event: NextFetchEvent) {
event.waitUntil(
fetch('https://my-analytics-platform.com', {
method: 'POST',
body: JSON.stringify({ pathname: req.nextUrl.pathname }),
return NextResponse.next()
--- END CODE BLOCK ---
Dynamic Routes (
--- CODE BLOCK 146 ---
import { NextResponse } from 'next/server'
import type { NextFetchEvent, NextRequest } from 'next/server'
export function middleware(req: NextRequest, event: NextFetchEvent) {
event.waitUntil(
fetch('https://my-analytics-platform.com', {
method: 'POST',
body: JSON.stringify({ pathname: req.nextUrl.pathname }),
return NextResponse.next()
--- END CODE BLOCK ---
--- CODE BLOCK 147 ---
next/experimental/testing/server
--- END CODE BLOCK ---
--- CODE BLOCK 148 ---
unstable_doesMiddlewareMatch
--- END CODE BLOCK ---
) from
--- CODE BLOCK 149 ---
import { unstable_doesMiddlewareMatch } from 'next/experimental/testing/server'
expect(
unstable_doesMiddlewareMatch({
config,
nextConfig,
url: '/test',
).toEqual(false)
--- END CODE BLOCK ---
Runtime
Middleware defaults to using the Edge runtime. As of v15.2 (canary), we have experimental support for using the Node.js runtime. To enable, add the flag to your
--- CODE BLOCK 150 ---
import { unstable_doesMiddlewareMatch } from 'next/experimental/testing/server'
expect(
unstable_doesMiddlewareMatch({
config,
nextConfig,
url: '/test',
).toEqual(false)
--- END CODE BLOCK ---
file:
next.config.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 151 ---
import { isRewrite, getRewrittenUrl } from 'next/experimental/testing/server'
const request = new NextRequest('https://nextjs.org/docs')
const response = await middleware(request)
expect(isRewrite(response)).toEqual(true)
expect(getRewrittenUrl(response)).toEqual('https://other-domain.com/docs')
// getRedirectUrl could also be used if the response were a redirect
--- END CODE BLOCK ---
Then in your middleware file, set the runtime to
[CODE_BLOCK_83]
in the
[CODE_BLOCK_84]
object:
middleware.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_85]
Note
: This feature is not yet recommended for production use. Therefore, Next.js will throw an error unless you are using the next@canary release instead of the stable release.
Advanced Middleware flags
[CODE_BLOCK_87]
of Next.js two additional flags were introduced for middleware,
[CODE_BLOCK_88]
[CODE_BLOCK_89]
to handle advanced use cases.
[CODE_BLOCK_90]
disables Next.js redirects for adding or removing trailing slashes. This allows custom handling inside middleware to maintain the trailing slash for some paths but not others, which can make incremental migrations easier.
next.config.js
[CODE_BLOCK_91]
middleware.js
[CODE_BLOCK_93]
[CODE_BLOCK_95]
allows for disabling the URL normalization in Next.js to make handling direct visits and client-transitions the same. In some advanced cases, this option provides full control by using the original URL.
next.config.js
[CODE_BLOCK_96]
middleware.js
[CODE_BLOCK_98]
Examples
Conditional Statements
middleware.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_100]
Using Cookies
Cookies are regular headers. On a
[CODE_BLOCK_102]
, they are stored in the
[CODE_BLOCK_103]
header. On a
[CODE_BLOCK_104]
they are in the
[CODE_BLOCK_105]
header. Next.js provides a convenient way to access and manipulate these cookies through the
[CODE_BLOCK_106]
extension on
[CODE_BLOCK_107]
[CODE_BLOCK_108]
For incoming requests,
[CODE_BLOCK_109]
comes with the following methods:
[CODE_BLOCK_110]
[CODE_BLOCK_111]
[CODE_BLOCK_112]
, and
[CODE_BLOCK_113]
cookies. You can check for the existence of a cookie with
[CODE_BLOCK_114]
or remove all cookies with
[CODE_BLOCK_115]
For outgoing responses,
[CODE_BLOCK_116]
have the following methods
[CODE_BLOCK_117]
[CODE_BLOCK_118]
[CODE_BLOCK_119]
, and
[CODE_BLOCK_120]
middleware.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_121]
Setting Headers
You can set request and response headers using the
[CODE_BLOCK_123]
API (setting
request
headers is available since Next.js v13.0.0).
middleware.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_124]
Good to know
: Avoid setting large headers as it might cause
431 Request Header Fields Too Large
error depending on your backend web server configuration.
CORS
You can set CORS headers in Middleware to allow cross-origin requests, including
simple
preflighted
requests.
middleware.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_126]
Producing a response
You can respond from Middleware directly by returning a
[CODE_BLOCK_128]
[CODE_BLOCK_129]
instance. (This is available since
Next.js v13.1.0
middleware.ts
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_130]
Negative matching
[CODE_BLOCK_132]
config allows full regex so matching like negative lookaheads or character matching is supported. An example of a negative lookahead to match all except specific paths can be seen here:
middleware.js
[CODE_BLOCK_133]
You can also bypass Middleware for certain requests by using the
[CODE_BLOCK_135]
[CODE_BLOCK_136]
arrays, or a combination of both:
middleware.js
[CODE_BLOCK_137]
[CODE_BLOCK_139]
[CODE_BLOCK_140]
[CODE_BLOCK_141]
object extends the native
[CODE_BLOCK_142]
object, and includes the
[CODE_BLOCK_143]
method.
[CODE_BLOCK_144]
method takes a promise as an argument, and extends the lifetime of the Middleware until the promise settles. This is useful for performing work in the background.
middleware.ts
[CODE_BLOCK_145]
Unit testing (experimental)
Starting in Next.js 15.1, the
[CODE_BLOCK_147]
package contains utilities to help unit test middleware files. Unit testing middleware can help ensure that it's only run on desired paths and that custom routing logic works as intended before code reaches production.
[CODE_BLOCK_148]
function can be used to assert whether middleware will run for the provided URL, headers, and cookies.
[CODE_BLOCK_149]
The entire middleware function can also be tested.
[CODE_BLOCK_151]
Platform support
Deployment Option
Supported
Node.js server
Docker container
Static export
Adapters
Platform-specific
Learn how to
configure Middleware
when self-hosting Next.js.
Version history
Version
Changes
[CODE_BLOCK_153]
Middleware can now use the Node.js runtime (experimental)
[CODE_BLOCK_154]
Advanced Middleware flags added
[CODE_BLOCK_155]
Middleware can modify request headers, response headers, and send responses
[CODE_BLOCK_156]
Middleware is stable, please see the
upgrade guide
[CODE_BLOCK_157]
Enforce absolute URLs in Edge Runtime (
[CODE_BLOCK_158]
Middleware (Beta) added
Was this helpful?
supported.
Send