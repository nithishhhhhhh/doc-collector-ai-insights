SOURCE URL: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array
SCRAPED: 2025-06-19 18:23:51
================================================================================

--- CODE BLOCK 8 ---
Uint8Array.fromBase64()
--- END CODE BLOCK ---
typed array represents an array of 8-bit unsigned integers. The contents are initialized to
--- CODE BLOCK 9 ---
Uint8Array.prototype.toBase64()
--- END CODE BLOCK ---
unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).
--- CODE BLOCK 10 ---
Uint8Array.prototype.setFromBase64()
--- END CODE BLOCK ---
is a subclass of the hidden
--- CODE BLOCK 11 ---
Uint8Array.fromHex()
--- END CODE BLOCK ---
class.
Description
--- CODE BLOCK 12 ---
Uint8Array.prototype.toHex()
--- END CODE BLOCK ---
is currently the only
--- CODE BLOCK 13 ---
Uint8Array.prototype.setFromHex()
--- END CODE BLOCK ---
subclass that has additional methods compared to other typed arrays. Because of its nature as a generic byte array, it is the most suitable for working with arbitrary binary data. It supports two sets of methods for the creation, serialization, and modification of
--- CODE BLOCK 14 ---
Uint8Array()
--- END CODE BLOCK ---
data to/from hex strings and base64 strings.
--- CODE BLOCK 17 ---
Uint8Array.BYTES_PER_ELEMENT
--- END CODE BLOCK ---
--- CODE BLOCK 21 ---
Uint8Array.fromBase64()
--- END CODE BLOCK ---
, and
--- CODE BLOCK 23 ---
Uint8Array.fromHex()
--- END CODE BLOCK ---
for working with
base64
strings, where 3 bytes are encoded by 4 characters that are either 0–9, A–Z, a–z, "+", and "/" (or "-" and "_", if using URL-safe base64).
--- CODE BLOCK 26 ---
Uint8Array.prototype
--- END CODE BLOCK ---
--- CODE BLOCK 28 ---
Uint8Array.prototype.BYTES_PER_ELEMENT
--- END CODE BLOCK ---
, and
--- CODE BLOCK 31 ---
Uint8Array.prototype.constructor
--- END CODE BLOCK ---
for working with hex strings, where every byte is encoded by two characters, each one being either 0–9 or A–F (case-insensitive).
Constructor
--- CODE BLOCK 35 ---
Uint8Array.prototype.setFromBase64()
--- END CODE BLOCK ---
Creates a new
--- CODE BLOCK 37 ---
Uint8Array.prototype.setFromHex()
--- END CODE BLOCK ---
object.
Static properties
Also inherits static properties from its parent
--- CODE BLOCK 39 ---
Uint8Array.prototype.toBase64()
--- END CODE BLOCK ---
--- CODE BLOCK 41 ---
Uint8Array.prototype.toHex()
--- END CODE BLOCK ---
Returns a number value of the element size.
--- CODE BLOCK 43 ---
// From a length
const uint8 = new Uint8Array(2);
uint8[0] = 42;
console.log(uint8[0]); // 42
console.log(uint8.length); // 2
console.log(uint8.BYTES_PER_ELEMENT); // 1
// From an array
const x = new Uint8Array([21, 31]);
console.log(x[1]); // 31
// From another TypedArray
const y = new Uint8Array(x);
console.log(y[0]); // 21
// From an ArrayBuffer
const buffer = new ArrayBuffer(8);
const z = new Uint8Array(buffer, 1, 4);
console.log(z.byteOffset); // 1
// From an iterable
const iterable = (function* () {
yield* [1, 2, 3];
})();
const uint8FromIterable = new Uint8Array(iterable);
console.log(uint8FromIterable);
// Uint8Array [1, 2, 3]
--- END CODE BLOCK ---
in the case of
--- CODE BLOCK 44 ---
// From a length
const uint8 = new Uint8Array(2);
uint8[0] = 42;
console.log(uint8[0]); // 42
console.log(uint8.length); // 2
console.log(uint8.BYTES_PER_ELEMENT); // 1
// From an array
const x = new Uint8Array([21, 31]);
console.log(x[1]); // 31
// From another TypedArray
const y = new Uint8Array(x);
console.log(y[0]); // 21
// From an ArrayBuffer
const buffer = new ArrayBuffer(8);
const z = new Uint8Array(buffer, 1, 4);
console.log(z.byteOffset); // 1
// From an iterable
const iterable = (function* () {
yield* [1, 2, 3];
})();
const uint8FromIterable = new Uint8Array(iterable);
console.log(uint8FromIterable);
// Uint8Array [1, 2, 3]
--- END CODE BLOCK ---
Static methods
Inherits static methods from its parent
--- CODE BLOCK 48 ---
ArrayBuffer
--- END CODE BLOCK ---
[CODE_BLOCK_21]
Creates a new
[CODE_BLOCK_22]
object from a base64-encoded string.
[CODE_BLOCK_23]
Creates a new
[CODE_BLOCK_24]
object from a hex-encoded string.
Instance properties
Also inherits instance properties from its parent
[CODE_BLOCK_25]
These properties are defined on
[CODE_BLOCK_26]
and shared by all
[CODE_BLOCK_27]
instances.
[CODE_BLOCK_28]
Returns a number value of the element size.
[CODE_BLOCK_29]
in the case of a
[CODE_BLOCK_30]
[CODE_BLOCK_31]
The constructor function that created the instance object. For
[CODE_BLOCK_32]
instances, the initial value is the
[CODE_BLOCK_33]
constructor.
Instance methods
Inherits instance methods from its parent
[CODE_BLOCK_34]
[CODE_BLOCK_35]
Populates this
[CODE_BLOCK_36]
object with bytes from a base64-encoded string, returning an object indicating how many bytes were read and written.
[CODE_BLOCK_37]
Populates this
[CODE_BLOCK_38]
object with bytes from a hex-encoded string, returning an object indicating how many bytes were read and written.
[CODE_BLOCK_39]
Returns a base64-encoded string based on the data in this
[CODE_BLOCK_40]
object.
[CODE_BLOCK_41]
Returns a hex-encoded string based on the data in this
[CODE_BLOCK_42]
object.
Examples
Different ways to create a Uint8Array
Copy to Clipboard
[CODE_BLOCK_43]
Specifications
Specification
ECMAScript® 2026 Language Specification
table-49
Browser compatibility
See also
Polyfill of
[CODE_BLOCK_45]
[CODE_BLOCK_46]
JavaScript typed arrays
guide
[CODE_BLOCK_47]
[CODE_BLOCK_48]
[CODE_BLOCK_49]
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
Nov 4, 2024
MDN contributors
View this page on GitHub
Report a problem with this content