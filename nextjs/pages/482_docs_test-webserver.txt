SOURCE URL: https://playwright.dev/docs/test-webserver/
SCRAPED: 2025-06-19 18:05:34
================================================================================

On this page
Introduction
Playwright comes with a
--- CODE BLOCK 3 ---
import { defineConfig } from '@playwright/test';export default defineConfig({  // Run your local dev server before starting the tests  webServer: {    command: 'npm run start',    url: 'http://localhost:3000',    reuseExistingServer: !process.env.CI,    stdout: 'ignore',    stderr: 'pipe',  },});
--- END CODE BLOCK ---
option in the config file which gives you the ability to launch a local dev server before running your tests. This is ideal for when writing your tests during development and when you don't have a staging or production url to test against.
Configuring a web server
Use the
--- CODE BLOCK 4 ---
import { defineConfig } from '@playwright/test';export default defineConfig({  // Run your local dev server before starting the tests  webServer: {    command: 'npm run start',    url: 'http://localhost:3000',    reuseExistingServer: !process.env.CI,    stdout: 'ignore',    stderr: 'pipe',  },});
--- END CODE BLOCK ---
property in your Playwright config to launch a development web server during the tests.
playwright.config.ts
--- CODE BLOCK 8 ---
process.env
--- END CODE BLOCK ---
Property
Description
testConfig.webServer
Launch a development web server (or multiple) during the tests.
--- CODE BLOCK 11 ---
{ signal: 'SIGTERM', timeout: 500 }
--- END CODE BLOCK ---
Shell command to start the local dev server of your app.
--- CODE BLOCK 20 ---
ignoreHTTPSErrors
--- END CODE BLOCK ---
Current working directory of the spawned process, defaults to the directory of the configuration file.
--- CODE BLOCK 24 ---
[WebServer]
--- END CODE BLOCK ---
Environment variables to set for the command,
--- CODE BLOCK 25 ---
reuseExistingServer
--- END CODE BLOCK ---
by default.
--- CODE BLOCK 28 ---
DEBUG=pw:webserver
--- END CODE BLOCK ---
How to shut down the process. If unspecified, the process group is forcefully
--- CODE BLOCK 37 ---
import { defineConfig } from '@playwright/test';export default defineConfig({  // Rest of your config...  // Run your local dev server before starting the tests  webServer: {    command: 'npm run start',    url: 'http://localhost:3000',    reuseExistingServer: !process.env.CI,    timeout: 120 * 1000,  },});
--- END CODE BLOCK ---
ed. If set to
--- CODE BLOCK 38 ---
import { defineConfig } from '@playwright/test';export default defineConfig({  // Rest of your config...  // Run your local dev server before starting the tests  webServer: {    command: 'npm run start',    url: 'http://localhost:3000',    reuseExistingServer: !process.env.CI,    timeout: 120 * 1000,  },});
--- END CODE BLOCK ---
, the process group is sent a
--- CODE BLOCK 42 ---
http://localhost:3000
--- END CODE BLOCK ---
signal, followed by
--- CODE BLOCK 44 ---
http://localhost:3000/login
--- END CODE BLOCK ---
if it doesn't exit within 500ms. You can also use
--- CODE BLOCK 45 ---
import { defineConfig } from '@playwright/test';export default defineConfig({  // Rest of your config...  // Run your local dev server before starting the tests  webServer: {    command: 'npm run start',    url: 'http://localhost:3000',    reuseExistingServer: !process.env.CI,  },  use: {    baseURL: 'http://localhost:3000',  },});
--- END CODE BLOCK ---
as the signal instead. A
--- CODE BLOCK 46 ---
import { defineConfig } from '@playwright/test';export default defineConfig({  // Rest of your config...  // Run your local dev server before starting the tests  webServer: {    command: 'npm run start',    url: 'http://localhost:3000',    reuseExistingServer: !process.env.CI,  },  use: {    baseURL: 'http://localhost:3000',  },});
--- END CODE BLOCK ---
timeout means no
--- CODE BLOCK 47 ---
import { test } from '@playwright/test';test('test', async ({ page }) => {  // This will navigate to http://localhost:3000/login  await page.goto('./login');});
--- END CODE BLOCK ---
will be sent. Windows doesn't support
--- CODE BLOCK 48 ---
import { test } from '@playwright/test';test('test', async ({ page }) => {  // This will navigate to http://localhost:3000/login  await page.goto('./login');});
--- END CODE BLOCK ---
--- CODE BLOCK 50 ---
import { defineConfig } from '@playwright/test';export default defineConfig({  webServer: [    {      command: 'npm run start',      url: 'http://localhost:3000',      name: 'Frontend',      timeout: 120 * 1000,      reuseExistingServer: !process.env.CI,    },    {      command: 'npm run backend',      url: 'http://localhost:3333',      name: 'Backend',      timeout: 120 * 1000,      reuseExistingServer: !process.env.CI,    }  ],  use: {    baseURL: 'http://localhost:3000',  },});
--- END CODE BLOCK ---
signals, so this option is ignored on Windows. Note that shutting down a Docker container requires
--- CODE BLOCK 51 ---
import { defineConfig } from '@playwright/test';export default defineConfig({  webServer: [    {      command: 'npm run start',      url: 'http://localhost:3000',      name: 'Frontend',      timeout: 120 * 1000,      reuseExistingServer: !process.env.CI,    },    {      command: 'npm run backend',      url: 'http://localhost:3333',      name: 'Backend',      timeout: 120 * 1000,      reuseExistingServer: !process.env.CI,    }  ],  use: {    baseURL: 'http://localhost:3000',  },});
--- END CODE BLOCK ---
[CODE_BLOCK_20]
Whether to ignore HTTPS errors when fetching the
[CODE_BLOCK_21]
. Defaults to
[CODE_BLOCK_22]
[CODE_BLOCK_23]
Specifies a custom name for the web server. This name will be prefixed to log messages. Defaults to
[CODE_BLOCK_24]
[CODE_BLOCK_25]
[CODE_BLOCK_26]
, it will re-use an existing server on the url when available. If no server is running on that url, it will run the command to start a new server. If
[CODE_BLOCK_27]
, it will throw if an existing process is listening on the url. To see the stdout, you can set the
[CODE_BLOCK_28]
environment variable.
[CODE_BLOCK_29]
Whether to pipe the stderr of the command to the process stderr or ignore it. Defaults to
[CODE_BLOCK_30]
[CODE_BLOCK_31]
[CODE_BLOCK_32]
, it will pipe the stdout of the command to the process stdout. If
[CODE_BLOCK_33]
, it will ignore the stdout of the command. Default to
[CODE_BLOCK_34]
[CODE_BLOCK_35]
How long to wait for the process to start up and be available in milliseconds. Defaults to 60000.
[CODE_BLOCK_36]
URL of your http server that is expected to return a 2xx, 3xx, 400, 401, 402, or 403 status code when the server is ready to accept connections.
Adding a server timeout
Webservers can sometimes take longer to boot up. In this case, you can increase the timeout to wait for the server to start.
playwright.config.ts
[CODE_BLOCK_37]
Adding a baseURL
It is also recommended to specify the
[CODE_BLOCK_39]
in the
[CODE_BLOCK_40]
section of your config, so that tests can use relative urls and you don't have to specify the full URL over and over again.
When using
page.goto()
page.route()
page.waitForURL()
page.waitForRequest()
, or
page.waitForResponse()
it takes the base URL in consideration by using the
[CODE_BLOCK_41]
constructor for building the corresponding URL. For Example, by setting the baseURL to
[CODE_BLOCK_42]
and navigating to
[CODE_BLOCK_43]
in your tests, Playwright will run the test using
[CODE_BLOCK_44]
playwright.config.ts
[CODE_BLOCK_45]
Now you can use a relative path when navigating the page:
test.spec.ts
[CODE_BLOCK_47]
Multiple web servers
Multiple web servers (or background processes) can be launched simultaneously by providing an array of
[CODE_BLOCK_49]
configurations. See
testConfig.webServer
for more info.
playwright.config.ts
[CODE_BLOCK_50]
Introduction
Configuring a web server
Adding a server timeout
Adding a baseURL
Multiple web servers