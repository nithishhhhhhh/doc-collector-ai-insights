SOURCE URL: https://nextjs.org/docs/pages/building-your-application/rendering/client-side-rendering
SCRAPED: 2025-06-19 17:18:50
================================================================================

Menu
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Building Your Application
Rendering
Client-side Rendering (CSR)
You are currently viewing the documentation for Pages Router.
Client-side Rendering (CSR)
In Client-Side Rendering (CSR) with React, the browser downloads a minimal HTML page and the JavaScript needed for the page. The JavaScript is then used to update the DOM and render the page. When the application is first loaded, the user may notice a slight delay before they can see the full page, this is because the page isn't fully rendered until all the JavaScript is downloaded, parsed, and executed.
After the page has been loaded for the first time, navigating to other pages on the same website is typically faster, as only necessary data needs to be fetched, and JavaScript can re-render parts of the page without requiring a full page refresh.
In Next.js, there are two ways you can implement client-side rendering:
Using React's
--- CODE BLOCK 1 ---
useEffect()
--- END CODE BLOCK ---
hook inside your pages instead of the server-side rendering methods (
--- CODE BLOCK 2 ---
getStaticProps
--- END CODE BLOCK ---
--- CODE BLOCK 3 ---
getServerSideProps
--- END CODE BLOCK ---
Using a data fetching library like
TanStack Query
to fetch data on the client (recommended).
Here's an example of using
--- CODE BLOCK 4 ---
useEffect()
--- END CODE BLOCK ---
inside a Next.js page:
pages/index.js
--- CODE BLOCK 5 ---
import React, { useState, useEffect } from 'react'
export function Page() {
const [data, setData] = useState(null)
useEffect(() => {
const fetchData = async () => {
const response = await fetch('https://api.example.com/data')
if (!response.ok) {
throw new Error(`HTTP error! status: ${response.status}`)
const result = await response.json()
setData(result)
fetchData().catch((e) => {
// handle the error as needed
console.error('An error occurred while fetching the data: ', e)
}, [])
return <p>{data ? `Your data: ${data}` : 'Loading...'}</p>
--- END CODE BLOCK ---
In the example above, the component starts by rendering
--- CODE BLOCK 9 ---
import useSWR from 'swr'
export function Page() {
const { data, error, isLoading } = useSWR(
'https://api.example.com/data',
fetcher
if (error) return <p>Failed to load.</p>
if (isLoading) return <p>Loading...</p>
return <p>Your Data: {data}</p>
--- END CODE BLOCK ---
. Then, once the data is fetched, it re-renders and displays the data.
Although fetching data in a
--- CODE BLOCK 10 ---
import useSWR from 'swr'
export function Page() {
const { data, error, isLoading } = useSWR(
'https://api.example.com/data',
fetcher
if (error) return <p>Failed to load.</p>
if (isLoading) return <p>Loading...</p>
return <p>Your Data: {data}</p>
--- END CODE BLOCK ---
is a pattern you may see in older React Applications, we recommend using a data-fetching library for better performance, caching, optimistic updates, and more. Here's a minimum example using
to fetch data on the client:
pages/index.js
[CODE_BLOCK_9]
Good to know
Keep in mind that CSR can impact SEO. Some search engine crawlers might not execute JavaScript and therefore only see the initial empty or loading state of your application. It can also lead to performance issues for users with slower internet connections or devices, as they need to wait for all the JavaScript to load and run before they can see the full page. Next.js promotes a hybrid approach that allows you to use a combination of
server-side rendering
static site generation
, and client-side rendering,
depending on the needs of each page
in your application. In the App Router, you can also use
Loading UI with Suspense
to show a loading indicator while the page is being rendered.
Next Steps
Learn about the alternative rendering methods in Next.js.
Server-side Rendering (SSR)
Use Server-side Rendering to render pages on each request.
Static Site Generation (SSG)
Use Static Site Generation (SSG) to pre-render pages at build time.
Learn how to create or update static pages at runtime with Incremental Static Regeneration.
Was this helpful?
supported.
Send