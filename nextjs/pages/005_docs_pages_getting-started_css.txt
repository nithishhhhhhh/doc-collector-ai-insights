SOURCE URL: https://nextjs.org/docs/pages/getting-started/css
SCRAPED: 2025-06-19 17:09:30
================================================================================

Menu
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Pages Router
Getting Started
You are currently viewing the documentation for Pages Router.
How to use CSS in your application
Next.js provides several ways to style your application using CSS, including:
CSS Modules
Global CSS
External Stylesheets
Tailwind CSS
Sass
CSS-in-JS
CSS Modules
CSS Modules locally scope CSS by generating unique class names. This allows you to use the same class in different files without worrying about naming collisions.
To start using CSS Modules, create a new file with the extension
--- CODE BLOCK 1 ---
.module.css
--- END CODE BLOCK ---
and import it into any component inside the
--- CODE BLOCK 3 ---
.blog {
padding: 24px;
--- END CODE BLOCK ---
directory:
/styles/blog.module.css
--- CODE BLOCK 4 ---
.blog {
padding: 24px;
--- END CODE BLOCK ---
pages/blog/index.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 6 ---
import styles from './blog.module.css'
export default function Page() {
return <main className={styles.blog}></main>
--- END CODE BLOCK ---
Global CSS
You can use global CSS to apply styles across your application.
Import the stylesheet in the
--- CODE BLOCK 8 ---
import '@/styles/global.css'
export default function MyApp({ Component, pageProps }) {
return <Component {...pageProps} />
--- END CODE BLOCK ---
file to apply the styles to
every route
in your application:
pages/_app.js
--- CODE BLOCK 9 ---
import '@/styles/global.css'
export default function MyApp({ Component, pageProps }) {
return <Component {...pageProps} />
--- END CODE BLOCK ---
Due to the global nature of stylesheets, and to avoid conflicts, you should import them inside
--- CODE BLOCK 12 ---
node_modules
--- END CODE BLOCK ---
External stylesheets
Next.js allows you to import CSS files from a JavaScript file. This is possible because Next.js extends the concept of
--- CODE BLOCK 13 ---
node_modules
--- END CODE BLOCK ---
beyond JavaScript.
Import styles from
--- CODE BLOCK 16 ---
pages/_app.js
--- END CODE BLOCK ---
Since Next.js
9.5.4
, importing a CSS file from
--- CODE BLOCK 17 ---
import 'bootstrap/dist/css/bootstrap.css'
export default function MyApp({ Component, pageProps }) {
return <Component {...pageProps} />
--- END CODE BLOCK ---
is permitted anywhere in your application.
For global stylesheets, like
--- CODE BLOCK 18 ---
import 'bootstrap/dist/css/bootstrap.css'
export default function MyApp({ Component, pageProps }) {
return <Component {...pageProps} />
--- END CODE BLOCK ---
--- CODE BLOCK 19 ---
import { useState } from 'react'
import { Dialog } from '@reach/dialog'
import VisuallyHidden from '@reach/visually-hidden'
import '@reach/dialog/styles.css'
function ExampleDialog(props) {
const [showDialog, setShowDialog] = useState(false)
const open = () => setShowDialog(true)
const close = () => setShowDialog(false)
return (
<div>
<button onClick={open}>Open Dialog</button>
<Dialog isOpen={showDialog} onDismiss={close}>
<button className="close-button" onClick={close}>
<VisuallyHidden>Close</VisuallyHidden>
<span aria-hidden>×</span>
</button>
<p>Hello there. I am a dialog</p>
</Dialog>
</div>
--- END CODE BLOCK ---
, you should import the file inside
--- CODE BLOCK 20 ---
import { useState } from 'react'
import { Dialog } from '@reach/dialog'
import VisuallyHidden from '@reach/visually-hidden'
import '@reach/dialog/styles.css'
function ExampleDialog(props) {
const [showDialog, setShowDialog] = useState(false)
const open = () => setShowDialog(true)
const close = () => setShowDialog(false)
return (
<div>
<button onClick={open}>Open Dialog</button>
<Dialog isOpen={showDialog} onDismiss={close}>
<button className="close-button" onClick={close}>
<VisuallyHidden>Close</VisuallyHidden>
<span aria-hidden>×</span>
</button>
<p>Hello there. I am a dialog</p>
</Dialog>
</div>
--- END CODE BLOCK ---
. For example:
pages/_app.js
--- CODE BLOCK 21 ---
base-button.module.css
--- END CODE BLOCK ---
To import CSS required by a third-party component, you can do so in your component. For example:
components/example-dialog.js
--- CODE BLOCK 23 ---
<BaseButton>
--- END CODE BLOCK ---
Ordering and Merging
Next.js optimizes CSS during production builds by automatically chunking (merging) stylesheets. The
order of your CSS
depends on the
order you import styles in your code
For example,
--- CODE BLOCK 25 ---
import { BaseButton } from './base-button'
import styles from './page.module.css'
export default function Page() {
return <BaseButton className={styles.primary} />
--- END CODE BLOCK ---
will be ordered before
--- CODE BLOCK 26 ---
import { BaseButton } from './base-button'
import styles from './page.module.css'
export default function Page() {
return <BaseButton className={styles.primary} />
--- END CODE BLOCK ---
since
--- CODE BLOCK 27 ---
import styles from './base-button.module.css'
export function BaseButton() {
return <button className={styles.primary} />
--- END CODE BLOCK ---
is imported before
--- CODE BLOCK 28 ---
import styles from './base-button.module.css'
export function BaseButton() {
return <button className={styles.primary} />
--- END CODE BLOCK ---
page.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 29 ---
<name>.module.css
--- END CODE BLOCK ---
base-button.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 32 ---
cssChunking
--- END CODE BLOCK ---
Recommendations
To keep CSS ordering predictable:
Try to contain CSS imports to a single JavaScript or TypeScript entry file
Import global styles and Tailwind stylesheets in the root of your application.
Use CSS Modules instead of global styles for nested components.
Use a consistent naming convention for your CSS modules. For example, using
[CODE_BLOCK_29]
over
[CODE_BLOCK_30]
Extract shared styles into shared components to avoid duplicate imports.
Turn off linters or formatters that auto-sort imports like ESLint’s
[CODE_BLOCK_31]
You can use the
[CODE_BLOCK_32]
option in
[CODE_BLOCK_33]
to control how CSS is chunked.
Development vs Production
In development (
[CODE_BLOCK_34]
), CSS updates apply instantly with
Fast Refresh
In production (
[CODE_BLOCK_35]
), all CSS files are automatically concatenated into
many minified and code-split
[CODE_BLOCK_36]
files, ensuring the minimal amount of CSS is loaded for a route.
CSS still loads with JavaScript disabled in production, but JavaScript is required in development for Fast Refresh.
CSS ordering can behave differently in development, always ensure to check the build (
[CODE_BLOCK_37]
) to verify the final CSS order.
Next Steps
Learn more about the features mentioned in this page.
Tailwind CSS
Style your Next.js Application using Tailwind CSS.
Sass
Learn how to use Sass in your Next.js application.
CSS-in-JS
Use CSS-in-JS libraries with Next.js
Was this helpful?
supported.
Send