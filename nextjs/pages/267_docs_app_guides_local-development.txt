SOURCE URL: https://nextjs.org/docs/app/guides/local-development
SCRAPED: 2025-06-19 17:40:46
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
App Router
Guides
Development Environment
How to optimize your local development environment
Next.js is designed to provide a great developer experience. As your application grows, you might notice slower compilation times during local development. This guide will help you identify and fix common compile-time performance issues.
Local dev vs. production
The development process with
--- CODE BLOCK 5 ---
npm install next@latest
npm run dev --turbopack
--- END CODE BLOCK ---
is different than
--- CODE BLOCK 6 ---
npm install next@latest
npm run dev --turbopack
--- END CODE BLOCK ---
--- CODE BLOCK 7 ---
@material-ui/icons
--- END CODE BLOCK ---
--- CODE BLOCK 8 ---
react-icons
--- END CODE BLOCK ---
compiles routes in your application as you open or navigate to them. This enables you to start the dev server without waiting for every route in your application to compile, which is both faster and uses less memory. Running a production build applies other optimizations, like minifying files and creating content hashes, which are not needed for local development.
Improving local dev performance
1. Check your computer's antivirus
Antivirus software can slow down file access.
Try adding your project folder to the antivirus exclusion list. While this is more common on Windows machines, we recommend this for any system with an antivirus tool installed.
2. Update Next.js and enable Turbopack
Make sure you're using the latest version of Next.js. Each new version often includes performance improvements.
Turbopack is a new bundler integrated into Next.js that can improve local performance.
--- CODE BLOCK 9 ---
// Instead of this:
import { Icon1, Icon2 } from 'react-icons/md'
// Do this:
import Icon1 from 'react-icons/md/Icon1'
import Icon2 from 'react-icons/md/Icon2'
--- END CODE BLOCK ---
Learn more about Turbopack
. See our
upgrade guides
and codemods for more information.
3. Check your imports
The way you import code can greatly affect compilation and bundling time. Learn more about
optimizing package bundling
and explore tools like
Dependency Cruiser
Madge
Icon libraries
Libraries like
--- CODE BLOCK 11 ---
react-icons
--- END CODE BLOCK ---
--- CODE BLOCK 12 ---
react-icons
--- END CODE BLOCK ---
can import thousands of icons, even if you only use a few. Try to import only the icons you need:
--- CODE BLOCK 17 ---
next.config.js
--- END CODE BLOCK ---
Libraries like
--- CODE BLOCK 19 ---
module.exports = {
experimental: {
optimizePackageImports: ['package-name'],
--- END CODE BLOCK ---
includes many different icon sets. Choose one set and stick with that set.
For example, if your application uses
--- CODE BLOCK 21 ---
node_modules
--- END CODE BLOCK ---
and imports all of these:
--- CODE BLOCK 22 ---
tailwind.config.js
--- END CODE BLOCK ---
(Phosphor Icons)
--- CODE BLOCK 23 ---
module.exports = {
content: [
'./src/**/*.{js,ts,jsx,tsx}', // Good
// This might be too broad
// It will match `packages/**/node_modules` too
// '../../packages/**/*.{js,ts,jsx,tsx}',
--- END CODE BLOCK ---
(Material Design Icons)
--- CODE BLOCK 24 ---
module.exports = {
content: [
'./src/**/*.{js,ts,jsx,tsx}', // Good
// This might be too broad
// It will match `packages/**/node_modules` too
// '../../packages/**/*.{js,ts,jsx,tsx}',
--- END CODE BLOCK ---
(tabler-icons)
--- CODE BLOCK 25 ---
module.exports = {
content: [
// Better - only scans the 'src' folder
'../../packages/ui/src/**/*.{js,ts,jsx,tsx}',
--- END CODE BLOCK ---
(cssgg)
Combined they will be tens of thousands of modules that the compiler has to handle, even if you only use a single import from each.
Barrel files
"Barrel files" are files that export many items from other files. They can slow down builds because the compiler has to parse them to find if there are side-effects in the module scope by using the import.
Try to import directly from specific files when possible.
Learn more about barrel files
and the built-in optimizations in Next.js.
Optimize package imports
Next.js can automatically optimize imports for certain packages. If you are using packages that utilize barrel files, add them to your
--- CODE BLOCK 26 ---
module.exports = {
content: [
// Better - only scans the 'src' folder
'../../packages/ui/src/**/*.{js,ts,jsx,tsx}',
--- END CODE BLOCK ---
--- CODE BLOCK 27 ---
serverComponentsHmrCache
--- END CODE BLOCK ---
Turbopack automatically analyzes imports and optimizes them. It does not require this configuration.
4. Check your Tailwind CSS setup
If you're using Tailwind CSS, make sure it's set up correctly.
A common mistake is configuring your
--- CODE BLOCK 31 ---
logging.fetches
--- END CODE BLOCK ---
array in a way which includes
--- CODE BLOCK 32 ---
next.config.js
--- END CODE BLOCK ---
or other large directories of files that should not be scanned.
Tailwind CSS version 3.4.8 or newer will warn you about settings that might slow down your build.
In your
--- CODE BLOCK 33 ---
module.exports = {
logging: {
fetches: {
fullUrl: true,
--- END CODE BLOCK ---
, be specific about which files to scan:
--- CODE BLOCK 34 ---
module.exports = {
logging: {
fetches: {
fullUrl: true,
--- END CODE BLOCK ---
Avoid scanning unnecessary files:
--- CODE BLOCK 36 ---
NEXT_TURBOPACK_TRACING=1 npm run dev
--- END CODE BLOCK ---
5. Check custom webpack settings
If you've added custom webpack settings, they might be slowing down compilation.
Consider if you really need them for local development. You can optionally only include certain tools for production builds, or explore moving to Turbopack and using
loaders
6. Optimize memory usage
If your app is very large, it might need more memory.
Learn more about optimizing memory usage
7. Server Components and data fetching
Changes to Server Components cause the entire page to re-render locally in order to show the new changes, which includes fetching new data for the component.
The experimental
--- CODE BLOCK 39 ---
next internal trace [path-to-file]
--- END CODE BLOCK ---
option allows you to cache
--- CODE BLOCK 40 ---
next internal trace .next/trace-turbopack
--- END CODE BLOCK ---
responses in Server Components across Hot Module Replacement (HMR) refreshes in local development. This results in faster responses and reduced costs for billed API calls.
Learn more about the experimental option
8. Consider local development over Docker
If you're using Docker for development on Mac or Windows, you may experience significantly slower performance compared to running Next.js locally.
Docker's filesystem access on Mac and Windows can cause Hot Module Replacement (HMR) to take seconds or even minutes, while the same application runs with fast HMR when developed locally.
This performance difference is due to how Docker handles filesystem operations outside of Linux environments. For the best development experience:
Use local development (
--- CODE BLOCK 41 ---
next internal trace .next/trace-turbopack
--- END CODE BLOCK ---
--- CODE BLOCK 43 ---
turbo-trace-server
--- END CODE BLOCK ---
) instead of Docker during development
Reserve Docker for production deployments and testing production builds
If you must use Docker for development, consider using Docker on a Linux machine or VM
Learn more about Docker deployment
for production use.
Tools for finding problems
Detailed fetch logging
Use the
--- CODE BLOCK 44 ---
next internal turbo-trace-server .next/trace-turbopack
--- END CODE BLOCK ---
option in your
--- CODE BLOCK 45 ---
next internal turbo-trace-server .next/trace-turbopack
--- END CODE BLOCK ---
file, to see more detailed information about what's happening during development:
[CODE_BLOCK_33]
Learn more about fetch logging
Turbopack tracing
Turbopack tracing is a tool that helps you understand the performance of your application during local development.
It provides detailed information about the time taken for each module to compile and how they are related.
Make sure you have the latest version of Next.js installed.
Generate a Turbopack trace file:
[CODE_BLOCK_35]
Navigate around your application or make edits to files to reproduce the problem.
Stop the Next.js development server.
A file called
[CODE_BLOCK_37]
will be available in the
[CODE_BLOCK_38]
folder.
You can interpret the file using
[CODE_BLOCK_39]
[CODE_BLOCK_40]
On versions where
[CODE_BLOCK_42]
is not available, the command was named
[CODE_BLOCK_43]
[CODE_BLOCK_44]
Once the trace server is running you can view the trace at
https://trace.nextjs.org/
By default the trace viewer will aggregate timings, in order to see each individual time you can switch from "Aggregated in order" to "Spans in order" at the top right of the viewer.
Still having problems?
Share the trace file generated in the
Turbopack Tracing
section and share it on
GitHub Discussions
Discord
Was this helpful?
supported.
Send