SOURCE URL: https://nextjs.org/docs/app/guides/migrating/from-vite
SCRAPED: 2025-06-19 17:26:19
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
Guides
Migrating
Vite
How to migrate from Vite to Next.js
This guide will help you migrate an existing Vite application to Next.js.
Why Switch?
There are several reasons why you might want to switch from Vite to Next.js:
Slow initial page loading time
If you have built your application with the
default Vite plugin for React
, your application is a purely client-side application. Client-side only applications, also known as single-page applications (SPAs), often experience slow initial page loading time. This happens due to a couple of reasons:
The browser needs to wait for the React code and your entire application bundle to download and run before your code is able to send requests to load some data.
Your application code grows with every new feature and extra dependency you add.
No automatic code splitting
The previous issue of slow loading times can be somewhat managed with code splitting. However, if you try to do code splitting manually, you'll often make performance worse. It's easy to inadvertently introduce network waterfalls when code-splitting manually. Next.js provides automatic code splitting built into its router.
Network waterfalls
A common cause of poor performance occurs when applications make sequential client-server requests to fetch data. One common pattern for data fetching in an SPA is to initially render a placeholder, and then fetch data after the component has mounted. Unfortunately, this means that a child component that fetches data can't start fetching until the parent component has finished loading its own data.
While fetching data on the client is supported with Next.js, it also gives you the option to shift data fetching to the server, which can eliminate client-server waterfalls.
Fast and intentional loading states
With built-in support for
streaming through React Suspense
, you can be more intentional about which parts of your UI you want to load first and in what order without introducing network waterfalls.
This enables you to build pages that are faster to load and eliminate
layout shifts
Choose the data fetching strategy
Depending on your needs, Next.js allows you to choose your data fetching strategy on a page and component basis. You can decide to fetch at build time, at request time on the server, or on the client. For example, you can fetch data from your CMS and render your blog posts at build time, which can then be efficiently cached on a CDN.
Middleware
Next.js Middleware
allows you to run code on the server before a request is completed. This is especially useful to avoid having a flash of unauthenticated content when the user visits an authenticated-only page by redirecting the user to a login page. The middleware is also useful for experimentation and
internationalization
Built-in Optimizations
Images
fonts
, and
third-party scripts
often have significant impact on an application's performance. Next.js comes with built-in components that automatically optimize those for you.
Migration Steps
Our goal with this migration is to get a working Next.js application as quickly as possible, so that
you can then adopt Next.js features incrementally. To begin with, we'll keep it as a purely
client-side application (SPA) without migrating your existing router. This helps minimize the
chances of encountering issues during the migration process and reduces merge conflicts.
Step 1: Install the Next.js Dependency
The first thing you need to do is to install
--- CODE BLOCK 2 ---
npm install next@latest
--- END CODE BLOCK ---
as a dependency:
Terminal
--- CODE BLOCK 3 ---
npm install next@latest
--- END CODE BLOCK ---
Step 2: Create the Next.js Configuration File
Create a
--- CODE BLOCK 5 ---
/** @type {import('next').NextConfig} */
const nextConfig = {
output: 'export', // Outputs a Single-Page Application (SPA).
distDir: './dist', // Changes the build output directory to `./dist/`.
export default nextConfig
--- END CODE BLOCK ---
at the root of your project. This file will hold your
Next.js configuration options
next.config.mjs
--- CODE BLOCK 6 ---
/** @type {import('next').NextConfig} */
const nextConfig = {
output: 'export', // Outputs a Single-Page Application (SPA).
distDir: './dist', // Changes the build output directory to `./dist/`.
export default nextConfig
--- END CODE BLOCK ---
Good to know:
You can use either
--- CODE BLOCK 10 ---
tsconfig.node.json
--- END CODE BLOCK ---
--- CODE BLOCK 11 ---
./dist/types/**/*.ts
--- END CODE BLOCK ---
for your Next.js configuration file.
Step 3: Update TypeScript Configuration
If you're using TypeScript, you need to update your
--- CODE BLOCK 12 ---
./next-env.d.ts
--- END CODE BLOCK ---
file with the following changes
to make it compatible with Next.js. If you're not using TypeScript, you can skip this step.
Remove the
project reference
--- CODE BLOCK 14 ---
./node_modules
--- END CODE BLOCK ---
--- CODE BLOCK 16 ---
{ "name": "next" }
--- END CODE BLOCK ---
--- CODE BLOCK 18 ---
compilerOptions
--- END CODE BLOCK ---
to the
--- CODE BLOCK 19 ---
"plugins": [{ "name": "next" }]
--- END CODE BLOCK ---
array
--- CODE BLOCK 20 ---
esModuleInterop
--- END CODE BLOCK ---
to the
--- CODE BLOCK 22 ---
"esModuleInterop": true
--- END CODE BLOCK ---
array
--- CODE BLOCK 25 ---
"jsx": "preserve"
--- END CODE BLOCK ---
to the
--- CODE BLOCK 28 ---
"allowJs": true
--- END CODE BLOCK ---
array in
--- CODE BLOCK 29 ---
forceConsistentCasingInFileNames
--- END CODE BLOCK ---
--- CODE BLOCK 31 ---
"forceConsistentCasingInFileNames": true
--- END CODE BLOCK ---
--- CODE BLOCK 32 ---
incremental
--- END CODE BLOCK ---
--- CODE BLOCK 34 ---
"incremental": true
--- END CODE BLOCK ---
--- CODE BLOCK 35 ---
tsconfig.json
--- END CODE BLOCK ---
--- CODE BLOCK 36 ---
"compilerOptions": {
"target": "ES2020",
"useDefineForClassFields": true,
"lib": ["ES2020", "DOM", "DOM.Iterable"],
"module": "ESNext",
"esModuleInterop": true,
"skipLibCheck": true,
"moduleResolution": "bundler",
"allowImportingTsExtensions": true,
"resolveJsonModule": true,
"isolatedModules": true,
"noEmit": true,
"jsx": "preserve",
"strict": true,
"noUnusedLocals": true,
"noUnusedParameters": true,
"noFallthroughCasesInSwitch": true,
"allowJs": true,
"forceConsistentCasingInFileNames": true,
"incremental": true,
"plugins": [{ "name": "next" }]
"include": ["./src", "./dist/types/**/*.ts", "./next-env.d.ts"],
"exclude": ["./node_modules"]
--- END CODE BLOCK ---
--- CODE BLOCK 37 ---
"compilerOptions": {
"target": "ES2020",
"useDefineForClassFields": true,
"lib": ["ES2020", "DOM", "DOM.Iterable"],
"module": "ESNext",
"esModuleInterop": true,
"skipLibCheck": true,
"moduleResolution": "bundler",
"allowImportingTsExtensions": true,
"resolveJsonModule": true,
"isolatedModules": true,
"noEmit": true,
"jsx": "preserve",
"strict": true,
"noUnusedLocals": true,
"noUnusedParameters": true,
"noFallthroughCasesInSwitch": true,
"allowJs": true,
"forceConsistentCasingInFileNames": true,
"incremental": true,
"plugins": [{ "name": "next" }]
"include": ["./src", "./dist/types/**/*.ts", "./next-env.d.ts"],
"exclude": ["./node_modules"]
--- END CODE BLOCK ---
--- CODE BLOCK 48 ---
export default function RootLayout({
children,
}: {
children: React.ReactNode
}) {
return '...'
--- END CODE BLOCK ---
--- CODE BLOCK 49 ---
export default function RootLayout({
children,
}: {
children: React.ReactNode
}) {
return '...'
--- END CODE BLOCK ---
--- CODE BLOCK 54 ---
<RootLayout>
--- END CODE BLOCK ---
--- CODE BLOCK 55 ---
body.div#root
--- END CODE BLOCK ---
--- CODE BLOCK 56 ---
body.script
--- END CODE BLOCK ---
--- CODE BLOCK 57 ---
<div id="root">{children}</div>
--- END CODE BLOCK ---
--- CODE BLOCK 58 ---
export default function RootLayout({
children,
}: {
children: React.ReactNode
}) {
return (
<html lang="en">
<head>
<meta charset="UTF-8" />
<link rel="icon" type="image/svg+xml" href="/icon.svg" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>My App</title>
<meta name="description" content="My App is a..." />
</head>
<body>
<div id="root">{children}</div>
</body>
</html>
--- END CODE BLOCK ---
--- CODE BLOCK 59 ---
export default function RootLayout({
children,
}: {
children: React.ReactNode
}) {
return (
<html lang="en">
<head>
<meta charset="UTF-8" />
<link rel="icon" type="image/svg+xml" href="/icon.svg" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>My App</title>
<meta name="description" content="My App is a..." />
</head>
<body>
<div id="root">{children}</div>
</body>
</html>
--- END CODE BLOCK ---
--- CODE BLOCK 61 ---
export default function RootLayout({
children,
}: {
children: React.ReactNode
}) {
return (
<html lang="en">
<head>
<link rel="icon" type="image/svg+xml" href="/icon.svg" />
<title>My App</title>
<meta name="description" content="My App is a..." />
</head>
<body>
<div id="root">{children}</div>
</body>
</html>
--- END CODE BLOCK ---
--- CODE BLOCK 62 ---
export default function RootLayout({
children,
}: {
children: React.ReactNode
}) {
return (
<html lang="en">
<head>
<link rel="icon" type="image/svg+xml" href="/icon.svg" />
<title>My App</title>
<meta name="description" content="My App is a..." />
</head>
<body>
<div id="root">{children}</div>
</body>
</html>
--- END CODE BLOCK ---
Here's an example of a working
--- CODE BLOCK 63 ---
favicon.ico
--- END CODE BLOCK ---
with those changes:
tsconfig.json
--- CODE BLOCK 70 ---
export default function RootLayout({
children,
}: {
children: React.ReactNode
}) {
return (
<html lang="en">
<head>
<title>My App</title>
<meta name="description" content="My App is a..." />
</head>
<body>
<div id="root">{children}</div>
</body>
</html>
--- END CODE BLOCK ---
You can find more information about configuring TypeScript on the
Next.js docs
Step 4: Create the Root Layout
A Next.js
App Router
application must include a
root layout
file, which is a
React Server Component
that will wrap all pages in your application. This file is defined at the top level of the
--- CODE BLOCK 74 ---
import type { Metadata } from 'next'
export const metadata: Metadata = {
title: 'My App',
description: 'My App is a...',
export default function RootLayout({
children,
}: {
children: React.ReactNode
}) {
return (
<html lang="en">
<body>
<div id="root">{children}</div>
</body>
</html>
--- END CODE BLOCK ---
directory.
The closest equivalent to the root layout file in a Vite application is the
--- CODE BLOCK 75 ---
import type { Metadata } from 'next'
export const metadata: Metadata = {
title: 'My App',
description: 'My App is a...',
export default function RootLayout({
children,
}: {
children: React.ReactNode
}) {
return (
<html lang="en">
<body>
<div id="root">{children}</div>
</body>
</html>
--- END CODE BLOCK ---
file
, which contains your
--- CODE BLOCK 79 ---
[[...slug]]
--- END CODE BLOCK ---
--- CODE BLOCK 81 ---
[[...slug]]
--- END CODE BLOCK ---
, and
--- CODE BLOCK 85 ---
app/[[...slug]]
--- END CODE BLOCK ---
tags.
In this step, you'll convert your
--- CODE BLOCK 86 ---
import '../../index.css'
export function generateStaticParams() {
return [{ slug: [''] }]
export default function Page() {
return '...' // We'll update this
--- END CODE BLOCK ---
file into a root layout file:
Create a new
--- CODE BLOCK 87 ---
import '../../index.css'
export function generateStaticParams() {
return [{ slug: [''] }]
export default function Page() {
return '...' // We'll update this
--- END CODE BLOCK ---
directory in your
--- CODE BLOCK 92 ---
generateStaticParams
--- END CODE BLOCK ---
folder.
Create a new
--- CODE BLOCK 94 ---
'use client'
import React from 'react'
import dynamic from 'next/dynamic'
const App = dynamic(() => import('../../App'), { ssr: false })
export function ClientOnly() {
return <App />
--- END CODE BLOCK ---
file inside that
--- CODE BLOCK 95 ---
'use client'
import React from 'react'
import dynamic from 'next/dynamic'
const App = dynamic(() => import('../../App'), { ssr: false })
export function ClientOnly() {
return <App />
--- END CODE BLOCK ---
directory:
app/layout.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 96 ---
'use client'
--- END CODE BLOCK ---
Good to know
--- CODE BLOCK 99 ---
const App = dynamic(() => import('../../App'), { ssr: false })
--- END CODE BLOCK ---
--- CODE BLOCK 100 ---
import '../../index.css'
import { ClientOnly } from './client'
export function generateStaticParams() {
return [{ slug: [''] }]
export default function Page() {
return <ClientOnly />
--- END CODE BLOCK ---
, or
--- CODE BLOCK 101 ---
import '../../index.css'
import { ClientOnly } from './client'
export function generateStaticParams() {
return [{ slug: [''] }]
export default function Page() {
return <ClientOnly />
--- END CODE BLOCK ---
extensions can be used for Layout files.
Copy the content of your
--- CODE BLOCK 102 ---
import image from './img.png' // `image` will be '/assets/img.2d8efhg.png' in production
export default function App() {
return <img src={image} />
--- END CODE BLOCK ---
file into the previously created
--- CODE BLOCK 103 ---
import image from './img.png' // `image` will be '/assets/img.2d8efhg.png' in production
export default function App() {
return <img src={image} />
--- END CODE BLOCK ---
component while
replacing the
--- CODE BLOCK 118 ---
// Before
import logo from '/logo.png'
// After
import logo from '../public/logo.png'
--- END CODE BLOCK ---
--- CODE BLOCK 119 ---
// Before
import logo from '/logo.png'
// After
import logo from '../public/logo.png'
--- END CODE BLOCK ---
tags with
--- CODE BLOCK 122 ---
// Before
<img src={logo} />
// After
<img src={logo.src} />
--- END CODE BLOCK ---
app/layout.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 123 ---
// Before
<img src={logo} />
// After
<img src={logo.src} />
--- END CODE BLOCK ---
Next.js already includes by default the
meta charset
meta viewport
tags, so you
can safely remove those from your
--- CODE BLOCK 130 ---
NEXT_PUBLIC_
--- END CODE BLOCK ---
app/layout.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 131 ---
import.meta.env
--- END CODE BLOCK ---
metadata files
such as
--- CODE BLOCK 133 ---
process.env.NODE_ENV
--- END CODE BLOCK ---
--- CODE BLOCK 134 ---
import.meta.env.PROD
--- END CODE BLOCK ---
--- CODE BLOCK 135 ---
process.env.NODE_ENV === 'production'
--- END CODE BLOCK ---
are automatically added to the application
--- CODE BLOCK 136 ---
import.meta.env.DEV
--- END CODE BLOCK ---
tag as long as you have them placed into the top level of the
--- CODE BLOCK 137 ---
process.env.NODE_ENV !== 'production'
--- END CODE BLOCK ---
directory. After
moving
all supported files
into the
--- CODE BLOCK 138 ---
import.meta.env.SSR
--- END CODE BLOCK ---
directory you can safely delete their
--- CODE BLOCK 139 ---
typeof window !== 'undefined'
--- END CODE BLOCK ---
tags:
app/layout.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 142 ---
# ...
NEXT_PUBLIC_BASE_PATH="/some-base-path"
--- END CODE BLOCK ---
Finally, Next.js can manage your last
--- CODE BLOCK 145 ---
process.env.NEXT_PUBLIC_BASE_PATH
--- END CODE BLOCK ---
tags with the
Metadata API
. Move your final metadata
info into an exported
--- CODE BLOCK 146 ---
next.config.mjs
--- END CODE BLOCK ---
object
app/layout.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 147 ---
/** @type {import('next').NextConfig} */
const nextConfig = {
output: 'export', // Outputs a Single-Page Application (SPA).
distDir: './dist', // Changes the build output directory to `./dist/`.
basePath: process.env.NEXT_PUBLIC_BASE_PATH, // Sets the base path to `/some-base-path`.
export default nextConfig
--- END CODE BLOCK ---
With the above changes, you shifted from declaring everything in your
--- CODE BLOCK 149 ---
import.meta.env.BASE_URL
--- END CODE BLOCK ---
to using Next.js'
convention-based approach built into the framework
Metadata API
). This approach enables you
to more easily improve your SEO and web shareability of your pages.
Step 5: Create the Entrypoint Page
On Next.js you declare an entrypoint for your application by creating a
--- CODE BLOCK 150 ---
process.env.NEXT_PUBLIC_BASE_PATH
--- END CODE BLOCK ---
file. The
closest equivalent of this file on Vite is your
--- CODE BLOCK 151 ---
package.json
--- END CODE BLOCK ---
file. In this step, you’ll set up the
entrypoint of your application.
Create a
--- CODE BLOCK 153 ---
package.json
--- END CODE BLOCK ---
directory in your
--- CODE BLOCK 155 ---
next-env.d.ts
--- END CODE BLOCK ---
directory.
Since in this guide we're aiming first to set up our Next.js as an SPA (Single Page Application), you need your page entrypoint to catch all possible routes of your application. For that, create a new
--- CODE BLOCK 157 ---
"scripts": {
"dev": "next dev",
"build": "next build",
"start": "next start"
--- END CODE BLOCK ---
directory in your
--- CODE BLOCK 158 ---
"scripts": {
"dev": "next dev",
"build": "next build",
"start": "next start"
--- END CODE BLOCK ---
directory.
This directory is what is called an
optional catch-all route segment
. Next.js uses a file-system based router where folders are used to define routes. This special directory will make sure that all routes of your application will be directed to its containing
--- CODE BLOCK 159 ---
# ...
.next
next-env.d.ts
dist
--- END CODE BLOCK ---
file.
Create a new
--- CODE BLOCK 160 ---
# ...
.next
next-env.d.ts
dist
--- END CODE BLOCK ---
file inside the
--- CODE BLOCK 161 ---
npm run dev
--- END CODE BLOCK ---
directory with the following content:
app/[[...slug]]/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 162 ---
http://localhost:3000
--- END CODE BLOCK ---
Good to know
--- CODE BLOCK 166 ---
tsconfig.node.json
--- END CODE BLOCK ---
--- CODE BLOCK 167 ---
vite.config.ts
--- END CODE BLOCK ---
, or
[CODE_BLOCK_90]
extensions can be used for Page files.
This file is a
Server Component
. When you run
[CODE_BLOCK_91]
, the file is prerendered into a static asset. It does
require any dynamic code.
This file imports our global CSS and tells
[CODE_BLOCK_92]
we are only going to generate one route, the index route at
[CODE_BLOCK_93]
Now, let's move the rest of our Vite application which will run client-only.
app/[[...slug]]/client.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_94]
This file is a
Client Component
, defined by the
[CODE_BLOCK_96]
directive. Client Components are still
prerendered to HTML
on the server before being sent to the client.
Since we want a client-only application to start, we can configure Next.js to disable prerendering from the
[CODE_BLOCK_97]
component down.
[CODE_BLOCK_98]
Now, update your entrypoint page to use the new component:
app/[[...slug]]/page.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_100]
Step 6: Update Static Image Imports
Next.js handles static image imports slightly different from Vite. With Vite, importing an image
file will return its public URL as a string:
App.tsx
[CODE_BLOCK_102]
With Next.js, static image imports return an object. The object can then be used directly with the
Next.js
[CODE_BLOCK_104]
component
, or you can use the object's
[CODE_BLOCK_105]
property with your existing
[CODE_BLOCK_106]
tag.
[CODE_BLOCK_107]
component has the added benefits of
automatic image optimization
. The
[CODE_BLOCK_108]
component automatically sets the
[CODE_BLOCK_109]
[CODE_BLOCK_110]
attributes of the resulting
[CODE_BLOCK_111]
based on
the image's dimensions. This prevents layout shifts when the image loads. However, this can cause
issues if your app contains images with only one of their dimensions being styled without the other
styled to
[CODE_BLOCK_112]
. When not styled to
[CODE_BLOCK_113]
, the dimension will default to the
[CODE_BLOCK_114]
dimension
attribute's value, which can cause the image to appear distorted.
Keeping the
[CODE_BLOCK_115]
tag will reduce the amount of changes in your application and prevent the above
issues. You can then optionally later migrate to the
[CODE_BLOCK_116]
component to take advantage of optimizing images by
configuring a loader
, or moving to the default Next.js server which has automatic image optimization.
Convert absolute import paths for images imported from
[CODE_BLOCK_117]
into relative imports:
[CODE_BLOCK_118]
Pass the image
[CODE_BLOCK_120]
property instead of the whole image object to your
[CODE_BLOCK_121]
tag:
[CODE_BLOCK_122]
Alternatively, you can reference the public URL for the image asset based on the filename. For example,
[CODE_BLOCK_124]
will serve the image at
[CODE_BLOCK_125]
for your application, which would be the
[CODE_BLOCK_126]
value.
Warning:
If you're using TypeScript, you might encounter type errors when accessing the
[CODE_BLOCK_127]
property. You can safely ignore those for now. They will be fixed by the end of this guide.
Step 7: Migrate the Environment Variables
Next.js has support for
[CODE_BLOCK_128]
environment variables
similar to Vite. The main difference is the prefix used to expose environment variables on the
client-side.
Change all environment variables with the
[CODE_BLOCK_129]
prefix to
[CODE_BLOCK_130]
Vite exposes a few built-in environment variables on the special
[CODE_BLOCK_131]
object which
aren’t supported by Next.js. You need to update their usage as follows:
[CODE_BLOCK_132]
[CODE_BLOCK_133]
[CODE_BLOCK_134]
[CODE_BLOCK_135]
[CODE_BLOCK_136]
[CODE_BLOCK_137]
[CODE_BLOCK_138]
[CODE_BLOCK_139]
Next.js also doesn't provide a built-in
[CODE_BLOCK_140]
environment variable. However, you can still
configure one, if you need it:
Add the following to your
[CODE_BLOCK_141]
file:
.env
[CODE_BLOCK_142]
[CODE_BLOCK_144]
[CODE_BLOCK_145]
in your
[CODE_BLOCK_146]
file:
next.config.mjs
[CODE_BLOCK_147]
Update
[CODE_BLOCK_149]
usages to
[CODE_BLOCK_150]
Step 8: Update Scripts in
[CODE_BLOCK_151]
You should now be able to run your application to test if you successfully migrated to Next.js. But
before that, you need to update your
[CODE_BLOCK_152]
in your
[CODE_BLOCK_153]
with Next.js related commands,
and add
[CODE_BLOCK_154]
[CODE_BLOCK_155]
to your
[CODE_BLOCK_156]
package.json
[CODE_BLOCK_157]
.gitignore
[CODE_BLOCK_159]
Now run
[CODE_BLOCK_161]
, and open
[CODE_BLOCK_162]
. You should see your application now running on Next.js.
Example:
Check out
this pull request
for a
working example of a Vite application migrated to Next.js.
Step 9: Clean Up
You can now clean up your codebase from Vite related artifacts:
Delete
[CODE_BLOCK_163]
Delete
[CODE_BLOCK_164]
Delete
[CODE_BLOCK_165]
Delete
[CODE_BLOCK_166]
Delete
[CODE_BLOCK_167]
Uninstall Vite dependencies
Next Steps
If everything went according to plan, you now have a functioning Next.js application running as a
single-page application. However, you aren't yet taking advantage of most of Next.js' benefits, but
you can now start making incremental changes to reap all the benefits. Here's what you might want to
do next:
Migrate from React Router to the
Next.js App Router
to get:
Automatic code splitting
Streaming Server-Rendering
React Server Components
Optimize images with the
[CODE_BLOCK_168]
component
Optimize fonts with
[CODE_BLOCK_169]
Optimize third-party scripts with the
[CODE_BLOCK_170]
component
Update your ESLint configuration to support Next.js rules
Was this helpful?
supported.
Send