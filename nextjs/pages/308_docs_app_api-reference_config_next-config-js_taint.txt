SOURCE URL: https://nextjs.org/docs/app/api-reference/config/next-config-js/taint
SCRAPED: 2025-06-19 17:45:40
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
Configuration
next.config.js
taint
taint
This feature is currently experimental and subject to change, it's not recommended for production. Try it out and share your feedback on
GitHub
Usage
--- CODE BLOCK 2 ---
experimental_taintObjectReference
--- END CODE BLOCK ---
option enables support for experimental React APIs for tainting objects and values. This feature helps prevent sensitive data from being accidentally passed to the client. When enabled, you can use:
--- CODE BLOCK 3 ---
experimental_taintUniqueValue
--- END CODE BLOCK ---
taint objects references.
--- CODE BLOCK 4 ---
experimental
--- END CODE BLOCK ---
to taint unique values.
Good to know
: Activating this flag also enables the React
--- CODE BLOCK 6 ---
import type { NextConfig } from 'next'
const nextConfig: NextConfig = {
experimental: {
taint: true,
export default nextConfig
--- END CODE BLOCK ---
channel for
--- CODE BLOCK 7 ---
import type { NextConfig } from 'next'
const nextConfig: NextConfig = {
experimental: {
taint: true,
export default nextConfig
--- END CODE BLOCK ---
directory.
next.config.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 8 ---
experimental_taintUniqueValue
--- END CODE BLOCK ---
Warning:
Do not rely on the taint API as your only mechanism to prevent exposing sensitive data to the client. See our
security recommendations
The taint APIs allows you to be defensive, by declaratively and explicitly marking data that is not allowed to pass through the Server-Client boundary. When an object or value, is passed through the Server-Client boundary, React throws an error.
This is helpful for cases where:
The methods to read data are out of your control
You have to work with sensitive data shapes not defined by you
Sensitive data is accessed during Server Component rendering
It is recommended to model your data and APIs so that sensitive data is not returned to contexts where it is not needed.
Caveats
Tainting can only keep track of objects by reference. Copying an object creates an untainted version, which loses all guarantees given by the API. You'll need to taint the copy.
Tainting cannot keep track of data derived from a tainted value. You also need to taint the derived value.
Values are tainted for as long as their lifetime reference is within scope. See the
--- CODE BLOCK 11 ---
import { experimental_taintObjectReference } from 'react'
function getUserDetails(id: string): UserDetails {
const user = await db.queryUserById(id)
experimental_taintObjectReference(
'Do not use the entire user info object. Instead, select only the fields you need.',
user
return user
--- END CODE BLOCK ---
parameters reference
, for more information.
Examples
Tainting an object reference
In this case, the
--- CODE BLOCK 12 ---
import { experimental_taintObjectReference } from 'react'
function getUserDetails(id: string): UserDetails {
const user = await db.queryUserById(id)
experimental_taintObjectReference(
'Do not use the entire user info object. Instead, select only the fields you need.',
user
return user
--- END CODE BLOCK ---
function returns data about a given user. We taint the user object reference, so that it cannot cross a Server-Client boundary. For example, assuming
--- CODE BLOCK 13 ---
userDetails
--- END CODE BLOCK ---
is a Client Component.
--- CODE BLOCK 14 ---
export async function ContactPage({
params,
}: {
params: Promise<{ id: string }>
}) {
const { id } = await params
const userDetails = await getUserDetails(id)
return (
<UserCard
firstName={userDetails.firstName}
lastName={userDetails.lastName}
--- END CODE BLOCK ---
We can still access individual fields from the tainted
--- CODE BLOCK 16 ---
export async function ContactPage({
params,
}: {
params: Promise<{ id: string }>
}) {
const userDetails = await getUserDetails(id)
// Throws an error
return <UserCard user={userDetails} />
--- END CODE BLOCK ---
object.
--- CODE BLOCK 17 ---
export async function ContactPage({
params,
}: {
params: Promise<{ id: string }>
}) {
const userDetails = await getUserDetails(id)
// Throws an error
return <UserCard user={userDetails} />
--- END CODE BLOCK ---
Now, passing the entire object to the Client Component will throw an error.
--- CODE BLOCK 19 ---
SERVICE_API_KEY
--- END CODE BLOCK ---
Tainting a unique value
In this case, we can access the server configuration by awaiting calls to
--- CODE BLOCK 21 ---
import { experimental_taintUniqueValue } from 'react'
function getSystemConfig(): SystemConfig {
const config = await config.getConfigDetails()
experimental_taintUniqueValue(
'Do not pass configuration tokens to the client',
config,
config.SERVICE_API_KEY
return config
--- END CODE BLOCK ---
. However, the system configuration contains the
--- CODE BLOCK 22 ---
import { experimental_taintUniqueValue } from 'react'
function getSystemConfig(): SystemConfig {
const config = await config.getConfigDetails()
experimental_taintUniqueValue(
'Do not pass configuration tokens to the client',
config,
config.SERVICE_API_KEY
return config
--- END CODE BLOCK ---
that we don't want to expose to clients.
We can taint the
--- CODE BLOCK 23 ---
systemConfig
--- END CODE BLOCK ---
value.
--- CODE BLOCK 24 ---
export async function Dashboard() {
const systemConfig = await getSystemConfig()
return <ClientDashboard version={systemConfig.SERVICE_API_VERSION} />
--- END CODE BLOCK ---
We can still access other properties of the
--- CODE BLOCK 26 ---
SERVICE_API_KEY
--- END CODE BLOCK ---
object.
--- CODE BLOCK 27 ---
ClientDashboard
--- END CODE BLOCK ---
However, passing
--- CODE BLOCK 29 ---
export async function Dashboard() {
const systemConfig = await getSystemConfig()
// Someone makes a mistake in a PR
const version = systemConfig.SERVICE_API_KEY
return <ClientDashboard version={version} />
--- END CODE BLOCK ---
--- CODE BLOCK 30 ---
systemConfig.SERVICE_API_KEY
--- END CODE BLOCK ---
throws an error.
--- CODE BLOCK 31 ---
export async function Dashboard() {
const systemConfig = await getSystemConfig()
// Someone makes a mistake in a PR
const version = `version::${systemConfig.SERVICE_API_KEY}`
return <ClientDashboard version={version} />
--- END CODE BLOCK ---
Note that, even though,
--- CODE BLOCK 33 ---
SERVICE_API_KEY
--- END CODE BLOCK ---
is reassigned to a new variable. Passing it to a Client Component still throws an error.
Whereas, a value derived from a tainted unique value, will be exposed to the client.
--- CODE BLOCK 34 ---
getSystemConfig
--- END CODE BLOCK ---
A better approach is to remove
[CODE_BLOCK_33]
from the data returned by
[CODE_BLOCK_34]
Was this helpful?
supported.
Send