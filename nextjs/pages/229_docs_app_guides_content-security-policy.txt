SOURCE URL: https://nextjs.org/docs/app/guides/content-security-policy
SCRAPED: 2025-06-19 17:36:13
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
App Router
Guides
Content Security Policy
How to set a Content Security Policy (CSP) for your Next.js application
Content Security Policy (CSP)
is important to guard your Next.js application against various security threats such as cross-site scripting (XSS), clickjacking, and other code injection attacks.
By using CSP, developers can specify which origins are permissible for content sources, scripts, stylesheets, images, fonts, objects, media (audio, video), iframes, and more.
Examples
Strict CSP
Nonces
nonce
is a unique, random string of characters created for a one-time use. It is used in conjunction with CSP to selectively allow certain inline scripts or styles to execute, bypassing strict CSP directives.
Why use a nonce?
Even though CSPs are designed to block malicious scripts, there are legitimate scenarios where inline scripts are necessary. In such cases, nonces offer a way to allow these scripts to execute if they have the correct nonce.
Adding a nonce with Middleware
Middleware
enables you to add headers and generate nonces before the page renders.
Every time a page is viewed, a fresh nonce should be generated. This means that you
must use dynamic rendering to add nonces
For example:
middleware.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 1 ---
import { NextRequest, NextResponse } from 'next/server'
export function middleware(request: NextRequest) {
const nonce = Buffer.from(crypto.randomUUID()).toString('base64')
const cspHeader = `
default-src 'self';
script-src 'self' 'nonce-${nonce}' 'strict-dynamic';
style-src 'self' 'nonce-${nonce}';
img-src 'self' blob: data:;
font-src 'self';
object-src 'none';
base-uri 'self';
form-action 'self';
frame-ancestors 'none';
upgrade-insecure-requests;
// Replace newline characters and spaces
const contentSecurityPolicyHeaderValue = cspHeader
.replace(/\s{2,}/g, ' ')
.trim()
const requestHeaders = new Headers(request.headers)
requestHeaders.set('x-nonce', nonce)
requestHeaders.set(
'Content-Security-Policy',
contentSecurityPolicyHeaderValue
const response = NextResponse.next({
request: {
headers: requestHeaders,
response.headers.set(
'Content-Security-Policy',
contentSecurityPolicyHeaderValue
return response
--- END CODE BLOCK ---
By default, Middleware runs on all requests. You can filter Middleware to run on specific paths using a
--- CODE BLOCK 5 ---
export const config = {
matcher: [
* Match all request paths except for the ones starting with:
* - api (API routes)
* - _next/static (static files)
* - _next/image (image optimization files)
* - favicon.ico (favicon file)
source: '/((?!api|_next/static|_next/image|favicon.ico).*)',
missing: [
{ type: 'header', key: 'next-router-prefetch' },
{ type: 'header', key: 'purpose', value: 'prefetch' },
--- END CODE BLOCK ---
We recommend ignoring matching prefetches (from
--- CODE BLOCK 6 ---
export const config = {
matcher: [
* Match all request paths except for the ones starting with:
* - api (API routes)
* - _next/static (static files)
* - _next/image (image optimization files)
* - favicon.ico (favicon file)
source: '/((?!api|_next/static|_next/image|favicon.ico).*)',
missing: [
{ type: 'header', key: 'next-router-prefetch' },
{ type: 'header', key: 'purpose', value: 'prefetch' },
--- END CODE BLOCK ---
) and static assets that don't need the CSP header.
middleware.ts
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 8 ---
import { headers } from 'next/headers'
import Script from 'next/script'
export default async function Page() {
const nonce = (await headers()).get('x-nonce')
return (
<Script
src="https://www.googletagmanager.com/gtag/js"
strategy="afterInteractive"
nonce={nonce}
--- END CODE BLOCK ---
Reading the nonce
You can read the nonce from a
Server Component
using
--- CODE BLOCK 10 ---
next.config.js
--- END CODE BLOCK ---
app/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 11 ---
const cspHeader = `
default-src 'self';
script-src 'self' 'unsafe-eval' 'unsafe-inline';
style-src 'self' 'unsafe-inline';
img-src 'self' blob: data:;
font-src 'self';
object-src 'none';
base-uri 'self';
form-action 'self';
frame-ancestors 'none';
upgrade-insecure-requests;
module.exports = {
async headers() {
return [
source: '/(.*)',
headers: [
key: 'Content-Security-Policy',
value: cspHeader.replace(/\n/g, ''),
--- END CODE BLOCK ---
Without Nonces
For applications that do not require nonces, you can set the CSP header directly in your
[CODE_BLOCK_10]
file:
next.config.js
[CODE_BLOCK_11]
Version History
We recommend using
[CODE_BLOCK_13]
of Next.js to properly handle and apply nonces.
Next Steps
middleware.js
API reference for the middleware.js file.
headers
API reference for the headers function.
Was this helpful?
supported.
Send