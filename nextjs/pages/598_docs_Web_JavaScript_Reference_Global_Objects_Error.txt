SOURCE URL: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Error
SCRAPED: 2025-06-19 18:18:12
================================================================================

--- CODE BLOCK 5 ---
structuredClone()
--- END CODE BLOCK ---
objects are thrown when runtime errors occur. The
--- CODE BLOCK 6 ---
postMessage()
--- END CODE BLOCK ---
object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.
Description
Runtime errors result in new
--- CODE BLOCK 11 ---
ReferenceError
--- END CODE BLOCK ---
objects being created and thrown.
--- CODE BLOCK 12 ---
SyntaxError
--- END CODE BLOCK ---
is a
serializable object
, so it can be cloned with
--- CODE BLOCK 15 ---
encodeURI()
--- END CODE BLOCK ---
or copied between
Workers
using
--- CODE BLOCK 16 ---
decodeURI()
--- END CODE BLOCK ---
Error types
Besides the generic
--- CODE BLOCK 17 ---
AggregateError
--- END CODE BLOCK ---
constructor, there are other core error constructors in JavaScript. For client-side exceptions, see
Exception handling statements
--- CODE BLOCK 18 ---
Promise.any()
--- END CODE BLOCK ---
Creates an instance representing an error that occurs regarding the global function
--- CODE BLOCK 19 ---
InternalError
--- END CODE BLOCK ---
--- CODE BLOCK 22 ---
Error.stackTraceLimit
--- END CODE BLOCK ---
Creates an instance representing an error that occurs when a numeric variable or parameter is outside its valid range.
--- CODE BLOCK 23 ---
Error.captureStackTrace()
--- END CODE BLOCK ---
Creates an instance representing an error that occurs when de-referencing an invalid reference.
--- CODE BLOCK 25 ---
Error.isError()
--- END CODE BLOCK ---
Creates an instance representing a syntax error.
--- CODE BLOCK 28 ---
Error.prepareStackTrace()
--- END CODE BLOCK ---
Creates an instance representing an error that occurs when a variable or parameter is not of a valid type.
--- CODE BLOCK 29 ---
Error.prototype
--- END CODE BLOCK ---
Creates an instance representing an error that occurs when
--- CODE BLOCK 31 ---
Error.prototype.constructor
--- END CODE BLOCK ---
--- CODE BLOCK 34 ---
Error.prototype.name
--- END CODE BLOCK ---
are passed invalid parameters.
--- CODE BLOCK 35 ---
Error.prototype.name
--- END CODE BLOCK ---
Creates an instance representing several errors wrapped in a single error when multiple errors need to be reported by an operation, for example by
--- CODE BLOCK 38 ---
SyntaxError
--- END CODE BLOCK ---
--- CODE BLOCK 40 ---
Error.prototype.stack
--- END CODE BLOCK ---
Non-standard
Creates an instance representing an error that occurs when an internal error in the JavaScript engine is thrown. E.g. "too much recursion".
Constructor
--- CODE BLOCK 45 ---
columnNumber
--- END CODE BLOCK ---
Creates a new
--- CODE BLOCK 50 ---
Error.prototype.toString()
--- END CODE BLOCK ---
object.
Static properties
--- CODE BLOCK 51 ---
Object.prototype.toString()
--- END CODE BLOCK ---
Non-standard
A non-standard numerical property that limits how many stack frames to include in an error stack trace.
Static methods
--- CODE BLOCK 54 ---
try...catch
--- END CODE BLOCK ---
A non-standard function that creates the
--- CODE BLOCK 55 ---
try {
throw new Error("Whoops!");
} catch (e) {
console.error(`${e.name}: ${e.message}`);
--- END CODE BLOCK ---
property on the provided object.
--- CODE BLOCK 56 ---
try {
throw new Error("Whoops!");
} catch (e) {
console.error(`${e.name}: ${e.message}`);
--- END CODE BLOCK ---
Returns
--- CODE BLOCK 58 ---
try {
foo.bar();
} catch (e) {
if (e instanceof EvalError) {
console.error(`${e.name}: ${e.message}`);
} else if (e instanceof RangeError) {
console.error(`${e.name}: ${e.message}`);
// etc.
else {
// If none of our cases matched leave the Error unhandled
throw e;
--- END CODE BLOCK ---
if the argument is an error, or
--- CODE BLOCK 59 ---
try {
foo.bar();
} catch (e) {
if (e instanceof EvalError) {
console.error(`${e.name}: ${e.message}`);
} else if (e instanceof RangeError) {
console.error(`${e.name}: ${e.message}`);
// etc.
else {
// If none of our cases matched leave the Error unhandled
throw e;
--- END CODE BLOCK ---
otherwise.
--- CODE BLOCK 64 ---
doFailSomeWay()
--- END CODE BLOCK ---
Non-standard
Optional
A non-standard function that, if provided by user code, is called by the JavaScript engine for thrown exceptions, allowing the user to provide custom formatting for stack traces. See the
V8 Stack Trace API
docs.
Instance properties
These properties are defined on
--- CODE BLOCK 65 ---
doFailAnotherWay()
--- END CODE BLOCK ---
and shared by all
--- CODE BLOCK 66 ---
function doWork() {
try {
doFailSomeWay();
} catch (err) {
throw new Error("Failed in some way", { cause: err });
try {
doFailAnotherWay();
} catch (err) {
throw new Error("Failed in another way", { cause: err });
try {
doWork();
} catch (err) {
switch (err.message) {
case "Failed in some way":
handleFailSomeWay(err.cause);
break;
case "Failed in another way":
handleFailAnotherWay(err.cause);
break;
--- END CODE BLOCK ---
instances.
--- CODE BLOCK 67 ---
function doWork() {
try {
doFailSomeWay();
} catch (err) {
throw new Error("Failed in some way", { cause: err });
try {
doFailAnotherWay();
} catch (err) {
throw new Error("Failed in another way", { cause: err });
try {
doWork();
} catch (err) {
switch (err.message) {
case "Failed in some way":
handleFailSomeWay(err.cause);
break;
case "Failed in another way":
handleFailAnotherWay(err.cause);
break;
--- END CODE BLOCK ---
The constructor function that created the instance object. For
--- CODE BLOCK 72 ---
options.cause
--- END CODE BLOCK ---
instances, the initial value is the
--- CODE BLOCK 74 ---
class MyError extends Error {
constructor(message, options) {
// Need to pass `options` as the second parameter to install the "cause" property.
super(message, options);
console.log(new MyError("test", { cause: new Error("cause") }).cause);
// Error: cause
--- END CODE BLOCK ---
constructor.
--- CODE BLOCK 75 ---
class MyError extends Error {
constructor(message, options) {
// Need to pass `options` as the second parameter to install the "cause" property.
super(message, options);
console.log(new MyError("test", { cause: new Error("cause") }).cause);
// Error: cause
--- END CODE BLOCK ---
Represents the name for the type of error. For
--- CODE BLOCK 77 ---
throw new MyError()
--- END CODE BLOCK ---
, the initial value is
--- CODE BLOCK 78 ---
instanceof MyError
--- END CODE BLOCK ---
. Subclasses like
--- CODE BLOCK 80 ---
Reflect.construct()
--- END CODE BLOCK ---
--- CODE BLOCK 81 ---
Object.setPrototypeOf(this, CustomError.prototype)
--- END CODE BLOCK ---
provide their own
--- CODE BLOCK 82 ---
CustomError
--- END CODE BLOCK ---
properties.
--- CODE BLOCK 83 ---
CustomError
--- END CODE BLOCK ---
Non-standard
A non-standard property for a stack trace.
These properties are own properties of each
--- CODE BLOCK 84 ---
class CustomError extends Error {
constructor(foo = "bar", ...params) {
// Pass remaining arguments (including vendor specific ones) to parent constructor
super(...params);
// Maintains proper stack trace for where our error was thrown (non-standard)
if (Error.captureStackTrace) {
Error.captureStackTrace(this, CustomError);
this.name = "CustomError";
// Custom debugging information
this.foo = foo;
this.date = new Date();
try {
throw new CustomError("baz", "bazMessage");
} catch (e) {
console.error(e.name); // CustomError
console.error(e.foo); // baz
console.error(e.message); // bazMessage
console.error(e.stack); // stack trace
--- END CODE BLOCK ---
instance.
--- CODE BLOCK 85 ---
class CustomError extends Error {
constructor(foo = "bar", ...params) {
// Pass remaining arguments (including vendor specific ones) to parent constructor
super(...params);
// Maintains proper stack trace for where our error was thrown (non-standard)
if (Error.captureStackTrace) {
Error.captureStackTrace(this, CustomError);
this.name = "CustomError";
// Custom debugging information
this.foo = foo;
this.date = new Date();
try {
throw new CustomError("baz", "bazMessage");
} catch (e) {
console.error(e.name); // CustomError
console.error(e.foo); // baz
console.error(e.message); // bazMessage
console.error(e.stack); // stack trace
--- END CODE BLOCK ---
Error cause indicating the reason why the current error is thrown â€” usually another caught error. For user-created
--- CODE BLOCK 91 ---
try...catch
--- END CODE BLOCK ---
objects, this is the value provided as the
[CODE_BLOCK_44]
property of the constructor's second argument.
[CODE_BLOCK_45]
Non-standard
A non-standard Mozilla property for the column number in the line that raised this error.
[CODE_BLOCK_46]
Non-standard
A non-standard Mozilla property for the path to the file that raised this error.
[CODE_BLOCK_47]
Non-standard
A non-standard Mozilla property for the line number in the file that raised this error.
[CODE_BLOCK_48]
Error message. For user-created
[CODE_BLOCK_49]
objects, this is the string provided as the constructor's first argument.
Instance methods
[CODE_BLOCK_50]
Returns a string representing the specified object. Overrides the
[CODE_BLOCK_51]
method.
Examples
Throwing a generic error
Usually you create an
[CODE_BLOCK_52]
object with the intention of raising it using the
[CODE_BLOCK_53]
keyword.
You can handle the error using the
[CODE_BLOCK_54]
construct:
Copy to Clipboard
[CODE_BLOCK_55]
Handling a specific error type
You can choose to handle only specific error types by testing the error type with the
[CODE_BLOCK_57]
keyword:
Copy to Clipboard
[CODE_BLOCK_58]
Differentiate between similar errors
Sometimes a block of code can fail for reasons that require different handling, but which throw very similar errors (i.e., with the same type and message).
If you don't have control over the original errors that are thrown, one option is to catch them and throw new
[CODE_BLOCK_60]
objects that have more specific messages.
The original error should be passed to the new
[CODE_BLOCK_61]
in the constructor's
[CODE_BLOCK_62]
parameter as its
[CODE_BLOCK_63]
property. This ensures that the original error and stack trace are available to higher-level try/catch blocks.
The example below shows this for two methods that would otherwise fail with similar errors (
[CODE_BLOCK_64]
[CODE_BLOCK_65]
Copy to Clipboard
[CODE_BLOCK_66]
Note:
If you are making a library, you should prefer to use error cause to discriminate between different errors emitted â€” rather than asking your consumers to parse the error message. See the
error cause page
for an example.
Custom error types
can also use the
[CODE_BLOCK_68]
property, provided the subclasses' constructor passes the
[CODE_BLOCK_69]
parameter when calling
[CODE_BLOCK_70]
. The
[CODE_BLOCK_71]
base class constructor will read
[CODE_BLOCK_72]
and define the
[CODE_BLOCK_73]
property on the new error instance.
Copy to Clipboard
[CODE_BLOCK_74]
Custom error types
You might want to define your own error types deriving from
[CODE_BLOCK_76]
to be able to
[CODE_BLOCK_77]
and use
[CODE_BLOCK_78]
to check the kind of error in the exception handler. This results in cleaner and more consistent error handling code.
"What's a good way to extend Error in JavaScript?"
on Stack Overflow for an in-depth discussion.
Warning:
Builtin subclassing cannot be reliably transpiled to pre-ES6 code, because there's no way to construct the base class with a particular
[CODE_BLOCK_79]
without
[CODE_BLOCK_80]
. You need
additional configuration
or manually call
[CODE_BLOCK_81]
at the end of the constructor; otherwise, the constructed instance will not be a
[CODE_BLOCK_82]
instance. See
the TypeScript FAQ
for more information.
Note:
Some browsers include the
[CODE_BLOCK_83]
constructor in the stack trace when using ES2015 classes.
Copy to Clipboard
[CODE_BLOCK_84]
Specifications
Specification
ECMAScriptÂ® 2026 LanguageÂ Specification
sec-error-objects
Browser compatibility
See also
Polyfill of
[CODE_BLOCK_86]
with
[CODE_BLOCK_87]
support in
[CODE_BLOCK_88]
es-shims polyfill of Error
[CODE_BLOCK_89]
[CODE_BLOCK_90]
[CODE_BLOCK_91]
Stack trace API
in the V8 docs
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
Apr 8, 2025
MDN contributors
View this page on GitHub
Report a problem with this content