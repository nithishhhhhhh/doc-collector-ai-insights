SOURCE URL: https://nextjs.org/docs/app/guides/package-bundling#analyzing-javascript-bundles
SCRAPED: 2025-06-19 18:00:37
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
App Router
Guides
Package Bundling
How to optimize package bundling
Bundling external packages can significantly improve the performance of your application.
By default, packages imported inside Server Components and Route Handlers are automatically bundled by Next.js. This page will guide you through how to analyze and further optimize package bundling.
Analyzing JavaScript bundles
--- CODE BLOCK 1 ---
@next/bundle-analyzer
--- END CODE BLOCK ---
is a plugin for Next.js that helps you manage the size of your application bundles. It generates a visual report of the size of each package and their dependencies. You can use the information to remove large dependencies, split, or
lazy-load
your code.
Installation
Install the plugin by running the following command:
--- CODE BLOCK 2 ---
npm i @next/bundle-analyzer
# or
yarn add @next/bundle-analyzer
# or
pnpm add @next/bundle-analyzer
--- END CODE BLOCK ---
Then, add the bundle analyzer's settings to your
--- CODE BLOCK 4 ---
next.config.js
--- END CODE BLOCK ---
next.config.js
--- CODE BLOCK 5 ---
/** @type {import('next').NextConfig} */
const nextConfig = {}
const withBundleAnalyzer = require('@next/bundle-analyzer')({
enabled: process.env.ANALYZE === 'true',
module.exports = withBundleAnalyzer(nextConfig)
--- END CODE BLOCK ---
Generating a report
Run the following command to analyze your bundles:
--- CODE BLOCK 7 ---
ANALYZE=true npm run build
# or
ANALYZE=true yarn build
# or
ANALYZE=true pnpm build
--- END CODE BLOCK ---
The report will open three new tabs in your browser, which you can inspect. Periodically evaluating your application's bundles can help you maintain application performance over time.
Optimizing package imports
Some packages, such as icon libraries, can export hundreds of modules, which can cause performance issues in development and production.
You can optimize how these packages are imported by adding the
--- CODE BLOCK 9 ---
optimizePackageImports
--- END CODE BLOCK ---
option to your
--- CODE BLOCK 10 ---
next.config.js
--- END CODE BLOCK ---
. This option will only load the modules you
actually
use, while still giving you the convenience of writing import statements with many named exports.
next.config.js
--- CODE BLOCK 11 ---
/** @type {import('next').NextConfig} */
const nextConfig = {
experimental: {
optimizePackageImports: ['icon-library'],
module.exports = nextConfig
--- END CODE BLOCK ---
Next.js also optimizes some libraries automatically, thus they do not need to be included in the optimizePackageImports list. See the
full list
Opting specific packages out of bundling
Since packages imported inside Server Components and Route Handlers are automatically bundled by Next.js, you can opt specific packages out of bundling using the
--- CODE BLOCK 13 ---
serverExternalPackages
--- END CODE BLOCK ---
option in your
--- CODE BLOCK 14 ---
next.config.js
--- END CODE BLOCK ---
next.config.js
--- CODE BLOCK 15 ---
/** @type {import('next').NextConfig} */
const nextConfig = {
serverExternalPackages: ['package-name'],
module.exports = nextConfig
--- END CODE BLOCK ---
Next.js includes a list of popular packages that currently are working on compatibility and automatically opt-ed out. See the
full list
Next Steps
Learn more about optimizing your application for production.
Production
Recommendations to ensure the best performance and user experience before taking your Next.js application to production.
Was this helpful?
supported.
Send