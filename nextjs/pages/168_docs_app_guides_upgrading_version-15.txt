SOURCE URL: https://nextjs.org/docs/app/guides/upgrading/version-15
SCRAPED: 2025-06-19 17:28:55
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
Guides
Upgrading
Version 15
How to upgrade to version 15
Upgrading from 14 to 15
To update to Next.js version 15, you can use the
--- CODE BLOCK 2 ---
npx @next/codemod@canary upgrade latest
--- END CODE BLOCK ---
codemod:
Terminal
--- CODE BLOCK 3 ---
npx @next/codemod@canary upgrade latest
--- END CODE BLOCK ---
If you prefer to do it manually, ensure that you're installing the latest Next & React versions:
Terminal
--- CODE BLOCK 5 ---
npm i next@latest react@latest react-dom@latest eslint-config-next@latest
--- END CODE BLOCK ---
Good to know:
If you see a peer dependencies warning, you may need to update
--- CODE BLOCK 12 ---
useFormState
--- END CODE BLOCK ---
--- CODE BLOCK 13 ---
useActionState
--- END CODE BLOCK ---
to the suggested versions, or you use the
--- CODE BLOCK 14 ---
useFormState
--- END CODE BLOCK ---
--- CODE BLOCK 15 ---
useActionState
--- END CODE BLOCK ---
flag to ignore the warning. This won't be necessary once both Next.js 15 and React 19 are stable.
React 19
The minimum versions of
--- CODE BLOCK 17 ---
useFormStatus
--- END CODE BLOCK ---
--- CODE BLOCK 22 ---
@types/react
--- END CODE BLOCK ---
is now 19.
--- CODE BLOCK 23 ---
@types/react-dom
--- END CODE BLOCK ---
has been replaced by
--- CODE BLOCK 32 ---
opengraph-image
--- END CODE BLOCK ---
. The
--- CODE BLOCK 33 ---
twitter-image
--- END CODE BLOCK ---
hook is still available in React 19, but it is deprecated and will be removed in a future release.
--- CODE BLOCK 36 ---
searchParams
--- END CODE BLOCK ---
is recommended and includes additional properties like reading the
--- CODE BLOCK 39 ---
import { cookies } from 'next/headers'
// Before
const cookieStore = cookies()
const token = cookieStore.get('token')
// After
const cookieStore = await cookies()
const token = cookieStore.get('token')
--- END CODE BLOCK ---
state directly.
Learn more
--- CODE BLOCK 40 ---
import { cookies } from 'next/headers'
// Before
const cookieStore = cookies()
const token = cookieStore.get('token')
// After
const cookieStore = await cookies()
const token = cookieStore.get('token')
--- END CODE BLOCK ---
now includes additional keys like
--- CODE BLOCK 41 ---
import { cookies, type UnsafeUnwrappedCookies } from 'next/headers'
// Before
const cookieStore = cookies()
const token = cookieStore.get('token')
// After
const cookieStore = cookies() as unknown as UnsafeUnwrappedCookies
// will log a warning in dev
const token = cookieStore.get('token')
--- END CODE BLOCK ---
--- CODE BLOCK 42 ---
import { cookies, type UnsafeUnwrappedCookies } from 'next/headers'
// Before
const cookieStore = cookies()
const token = cookieStore.get('token')
// After
const cookieStore = cookies() as unknown as UnsafeUnwrappedCookies
// will log a warning in dev
const token = cookieStore.get('token')
--- END CODE BLOCK ---
, and
--- CODE BLOCK 44 ---
import { headers } from 'next/headers'
// Before
const headersList = headers()
const userAgent = headersList.get('user-agent')
// After
const headersList = await headers()
const userAgent = headersList.get('user-agent')
--- END CODE BLOCK ---
. If you are not using React 19, only the
--- CODE BLOCK 45 ---
import { headers } from 'next/headers'
// Before
const headersList = headers()
const userAgent = headersList.get('user-agent')
// After
const headersList = await headers()
const userAgent = headersList.get('user-agent')
--- END CODE BLOCK ---
key is available.
Learn more
Read more in the
React 19 upgrade guide
Good to know:
If you are using TypeScript, ensure you also upgrade
--- CODE BLOCK 46 ---
import { headers, type UnsafeUnwrappedHeaders } from 'next/headers'
// Before
const headersList = headers()
const userAgent = headersList.get('user-agent')
// After
const headersList = headers() as unknown as UnsafeUnwrappedHeaders
// will log a warning in dev
const userAgent = headersList.get('user-agent')
--- END CODE BLOCK ---
--- CODE BLOCK 47 ---
import { headers, type UnsafeUnwrappedHeaders } from 'next/headers'
// Before
const headersList = headers()
const userAgent = headersList.get('user-agent')
// After
const headersList = headers() as unknown as UnsafeUnwrappedHeaders
// will log a warning in dev
const userAgent = headersList.get('user-agent')
--- END CODE BLOCK ---
to their latest versions.
Async Request APIs (Breaking change)
Previously synchronous Dynamic APIs that rely on runtime information are now
asynchronous
--- CODE BLOCK 49 ---
import { draftMode } from 'next/headers'
// Before
const { isEnabled } = draftMode()
// After
const { isEnabled } = await draftMode()
--- END CODE BLOCK ---
--- CODE BLOCK 50 ---
import { draftMode } from 'next/headers'
// Before
const { isEnabled } = draftMode()
// After
const { isEnabled } = await draftMode()
--- END CODE BLOCK ---
--- CODE BLOCK 51 ---
import { draftMode, type UnsafeUnwrappedDraftMode } from 'next/headers'
// Before
const { isEnabled } = draftMode()
// After
// will log a warning in dev
const { isEnabled } = draftMode() as unknown as UnsafeUnwrappedDraftMode
--- END CODE BLOCK ---
--- CODE BLOCK 52 ---
import { draftMode, type UnsafeUnwrappedDraftMode } from 'next/headers'
// Before
const { isEnabled } = draftMode()
// After
// will log a warning in dev
const { isEnabled } = draftMode() as unknown as UnsafeUnwrappedDraftMode
--- END CODE BLOCK ---
--- CODE BLOCK 54 ---
searchParams
--- END CODE BLOCK ---
--- CODE BLOCK 55 ---
// Before
type Params = { slug: string }
export function generateMetadata({ params }: { params: Params }) {
const { slug } = params
export default async function Layout({
children,
params,
}: {
children: React.ReactNode
params: Params
}) {
const { slug } = params
// After
type Params = Promise<{ slug: string }>
export async function generateMetadata({ params }: { params: Params }) {
const { slug } = await params
export default async function Layout({
children,
params,
}: {
children: React.ReactNode
params: Params
}) {
const { slug } = await params
--- END CODE BLOCK ---
--- CODE BLOCK 56 ---
// Before
type Params = { slug: string }
export function generateMetadata({ params }: { params: Params }) {
const { slug } = params
export default async function Layout({
children,
params,
}: {
children: React.ReactNode
params: Params
}) {
const { slug } = params
// After
type Params = Promise<{ slug: string }>
export async function generateMetadata({ params }: { params: Params }) {
const { slug } = await params
export default async function Layout({
children,
params,
}: {
children: React.ReactNode
params: Params
}) {
const { slug } = await params
--- END CODE BLOCK ---
--- CODE BLOCK 57 ---
// Before
type Params = { slug: string }
export default function Layout({
children,
params,
}: {
children: React.ReactNode
params: Params
}) {
const { slug } = params
// After
import { use } from 'react'
type Params = Promise<{ slug: string }>
export default function Layout(props: {
children: React.ReactNode
params: Params
}) {
const params = use(props.params)
const slug = params.slug
--- END CODE BLOCK ---
--- CODE BLOCK 58 ---
// Before
type Params = { slug: string }
export default function Layout({
children,
params,
}: {
children: React.ReactNode
params: Params
}) {
const { slug } = params
// After
import { use } from 'react'
type Params = Promise<{ slug: string }>
export default function Layout(props: {
children: React.ReactNode
params: Params
}) {
const params = use(props.params)
const slug = params.slug
--- END CODE BLOCK ---
--- CODE BLOCK 59 ---
// Before
type Params = { slug: string }
type SearchParams = { [key: string]: string | string[] | undefined }
export function generateMetadata({
params,
searchParams,
}: {
params: Params
searchParams: SearchParams
}) {
const { slug } = params
const { query } = searchParams
export default async function Page({
params,
searchParams,
}: {
params: Params
searchParams: SearchParams
}) {
const { slug } = params
const { query } = searchParams
// After
type Params = Promise<{ slug: string }>
type SearchParams = Promise<{ [key: string]: string | string[] | undefined }>
export async function generateMetadata(props: {
params: Params
searchParams: SearchParams
}) {
const params = await props.params
const searchParams = await props.searchParams
const slug = params.slug
const query = searchParams.query
export default async function Page(props: {
params: Params
searchParams: SearchParams
}) {
const params = await props.params
const searchParams = await props.searchParams
const slug = params.slug
const query = searchParams.query
--- END CODE BLOCK ---
--- CODE BLOCK 60 ---
// Before
type Params = { slug: string }
type SearchParams = { [key: string]: string | string[] | undefined }
export function generateMetadata({
params,
searchParams,
}: {
params: Params
searchParams: SearchParams
}) {
const { slug } = params
const { query } = searchParams
export default async function Page({
params,
searchParams,
}: {
params: Params
searchParams: SearchParams
}) {
const { slug } = params
const { query } = searchParams
// After
type Params = Promise<{ slug: string }>
type SearchParams = Promise<{ [key: string]: string | string[] | undefined }>
export async function generateMetadata(props: {
params: Params
searchParams: SearchParams
}) {
const params = await props.params
const searchParams = await props.searchParams
const slug = params.slug
const query = searchParams.query
export default async function Page(props: {
params: Params
searchParams: SearchParams
}) {
const params = await props.params
const searchParams = await props.searchParams
const slug = params.slug
const query = searchParams.query
--- END CODE BLOCK ---
, and
--- CODE BLOCK 61 ---
'use client'
// Before
type Params = { slug: string }
type SearchParams = { [key: string]: string | string[] | undefined }
export default function Page({
params,
searchParams,
}: {
params: Params
searchParams: SearchParams
}) {
const { slug } = params
const { query } = searchParams
// After
import { use } from 'react'
type Params = Promise<{ slug: string }>
type SearchParams = Promise<{ [key: string]: string | string[] | undefined }>
export default function Page(props: {
params: Params
searchParams: SearchParams
}) {
const params = use(props.params)
const searchParams = use(props.searchParams)
const slug = params.slug
const query = searchParams.query
--- END CODE BLOCK ---
--- CODE BLOCK 62 ---
'use client'
// Before
type Params = { slug: string }
type SearchParams = { [key: string]: string | string[] | undefined }
export default function Page({
params,
searchParams,
}: {
params: Params
searchParams: SearchParams
}) {
const { slug } = params
const { query } = searchParams
// After
import { use } from 'react'
type Params = Promise<{ slug: string }>
type SearchParams = Promise<{ [key: string]: string | string[] | undefined }>
export default function Page(props: {
params: Params
searchParams: SearchParams
}) {
const params = use(props.params)
const searchParams = use(props.searchParams)
const slug = params.slug
const query = searchParams.query
--- END CODE BLOCK ---
--- CODE BLOCK 63 ---
// Before
export default function Page({ params, searchParams }) {
const { slug } = params
const { query } = searchParams
// After
import { use } from "react"
export default function Page(props) {
const params = use(props.params)
const searchParams = use(props.searchParams)
const slug = params.slug
const query = searchParams.query
--- END CODE BLOCK ---
To ease the burden of migration, a
codemod is available
to automate the process and the APIs can temporarily be accessed synchronously.
--- CODE BLOCK 64 ---
// Before
export default function Page({ params, searchParams }) {
const { slug } = params
const { query } = searchParams
// After
import { use } from "react"
export default function Page(props) {
const params = use(props.params)
const searchParams = use(props.searchParams)
const slug = params.slug
const query = searchParams.query
--- END CODE BLOCK ---
Recommended Async Usage
--- CODE BLOCK 65 ---
// Before
type Params = { slug: string }
export async function GET(request: Request, segmentData: { params: Params }) {
const params = segmentData.params
const slug = params.slug
// After
type Params = Promise<{ slug: string }>
export async function GET(request: Request, segmentData: { params: Params }) {
const params = await segmentData.params
const slug = params.slug
--- END CODE BLOCK ---
Temporary Synchronous Usage
app/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 67 ---
// Before
export async function GET(request, segmentData) {
const params = segmentData.params
const slug = params.slug
// After
export async function GET(request, segmentData) {
const params = await segmentData.params
const slug = params.slug
--- END CODE BLOCK ---
--- CODE BLOCK 71 ---
experimental-edge
--- END CODE BLOCK ---
Recommended Async Usage
--- CODE BLOCK 73 ---
experimental-edge
--- END CODE BLOCK ---
Temporary Synchronous Usage
app/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 80 ---
export default async function RootLayout() {
const a = await fetch('https://...') // Not Cached
const b = await fetch('https://...', { cache: 'force-cache' }) // Cached
// ...
--- END CODE BLOCK ---
--- CODE BLOCK 83 ---
export const fetchCache = 'default-cache'
--- END CODE BLOCK ---
Recommended Async Usage
--- CODE BLOCK 86 ---
// Since this is the root layout, all fetch requests in the app
// that don't set their own cache option will be cached.
export const fetchCache = 'default-cache'
export default async function RootLayout() {
const a = await fetch('https://...') // Cached
const b = await fetch('https://...', { cache: 'no-store' }) // Not cached
// ...
--- END CODE BLOCK ---
Temporary Synchronous Usage
app/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 90 ---
export const dynamic = 'force-static'
--- END CODE BLOCK ---
--- CODE BLOCK 92 ---
export const dynamic = 'force-static'
export async function GET() {}
--- END CODE BLOCK ---
--- CODE BLOCK 96 ---
/** @type {import('next').NextConfig} */
const nextConfig = {
experimental: {
staleTimes: {
dynamic: 30,
static: 180,
module.exports = nextConfig
--- END CODE BLOCK ---
Asynchronous Layout
app/layout.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 97 ---
/** @type {import('next').NextConfig} */
const nextConfig = {
experimental: {
staleTimes: {
dynamic: 30,
static: 180,
module.exports = nextConfig
--- END CODE BLOCK ---
Synchronous Layout
app/layout.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 102 ---
// Before
import { Inter } from '@next/font/google'
// After
import { Inter } from 'next/font/google'
--- END CODE BLOCK ---
Asynchronous Page
app/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 104 ---
bundlePagesRouterDependencies
--- END CODE BLOCK ---
Synchronous Page
--- CODE BLOCK 106 ---
/** @type {import('next').NextConfig} */
const nextConfig = {
// Before
experimental: {
bundlePagesExternals: true,
// After
bundlePagesRouterDependencies: true,
module.exports = nextConfig
--- END CODE BLOCK ---
--- CODE BLOCK 108 ---
serverExternalPackages
--- END CODE BLOCK ---
Route Handlers
app/api/route.ts
--- CODE BLOCK 110 ---
/** @type {import('next').NextConfig} */
const nextConfig = {
// Before
experimental: {
serverComponentsExternalPackages: ['package-name'],
// After
serverExternalPackages: ['package-name'],
module.exports = nextConfig
--- END CODE BLOCK ---
app/api/route.js
--- CODE BLOCK 114 ---
NextRequest
--- END CODE BLOCK ---
--- CODE BLOCK 117 ---
@vercel/functions
--- END CODE BLOCK ---
configuration (Breaking change)
--- CODE BLOCK 118 ---
import { geolocation } from '@vercel/functions'
import type { NextRequest } from 'next/server'
export function middleware(request: NextRequest) {
const { city } = geolocation(request)
// ...
--- END CODE BLOCK ---
segment configuration
previously supported a value of
--- CODE BLOCK 119 ---
import { geolocation } from '@vercel/functions'
import type { NextRequest } from 'next/server'
export function middleware(request: NextRequest) {
const { city } = geolocation(request)
// ...
--- END CODE BLOCK ---
in addition to
--- CODE BLOCK 120 ---
import { ipAddress } from '@vercel/functions'
import type { NextRequest } from 'next/server'
export function middleware(request: NextRequest) {
const ip = ipAddress(request)
// ...
--- END CODE BLOCK ---
. Both configurations refer to the same thing, and to simplify the options, we will now error if
--- CODE BLOCK 121 ---
import { ipAddress } from '@vercel/functions'
import type { NextRequest } from 'next/server'
export function middleware(request: NextRequest) {
const ip = ipAddress(request)
// ...
--- END CODE BLOCK ---
is used. To fix this, update your
[CODE_BLOCK_74]
configuration to
[CODE_BLOCK_75]
codemod
is available to automatically do this.
[CODE_BLOCK_76]
requests
[CODE_BLOCK_77]
requests
are no longer cached by default.
To opt specific
[CODE_BLOCK_78]
requests into caching, you can pass the
[CODE_BLOCK_79]
option.
app/layout.js
[CODE_BLOCK_80]
To opt all
[CODE_BLOCK_82]
requests in a layout or page into caching, you can use the
[CODE_BLOCK_83]
segment config option
. If individual
[CODE_BLOCK_84]
requests specify a
[CODE_BLOCK_85]
option, that will be used instead.
app/layout.js
[CODE_BLOCK_86]
Route Handlers
[CODE_BLOCK_88]
functions in
Route Handlers
are no longer cached by default. To opt
[CODE_BLOCK_89]
methods into caching, you can use a
route config option
such as
[CODE_BLOCK_90]
in your Route Handler file.
app/api/route.js
[CODE_BLOCK_91]
Client-side Router Cache
When navigating between pages via
[CODE_BLOCK_93]
[CODE_BLOCK_94]
page
segments are no longer reused from the client-side router cache. However, they are still reused during browser backward and forward navigation and for shared layouts.
To opt page segments into caching, you can use the
[CODE_BLOCK_95]
config option:
next.config.js
[CODE_BLOCK_96]
Layouts
loading states
are still cached and reused on navigation.
[CODE_BLOCK_98]
[CODE_BLOCK_99]
package has been removed in favor of the built-in
[CODE_BLOCK_100]
codemod is available
to safely and automatically rename your imports.
app/layout.js
[CODE_BLOCK_101]
bundlePagesRouterDependencies
[CODE_BLOCK_103]
is now stable and renamed to
[CODE_BLOCK_104]
next.config.js
[CODE_BLOCK_105]
serverExternalPackages
[CODE_BLOCK_107]
is now stable and renamed to
[CODE_BLOCK_108]
next.config.js
[CODE_BLOCK_109]
Speed Insights
Auto instrumentation for Speed Insights was removed in Next.js 15.
To continue using Speed Insights, follow the
Vercel Speed Insights Quickstart
guide.
[CODE_BLOCK_111]
Geolocation
[CODE_BLOCK_112]
[CODE_BLOCK_113]
properties on
[CODE_BLOCK_114]
have been removed as these values are provided by your hosting provider. A
codemod
is available to automate this migration.
If you are using Vercel, you can alternatively use the
[CODE_BLOCK_115]
[CODE_BLOCK_116]
functions from
[CODE_BLOCK_117]
instead:
middleware.ts
[CODE_BLOCK_118]
middleware.ts
[CODE_BLOCK_120]
Was this helpful?
supported.
Send