SOURCE URL: https://nextjs.org/docs/app/api-reference/file-conventions/dynamic-routes
SCRAPED: 2025-06-19 17:16:12
================================================================================

Menu
Using App Router
Features available in /app
Using Latest Version
15.3.4
Using App Router
Features available in /app
Using Latest Version
15.3.4
API Reference
File-system conventions
Dynamic Segments
Dynamic Route Segments
When you don't know the exact route segment names ahead of time and want to create routes from dynamic data, you can use Dynamic Segments that are filled in at request time or prerendered at build time.
Convention
A Dynamic Segment can be created by wrapping a folder's name in square brackets:
--- CODE BLOCK 1 ---
[folderName]
--- END CODE BLOCK ---
. For example, a blog could include the following route
--- CODE BLOCK 2 ---
app/blog/[slug]/page.js
--- END CODE BLOCK ---
where
--- CODE BLOCK 4 ---
export default async function Page({
params,
}: {
params: Promise<{ slug: string }>
}) {
const { slug } = await params
return <div>My Post: {slug}</div>
--- END CODE BLOCK ---
is the Dynamic Segment for blog posts.
app/blog/[slug]/page.tsx
TypeScript
JavaScript
TypeScript
--- CODE BLOCK 5 ---
export default async function Page({
params,
}: {
params: Promise<{ slug: string }>
}) {
const { slug } = await params
return <div>My Post: {slug}</div>
--- END CODE BLOCK ---
Dynamic Segments are passed as the
--- CODE BLOCK 12 ---
app/blog/[slug]/page.js
--- END CODE BLOCK ---
prop to
--- CODE BLOCK 14 ---
{ slug: 'a' }
--- END CODE BLOCK ---
--- CODE BLOCK 15 ---
app/blog/[slug]/page.js
--- END CODE BLOCK ---
--- CODE BLOCK 17 ---
{ slug: 'b' }
--- END CODE BLOCK ---
, and
--- CODE BLOCK 18 ---
app/blog/[slug]/page.js
--- END CODE BLOCK ---
functions.
Route
Example URL
--- CODE BLOCK 20 ---
{ slug: 'c' }
--- END CODE BLOCK ---
--- CODE BLOCK 21 ---
[...folderName]
--- END CODE BLOCK ---
--- CODE BLOCK 22 ---
app/shop/[...slug]/page.js
--- END CODE BLOCK ---
--- CODE BLOCK 23 ---
/shop/clothes
--- END CODE BLOCK ---
--- CODE BLOCK 24 ---
/shop/clothes/tops
--- END CODE BLOCK ---
--- CODE BLOCK 25 ---
/shop/clothes/tops/t-shirts
--- END CODE BLOCK ---
--- CODE BLOCK 27 ---
app/shop/[...slug]/page.js
--- END CODE BLOCK ---
--- CODE BLOCK 29 ---
{ slug: ['a'] }
--- END CODE BLOCK ---
--- CODE BLOCK 30 ---
app/shop/[...slug]/page.js
--- END CODE BLOCK ---
--- CODE BLOCK 32 ---
{ slug: ['a', 'b'] }
--- END CODE BLOCK ---
Catch-all Segments
Dynamic Segments can be extended to
catch-all
subsequent segments by adding an ellipsis inside the brackets
--- CODE BLOCK 33 ---
app/shop/[...slug]/page.js
--- END CODE BLOCK ---
For example,
--- CODE BLOCK 34 ---
/shop/a/b/c
--- END CODE BLOCK ---
will match
--- CODE BLOCK 35 ---
{ slug: ['a', 'b', 'c'] }
--- END CODE BLOCK ---
, but also
--- CODE BLOCK 36 ---
[[...folderName]]
--- END CODE BLOCK ---
--- CODE BLOCK 37 ---
app/shop/[[...slug]]/page.js
--- END CODE BLOCK ---
, and so on.
Route
Example URL
--- CODE BLOCK 39 ---
/shop/clothes
--- END CODE BLOCK ---
--- CODE BLOCK 40 ---
/shop/clothes/tops
--- END CODE BLOCK ---
--- CODE BLOCK 41 ---
/shop/clothes/tops/t-shirts
--- END CODE BLOCK ---
--- CODE BLOCK 44 ---
app/shop/[[...slug]]/page.js
--- END CODE BLOCK ---
--- CODE BLOCK 46 ---
{ slug: undefined }
--- END CODE BLOCK ---
--- CODE BLOCK 47 ---
app/shop/[[...slug]]/page.js
--- END CODE BLOCK ---
--- CODE BLOCK 49 ---
{ slug: ['a'] }
--- END CODE BLOCK ---
--- CODE BLOCK 50 ---
app/shop/[[...slug]]/page.js
--- END CODE BLOCK ---
--- CODE BLOCK 52 ---
{ slug: ['a', 'b'] }
--- END CODE BLOCK ---
--- CODE BLOCK 53 ---
app/shop/[[...slug]]/page.js
--- END CODE BLOCK ---
Optional Catch-all Segments
Catch-all Segments can be made
optional
by including the parameter in double square brackets:
--- CODE BLOCK 54 ---
/shop/a/b/c
--- END CODE BLOCK ---
For example,
--- CODE BLOCK 55 ---
{ slug: ['a', 'b', 'c'] }
--- END CODE BLOCK ---
will
also
match
--- CODE BLOCK 58 ---
app/blog/[slug]/page.js
--- END CODE BLOCK ---
, in addition to
--- CODE BLOCK 59 ---
{ slug: string }
--- END CODE BLOCK ---
--- CODE BLOCK 60 ---
app/shop/[...slug]/page.js
--- END CODE BLOCK ---
--- CODE BLOCK 61 ---
{ slug: string[] }
--- END CODE BLOCK ---
The difference between
catch-all
optional catch-all
segments is that with optional, the route without the parameter is also matched (
--- CODE BLOCK 62 ---
app/shop/[[...slug]]/page.js
--- END CODE BLOCK ---
in the example above).
Route
Example URL
--- CODE BLOCK 63 ---
{ slug?: string[] }
--- END CODE BLOCK ---
--- CODE BLOCK 64 ---
app/[categoryId]/[itemId]/page.js
--- END CODE BLOCK ---
--- CODE BLOCK 65 ---
{ categoryId: string, itemId: string }
--- END CODE BLOCK ---
--- CODE BLOCK 70 ---
generateStaticParams
--- END CODE BLOCK ---
--- CODE BLOCK 71 ---
generateStaticParams
--- END CODE BLOCK ---
--- CODE BLOCK 72 ---
export async function generateStaticParams() {
const posts = await fetch('https://.../posts').then((res) => res.json())
return posts.map((post) => ({
slug: post.slug,
--- END CODE BLOCK ---
--- CODE BLOCK 73 ---
export async function generateStaticParams() {
const posts = await fetch('https://.../posts').then((res) => res.json())
return posts.map((post) => ({
slug: post.slug,
--- END CODE BLOCK ---
--- CODE BLOCK 75 ---
generateStaticParams
--- END CODE BLOCK ---
--- CODE BLOCK 76 ---
generateStaticParams
--- END CODE BLOCK ---
[CODE_BLOCK_52]
[CODE_BLOCK_53]
[CODE_BLOCK_54]
[CODE_BLOCK_55]
TypeScript
When using TypeScript, you can add types for
[CODE_BLOCK_56]
depending on your configured route segment.
Route
[CODE_BLOCK_57]
Type Definition
[CODE_BLOCK_58]
[CODE_BLOCK_59]
[CODE_BLOCK_60]
[CODE_BLOCK_61]
[CODE_BLOCK_62]
[CODE_BLOCK_63]
[CODE_BLOCK_64]
[CODE_BLOCK_65]
Behavior
Since the
[CODE_BLOCK_66]
prop is a promise. You must use
[CODE_BLOCK_67]
[CODE_BLOCK_68]
or React's use function to access the values.
In version 14 and earlier,
[CODE_BLOCK_69]
was a synchronous prop. To help with backwards compatibility, you can still access it synchronously in Next.js 15, but this behavior will be deprecated in the future.
Examples
With
[CODE_BLOCK_70]
[CODE_BLOCK_71]
function can be used to
statically generate
routes at build time instead of on-demand at request time.
app/blog/[slug]/page.tsx
TypeScript
JavaScript
TypeScript
[CODE_BLOCK_72]
When using
[CODE_BLOCK_74]
inside the
[CODE_BLOCK_75]
function, the requests are
automatically deduplicated
. This avoids multiple network calls for the same data Layouts, Pages, and other
[CODE_BLOCK_76]
functions, speeding up build time.
Next Steps
For more information on what to do next, we recommend the following sections
generateStaticParams
API reference for the generateStaticParams function.
Was this helpful?
supported.
Send