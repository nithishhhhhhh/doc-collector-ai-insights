SOURCE URL: https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Structured_clone_algorithm
SCRAPED: 2025-06-19 18:22:54
================================================================================

structured clone algorithm
copies complex JavaScript objects.
It is used internally when invoking
--- CODE BLOCK 1 ---
structuredClone()
--- END CODE BLOCK ---
, to transfer data between
Workers
--- CODE BLOCK 2 ---
postMessage()
--- END CODE BLOCK ---
, storing objects with
IndexedDB
, or copying objects for
other APIs
It clones by recursing through the input object while maintaining a map of previously visited references, to avoid infinitely traversing cycles.
Things that don't work with structured clone
--- CODE BLOCK 4 ---
DataCloneError
--- END CODE BLOCK ---
objects cannot be duplicated by the structured clone algorithm; attempting to throws a
--- CODE BLOCK 5 ---
DataCloneError
--- END CODE BLOCK ---
exception.
Cloning DOM nodes likewise throws a
--- CODE BLOCK 9 ---
ArrayBuffer
--- END CODE BLOCK ---
exception.
Certain object properties are not preserved:
--- CODE BLOCK 27 ---
ReferenceError
--- END CODE BLOCK ---
property of
--- CODE BLOCK 28 ---
SyntaxError
--- END CODE BLOCK ---
objects is not preserved.
Property descriptors, setters, getters, and similar metadata-like features are not duplicated.
For example, if an object is marked readonly with a
property descriptor
, it will be read/write in the duplicate, since that's the default.
The prototype chain is not walked or duplicated.
Class private properties
are not duplicated. (Although private properties of built-in types may.)
Supported types
JavaScript types
--- CODE BLOCK 35 ---
AggregateError
--- END CODE BLOCK ---
--- CODE BLOCK 40 ---
DOMException
--- END CODE BLOCK ---
--- CODE BLOCK 44 ---
DOMMatrixReadOnly
--- END CODE BLOCK ---
--- CODE BLOCK 46 ---
DOMPointReadOnly
--- END CODE BLOCK ---
--- CODE BLOCK 49 ---
DOMRectReadOnly
--- END CODE BLOCK ---
--- CODE BLOCK 50 ---
EncodedAudioChunk
--- END CODE BLOCK ---
types (but see
Error types
below).
--- CODE BLOCK 51 ---
EncodedVideoChunk
--- END CODE BLOCK ---
--- CODE BLOCK 52 ---
FencedFrameConfig
--- END CODE BLOCK ---
--- CODE BLOCK 55 ---
FileSystemDirectoryHandle
--- END CODE BLOCK ---
objects: but only plain objects (e.g., from object literals).
Primitive types
, except
--- CODE BLOCK 56 ---
FileSystemFileHandle
--- END CODE BLOCK ---
--- CODE BLOCK 57 ---
FileSystemHandle
--- END CODE BLOCK ---
: but note that
--- CODE BLOCK 58 ---
GPUCompilationInfo
--- END CODE BLOCK ---
is not preserved.
--- CODE BLOCK 59 ---
GPUCompilationMessage
--- END CODE BLOCK ---
--- CODE BLOCK 60 ---
GPUPipelineError
--- END CODE BLOCK ---
--- CODE BLOCK 61 ---
ImageBitmap
--- END CODE BLOCK ---
Error types
--- CODE BLOCK 63 ---
RTCCertificate
--- END CODE BLOCK ---
types, the error name must be one of:
--- CODE BLOCK 64 ---
RTCEncodedAudioFrame
--- END CODE BLOCK ---
--- CODE BLOCK 65 ---
RTCEncodedVideoFrame
--- END CODE BLOCK ---
--- CODE BLOCK 67 ---
WebTransportError
--- END CODE BLOCK ---
--- CODE BLOCK 68 ---
[Serializable]
--- END CODE BLOCK ---
--- CODE BLOCK 69 ---
Window.structuredClone()
--- END CODE BLOCK ---
--- CODE BLOCK 70 ---
WorkerGlobalScope.structuredClone()
--- END CODE BLOCK ---
--- CODE BLOCK 71 ---
window.postMessage()
--- END CODE BLOCK ---
(or will be set to "Error").
Browsers must serialize the properties
[CODE_BLOCK_31]
[CODE_BLOCK_32]
, and are expected to serialize other "interesting" properties of the errors such as
[CODE_BLOCK_33]
[CODE_BLOCK_34]
, etc.
[CODE_BLOCK_35]
support is expected to be added to the specification in
whatwg/html#5749
(and is already supported in some browsers).
Web/API types
[CODE_BLOCK_36]
[CODE_BLOCK_37]
[CODE_BLOCK_38]
[CODE_BLOCK_39]
[CODE_BLOCK_40]
: browsers must serialize the properties
[CODE_BLOCK_41]
[CODE_BLOCK_42]
. Other attributes may also be serialized/cloned.
[CODE_BLOCK_43]
[CODE_BLOCK_44]
[CODE_BLOCK_45]
[CODE_BLOCK_46]
[CODE_BLOCK_47]
[CODE_BLOCK_48]
[CODE_BLOCK_49]
[CODE_BLOCK_50]
[CODE_BLOCK_51]
[CODE_BLOCK_52]
[CODE_BLOCK_53]
[CODE_BLOCK_54]
[CODE_BLOCK_55]
[CODE_BLOCK_56]
[CODE_BLOCK_57]
[CODE_BLOCK_58]
[CODE_BLOCK_59]
[CODE_BLOCK_60]
[CODE_BLOCK_61]
[CODE_BLOCK_62]
[CODE_BLOCK_63]
[CODE_BLOCK_64]
[CODE_BLOCK_65]
[CODE_BLOCK_66]
[CODE_BLOCK_67]
Note:
Serializable objects are marked up in
Web IDL files
with the attribute
[CODE_BLOCK_68]
See also
HTML Specification: Safe passing of structured data
Transferable objects
[CODE_BLOCK_69]
[CODE_BLOCK_70]
[CODE_BLOCK_71]
Web Workers
IndexedDB
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
Apr 2, 2025
MDN contributors
View this page on GitHub
Report a problem with this content