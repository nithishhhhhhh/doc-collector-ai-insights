SOURCE URL: https://developer.mozilla.org/docs/Web/API/History_API
SCRAPED: 2025-06-19 18:11:04
================================================================================

History API
provides access to the browser's session history (not to be confused with
WebExtensions history
) through the
--- CODE BLOCK 8 ---
history.back();
--- END CODE BLOCK ---
global object. It exposes useful methods and properties that let you navigate back and forth through the user's history, and manipulate the contents of the history stack.
Note:
This API is only available on the main thread (
--- CODE BLOCK 9 ---
history.back();
--- END CODE BLOCK ---
). It cannot be accessed in
--- CODE BLOCK 10 ---
history.forward();
--- END CODE BLOCK ---
--- CODE BLOCK 11 ---
history.forward();
--- END CODE BLOCK ---
contexts.
Concepts and usage
Moving backward and forward through the user's history is done using the
--- CODE BLOCK 15 ---
history.go(-1);
--- END CODE BLOCK ---
--- CODE BLOCK 16 ---
history.go(-1);
--- END CODE BLOCK ---
, and
--- CODE BLOCK 18 ---
history.go(1);
--- END CODE BLOCK ---
methods.
Moving forward and backward
To move backward through history:
Copy to Clipboard
--- CODE BLOCK 19 ---
history.go(1);
--- END CODE BLOCK ---
This acts exactly as if the user clicked on the
Back
button in their browser toolbar.
Similarly, you can move forward (as if the user clicked the
Forward
button), like this:
Copy to Clipboard
--- CODE BLOCK 24 ---
// The following statements
// both have the effect of
// refreshing the page
history.go(0);
history.go();
--- END CODE BLOCK ---
Moving to a specific point in history
You can use the
--- CODE BLOCK 27 ---
const numberOfEntries = history.length;
--- END CODE BLOCK ---
method to load a specific page from session history, identified by its relative position to the current page. (The current page's relative position is
--- CODE BLOCK 29 ---
PopStateEvent
--- END CODE BLOCK ---
To move back one page (the equivalent of calling
--- CODE BLOCK 32 ---
window.addEventListener("popstate", (event) => {
alert(
`location: ${document.location}, state: ${JSON.stringify(event.state)}`,
history.pushState({ page: 1 }, "title 1", "?page=1");
history.pushState({ page: 2 }, "title 2", "?page=2");
history.replaceState({ page: 3 }, "title 3", "?page=3");
history.back(); // alerts "location: http://example.com/example.html?page=1, state: {"page":1}"
history.back(); // alerts "location: http://example.com/example.html, state: null"
history.go(2); // alerts "location: http://example.com/example.html?page=3, state: {"page":3}"
--- END CODE BLOCK ---
Copy to Clipboard
--- CODE BLOCK 33 ---
window.addEventListener("popstate", (event) => {
alert(
`location: ${document.location}, state: ${JSON.stringify(event.state)}`,
history.pushState({ page: 1 }, "title 1", "?page=1");
history.pushState({ page: 2 }, "title 2", "?page=2");
history.replaceState({ page: 3 }, "title 3", "?page=3");
history.back(); // alerts "location: http://example.com/example.html?page=1, state: {"page":1}"
history.back(); // alerts "location: http://example.com/example.html, state: null"
history.go(2); // alerts "location: http://example.com/example.html?page=3, state: {"page":3}"
--- END CODE BLOCK ---
To move forward a page, just like calling
[CODE_BLOCK_17]
Copy to Clipboard
[CODE_BLOCK_18]
Similarly, you can move forward 2 pages by passing
[CODE_BLOCK_20]
, and so forth.
Another use for the
[CODE_BLOCK_21]
method is to refresh the current page by either passing
[CODE_BLOCK_22]
, or by invoking it without an argument:
Copy to Clipboard
[CODE_BLOCK_23]
You can determine the number of pages in the history stack by looking at the value of the
[CODE_BLOCK_25]
property:
Copy to Clipboard
[CODE_BLOCK_26]
Interfaces
[CODE_BLOCK_28]
Allows manipulation of the browser
session history
(that is, the pages visited in the tab or frame that the current page is loaded in).
[CODE_BLOCK_29]
The interface of the
[CODE_BLOCK_30]
event.
Examples
The following example assigns a listener for the
[CODE_BLOCK_31]
event. It then illustrates some of the methods of the history object to add, replace, and move within the browser history for the current tab.
Copy to Clipboard
[CODE_BLOCK_32]
Specifications
Specification
HTML
the-history-interface
Browser compatibility
See also
[CODE_BLOCK_34]
global object
[CODE_BLOCK_35]
event
Help improve MDN
Was this page helpful to you?
Learn how to contribute
This page was last modified on
Jul 25, 2024
MDN contributors
View this page on GitHub
Report a problem with this content