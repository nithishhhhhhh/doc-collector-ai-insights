SOURCE URL: https://nextjs.org/docs/pages/guides/amp
SCRAPED: 2025-06-19 17:09:15
================================================================================

Menu
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Using Pages Router
Features available in /pages
Using Latest Version
15.3.4
Pages Router
Guides
You are currently viewing the documentation for Pages Router.
How to create AMP pages in Next.js
Examples
With Next.js you can turn any React page into an AMP page, with minimal config, and without leaving React.
You can read more about AMP in the official
amp.dev
site.
Enabling AMP
To enable AMP support for a page, and to learn more about the different AMP configs, read the
API documentation for
--- CODE BLOCK 2 ---
export const config = { amp: true }
function MyAmpPage() {
const date = new Date()
return (
<div>
<p>Some time: {date.toJSON()}</p>
<amp-timeago
width="0"
height="15"
datetime={date.toJSON()}
layout="responsive"
</amp-timeago>
</div>
export default MyAmpPage
--- END CODE BLOCK ---
Caveats
Only CSS-in-JS is supported.
CSS Modules
aren't supported by AMP pages at the moment. You can
contribute CSS Modules support to Next.js
Adding AMP Components
The AMP community provides
many components
to make AMP pages more interactive. Next.js will automatically import all components used on a page and there is no need to manually import AMP component scripts:
--- CODE BLOCK 3 ---
export const config = { amp: true }
function MyAmpPage() {
const date = new Date()
return (
<div>
<p>Some time: {date.toJSON()}</p>
<amp-timeago
width="0"
height="15"
datetime={date.toJSON()}
layout="responsive"
</amp-timeago>
</div>
export default MyAmpPage
--- END CODE BLOCK ---
The above example uses the
--- CODE BLOCK 6 ---
import Head from 'next/head'
export const config = { amp: true }
function MyAmpPage() {
const date = new Date()
return (
<div>
<Head>
<script
async
key="amp-timeago"
custom-element="amp-timeago"
src="https://cdn.ampproject.org/v0/amp-timeago-0.1.js"
</Head>
<p>Some time: {date.toJSON()}</p>
<amp-timeago
width="0"
height="15"
datetime={date.toJSON()}
layout="responsive"
</amp-timeago>
</div>
export default MyAmpPage
--- END CODE BLOCK ---
component.
By default, the latest version of a component is always imported. If you want to customize the version, you can use
--- CODE BLOCK 7 ---
import Head from 'next/head'
export const config = { amp: true }
function MyAmpPage() {
const date = new Date()
return (
<div>
<Head>
<script
async
key="amp-timeago"
custom-element="amp-timeago"
src="https://cdn.ampproject.org/v0/amp-timeago-0.1.js"
</Head>
<p>Some time: {date.toJSON()}</p>
<amp-timeago
width="0"
height="15"
datetime={date.toJSON()}
layout="responsive"
</amp-timeago>
</div>
export default MyAmpPage
--- END CODE BLOCK ---
, as in the following example:
--- CODE BLOCK 9 ---
next.config.js
--- END CODE BLOCK ---
AMP Validation
AMP pages are automatically validated with
amphtml-validator
during development. Errors and warnings will appear in the terminal where you started Next.js.
Pages are also validated during
Static HTML export
and any warnings / errors will be printed to the terminal. Any AMP errors will cause the export to exit with status code
--- CODE BLOCK 11 ---
module.exports = {
amp: {
validator: './custom_validator.js',
--- END CODE BLOCK ---
because the export is not valid AMP.
Custom Validators
You can set up custom AMP validator in
--- CODE BLOCK 12 ---
next.config.js
--- END CODE BLOCK ---
as shown below:
--- CODE BLOCK 13 ---
experimental: {
amp: {
skipValidation: true
--- END CODE BLOCK ---
Skip AMP Validation
To turn off AMP validation add the following code to
--- CODE BLOCK 15 ---
pages/about.js
--- END CODE BLOCK ---
--- CODE BLOCK 16 ---
out/about.html
--- END CODE BLOCK ---
AMP in Static HTML Export
When using
Static HTML export
statically prerender pages, Next.js will detect if the page supports AMP and change the exporting behavior based on that.
For example, the hybrid AMP page
--- CODE BLOCK 18 ---
pages/about.js
--- END CODE BLOCK ---
would output:
--- CODE BLOCK 19 ---
out/about.html
--- END CODE BLOCK ---
- HTML page with client-side React runtime
--- CODE BLOCK 20 ---
<link rel="amphtml" href="/about.amp.html" />
--- END CODE BLOCK ---
- AMP page
And if
--- CODE BLOCK 21 ---
<link rel="amphtml" href="/about.amp.html" />
--- END CODE BLOCK ---
is an AMP-only page, then it would output:
--- CODE BLOCK 22 ---
<link rel="canonical" href="/about" />
--- END CODE BLOCK ---
- Optimized AMP page
Next.js will automatically insert a link to the AMP version of your page in the HTML version, so you don't have to, like so:
--- CODE BLOCK 23 ---
<link rel="canonical" href="/about" />
--- END CODE BLOCK ---
And the AMP version of your page will include a link to the HTML page:
--- CODE BLOCK 25 ---
pages/about.js
--- END CODE BLOCK ---
When
--- CODE BLOCK 27 ---
out/about.amp/index.html
--- END CODE BLOCK ---
is enabled the exported pages for
[CODE_BLOCK_25]
would be:
[CODE_BLOCK_26]
- HTML page
[CODE_BLOCK_27]
- AMP page
TypeScript
AMP currently doesn't have built-in types for TypeScript, but it's in their roadmap (
#13791
As a workaround you can manually create a file called
[CODE_BLOCK_28]
inside your project and add these
custom types
Was this helpful?
supported.
Send