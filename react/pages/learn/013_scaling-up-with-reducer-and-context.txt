URL: https://react.dev/learn/scaling-up-with-reducer-and-context
Section: Learn
============================================================

# Scaling Up with Reducer and Context
# Scaling Up with Reducer and Context
Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.
### You will learn
- How to combine a reducer with context
- How to avoid passing state and dispatch through props
- How to keep context and state logic in a separate file
## Combining a reducer with context
In this example from the introduction to reducers, the state is managed by a reducer. The reducer function contains all of the state update logic and is declared at the bottom of this file:
A reducer helps keep the event handlers short and concise. However, as your app grows, you might run into another difficulty. Currently, the tasks state and the dispatch function are only available in the top-level TaskApp component. To let other components read the list of tasks or change it, you have to explicitly pass down the current state and the event handlers that change it as props.
For example, TaskApp passes a list of tasks and the event handlers to TaskList:
``````
And TaskList passes the event handlers to Task:
``````
In a small example like this, this works well, but if you have tens or hundreds of components in the middle, passing down all state and functions can be quite frustrating!
This is why, as an alternative to passing them through props, you might want to put both the tasks state and the dispatch function into context. This way, any component below TaskApp in the tree can read the tasks and dispatch actions without the repetitive “prop drilling”.
Here is how you can combine a reducer with context:
- Create the context.
- Put state and dispatch into context.
- Use context anywhere in the tree.
### Step 1: Create the context
The useReducer Hook returns the current tasks and the dispatch function that lets you update them:
``````
To pass them down the tree, you will create two separate contexts:
- TasksContext provides the current list of tasks.
- TasksDispatchContext provides the function that lets components dispatch actions.
Export them from a separate file so that you can later import them from other files:
``````
Here, you’re passing null as the default value to both contexts. The actual values will be provided by the TaskApp component.
### Step 2: Put state and dispatch into context
Now you can import both contexts in your TaskApp component. Take the tasks and dispatch returned by useReducer() and provide them to the entire tree below:
``````
For now, you pass the information both via props and in context:
``````
In the next step, you will remove prop passing.
### Step 3: Use context anywhere in the tree
Now you don’t need to pass the list of tasks or the event handlers down the tree:
``````
Instead, any component that needs the task list can read it from the TaskContext:
``````
To update the task list, any component can read the dispatch function from context and call it:
``````
The TaskApp component does not pass any event handlers down, and the TaskList does not pass any event handlers to the Task component either. Each component reads the context that it needs:
``````
The state still “lives” in the top-level TaskApp component, managed with useReducer. But its tasks and dispatch are now available to every component below in the tree by importing and using these contexts.
## Moving all wiring into a single file
You don’t have to do this, but you could further declutter the components by moving both reducer and context into a single file. Currently, TasksContext.js contains only two context declarations:
``````
This file is about to get crowded! You’ll move the reducer into that same file. Then you’ll declare a new TasksProvider component in the same file. This component will tie all the pieces together:
- It will manage the state with a reducer.
- It will provide both contexts to components below.
- It will take children as a prop so you can pass JSX to it.
``````
This removes all the complexity and wiring from your TaskApp component:
``````
You can also export functions that use the context from TasksContext.js:
``````
When a component needs to read context, it can do it through these functions:
``````
This doesn’t change the behavior in any way, but it lets you later split these contexts further or add some logic to these functions. Now all of the context and reducer wiring is in TasksContext.js. This keeps the components clean and uncluttered, focused on what they display rather than where they get the data:
``````
You can think of TasksProvider as a part of the screen that knows how to deal with tasks, useTasks as a way to read them, and useTasksDispatch as a way to update them from any component below in the tree.
### Note
Functions like useTasks and useTasksDispatch are called Custom Hooks. Your function is considered a custom Hook if its name starts with use. This lets you use other Hooks, like useContext, inside it.
As your app grows, you may have many context-reducer pairs like this. This is a powerful way to scale your app and lift state up without too much work whenever you want to access the data deep in the tree.
## Recap
- You can combine reducer with context to let any component read and update state above it.
- To provide state and the dispatch function to components below:
Create two contexts (for state and for dispatch functions).
Provide both contexts from the component that uses the reducer.
Use either context from components that need to read them.
- You can further declutter the components by moving all wiring into one file.
You can export a component like TasksProvider that provides context.
You can also export custom Hooks like useTasks and useTasksDispatch to read it.
- You can have many context-reducer pairs like this in your app.
- Create two contexts (for state and for dispatch functions).
- Provide both contexts from the component that uses the reducer.
- Use either context from components that need to read them.
- You can export a component like TasksProvider that provides context.
- You can also export custom Hooks like useTasks and useTasksDispatch to read it.