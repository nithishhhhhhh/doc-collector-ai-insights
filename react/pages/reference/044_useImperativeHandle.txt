URL: https://react.dev/reference/react/useImperativeHandle
Section: Reference
============================================================

# useImperativeHandle
# useImperativeHandle
useImperativeHandle is a React Hook that lets you customize the handle exposed as a ref.
``````
- Reference useImperativeHandle(ref, createHandle, dependencies?)
- Usage Exposing a custom ref handle to the parent component Exposing your own imperative methods
- useImperativeHandle(ref, createHandle, dependencies?)
- Exposing a custom ref handle to the parent component
- Exposing your own imperative methods
## Reference
### useImperativeHandle(ref, createHandle, dependencies?)
Call useImperativeHandle at the top level of your component to customize the ref handle it exposes:
``````
See more examples below.
#### Parameters
- ref: The ref you received as a prop to the MyInput component.
- createHandle: A function that takes no arguments and returns the ref handle you want to expose. That ref handle can have any type. Usually, you will return an object with the methods you want to expose.
- optional dependencies: The list of all reactive values referenced inside of the createHandle code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter is configured for React, it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like [dep1, dep2, dep3]. React will compare each dependency with its previous value using the Object.is comparison. If a re-render resulted in a change to some dependency, or if you omitted this argument, your createHandle function will re-execute, and the newly created handle will be assigned to the ref.
ref: The ref you received as a prop to the MyInput component.
createHandle: A function that takes no arguments and returns the ref handle you want to expose. That ref handle can have any type. Usually, you will return an object with the methods you want to expose.
optional dependencies: The list of all reactive values referenced inside of the createHandle code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter is configured for React, it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like [dep1, dep2, dep3]. React will compare each dependency with its previous value using the Object.is comparison. If a re-render resulted in a change to some dependency, or if you omitted this argument, your createHandle function will re-execute, and the newly created handle will be assigned to the ref.
### Note
Starting with React 19, ref is available as a prop. In React 18 and earlier, it was necessary to get the ref from forwardRef.
#### Returns
useImperativeHandle returns undefined.
## Usage
### Exposing a custom ref handle to the parent component
To expose a DOM node to the parent element, pass in the ref prop to the node.
``````
With the code above, a ref to MyInput will receive the <input> DOM node. However, you can expose a custom value instead. To customize the exposed handle, call useImperativeHandle at the top level of your component:
``````
Note that in the code above, the ref is no longer passed to the <input>.
For example, suppose you don’t want to expose the entire <input> DOM node, but you want to expose two of its methods: focus and scrollIntoView. To do this, keep the real browser DOM in a separate ref. Then use useImperativeHandle to expose a handle with only the methods that you want the parent component to call:
``````
Now, if the parent component gets a ref to MyInput, it will be able to call the focus and scrollIntoView methods on it. However, it will not have full access to the underlying <input> DOM node.
``````
### Exposing your own imperative methods
The methods you expose via an imperative handle don’t have to match the DOM methods exactly. For example, this Post component exposes a scrollAndFocusAddComment method via an imperative handle. This lets the parent Page scroll the list of comments and focus the input field when you click the button:
``````
### Pitfall
Do not overuse refs. You should only use refs for imperative behaviors that you can’t express as props: for example, scrolling to a node, focusing a node, triggering an animation, selecting text, and so on.
If you can express something as a prop, you should not use a ref. For example, instead of exposing an imperative handle like { open, close } from a Modal component, it is better to take isOpen as a prop like <Modal isOpen={isOpen} />. Effects can help you expose imperative behaviors via props.