URL: https://react.dev/reference/react-dom/components/form
Section: Reference
============================================================

# <form>
# <form>
The built-in browser <form> component lets you create interactive controls for submitting information.
``````
- Reference <form>
- Usage Handle form submission on the client Handle form submission with a Server Function Display a pending state during form submission Optimistically updating form data Handling form submission errors Display a form submission error without JavaScript Handling multiple submission types
- <form>
- Handle form submission on the client
- Handle form submission with a Server Function
- Display a pending state during form submission
- Optimistically updating form data
- Handling form submission errors
- Display a form submission error without JavaScript
- Handling multiple submission types
## Reference
### <form>
To create interactive controls for submitting information, render the built-in browser <form> component.
``````
See more examples below.
#### Props
<form> supports all common element props.
action: a URL or function. When a URL is passed to action the form will behave like the HTML form component. When a function is passed to action the function will handle the form submission. The function passed to action may be async and will be called with a single argument containing the form data of the submitted form. The action prop can be overridden by a formAction attribute on a <button>, <input type="submit">, or <input type="image"> component.
#### Caveats
- When a function is passed to action or formAction the HTTP method will be POST regardless of value of the method prop.
## Usage
### Handle form submission on the client
Pass a function to the action prop of form to run the function when the form is submitted. formData will be passed to the function as an argument so you can access the data submitted by the form. This differs from the conventional HTML action, which only accepts URLs. After the action function succeeds, all uncontrolled field elements in the form are reset.
``````
### Handle form submission with a Server Function
Render a <form> with an input and submit button. Pass a Server Function (a function marked with 'use server') to the action prop of form to run the function when the form is submitted.
Passing a Server Function to <form action> allow users to submit forms without JavaScript enabled or before the code has loaded. This is beneficial to users who have a slow connection, device, or have JavaScript disabled and is similar to the way forms work when a URL is passed to the action prop.
You can use hidden form fields to provide data to the <form>’s action. The Server Function will be called with the hidden form field data as an instance of FormData.
``````
In lieu of using hidden form fields to provide data to the <form>’s action, you can call the bind method to supply it with extra arguments. This will bind a new argument (productId) to the function in addition to the formData that is passed as an argument to the function.
``````
When <form> is rendered by a Server Component, and a Server Function is passed to the <form>’s action prop, the form is progressively enhanced.
### Display a pending state during form submission
To display a pending state when a form is being submitted, you can call the useFormStatus Hook in a component rendered in a <form> and read the pending property returned.
Here, we use the pending property to indicate the form is submitting.
``````
To learn more about the useFormStatus Hook see the reference documentation.
### Optimistically updating form data
The useOptimistic Hook provides a way to optimistically update the user interface before a background operation, like a network request, completes. In the context of forms, this technique helps to make apps feel more responsive. When a user submits a form, instead of waiting for the server’s response to reflect the changes, the interface is immediately updated with the expected outcome.
For example, when a user types a message into the form and hits the “Send” button, the useOptimistic Hook allows the message to immediately appear in the list with a “Sending…” label, even before the message is actually sent to a server. This “optimistic” approach gives the impression of speed and responsiveness. The form then attempts to truly send the message in the background. Once the server confirms the message has been received, the “Sending…” label is removed.
``````
### Handling form submission errors
In some cases the function called by a <form>’s action prop throws an error. You can handle these errors by wrapping <form> in an Error Boundary. If the function called by a <form>’s action prop throws an error, the fallback for the error boundary will be displayed.
``````
### Display a form submission error without JavaScript
Displaying a form submission error message before the JavaScript bundle loads for progressive enhancement requires that:
- <form> be rendered by a Server Component
- the function passed to the <form>’s action prop be a Server Function
- the useActionState Hook be used to display the error message
useActionState takes two parameters: a Server Function and an initial state. useActionState returns two values, a state variable and an action. The action returned by useActionState should be passed to the action prop of the form. The state variable returned by useActionState can be used to display an error message. The value returned by the Server Function passed to useActionState will be used to update the state variable.
``````
Learn more about updating state from a form action with the useActionState docs
### Handling multiple submission types
Forms can be designed to handle multiple submission actions based on the button pressed by the user. Each button inside a form can be associated with a distinct action or behavior by setting the formAction prop.
When a user taps a specific button, the form is submitted, and a corresponding action, defined by that button’s attributes and action, is executed. For instance, a form might submit an article for review by default but have a separate button with formAction set to save the article as a draft.
``````