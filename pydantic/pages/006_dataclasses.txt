URL: https://docs.pydantic.dev/2.11/api/dataclasses/
==================================================

Pydantic Dataclasses
Provide an enhanced dataclass that performs validation.
dataclass
dataclass
init
Literal
False
False
repr
bool
True
bool
True
order
bool
False
unsafe_hash
bool
False
frozen
bool
False
config
ConfigDict
type
object
None
None
validate_on_init
bool
None
None
kw_only
bool
...
slots
bool
...
Callable
type
]],
type
PydanticDataclass
dataclass
_cls
type
init
Literal
False
False
repr
bool
True
bool
True
order
bool
False
unsafe_hash
bool
False
frozen
bool
None
None
config
ConfigDict
type
object
None
None
validate_on_init
bool
None
None
kw_only
bool
...
slots
bool
...
type
PydanticDataclass
dataclass
init
Literal
False
False
repr
bool
True
bool
True
order
bool
False
unsafe_hash
bool
False
frozen
bool
None
None
config
ConfigDict
type
object
None
None
validate_on_init
bool
None
None
Callable
type
]],
type
PydanticDataclass
dataclass
_cls
type
init
Literal
False
False
repr
bool
True
bool
True
order
bool
False
unsafe_hash
bool
False
frozen
bool
None
None
config
ConfigDict
type
object
None
None
validate_on_init
bool
None
None
type
PydanticDataclass
dataclass
_cls
type
None
None
init
Literal
False
False
repr
bool
True
bool
True
order
bool
False
unsafe_hash
bool
False
frozen
bool
None
None
config
ConfigDict
type
object
None
None
validate_on_init
bool
None
None
kw_only
bool
False
slots
bool
False
Callable
type
]],
type
PydanticDataclass
type
PydanticDataclass
Usage Documentation
dataclasses
A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python
dataclass
but with added validation.
This function should be used similarly to
dataclasses.dataclass
Parameters:
Name
Type
Description
Default
_cls
type
] | None
The target
dataclass
None
init
Literal
[False]
Included for signature compatibility with
dataclasses.dataclass
, and is passed through to
dataclasses.dataclass
when appropriate. If specified, must be set to
False
, as pydantic inserts its
own
__init__
function.
False
repr
bool
A boolean indicating whether to include the field in the
__repr__
output.
True
bool
Determines if a
__eq__
method should be generated for the class.
True
order
bool
Determines if comparison magic methods should be generated, such as
__lt__
, but not
__eq__
False
unsafe_hash
bool
Determines if a
__hash__
method should be included in the class, as in
dataclasses.dataclass
False
frozen
bool
| None
Determines if the generated class should be a 'frozen'
dataclass
, which does not allow its
attributes to be modified after it has been initialized. If not set, the value from the provided
config
argument will be used (and will default to
False
otherwise).
None
config
ConfigDict
type
object
] | None
The Pydantic config to use for the
dataclass
None
validate_on_init
bool
| None
A deprecated parameter included for backwards compatibility; in V2, all Pydantic dataclasses
are validated on init.
None
kw_only
bool
Determines if
__init__
method parameters must be specified by keyword only. Defaults to
False
False
slots
bool
Determines if the generated class should be a 'slots'
dataclass
, which does not allow the addition of
new attributes after instantiation.
False
Returns:
Type
Description
Callable
type
]],
type
PydanticDataclass
]] |
type
PydanticDataclass
A decorator that accepts a class as its argument and returns a Pydantic
dataclass
Raises:
Type
Description
AssertionError
Raised if
init
is not
False
validate_on_init
False
Source code in
pydantic/dataclasses.py
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
@dataclass_transform
field_specifiers
dataclasses
field
Field
PrivateAttr
def
dataclass
_cls
type
None
None
init
Literal
False
False
repr
bool
True
bool
True
order
bool
False
unsafe_hash
bool
False
frozen
bool
None
None
config
ConfigDict
type
object
None
None
validate_on_init
bool
None
None
kw_only
bool
False
slots
bool
False
Callable
type
]],
type
PydanticDataclass
type
PydanticDataclass
"""!!! abstract "Usage Documentation"
[`dataclasses`](../concepts/dataclasses.md)
A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`,
but with added validation.
This function should be used similarly to `dataclasses.dataclass`.
Args:
_cls: The target `dataclass`.
init: Included for signature compatibility with `dataclasses.dataclass`, and is passed through to
`dataclasses.dataclass` when appropriate. If specified, must be set to `False`, as pydantic inserts its
own  `__init__` function.
repr: A boolean indicating whether to include the field in the `__repr__` output.
eq: Determines if a `__eq__` method should be generated for the class.
order: Determines if comparison magic methods should be generated, such as `__lt__`, but not `__eq__`.
unsafe_hash: Determines if a `__hash__` method should be included in the class, as in `dataclasses.dataclass`.
frozen: Determines if the generated class should be a 'frozen' `dataclass`, which does not allow its
attributes to be modified after it has been initialized. If not set, the value from the provided `config` argument will be used (and will default to `False` otherwise).
config: The Pydantic config to use for the `dataclass`.
validate_on_init: A deprecated parameter included for backwards compatibility; in V2, all Pydantic dataclasses
are validated on init.
kw_only: Determines if `__init__` method parameters must be specified by keyword only. Defaults to `False`.
slots: Determines if the generated class should be a 'slots' `dataclass`, which does not allow the addition of
new attributes after instantiation.
Returns:
A decorator that accepts a class as its argument and returns a Pydantic `dataclass`.
Raises:
AssertionError: Raised if `init` is not `False` or `validate_on_init` is `False`.
"""
assert
init
False
'pydantic.dataclasses.dataclass only supports init=False'
assert
validate_on_init
not
False
'validate_on_init=False is no longer supported'
sys
version_info
kwargs
'kw_only'
kw_only
'slots'
slots
else
kwargs
def
make_pydantic_fields_compatible
cls
type
Any
None
"""Make sure that stdlib `dataclasses` understands `Field` kwargs like `kw_only`
To do that, we simply change
`x: int = pydantic.Field(..., kw_only=True)`
into
`x: int = dataclasses.field(default=pydantic.Field(..., kw_only=True), kw_only=True)`
"""
for
annotation_cls
cls
__mro__
annotations
dict
str
Any
getattr
annotation_cls
'__annotations__'
{})
for
field_name
annotations
field_value
getattr
cls
field_name
None
# Process only if this is an instance of `FieldInfo`.
not
isinstance
field_value
FieldInfo
continue
# Initialize arguments for the standard `dataclasses.field`.
field_args
dict
'default'
field_value
# Handle `kw_only` for Python 3.10+
sys
version_info
and
field_value
kw_only
field_args
'kw_only'
True
# Set `repr` attribute if it's explicitly specified to be not `True`.
field_value
repr
not
True
field_args
'repr'
field_value
repr
setattr
cls
field_name
dataclasses
field
field_args
# In Python 3.9, when subclassing, information is pulled from cls.__dict__['__annotations__']
# for annotations, so we must make sure it's initialized before we add to it.
cls
__dict__
get
'__annotations__'
None
cls
__annotations__
cls
__annotations__
field_name
annotations
field_name
def
create_dataclass
cls
type
Any
type
PydanticDataclass
"""Create a Pydantic dataclass from a regular dataclass.
Args:
cls: The class to create the Pydantic dataclass from.
Returns:
A Pydantic dataclass.
"""
from
._internal._utils
import
is_model_class
is_model_class
cls
raise
PydanticUserError
'Cannot create a Pydantic dataclass from
cls
__name__
as it is already a Pydantic model'
code
'dataclass-on-model'
original_cls
cls
# we warn on conflicting config specifications, but only if the class doesn't have a dataclass base
# because a dataclass base might provide a __pydantic_config__ attribute that we don't want to warn about
has_dataclass_base
any
dataclasses
is_dataclass
base
for
base
cls
__bases__
not
has_dataclass_base
and
config
not
None
and
hasattr
cls
'__pydantic_config__'
warn
'`config` is set via both the `dataclass` decorator and `__pydantic_config__` for dataclass
cls
__name__
. '
'The `config` specification from `dataclass` decorator will take priority.'
category
UserWarning
stacklevel
# if config is not explicitly provided, try to read it from the type
config_dict
config
config
not
None
else
getattr
cls
'__pydantic_config__'
None
config_wrapper
_config
ConfigWrapper
config_dict
decorators
_decorators
DecoratorInfos
build
cls
# Keep track of the original __doc__ so that we can restore it after applying the dataclasses decorator
# Otherwise, classes with no __doc__ will have their signature added into the JSON schema description,
# since dataclasses.dataclass will set this as the __doc__
original_doc
cls
__doc__
_pydantic_dataclasses
is_builtin_dataclass
cls
# Don't preserve the docstring for vanilla dataclasses, as it may include the signature
# This matches v1 behavior, and there was an explicit test for it
original_doc
None
# We don't want to add validation to the existing std lib dataclass, so we will subclass it
#   If the class is generic, we need to make sure the subclass also inherits from Generic
#   with all the same parameters.
bases
cls
issubclass
cls
Generic
generic_base
Generic
cls
__parameters__
# type: ignore
bases
bases
generic_base
cls
types
new_class
cls
__name__
bases
make_pydantic_fields_compatible
cls
# Respect frozen setting from dataclass constructor and fallback to config setting if not provided
frozen
not
None
frozen_
frozen
config_wrapper
frozen
# It's not recommended to define both, as the setting from the dataclass decorator will take priority.
warn
'`frozen` is set via both the `dataclass` decorator and `config` for dataclass
cls
__name__
!r}
'This is not recommended. The `frozen` specification on `dataclass` will take priority.'
category
UserWarning
stacklevel
else
frozen_
config_wrapper
frozen
False
cls
dataclasses
dataclass
# type: ignore[call-overload]
cls
# the value of init here doesn't affect anything except that it makes it easier to generate a signature
init
True
repr
repr
order
order
unsafe_hash
unsafe_hash
frozen
frozen_
kwargs
# This is an undocumented attribute to distinguish stdlib/Pydantic dataclasses.
# It should be set as early as possible:
cls
__is_pydantic_dataclass__
True
cls
__pydantic_decorators__
decorators
# type: ignore
cls
__doc__
original_doc
cls
__module__
original_cls
__module__
cls
__qualname__
original_cls
__qualname__
cls
__pydantic_fields_complete__
classmethod
_pydantic_fields_complete
cls
__pydantic_complete__
False
# `complete_dataclass` will set it to `True` if successful.
# TODO `parent_namespace` is currently None, but we could do the same thing as Pydantic models:
# fetch the parent ns using `parent_frame_namespace` (if the dataclass was defined in a function),
# and possibly cache it (see the `__pydantic_parent_namespace__` logic for models).
_pydantic_dataclasses
complete_dataclass
cls
config_wrapper
raise_errors
False
return
cls
return
create_dataclass
_cls
None
else
create_dataclass
_cls
rebuild_dataclass
rebuild_dataclass
cls
type
PydanticDataclass
force
bool
False
raise_errors
bool
True
_parent_namespace_depth
int
_types_namespace
MappingNamespace
None
None
bool
None
Try to rebuild the pydantic-core schema for the dataclass.
This may be necessary when one of the annotations is a ForwardRef which could not be resolved during
the initial attempt to build the schema, and automatic rebuilding fails.
This is analogous to
BaseModel.model_rebuild
Parameters:
Name
Type
Description
Default
cls
type
PydanticDataclass
The class to rebuild the pydantic-core schema for.
required
force
bool
Whether to force the rebuilding of the schema, defaults to
False
False
raise_errors
bool
Whether to raise errors, defaults to
True
True
_parent_namespace_depth
int
The depth level of the parent namespace, defaults to 2.
_types_namespace
MappingNamespace
| None
The types namespace, defaults to
None
None
Returns:
Type
Description
bool
| None
Returns
None
if the schema is already "complete" and rebuilding was not required.
bool
| None
If rebuilding
was
required, returns
True
if rebuilding was successful, otherwise
False
Source code in
pydantic/dataclasses.py
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
def
rebuild_dataclass
cls
type
PydanticDataclass
force
bool
False
raise_errors
bool
True
_parent_namespace_depth
int
_types_namespace
MappingNamespace
None
None
bool
None
"""Try to rebuild the pydantic-core schema for the dataclass.
This may be necessary when one of the annotations is a ForwardRef which could not be resolved during
the initial attempt to build the schema, and automatic rebuilding fails.
This is analogous to `BaseModel.model_rebuild`.
Args:
cls: The class to rebuild the pydantic-core schema for.
force: Whether to force the rebuilding of the schema, defaults to `False`.
raise_errors: Whether to raise errors, defaults to `True`.
_parent_namespace_depth: The depth level of the parent namespace, defaults to 2.
_types_namespace: The types namespace, defaults to `None`.
Returns:
Returns `None` if the schema is already "complete" and rebuilding was not required.
If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.
"""
not
force
and
cls
__pydantic_complete__
return
None
for
attr
'__pydantic_core_schema__'
'__pydantic_validator__'
'__pydantic_serializer__'
attr
cls
__dict__
# Deleting the validator/serializer is necessary as otherwise they can get reused in
# pydantic-core. Same applies for the core schema that can be reused in schema generation.
delattr
cls
attr
cls
__pydantic_complete__
False
_types_namespace
not
None
rebuild_ns
_types_namespace
elif
_parent_namespace_depth
rebuild_ns
_typing_extra
parent_frame_namespace
parent_depth
_parent_namespace_depth
force
True
else
rebuild_ns
ns_resolver
_namespace_utils
NsResolver
parent_namespace
rebuild_ns
return
_pydantic_dataclasses
complete_dataclass
cls
_config
ConfigWrapper
cls
__pydantic_config__
check
False
raise_errors
raise_errors
ns_resolver
ns_resolver
# We could provide a different config instead (with `'defer_build'` set to `True`)
# of this explicit `_force_build` argument, but because config can come from the
# decorator parameter or the `__pydantic_config__` attribute, `complete_dataclass`
# will overwrite `__pydantic_config__` with the provided config above:
_force_build
True
is_pydantic_dataclass
is_pydantic_dataclass
class_
type
Any
TypeGuard
type
PydanticDataclass
Whether a class is a pydantic dataclass.
Parameters:
Name
Type
Description
Default
class_
type
Any
The class.
required
Returns:
Type
Description
TypeGuard
type
PydanticDataclass
True
if the class is a pydantic dataclass,
False
otherwise.
Source code in
pydantic/dataclasses.py
371
372
373
374
375
376
377
378
379
380
381
382
383
def
is_pydantic_dataclass
class_
type
Any
TypeGuard
type
PydanticDataclass
]]:
"""Whether a class is a pydantic dataclass.
Args:
class_: The class.
Returns:
`True` if the class is a pydantic dataclass, `False` otherwise.
"""
try
return
'__is_pydantic_dataclass__'
class_
__dict__
and
dataclasses
is_dataclass
class_
except
AttributeError
return
False
Was this page helpful?
Thanks for your feedback!
Thanks for your feedback!