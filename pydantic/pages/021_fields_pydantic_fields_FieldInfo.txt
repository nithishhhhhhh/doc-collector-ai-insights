URL: https://docs.pydantic.dev/2.11/api/fields/#pydantic.fields.FieldInfo
==================================================

Fields
Defining fields on models.
Field
Field
default
ellipsis
alias
str
None
_Unset
alias_priority
int
None
_Unset
validation_alias
str
AliasPath
AliasChoices
None
_Unset
serialization_alias
str
None
_Unset
title
str
None
_Unset
field_title_generator
Callable
str
FieldInfo
str
None
_Unset
description
str
None
_Unset
examples
list
Any
None
_Unset
exclude
bool
None
_Unset
discriminator
str
Discriminator
None
_Unset
deprecated
Deprecated
str
bool
None
_Unset
json_schema_extra
JsonDict
Callable
JsonDict
None
None
_Unset
frozen
bool
None
_Unset
validate_default
bool
None
_Unset
repr
bool
_Unset
init
bool
None
_Unset
init_var
bool
None
_Unset
kw_only
bool
None
_Unset
pattern
str
Pattern
str
None
_Unset
strict
bool
None
_Unset
coerce_numbers_to_str
bool
None
_Unset
SupportsGt
None
_Unset
SupportsGe
None
_Unset
SupportsLt
None
_Unset
SupportsLe
None
_Unset
multiple_of
float
None
_Unset
allow_inf_nan
bool
None
_Unset
max_digits
int
None
_Unset
decimal_places
int
None
_Unset
min_length
int
None
_Unset
max_length
int
None
_Unset
union_mode
Literal
"smart"
"left_to_right"
_Unset
fail_fast
bool
None
_Unset
extra
Unpack
_EmptyKwargs
Any
Field
default
alias
str
None
_Unset
alias_priority
int
None
_Unset
validation_alias
str
AliasPath
AliasChoices
None
_Unset
serialization_alias
str
None
_Unset
title
str
None
_Unset
field_title_generator
Callable
str
FieldInfo
str
None
_Unset
description
str
None
_Unset
examples
list
Any
None
_Unset
exclude
bool
None
_Unset
discriminator
str
Discriminator
None
_Unset
deprecated
Deprecated
str
bool
None
_Unset
json_schema_extra
JsonDict
Callable
JsonDict
None
None
_Unset
frozen
bool
None
_Unset
validate_default
bool
None
_Unset
repr
bool
_Unset
init
bool
None
_Unset
init_var
bool
None
_Unset
kw_only
bool
None
_Unset
pattern
str
Pattern
str
None
_Unset
strict
bool
None
_Unset
coerce_numbers_to_str
bool
None
_Unset
SupportsGt
None
_Unset
SupportsGe
None
_Unset
SupportsLt
None
_Unset
SupportsLe
None
_Unset
multiple_of
float
None
_Unset
allow_inf_nan
bool
None
_Unset
max_digits
int
None
_Unset
decimal_places
int
None
_Unset
min_length
int
None
_Unset
max_length
int
None
_Unset
union_mode
Literal
"smart"
"left_to_right"
_Unset
fail_fast
bool
None
_Unset
extra
Unpack
_EmptyKwargs
Field
default_factory
Callable
[[],
Callable
dict
str
Any
]],
alias
str
None
_Unset
alias_priority
int
None
_Unset
validation_alias
str
AliasPath
AliasChoices
None
_Unset
serialization_alias
str
None
_Unset
title
str
None
_Unset
field_title_generator
Callable
str
FieldInfo
str
None
_Unset
description
str
None
_Unset
examples
list
Any
None
_Unset
exclude
bool
None
_Unset
discriminator
str
Discriminator
None
_Unset
deprecated
Deprecated
str
bool
None
_Unset
json_schema_extra
JsonDict
Callable
JsonDict
None
None
_Unset
frozen
bool
None
_Unset
validate_default
bool
None
_Unset
repr
bool
_Unset
init
bool
None
_Unset
init_var
bool
None
_Unset
kw_only
bool
None
_Unset
pattern
str
Pattern
str
None
_Unset
strict
bool
None
_Unset
coerce_numbers_to_str
bool
None
_Unset
SupportsGt
None
_Unset
SupportsGe
None
_Unset
SupportsLt
None
_Unset
SupportsLe
None
_Unset
multiple_of
float
None
_Unset
allow_inf_nan
bool
None
_Unset
max_digits
int
None
_Unset
decimal_places
int
None
_Unset
min_length
int
None
_Unset
max_length
int
None
_Unset
union_mode
Literal
"smart"
"left_to_right"
_Unset
fail_fast
bool
None
_Unset
extra
Unpack
_EmptyKwargs
Field
alias
str
None
_Unset
alias_priority
int
None
_Unset
validation_alias
str
AliasPath
AliasChoices
None
_Unset
serialization_alias
str
None
_Unset
title
str
None
_Unset
field_title_generator
Callable
str
FieldInfo
str
None
_Unset
description
str
None
_Unset
examples
list
Any
None
_Unset
exclude
bool
None
_Unset
discriminator
str
Discriminator
None
_Unset
deprecated
Deprecated
str
bool
None
_Unset
json_schema_extra
JsonDict
Callable
JsonDict
None
None
_Unset
frozen
bool
None
_Unset
validate_default
bool
None
_Unset
repr
bool
_Unset
init
bool
None
_Unset
init_var
bool
None
_Unset
kw_only
bool
None
_Unset
pattern
str
Pattern
str
None
_Unset
strict
bool
None
_Unset
coerce_numbers_to_str
bool
None
_Unset
SupportsGt
None
_Unset
SupportsGe
None
_Unset
SupportsLt
None
_Unset
SupportsLe
None
_Unset
multiple_of
float
None
_Unset
allow_inf_nan
bool
None
_Unset
max_digits
int
None
_Unset
decimal_places
int
None
_Unset
min_length
int
None
_Unset
max_length
int
None
_Unset
union_mode
Literal
"smart"
"left_to_right"
_Unset
fail_fast
bool
None
_Unset
extra
Unpack
_EmptyKwargs
Any
Field
default
Any
PydanticUndefined
default_factory
Callable
[[],
Any
Callable
dict
str
Any
]],
Any
None
_Unset
alias
str
None
_Unset
alias_priority
int
None
_Unset
validation_alias
str
AliasPath
AliasChoices
None
_Unset
serialization_alias
str
None
_Unset
title
str
None
_Unset
field_title_generator
Callable
str
FieldInfo
str
None
_Unset
description
str
None
_Unset
examples
list
Any
None
_Unset
exclude
bool
None
_Unset
discriminator
str
Discriminator
None
_Unset
deprecated
Deprecated
str
bool
None
_Unset
json_schema_extra
JsonDict
Callable
JsonDict
None
None
_Unset
frozen
bool
None
_Unset
validate_default
bool
None
_Unset
repr
bool
_Unset
init
bool
None
_Unset
init_var
bool
None
_Unset
kw_only
bool
None
_Unset
pattern
str
Pattern
str
None
_Unset
strict
bool
None
_Unset
coerce_numbers_to_str
bool
None
_Unset
SupportsGt
None
_Unset
SupportsGe
None
_Unset
SupportsLt
None
_Unset
SupportsLe
None
_Unset
multiple_of
float
None
_Unset
allow_inf_nan
bool
None
_Unset
max_digits
int
None
_Unset
decimal_places
int
None
_Unset
min_length
int
None
_Unset
max_length
int
None
_Unset
union_mode
Literal
"smart"
"left_to_right"
_Unset
fail_fast
bool
None
_Unset
extra
Unpack
_EmptyKwargs
Any
Usage Documentation
Fields
Create a field for objects that can be configured.
Used to provide extra information about a field, either for the model schema or complex validation. Some arguments
apply only to number fields (
int
float
Decimal
) and some apply only to
str
Note
Any
_Unset
objects will be replaced by the corresponding value defined in the
_DefaultValues
dictionary. If a key for the
_Unset
object is not found in the
_DefaultValues
dictionary, it will default to
None
Parameters:
Name
Type
Description
Default
default
Any
Default value if the field is not set.
PydanticUndefined
default_factory
Callable
[[],
Any
] |
Callable
dict
str
Any
]],
Any
] | None
A callable to generate the default value. The callable can either take 0 arguments
(in which case it is called as is) or a single argument containing the already validated data.
_Unset
alias
str
| None
The name to use for the attribute when validating or serializing by alias.
This is often used for things like converting between snake and camel case.
_Unset
alias_priority
int
| None
Priority of the alias. This affects whether an alias generator is used.
_Unset
validation_alias
str
AliasPath
AliasChoices
| None
Like
alias
, but only affects validation, not serialization.
_Unset
serialization_alias
str
| None
Like
alias
, but only affects serialization, not validation.
_Unset
title
str
| None
Human-readable title.
_Unset
field_title_generator
Callable
str
FieldInfo
str
] | None
A callable that takes a field name and returns title for it.
_Unset
description
str
| None
Human-readable description.
_Unset
examples
list
Any
] | None
Example values for this field.
_Unset
exclude
bool
| None
Whether to exclude the field from the model serialization.
_Unset
discriminator
str
Discriminator
| None
Field name or Discriminator for discriminating the type in a tagged union.
_Unset
deprecated
Deprecated
str
bool
| None
A deprecation message, an instance of
warnings.deprecated
or the
typing_extensions.deprecated
backport,
or a boolean. If
True
, a default deprecation message will be emitted when accessing the field.
_Unset
json_schema_extra
JsonDict
Callable
JsonDict
], None] | None
A dict or callable to provide extra JSON schema properties.
_Unset
frozen
bool
| None
Whether the field is frozen. If true, attempts to change the value on an instance will raise an error.
_Unset
validate_default
bool
| None
True
, apply validation to the default value every time you create an instance.
Otherwise, for performance reasons, the default value of the field is trusted and not validated.
_Unset
repr
bool
A boolean indicating whether to include the field in the
__repr__
output.
_Unset
init
bool
| None
Whether the field should be included in the constructor of the dataclass.
(Only applies to dataclasses.)
_Unset
init_var
bool
| None
Whether the field should
only
be included in the constructor of the dataclass.
(Only applies to dataclasses.)
_Unset
kw_only
bool
| None
Whether the field should be a keyword-only argument in the constructor of the dataclass.
(Only applies to dataclasses.)
_Unset
coerce_numbers_to_str
bool
| None
Whether to enable coercion of any
Number
type to
str
(not applicable in
strict
mode).
_Unset
strict
bool
| None
True
, strict validation is applied to the field.
See
Strict Mode
for details.
_Unset
SupportsGt
| None
Greater than. If set, value must be greater than this. Only applicable to numbers.
_Unset
SupportsGe
| None
Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.
_Unset
SupportsLt
| None
Less than. If set, value must be less than this. Only applicable to numbers.
_Unset
SupportsLe
| None
Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.
_Unset
multiple_of
float
| None
Value must be a multiple of this. Only applicable to numbers.
_Unset
min_length
int
| None
Minimum length for iterables.
_Unset
max_length
int
| None
Maximum length for iterables.
_Unset
pattern
str
Pattern
str
] | None
Pattern for strings (a regular expression).
_Unset
allow_inf_nan
bool
| None
Allow
inf
-inf
nan
. Only applicable to float and
Decimal
numbers.
_Unset
max_digits
int
| None
Maximum number of allow digits for strings.
_Unset
decimal_places
int
| None
Maximum number of decimal places allowed for numbers.
_Unset
union_mode
Literal
['smart', 'left_to_right']
The strategy to apply when validating a union. Can be
smart
(the default), or
left_to_right
See
Union Mode
for details.
_Unset
fail_fast
bool
| None
True
, validation will stop on the first error. If
False
, all validation errors will be collected.
This option can be applied only to iterable types (list, tuple, set, and frozenset).
_Unset
extra
Unpack
_EmptyKwargs
(Deprecated) Extra fields that will be included in the JSON schema.
Warning
The
extra
kwargs is deprecated. Use
json_schema_extra
instead.
Returns:
Type
Description
Any
A new
FieldInfo
. The return annotation is
Any
Field
can be used on
type-annotated fields without causing a type error.
Source code in
pydantic/fields.py
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
985
986
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044
1045
1046
1047
1048
1049
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064
1065
1066
1067
1068
1069
1070
1071
1072
1073
1074
1075
1076
1077
1078
1079
1080
1081
1082
1083
1084
1085
1086
1087
1088
1089
1090
1091
1092
1093
1094
1095
1096
1097
1098
1099
1100
1101
1102
1103
1104
1105
1106
1107
1108
1109
1110
1111
1112
1113
1114
1115
1116
1117
1118
1119
1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1139
1140
1141
1142
1143
1144
1145
1146
1147
1148
1149
1150
1151
1152
1153
1154
1155
def
Field
# noqa: C901
default
Any
PydanticUndefined
default_factory
Callable
[[],
Any
Callable
dict
str
Any
]],
Any
None
_Unset
alias
str
None
_Unset
alias_priority
int
None
_Unset
validation_alias
str
AliasPath
AliasChoices
None
_Unset
serialization_alias
str
None
_Unset
title
str
None
_Unset
field_title_generator
Callable
str
FieldInfo
str
None
_Unset
description
str
None
_Unset
examples
list
Any
None
_Unset
exclude
bool
None
_Unset
discriminator
str
types
Discriminator
None
_Unset
deprecated
Deprecated
str
bool
None
_Unset
json_schema_extra
JsonDict
Callable
JsonDict
None
None
_Unset
frozen
bool
None
_Unset
validate_default
bool
None
_Unset
repr
bool
_Unset
init
bool
None
_Unset
init_var
bool
None
_Unset
kw_only
bool
None
_Unset
pattern
str
typing
Pattern
str
None
_Unset
strict
bool
None
_Unset
coerce_numbers_to_str
bool
None
_Unset
annotated_types
SupportsGt
None
_Unset
annotated_types
SupportsGe
None
_Unset
annotated_types
SupportsLt
None
_Unset
annotated_types
SupportsLe
None
_Unset
multiple_of
float
None
_Unset
allow_inf_nan
bool
None
_Unset
max_digits
int
None
_Unset
decimal_places
int
None
_Unset
min_length
int
None
_Unset
max_length
int
None
_Unset
union_mode
Literal
'smart'
'left_to_right'
_Unset
fail_fast
bool
None
_Unset
extra
Unpack
_EmptyKwargs
Any
"""!!! abstract "Usage Documentation"
[Fields](../concepts/fields.md)
Create a field for objects that can be configured.
Used to provide extra information about a field, either for the model schema or complex validation. Some arguments
apply only to number fields (`int`, `float`, `Decimal`) and some apply only to `str`.
Note:
- Any `_Unset` objects will be replaced by the corresponding value defined in the `_DefaultValues` dictionary. If a key for the `_Unset` object is not found in the `_DefaultValues` dictionary, it will default to `None`
Args:
default: Default value if the field is not set.
default_factory: A callable to generate the default value. The callable can either take 0 arguments
(in which case it is called as is) or a single argument containing the already validated data.
alias: The name to use for the attribute when validating or serializing by alias.
This is often used for things like converting between snake and camel case.
alias_priority: Priority of the alias. This affects whether an alias generator is used.
validation_alias: Like `alias`, but only affects validation, not serialization.
serialization_alias: Like `alias`, but only affects serialization, not validation.
title: Human-readable title.
field_title_generator: A callable that takes a field name and returns title for it.
description: Human-readable description.
examples: Example values for this field.
exclude: Whether to exclude the field from the model serialization.
discriminator: Field name or Discriminator for discriminating the type in a tagged union.
deprecated: A deprecation message, an instance of `warnings.deprecated` or the `typing_extensions.deprecated` backport,
or a boolean. If `True`, a default deprecation message will be emitted when accessing the field.
json_schema_extra: A dict or callable to provide extra JSON schema properties.
frozen: Whether the field is frozen. If true, attempts to change the value on an instance will raise an error.
validate_default: If `True`, apply validation to the default value every time you create an instance.
Otherwise, for performance reasons, the default value of the field is trusted and not validated.
repr: A boolean indicating whether to include the field in the `__repr__` output.
init: Whether the field should be included in the constructor of the dataclass.
(Only applies to dataclasses.)
init_var: Whether the field should _only_ be included in the constructor of the dataclass.
(Only applies to dataclasses.)
kw_only: Whether the field should be a keyword-only argument in the constructor of the dataclass.
(Only applies to dataclasses.)
coerce_numbers_to_str: Whether to enable coercion of any `Number` type to `str` (not applicable in `strict` mode).
strict: If `True`, strict validation is applied to the field.
See [Strict Mode](../concepts/strict_mode.md) for details.
gt: Greater than. If set, value must be greater than this. Only applicable to numbers.
ge: Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.
lt: Less than. If set, value must be less than this. Only applicable to numbers.
le: Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.
multiple_of: Value must be a multiple of this. Only applicable to numbers.
min_length: Minimum length for iterables.
max_length: Maximum length for iterables.
pattern: Pattern for strings (a regular expression).
allow_inf_nan: Allow `inf`, `-inf`, `nan`. Only applicable to float and [`Decimal`][decimal.Decimal] numbers.
max_digits: Maximum number of allow digits for strings.
decimal_places: Maximum number of decimal places allowed for numbers.
union_mode: The strategy to apply when validating a union. Can be `smart` (the default), or `left_to_right`.
See [Union Mode](../concepts/unions.md#union-modes) for details.
fail_fast: If `True`, validation will stop on the first error. If `False`, all validation errors will be collected.
This option can be applied only to iterable types (list, tuple, set, and frozenset).
extra: (Deprecated) Extra fields that will be included in the JSON schema.
!!! warning Deprecated
The `extra` kwargs is deprecated. Use `json_schema_extra` instead.
Returns:
A new [`FieldInfo`][pydantic.fields.FieldInfo]. The return annotation is `Any` so `Field` can be used on
type-annotated fields without causing a type error.
"""
# Check deprecated and removed params from V1. This logic should eventually be removed.
const
extra
pop
'const'
None
# type: ignore
const
not
None
raise
PydanticUserError
'`const` is removed, use `Literal` instead'
code
'removed-kwargs'
min_items
extra
pop
'min_items'
None
# type: ignore
min_items
not
None
warn
'`min_items` is deprecated and will be removed, use `min_length` instead'
DeprecationWarning
min_length
None
_Unset
min_length
min_items
# type: ignore
max_items
extra
pop
'max_items'
None
# type: ignore
max_items
not
None
warn
'`max_items` is deprecated and will be removed, use `max_length` instead'
DeprecationWarning
max_length
None
_Unset
max_length
max_items
# type: ignore
unique_items
extra
pop
'unique_items'
None
# type: ignore
unique_items
not
None
raise
PydanticUserError
'`unique_items` is removed, use `Set` instead'
'(this feature is discussed in https://github.com/pydantic/pydantic-core/issues/296)'
code
'removed-kwargs'
allow_mutation
extra
pop
'allow_mutation'
None
# type: ignore
allow_mutation
not
None
warn
'`allow_mutation` is deprecated and will be removed. use `frozen` instead'
DeprecationWarning
allow_mutation
False
frozen
True
regex
extra
pop
'regex'
None
# type: ignore
regex
not
None
raise
PydanticUserError
'`regex` is removed. use `pattern` instead'
code
'removed-kwargs'
extra
warn
'Using extra keyword arguments on `Field` is deprecated and will be removed.'
' Use `json_schema_extra` instead.'
' (Extra keys:
", "
join
__repr__
for
extra
keys
())
DeprecationWarning
not
json_schema_extra
json_schema_extra
_Unset
json_schema_extra
extra
# type: ignore
validation_alias
and
validation_alias
not
_Unset
and
not
isinstance
validation_alias
str
AliasChoices
AliasPath
raise
TypeError
'Invalid `validation_alias` type. it should be `str`, `AliasChoices`, or `AliasPath`'
serialization_alias
_Unset
None
and
isinstance
alias
str
serialization_alias
alias
validation_alias
_Unset
None
validation_alias
alias
include
extra
pop
'include'
None
# type: ignore
include
not
None
warn
'`include` is deprecated and does nothing. It will be removed, use `exclude` instead'
DeprecationWarning
return
FieldInfo
from_field
default
default_factory
default_factory
alias
alias
alias_priority
alias_priority
validation_alias
validation_alias
serialization_alias
serialization_alias
title
title
field_title_generator
field_title_generator
description
description
examples
examples
exclude
exclude
discriminator
discriminator
deprecated
deprecated
json_schema_extra
json_schema_extra
frozen
frozen
pattern
pattern
validate_default
validate_default
repr
repr
init
init
init_var
init_var
kw_only
kw_only
coerce_numbers_to_str
coerce_numbers_to_str
strict
strict
multiple_of
multiple_of
min_length
min_length
max_length
max_length
allow_inf_nan
allow_inf_nan
max_digits
max_digits
decimal_places
decimal_places
union_mode
union_mode
fail_fast
fail_fast
FieldInfo
FieldInfo
kwargs
Unpack
_FieldInfoInputs
Bases:
Representation
This class holds information about a field.
FieldInfo
is used for any field definition regardless of whether the
Field()
function is explicitly used.
Warning
You generally shouldn't be creating
FieldInfo
directly, you'll only need to use it when accessing
BaseModel
.model_fields
internals.
Attributes:
Name
Type
Description
annotation
type
Any
] | None
The type annotation of the field.
default
Any
The default value of the field.
default_factory
Callable
[[],
Any
] |
Callable
dict
str
Any
]],
Any
] | None
A callable to generate the default value. The callable can either take 0 arguments
(in which case it is called as is) or a single argument containing the already validated data.
alias
str
| None
The alias name of the field.
alias_priority
int
| None
The priority of the field's alias.
validation_alias
str
AliasPath
AliasChoices
| None
The validation alias of the field.
serialization_alias
str
| None
The serialization alias of the field.
title
str
| None
The title of the field.
field_title_generator
Callable
str
FieldInfo
str
] | None
A callable that takes a field name and returns title for it.
description
str
| None
The description of the field.
examples
list
Any
] | None
List of examples of the field.
exclude
bool
| None
Whether to exclude the field from the model serialization.
discriminator
str
Discriminator
| None
Field name or Discriminator for discriminating the type in a tagged union.
deprecated
Deprecated
str
bool
| None
A deprecation message, an instance of
warnings.deprecated
or the
typing_extensions.deprecated
backport,
or a boolean. If
True
, a default deprecation message will be emitted when accessing the field.
json_schema_extra
JsonDict
Callable
JsonDict
], None] | None
A dict or callable to provide extra JSON schema properties.
frozen
bool
| None
Whether the field is frozen.
validate_default
bool
| None
Whether to validate the default value of the field.
repr
bool
Whether to include the field in representation of the model.
init
bool
| None
Whether the field should be included in the constructor of the dataclass.
init_var
bool
| None
Whether the field should
only
be included in the constructor of the dataclass, and not stored.
kw_only
bool
| None
Whether the field should be a keyword-only argument in the constructor of the dataclass.
metadata
list
Any
List of metadata constraints.
See the signature of
pydantic.fields.Field
for more details about the expected arguments.
Source code in
pydantic/fields.py
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
def
__init__
self
kwargs
Unpack
_FieldInfoInputs
None
"""This class should generally not be initialized directly; instead, use the `pydantic.fields.Field` function
or one of the constructor classmethods.
See the signature of `pydantic.fields.Field` for more details about the expected arguments.
"""
self
_attributes_set
for
kwargs
items
not
_Unset
kwargs
_DefaultValues
get
_Unset
else
for
kwargs
items
()}
# type: ignore
self
annotation
kwargs
get
'annotation'
default
kwargs
pop
'default'
PydanticUndefined
default
Ellipsis
self
default
PydanticUndefined
self
_attributes_set
pop
'default'
None
else
self
default
default
self
default_factory
kwargs
pop
'default_factory'
None
self
default
not
PydanticUndefined
and
self
default_factory
not
None
raise
TypeError
'cannot specify both default and default_factory'
self
alias
kwargs
pop
'alias'
None
self
validation_alias
kwargs
pop
'validation_alias'
None
self
serialization_alias
kwargs
pop
'serialization_alias'
None
alias_is_set
any
alias
not
None
for
alias
self
alias
self
validation_alias
self
serialization_alias
self
alias_priority
kwargs
pop
'alias_priority'
None
alias_is_set
else
None
self
title
kwargs
pop
'title'
None
self
field_title_generator
kwargs
pop
'field_title_generator'
None
self
description
kwargs
pop
'description'
None
self
examples
kwargs
pop
'examples'
None
self
exclude
kwargs
pop
'exclude'
None
self
discriminator
kwargs
pop
'discriminator'
None
# For compatibility with FastAPI<=0.110.0, we preserve the existing value if it is not overridden
self
deprecated
kwargs
pop
'deprecated'
getattr
self
'deprecated'
None
self
repr
kwargs
pop
'repr'
True
self
json_schema_extra
kwargs
pop
'json_schema_extra'
None
self
validate_default
kwargs
pop
'validate_default'
None
self
frozen
kwargs
pop
'frozen'
None
# currently only used on dataclasses
self
init
kwargs
pop
'init'
None
self
init_var
kwargs
pop
'init_var'
None
self
kw_only
kwargs
pop
'kw_only'
None
self
metadata
self
_collect_metadata
kwargs
# type: ignore
# Private attributes:
self
_qualifiers
set
Qualifier
set
# Used to rebuild FieldInfo instances:
self
_complete
True
self
_original_annotation
Any
PydanticUndefined
self
_original_assignment
Any
PydanticUndefined
from_field
staticmethod
from_field
default
Any
PydanticUndefined
kwargs
Unpack
_FromFieldInfoInputs
FieldInfo
Create a new
FieldInfo
object with the
Field
function.
Parameters:
Name
Type
Description
Default
default
Any
The default value for the field. Defaults to Undefined.
PydanticUndefined
**kwargs
Unpack
_FromFieldInfoInputs
Additional arguments dictionary.
Raises:
Type
Description
TypeError
If 'annotation' is passed as a keyword argument.
Returns:
Type
Description
FieldInfo
A new FieldInfo object with the given parameters.
Example
This is how you can create a field with default value like this:
import
pydantic
class
MyModel
pydantic
BaseModel
foo
int
pydantic
Field
Source code in
pydantic/fields.py
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
@staticmethod
def
from_field
default
Any
PydanticUndefined
kwargs
Unpack
_FromFieldInfoInputs
FieldInfo
"""Create a new `FieldInfo` object with the `Field` function.
Args:
default: The default value for the field. Defaults to Undefined.
**kwargs: Additional arguments dictionary.
Raises:
TypeError: If 'annotation' is passed as a keyword argument.
Returns:
A new FieldInfo object with the given parameters.
Example:
This is how you can create a field with default value like this:
```python
import pydantic
class MyModel(pydantic.BaseModel):
foo: int = pydantic.Field(4)
```
"""
'annotation'
kwargs
raise
TypeError
'"annotation" is not permitted as a Field keyword argument'
return
FieldInfo
default
default
kwargs
from_annotation
staticmethod
from_annotation
annotation
type
Any
_source
AnnotationSource
ANY
FieldInfo
Creates a
FieldInfo
instance from a bare annotation.
This function is used internally to create a
FieldInfo
from a bare annotation like this:
import
pydantic
class
MyModel
pydantic
BaseModel
foo
int
# <-- like this
We also account for the case where the annotation can be an instance of
Annotated
and where
one of the (not first) arguments in
Annotated
is an instance of
FieldInfo
, e.g.:
from
typing
import
Annotated
import
annotated_types
import
pydantic
class
MyModel
pydantic
BaseModel
foo
Annotated
int
annotated_types
bar
Annotated
int
pydantic
Field
Parameters:
Name
Type
Description
Default
annotation
type
Any
An annotation object.
required
Returns:
Type
Description
FieldInfo
An instance of the field metadata.
Source code in
pydantic/fields.py
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
@staticmethod
def
from_annotation
annotation
type
Any
_source
AnnotationSource
AnnotationSource
ANY
FieldInfo
"""Creates a `FieldInfo` instance from a bare annotation.
This function is used internally to create a `FieldInfo` from a bare annotation like this:
```python
import pydantic
class MyModel(pydantic.BaseModel):
foo: int  # <-- like this
```
We also account for the case where the annotation can be an instance of `Annotated` and where
one of the (not first) arguments in `Annotated` is an instance of `FieldInfo`, e.g.:
```python
from typing import Annotated
import annotated_types
import pydantic
class MyModel(pydantic.BaseModel):
foo: Annotated[int, annotated_types.Gt(42)]
bar: Annotated[int, pydantic.Field(gt=42)]
```
Args:
annotation: An annotation object.
Returns:
An instance of the field metadata.
"""
try
inspected_ann
inspect_annotation
annotation
annotation_source
_source
unpack_type_aliases
'skip'
except
ForbiddenQualifier
raise
PydanticForbiddenQualifier
qualifier
annotation
# TODO check for classvar and error?
# No assigned value, this happens when using a bare `Final` qualifier (also for other
# qualifiers, but they shouldn't appear here). In this case we infer the type as `Any`
# because we don't have any assigned value.
type_expr
Any
Any
inspected_ann
type
UNKNOWN
else
inspected_ann
type
final
'final'
inspected_ann
qualifiers
metadata
inspected_ann
metadata
not
metadata
# No metadata, e.g. `field: int`, or `field: Final[str]`:
field_info
FieldInfo
annotation
type_expr
frozen
final
None
field_info
_qualifiers
inspected_ann
qualifiers
return
field_info
# With metadata, e.g. `field: Annotated[int, Field(...), Gt(1)]`:
field_info_annotations
for
metadata
isinstance
FieldInfo
field_info
FieldInfo
merge_field_infos
field_info_annotations
annotation
type_expr
new_field_info
field_info
_copy
new_field_info
annotation
type_expr
new_field_info
frozen
final
field_info
frozen
field_metadata
list
Any
for
metadata
typing_objects
is_deprecated
new_field_info
deprecated
message
elif
not
isinstance
FieldInfo
field_metadata
append
else
field_metadata
extend
metadata
new_field_info
metadata
field_metadata
new_field_info
_qualifiers
inspected_ann
qualifiers
return
new_field_info
from_annotated_attribute
staticmethod
from_annotated_attribute
annotation
type
Any
default
Any
_source
AnnotationSource
ANY
FieldInfo
Create
FieldInfo
from an annotation with a default value.
This is used in cases like the following:
from
typing
import
Annotated
import
annotated_types
import
pydantic
class
MyModel
pydantic
BaseModel
foo
int
# <-- like this
bar
Annotated
int
annotated_types
# <-- or this
spam
Annotated
int
pydantic
Field
# <-- or this
Parameters:
Name
Type
Description
Default
annotation
type
Any
The type annotation of the field.
required
default
Any
The default value of the field.
required
Returns:
Type
Description
FieldInfo
A field object with the passed values.
Source code in
pydantic/fields.py
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
@staticmethod
def
from_annotated_attribute
annotation
type
Any
default
Any
_source
AnnotationSource
AnnotationSource
ANY
FieldInfo
"""Create `FieldInfo` from an annotation with a default value.
This is used in cases like the following:
```python
from typing import Annotated
import annotated_types
import pydantic
class MyModel(pydantic.BaseModel):
foo: int = 4  # <-- like this
bar: Annotated[int, annotated_types.Gt(4)] = 4  # <-- or this
spam: Annotated[int, pydantic.Field(gt=4)] = 4  # <-- or this
```
Args:
annotation: The type annotation of the field.
default: The default value of the field.
Returns:
A field object with the passed values.
"""
annotation
default
raise
PydanticUserError
'Error when building FieldInfo from annotated attribute. '
"Make sure you don't have any field name clashing with a type annotation."
code
'unevaluable-type-annotation'
try
inspected_ann
inspect_annotation
annotation
annotation_source
_source
unpack_type_aliases
'skip'
except
ForbiddenQualifier
raise
PydanticForbiddenQualifier
qualifier
annotation
# TODO check for classvar and error?
# TODO infer from the default, this can be done in v3 once we treat final fields with
# a default as proper fields and not class variables:
type_expr
Any
Any
inspected_ann
type
UNKNOWN
else
inspected_ann
type
final
'final'
inspected_ann
qualifiers
metadata
inspected_ann
metadata
isinstance
default
FieldInfo
# e.g. `field: int = Field(...)`
default_metadata
default
metadata
copy
default
copy
default
default
metadata
default_metadata
default
annotation
type_expr
default
metadata
metadata
merged_default
FieldInfo
merge_field_infos
for
metadata
isinstance
FieldInfo
)],
default
annotation
default
annotation
merged_default
frozen
final
merged_default
frozen
merged_default
_qualifiers
inspected_ann
qualifiers
return
merged_default
isinstance
default
dataclasses
Field
# `collect_dataclass_fields()` passes the dataclass Field as a default.
pydantic_field
FieldInfo
_from_dataclass_field
default
pydantic_field
annotation
type_expr
pydantic_field
metadata
metadata
pydantic_field
FieldInfo
merge_field_infos
for
metadata
isinstance
FieldInfo
)],
pydantic_field
annotation
pydantic_field
annotation
pydantic_field
frozen
final
pydantic_field
frozen
pydantic_field
init_var
'init_var'
inspected_ann
qualifiers
pydantic_field
init
getattr
default
'init'
None
pydantic_field
kw_only
getattr
default
'kw_only'
None
pydantic_field
_qualifiers
inspected_ann
qualifiers
return
pydantic_field
not
metadata
# No metadata, e.g. `field: int = ...`, or `field: Final[str] = ...`:
field_info
FieldInfo
annotation
type_expr
default
default
frozen
final
None
field_info
_qualifiers
inspected_ann
qualifiers
return
field_info
# With metadata, e.g. `field: Annotated[int, Field(...), Gt(1)] = ...`:
field_infos
for
metadata
isinstance
FieldInfo
field_info
FieldInfo
merge_field_infos
field_infos
annotation
type_expr
default
default
field_metadata
list
Any
for
metadata
typing_objects
is_deprecated
field_info
deprecated
message
elif
not
isinstance
FieldInfo
field_metadata
append
else
field_metadata
extend
metadata
field_info
metadata
field_metadata
field_info
_qualifiers
inspected_ann
qualifiers
return
field_info
merge_field_infos
staticmethod
merge_field_infos
field_infos
FieldInfo
overrides
Any
FieldInfo
Merge
FieldInfo
instances keeping only explicitly set attributes.
Later
FieldInfo
instances override earlier ones.
Returns:
Name
Type
Description
FieldInfo
FieldInfo
A merged FieldInfo instance.
Source code in
pydantic/fields.py
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
@staticmethod
def
merge_field_infos
field_infos
FieldInfo
overrides
Any
FieldInfo
"""Merge `FieldInfo` instances keeping only explicitly set attributes.
Later `FieldInfo` instances override earlier ones.
Returns:
FieldInfo: A merged FieldInfo instance.
"""
len
field_infos
# No merging necessary, but we still need to make a copy and apply the overrides
field_info
field_infos
_copy
field_info
_attributes_set
update
overrides
default_override
overrides
pop
'default'
PydanticUndefined
default_override
Ellipsis
default_override
PydanticUndefined
default_override
not
PydanticUndefined
field_info
default
default_override
for
overrides
items
():
setattr
field_info
return
field_info
# type: ignore
merged_field_info_kwargs
dict
str
Any
metadata
for
field_info
field_infos
attributes_set
field_info
_attributes_set
copy
try
json_schema_extra
attributes_set
pop
'json_schema_extra'
existing_json_schema_extra
merged_field_info_kwargs
get
'json_schema_extra'
existing_json_schema_extra
None
merged_field_info_kwargs
'json_schema_extra'
json_schema_extra
isinstance
existing_json_schema_extra
dict
isinstance
json_schema_extra
dict
merged_field_info_kwargs
'json_schema_extra'
existing_json_schema_extra
json_schema_extra
callable
json_schema_extra
warn
'Composing `dict` and `callable` type `json_schema_extra` is not supported.'
'The `callable` type is being ignored.'
"If you'd like support for this behavior, please open an issue on pydantic."
PydanticJsonSchemaWarning
elif
callable
json_schema_extra
# if ever there's a case of a callable, we'll just keep the last json schema extra spec
merged_field_info_kwargs
'json_schema_extra'
json_schema_extra
except
KeyError
pass
# later FieldInfo instances override everything except json_schema_extra from earlier FieldInfo instances
merged_field_info_kwargs
update
attributes_set
for
field_info
metadata
not
isinstance
FieldInfo
metadata
type
merged_field_info_kwargs
update
overrides
field_info
FieldInfo
merged_field_info_kwargs
field_info
metadata
list
metadata
values
())
return
field_info
deprecation_message
property
deprecation_message
str
None
The deprecation message to be emitted, or
None
if not set.
default_factory_takes_validated_data
property
default_factory_takes_validated_data
bool
None
Whether the provided default factory callable has a validated data parameter.
Returns
None
if no default factory is set.
get_default
get_default
call_default_factory
Literal
True
validated_data
dict
str
Any
None
None
Any
get_default
call_default_factory
Literal
False
...
Any
get_default
call_default_factory
bool
False
validated_data
dict
str
Any
None
None
Any
Get the default value.
We expose an option for whether to call the default_factory (if present), as calling it may
result in side effects that we want to avoid. However, there are times when it really should
be called (namely, when instantiating a model via
model_construct
Parameters:
Name
Type
Description
Default
call_default_factory
bool
Whether to call the default factory or not.
False
validated_data
dict
str
Any
] | None
The already validated data to be passed to the default factory.
None
Returns:
Type
Description
Any
The default value, calling the default factory if requested or
None
if not set.
Source code in
pydantic/fields.py
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
def
get_default
self
call_default_factory
bool
False
validated_data
dict
str
Any
None
None
Any
"""Get the default value.
We expose an option for whether to call the default_factory (if present), as calling it may
result in side effects that we want to avoid. However, there are times when it really should
be called (namely, when instantiating a model via `model_construct`).
Args:
call_default_factory: Whether to call the default factory or not.
validated_data: The already validated data to be passed to the default factory.
Returns:
The default value, calling the default factory if requested or `None` if not set.
"""
self
default_factory
None
return
_utils
smart_deepcopy
self
default
elif
call_default_factory
self
default_factory_takes_validated_data
fac
cast
'Callable[[dict[str, Any]], Any]'
self
default_factory
validated_data
None
raise
ValueError
"The default factory requires the 'validated_data' argument, which was not provided when calling 'get_default'."
return
fac
validated_data
else
fac
cast
'Callable[[], Any]'
self
default_factory
return
fac
else
return
None
is_required
is_required
bool
Check if the field is required (i.e., does not have a default value or factory).
Returns:
Type
Description
bool
True
if the field is required,
False
otherwise.
Source code in
pydantic/fields.py
660
661
662
663
664
665
666
def
is_required
self
bool
"""Check if the field is required (i.e., does not have a default value or factory).
Returns:
`True` if the field is required, `False` otherwise.
"""
return
self
default
PydanticUndefined
and
self
default_factory
None
rebuild_annotation
rebuild_annotation
Any
Attempts to rebuild the original annotation for use in function signatures.
If metadata is present, it adds it to the original annotation using
Annotated
. Otherwise, it returns the original annotation as-is.
Note that because the metadata has been flattened, the original annotation
may not be reconstructed exactly as originally provided, e.g. if the original
type had unrecognized annotations, or was annotated with a call to
pydantic.Field
Returns:
Type
Description
Any
The rebuilt annotation.
Source code in
pydantic/fields.py
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
def
rebuild_annotation
self
Any
"""Attempts to rebuild the original annotation for use in function signatures.
If metadata is present, it adds it to the original annotation using
`Annotated`. Otherwise, it returns the original annotation as-is.
Note that because the metadata has been flattened, the original annotation
may not be reconstructed exactly as originally provided, e.g. if the original
type had unrecognized annotations, or was annotated with a call to `pydantic.Field`.
Returns:
The rebuilt annotation.
"""
not
self
metadata
return
self
annotation
else
# Annotated arguments must be a tuple
return
Annotated
self
annotation
self
metadata
# type: ignore
apply_typevars_map
apply_typevars_map
typevars_map
Mapping
TypeVar
Any
None
globalns
GlobalsNamespace
None
None
localns
MappingNamespace
None
None
None
Apply a
typevars_map
to the annotation.
This method is used when analyzing parametrized generic types to replace typevars with their concrete types.
This method applies the
typevars_map
to the annotation in place.
Parameters:
Name
Type
Description
Default
typevars_map
Mapping
TypeVar
Any
] | None
A dictionary mapping type variables to their concrete types.
required
globalns
GlobalsNamespace
| None
The globals namespace to use during type annotation evaluation.
None
localns
MappingNamespace
| None
The locals namespace to use during type annotation evaluation.
None
See Also
pydantic._internal._generics.replace_types is used for replacing the typevars with
their concrete types.
Source code in
pydantic/fields.py
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
def
apply_typevars_map
self
typevars_map
Mapping
TypeVar
Any
None
globalns
GlobalsNamespace
None
None
localns
MappingNamespace
None
None
None
"""Apply a `typevars_map` to the annotation.
This method is used when analyzing parametrized generic types to replace typevars with their concrete types.
This method applies the `typevars_map` to the annotation in place.
Args:
typevars_map: A dictionary mapping type variables to their concrete types.
globalns: The globals namespace to use during type annotation evaluation.
localns: The locals namespace to use during type annotation evaluation.
See Also:
pydantic._internal._generics.replace_types is used for replacing the typevars with
their concrete types.
"""
annotation
_generics
replace_types
self
annotation
typevars_map
annotation
evaluated
_typing_extra
try_eval_type
annotation
globalns
localns
self
annotation
annotation
not
evaluated
self
_complete
False
self
_original_annotation
self
annotation
PrivateAttr
PrivateAttr
default
init
Literal
False
False
PrivateAttr
default_factory
Callable
[[],
init
Literal
False
False
PrivateAttr
init
Literal
False
False
Any
PrivateAttr
default
Any
PydanticUndefined
default_factory
Callable
[[],
Any
None
None
init
Literal
False
False
Any
Usage Documentation
Private Model Attributes
Indicates that an attribute is intended for private use and not handled during normal validation/serialization.
Private attributes are not validated by Pydantic, so it's up to you to ensure they are used in a type-safe manner.
Private attributes are stored in
__private_attributes__
on the model.
Parameters:
Name
Type
Description
Default
default
Any
The attribute's default value. Defaults to Undefined.
PydanticUndefined
default_factory
Callable
[[],
Any
] | None
Callable that will be
called when a default value is needed for this attribute.
If both
default
and
default_factory
are set, an error will be raised.
None
init
Literal
[False]
Whether the attribute should be included in the constructor of the dataclass. Always
False
False
Returns:
Type
Description
Any
An instance of
ModelPrivateAttr
class.
Raises:
Type
Description
ValueError
If both
default
and
default_factory
are set.
Source code in
pydantic/fields.py
1245
1246
1247
1248
1249
1250
1251
1252
1253
1254
1255
1256
1257
1258
1259
1260
1261
1262
1263
1264
1265
1266
1267
1268
1269
1270
1271
1272
1273
1274
1275
1276
1277
1278
1279
def
PrivateAttr
default
Any
PydanticUndefined
default_factory
Callable
[[],
Any
None
None
init
Literal
False
False
Any
"""!!! abstract "Usage Documentation"
[Private Model Attributes](../concepts/models.md#private-model-attributes)
Indicates that an attribute is intended for private use and not handled during normal validation/serialization.
Private attributes are not validated by Pydantic, so it's up to you to ensure they are used in a type-safe manner.
Private attributes are stored in `__private_attributes__` on the model.
Args:
default: The attribute's default value. Defaults to Undefined.
default_factory: Callable that will be
called when a default value is needed for this attribute.
If both `default` and `default_factory` are set, an error will be raised.
init: Whether the attribute should be included in the constructor of the dataclass. Always `False`.
Returns:
An instance of [`ModelPrivateAttr`][pydantic.fields.ModelPrivateAttr] class.
Raises:
ValueError: If both `default` and `default_factory` are set.
"""
default
not
PydanticUndefined
and
default_factory
not
None
raise
TypeError
'cannot specify both default and default_factory'
return
ModelPrivateAttr
default
default_factory
default_factory
ModelPrivateAttr
ModelPrivateAttr
default
Any
PydanticUndefined
default_factory
Callable
[[],
Any
None
None
Bases:
Representation
A descriptor for private attributes in class models.
Warning
You generally shouldn't be creating
ModelPrivateAttr
instances directly, instead use
pydantic.fields.PrivateAttr
. (This is similar to
FieldInfo
vs.
Field
Attributes:
Name
Type
Description
default
The default value of the attribute if not provided.
default_factory
A callable function that generates the default value of the
attribute if not provided.
Source code in
pydantic/fields.py
1177
1178
1179
1180
1181
1182
1183
1184
def
__init__
self
default
Any
PydanticUndefined
default_factory
typing
Callable
[[],
Any
None
None
None
default
Ellipsis
self
default
PydanticUndefined
else
self
default
default
self
default_factory
default_factory
get_default
get_default
Any
Retrieve the default value of the object.
self.default_factory
None
, the method will return a deep copy of the
self.default
object.
self.default_factory
is not
None
, it will call
self.default_factory
and return the value returned.
Returns:
Type
Description
Any
The default value of the object.
Source code in
pydantic/fields.py
1207
1208
1209
1210
1211
1212
1213
1214
1215
1216
1217
def
get_default
self
Any
"""Retrieve the default value of the object.
If `self.default_factory` is `None`, the method will return a deep copy of the `self.default` object.
If `self.default_factory` is not `None`, it will call `self.default_factory` and return the value returned.
Returns:
The default value of the object.
"""
return
_utils
smart_deepcopy
self
default
self
default_factory
None
else
self
default_factory
computed_field
computed_field
func
PropertyT
PropertyT
computed_field
alias
str
None
None
alias_priority
int
None
None
title
str
None
None
field_title_generator
Callable
str
ComputedFieldInfo
str
None
None
description
str
None
None
deprecated
Deprecated
str
bool
None
None
examples
list
Any
None
None
json_schema_extra
JsonDict
Callable
JsonDict
None
None
None
repr
bool
True
return_type
Any
PydanticUndefined
Callable
PropertyT
PropertyT
computed_field
func
PropertyT
None
None
alias
str
None
None
alias_priority
int
None
None
title
str
None
None
field_title_generator
Callable
str
ComputedFieldInfo
str
None
None
description
str
None
None
deprecated
Deprecated
str
bool
None
None
examples
list
Any
None
None
json_schema_extra
JsonDict
Callable
JsonDict
None
None
None
repr
bool
None
None
return_type
Any
PydanticUndefined
PropertyT
Callable
PropertyT
PropertyT
Usage Documentation
The
computed_field
decorator
Decorator to include
property
and
cached_property
when serializing models or dataclasses.
This is useful for fields that are computed from other fields, or for fields that are expensive to compute and should be cached.
from
pydantic
import
BaseModel
computed_field
class
Rectangle
BaseModel
width
int
length
int
@computed_field
@property
def
area
self
int
return
self
width
self
length
print
Rectangle
width
length
model_dump
())
#> {'width': 3, 'length': 2, 'area': 6}
If applied to functions not yet decorated with
@property
@cached_property
, the function is
automatically wrapped with
property
. Although this is more concise, you will lose IntelliSense in your IDE,
and confuse static type checkers, thus explicit use of
@property
is recommended.
Mypy Warning
Even with the
@property
@cached_property
applied to your function before
@computed_field
mypy may throw a
Decorated property not supported
error.
See
mypy issue #1362
, for more information.
To avoid this error message, add
# type: ignore[prop-decorator]
to the
@computed_field
line.
pyright
supports
@computed_field
without error.
import
random
from
pydantic
import
BaseModel
computed_field
class
Square
BaseModel
width
float
@computed_field
def
area
self
float
# converted to a `property` by `computed_field`
return
round
self
width
@area
setter
def
area
self
new_area
float
None
self
width
new_area
0.5
@computed_field
alias
'the magic number'
repr
False
def
random_number
self
int
return
random
randint
1_000
square
Square
width
1.3
# `random_number` does not appear in representation
print
repr
square
#> Square(width=1.3, area=1.69)
print
square
random_number
#> 3
square
area
print
square
model_dump_json
by_alias
True
#> {"width":2.0,"area":4.0,"the magic number":3}
Overriding with
computed_field
You can't override a field from a parent class with a
computed_field
in the child class.
mypy
complains about this behavior if allowed, and
dataclasses
doesn't allow this pattern either.
See the example below:
from
pydantic
import
BaseModel
computed_field
class
Parent
BaseModel
str
try
class
Child
Parent
@computed_field
@property
def
self
str
return
'new a'
except
TypeError
print
'''
Field 'a' of class 'Child' overrides symbol of same name in a parent class. This override with a computed_field is incompatible.
'''
Private properties decorated with
@computed_field
have
repr=False
by default.
from
functools
import
cached_property
from
pydantic
import
BaseModel
computed_field
class
Model
BaseModel
foo
int
@computed_field
@cached_property
def
_private_cached_property
self
int
return
self
foo
@computed_field
@property
def
_private_property
self
int
return
self
foo
Model
foo
print
repr
#> Model(foo=1)
Parameters:
Name
Type
Description
Default
func
PropertyT
| None
the function to wrap.
None
alias
str
| None
alias to use when serializing this computed field, only used when
by_alias=True
None
alias_priority
int
| None
priority of the alias. This affects whether an alias generator is used
None
title
str
| None
Title to use when including this computed field in JSON Schema
None
field_title_generator
Callable
str
ComputedFieldInfo
str
] | None
A callable that takes a field name and returns title for it.
None
description
str
| None
Description to use when including this computed field in JSON Schema, defaults to the function's
docstring
None
deprecated
Deprecated
str
bool
| None
A deprecation message (or an instance of
warnings.deprecated
or the
typing_extensions.deprecated
backport).
to be emitted when accessing the field. Or a boolean. This will automatically be set if the property is decorated with the
deprecated
decorator.
None
examples
list
Any
] | None
Example values to use when including this computed field in JSON Schema
None
json_schema_extra
JsonDict
Callable
JsonDict
], None] | None
A dict or callable to provide extra JSON schema properties.
None
repr
bool
| None
whether to include this computed field in model repr.
Default is
False
for private properties and
True
for public properties.
None
return_type
Any
optional return for serialization logic to expect when serializing to JSON, if included
this must be correct, otherwise a
TypeError
is raised.
If you don't include a return type Any is used, which does runtime introspection to handle arbitrary
objects.
PydanticUndefined
Returns:
Type
Description
PropertyT
Callable
PropertyT
PropertyT
A proxy wrapper for the property.
Source code in
pydantic/fields.py
1362
1363
1364
1365
1366
1367
1368
1369
1370
1371
1372
1373
1374
1375
1376
1377
1378
1379
1380
1381
1382
1383
1384
1385
1386
1387
1388
1389
1390
1391
1392
1393
1394
1395
1396
1397
1398
1399
1400
1401
1402
1403
1404
1405
1406
1407
1408
1409
1410
1411
1412
1413
1414
1415
1416
1417
1418
1419
1420
1421
1422
1423
1424
1425
1426
1427
1428
1429
1430
1431
1432
1433
1434
1435
1436
1437
1438
1439
1440
1441
1442
1443
1444
1445
1446
1447
1448
1449
1450
1451
1452
1453
1454
1455
1456
1457
1458
1459
1460
1461
1462
1463
1464
1465
1466
1467
1468
1469
1470
1471
1472
1473
1474
1475
1476
1477
1478
1479
1480
1481
1482
1483
1484
1485
1486
1487
1488
1489
1490
1491
1492
1493
1494
1495
1496
1497
1498
1499
1500
1501
1502
1503
1504
1505
1506
1507
1508
1509
1510
1511
1512
1513
1514
1515
1516
1517
1518
1519
1520
1521
1522
1523
1524
1525
1526
1527
1528
1529
1530
1531
1532
1533
1534
1535
1536
1537
1538
1539
1540
1541
1542
1543
1544
1545
1546
1547
1548
1549
1550
1551
1552
1553
1554
1555
1556
1557
1558
1559
def
computed_field
func
PropertyT
None
None
alias
str
None
None
alias_priority
int
None
None
title
str
None
None
field_title_generator
typing
Callable
str
ComputedFieldInfo
str
None
None
description
str
None
None
deprecated
Deprecated
str
bool
None
None
examples
list
Any
None
None
json_schema_extra
JsonDict
typing
Callable
JsonDict
None
None
None
repr
bool
None
None
return_type
Any
PydanticUndefined
PropertyT
typing
Callable
PropertyT
PropertyT
"""!!! abstract "Usage Documentation"
[The `computed_field` decorator](../concepts/fields.md#the-computed_field-decorator)
Decorator to include `property` and `cached_property` when serializing models or dataclasses.
This is useful for fields that are computed from other fields, or for fields that are expensive to compute and should be cached.
```python
from pydantic import BaseModel, computed_field
class Rectangle(BaseModel):
width: int
length: int
@computed_field
@property
def area(self) -> int:
return self.width * self.length
print(Rectangle(width=3, length=2).model_dump())
#> {'width': 3, 'length': 2, 'area': 6}
```
If applied to functions not yet decorated with `@property` or `@cached_property`, the function is
automatically wrapped with `property`. Although this is more concise, you will lose IntelliSense in your IDE,
and confuse static type checkers, thus explicit use of `@property` is recommended.
!!! warning "Mypy Warning"
Even with the `@property` or `@cached_property` applied to your function before `@computed_field`,
mypy may throw a `Decorated property not supported` error.
See [mypy issue #1362](https://github.com/python/mypy/issues/1362), for more information.
To avoid this error message, add `# type: ignore[prop-decorator]` to the `@computed_field` line.
[pyright](https://github.com/microsoft/pyright) supports `@computed_field` without error.
```python
import random
from pydantic import BaseModel, computed_field
class Square(BaseModel):
width: float
@computed_field
def area(self) -> float:  # converted to a `property` by `computed_field`
return round(self.width**2, 2)
@area.setter
def area(self, new_area: float) -> None:
self.width = new_area**0.5
@computed_field(alias='the magic number', repr=False)
def random_number(self) -> int:
return random.randint(0, 1_000)
square = Square(width=1.3)
# `random_number` does not appear in representation
print(repr(square))
#> Square(width=1.3, area=1.69)
print(square.random_number)
#> 3
square.area = 4
print(square.model_dump_json(by_alias=True))
#> {"width":2.0,"area":4.0,"the magic number":3}
```
!!! warning "Overriding with `computed_field`"
You can't override a field from a parent class with a `computed_field` in the child class.
`mypy` complains about this behavior if allowed, and `dataclasses` doesn't allow this pattern either.
See the example below:
```python
from pydantic import BaseModel, computed_field
class Parent(BaseModel):
a: str
try:
class Child(Parent):
@computed_field
@property
def a(self) -> str:
return 'new a'
except TypeError as e:
print(e)
'''
Field 'a' of class 'Child' overrides symbol of same name in a parent class. This override with a computed_field is incompatible.
'''
```
Private properties decorated with `@computed_field` have `repr=False` by default.
```python
from functools import cached_property
from pydantic import BaseModel, computed_field
class Model(BaseModel):
foo: int
@computed_field
@cached_property
def _private_cached_property(self) -> int:
return -self.foo
@computed_field
@property
def _private_property(self) -> int:
return -self.foo
m = Model(foo=1)
print(repr(m))
#> Model(foo=1)
```
Args:
func: the function to wrap.
alias: alias to use when serializing this computed field, only used when `by_alias=True`
alias_priority: priority of the alias. This affects whether an alias generator is used
title: Title to use when including this computed field in JSON Schema
field_title_generator: A callable that takes a field name and returns title for it.
description: Description to use when including this computed field in JSON Schema, defaults to the function's
docstring
deprecated: A deprecation message (or an instance of `warnings.deprecated` or the `typing_extensions.deprecated` backport).
to be emitted when accessing the field. Or a boolean. This will automatically be set if the property is decorated with the
`deprecated` decorator.
examples: Example values to use when including this computed field in JSON Schema
json_schema_extra: A dict or callable to provide extra JSON schema properties.
repr: whether to include this computed field in model repr.
Default is `False` for private properties and `True` for public properties.
return_type: optional return for serialization logic to expect when serializing to JSON, if included
this must be correct, otherwise a `TypeError` is raised.
If you don't include a return type Any is used, which does runtime introspection to handle arbitrary
objects.
Returns:
A proxy wrapper for the property.
"""
def
dec
Any
Any
nonlocal
description
deprecated
return_type
alias_priority
unwrapped
_decorators
unwrap_wrapped_function
description
None
and
unwrapped
__doc__
description
inspect
cleandoc
unwrapped
__doc__
deprecated
None
and
hasattr
unwrapped
'__deprecated__'
deprecated
unwrapped
__deprecated__
# if the function isn't already decorated with `@property` (or another descriptor), then we wrap it now
_decorators
ensure_property
alias_priority
alias_priority
alias
not
None
else
None
repr
None
repr_
bool
not
_wrapped_property_is_private
property_
else
repr_
repr
dec_info
ComputedFieldInfo
return_type
alias
alias_priority
title
field_title_generator
description
deprecated
examples
json_schema_extra
repr_
return
_decorators
PydanticDescriptorProxy
dec_info
func
None
return
dec
else
return
dec
func
ComputedFieldInfo
dataclass
ComputedFieldInfo
wrapped_property
property
return_type
Any
alias
str
None
alias_priority
int
None
title
str
None
field_title_generator
Callable
str
ComputedFieldInfo
str
None
description
str
None
deprecated
Deprecated
str
bool
None
examples
list
Any
None
json_schema_extra
JsonDict
Callable
JsonDict
None
None
repr
bool
A container for data from
@computed_field
so that we can access it while building the pydantic-core schema.
Attributes:
Name
Type
Description
decorator_repr
str
A class variable representing the decorator string, '@computed_field'.
wrapped_property
property
The wrapped computed field property.
return_type
Any
The type of the computed field property's return value.
alias
str
| None
The alias of the property to be used during serialization.
alias_priority
int
| None
The priority of the alias. This affects whether an alias generator is used.
title
str
| None
Title of the computed field to include in the serialization JSON schema.
field_title_generator
Callable
str
ComputedFieldInfo
str
] | None
A callable that takes a field name and returns title for it.
description
str
| None
Description of the computed field to include in the serialization JSON schema.
deprecated
Deprecated
str
bool
| None
A deprecation message, an instance of
warnings.deprecated
or the
typing_extensions.deprecated
backport,
or a boolean. If
True
, a default deprecation message will be emitted when accessing the field.
examples
list
Any
] | None
Example values of the computed field to include in the serialization JSON schema.
json_schema_extra
JsonDict
Callable
JsonDict
], None] | None
A dict or callable to provide extra JSON schema properties.
repr
bool
A boolean indicating whether to include the field in the
repr
output.
deprecation_message
property
deprecation_message
str
None
The deprecation message to be emitted, or
None
if not set.
Was this page helpful?
Thanks for your feedback!
Thanks for your feedback!