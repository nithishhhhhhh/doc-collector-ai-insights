URL: https://docs.pydantic.dev/2.11/api/pydantic_settings/
==================================================

Pydantic Settings
BaseSettings
BaseSettings
__pydantic_self__
_case_sensitive
bool
None
None
_nested_model_default_partial_update
bool
None
None
_env_prefix
str
None
None
_env_file
DotenvType
None
ENV_FILE_SENTINEL
_env_file_encoding
str
None
None
_env_ignore_empty
bool
None
None
_env_nested_delimiter
str
None
None
_env_parse_none_str
str
None
None
_env_parse_enums
bool
None
None
_cli_prog_name
str
None
None
_cli_parse_args
bool
list
str
tuple
str
...
None
None
_cli_settings_source
CliSettingsSource
Any
None
None
_cli_parse_none_str
str
None
None
_cli_hide_none_type
bool
None
None
_cli_avoid_json
bool
None
None
_cli_enforce_required
bool
None
None
_cli_use_class_docs_for_groups
bool
None
None
_cli_exit_on_error
bool
None
None
_cli_prefix
str
None
None
_cli_flag_prefix_char
str
None
None
_cli_implicit_flags
bool
None
None
_cli_ignore_unknown_args
bool
None
None
_cli_kebab_case
bool
None
None
_secrets_dir
PathType
None
None
values
Any
Bases:
BaseModel
Base class for settings, allowing values to be overridden by environment variables.
This is useful in production for secrets you do not wish to save in code, it plays nicely with docker(-compose),
Heroku and any 12 factor app design.
All the below attributes can be set via
model_config
Parameters:
Name
Type
Description
Default
_case_sensitive
bool
| None
Whether environment and CLI variable names should be read with case-sensitivity.
Defaults to
None
None
_nested_model_default_partial_update
bool
| None
Whether to allow partial updates on nested model default object fields.
Defaults to
False
None
_env_prefix
str
| None
Prefix for all environment variables. Defaults to
None
None
_env_file
DotenvType
| None
The env file(s) to load settings values from. Defaults to
Path('')
, which
means that the value from
model_config['env_file']
should be used. You can also pass
None
to indicate that environment variables should not be loaded from an env file.
ENV_FILE_SENTINEL
_env_file_encoding
str
| None
The env file encoding, e.g.
'latin-1'
. Defaults to
None
None
_env_ignore_empty
bool
| None
Ignore environment variables where the value is an empty string. Default to
False
None
_env_nested_delimiter
str
| None
The nested env values delimiter. Defaults to
None
None
_env_parse_none_str
str
| None
The env string value that should be parsed (e.g. "null", "void", "None", etc.)
into
None
type(None). Defaults to
None
type(None), which means no parsing should occur.
None
_env_parse_enums
bool
| None
Parse enum field names to values. Defaults to
None.
, which means no parsing should occur.
None
_cli_prog_name
str
| None
The CLI program name to display in help text. Defaults to
None
if _cli_parse_args is
None
Otherwse, defaults to sys.argv[0].
None
_cli_parse_args
bool
list
str
] |
tuple
str
, ...] | None
The list of CLI arguments to parse. Defaults to None.
If set to
True
, defaults to sys.argv[1:].
None
_cli_settings_source
CliSettingsSource
Any
] | None
Override the default CLI settings source with a user defined instance. Defaults to None.
None
_cli_parse_none_str
str
| None
The CLI string value that should be parsed (e.g. "null", "void", "None", etc.) into
None
type(None). Defaults to _env_parse_none_str value if set. Otherwise, defaults to "null" if
_cli_avoid_json is
False
, and "None" if _cli_avoid_json is
True
None
_cli_hide_none_type
bool
| None
Hide
None
values in CLI help text. Defaults to
False
None
_cli_avoid_json
bool
| None
Avoid complex JSON objects in CLI help text. Defaults to
False
None
_cli_enforce_required
bool
| None
Enforce required fields at the CLI. Defaults to
False
None
_cli_use_class_docs_for_groups
bool
| None
Use class docstrings in CLI group help text instead of field descriptions.
Defaults to
False
None
_cli_exit_on_error
bool
| None
Determines whether or not the internal parser exits with error info when an error occurs.
Defaults to
True
None
_cli_prefix
str
| None
The root parser command line arguments prefix. Defaults to "".
None
_cli_flag_prefix_char
str
| None
The flag prefix character to use for CLI optional arguments. Defaults to '-'.
None
_cli_implicit_flags
bool
| None
Whether
bool
fields should be implicitly converted into CLI boolean flags.
(e.g. --flag, --no-flag). Defaults to
False
None
_cli_ignore_unknown_args
bool
| None
Whether to ignore unknown CLI args and parse only known ones. Defaults to
False
None
_cli_kebab_case
bool
| None
CLI args use kebab case. Defaults to
False
None
_secrets_dir
PathType
| None
The secret files directory or a sequence of directories. Defaults to
None
None
Source code in
pydantic_settings/main.py
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
def
__init__
__pydantic_self__
_case_sensitive
bool
None
None
_nested_model_default_partial_update
bool
None
None
_env_prefix
str
None
None
_env_file
DotenvType
None
ENV_FILE_SENTINEL
_env_file_encoding
str
None
None
_env_ignore_empty
bool
None
None
_env_nested_delimiter
str
None
None
_env_parse_none_str
str
None
None
_env_parse_enums
bool
None
None
_cli_prog_name
str
None
None
_cli_parse_args
bool
list
str
tuple
str
...
None
None
_cli_settings_source
CliSettingsSource
Any
None
None
_cli_parse_none_str
str
None
None
_cli_hide_none_type
bool
None
None
_cli_avoid_json
bool
None
None
_cli_enforce_required
bool
None
None
_cli_use_class_docs_for_groups
bool
None
None
_cli_exit_on_error
bool
None
None
_cli_prefix
str
None
None
_cli_flag_prefix_char
str
None
None
_cli_implicit_flags
bool
None
None
_cli_ignore_unknown_args
bool
None
None
_cli_kebab_case
bool
None
None
_secrets_dir
PathType
None
None
values
Any
None
# Uses something other than `self` the first arg to allow "self" as a settable attribute
super
__init__
__pydantic_self__
_settings_build_values
values
_case_sensitive
_case_sensitive
_nested_model_default_partial_update
_nested_model_default_partial_update
_env_prefix
_env_prefix
_env_file
_env_file
_env_file_encoding
_env_file_encoding
_env_ignore_empty
_env_ignore_empty
_env_nested_delimiter
_env_nested_delimiter
_env_parse_none_str
_env_parse_none_str
_env_parse_enums
_env_parse_enums
_cli_prog_name
_cli_prog_name
_cli_parse_args
_cli_parse_args
_cli_settings_source
_cli_settings_source
_cli_parse_none_str
_cli_parse_none_str
_cli_hide_none_type
_cli_hide_none_type
_cli_avoid_json
_cli_avoid_json
_cli_enforce_required
_cli_enforce_required
_cli_use_class_docs_for_groups
_cli_use_class_docs_for_groups
_cli_exit_on_error
_cli_exit_on_error
_cli_prefix
_cli_prefix
_cli_flag_prefix_char
_cli_flag_prefix_char
_cli_implicit_flags
_cli_implicit_flags
_cli_ignore_unknown_args
_cli_ignore_unknown_args
_cli_kebab_case
_cli_kebab_case
_secrets_dir
_secrets_dir
settings_customise_sources
classmethod
settings_customise_sources
settings_cls
type
BaseSettings
init_settings
PydanticBaseSettingsSource
env_settings
PydanticBaseSettingsSource
dotenv_settings
PydanticBaseSettingsSource
file_secret_settings
PydanticBaseSettingsSource
tuple
PydanticBaseSettingsSource
...
Define the sources and their order for loading the settings values.
Parameters:
Name
Type
Description
Default
settings_cls
type
BaseSettings
The Settings class.
required
init_settings
PydanticBaseSettingsSource
The
InitSettingsSource
instance.
required
env_settings
PydanticBaseSettingsSource
The
EnvSettingsSource
instance.
required
dotenv_settings
PydanticBaseSettingsSource
The
DotEnvSettingsSource
instance.
required
file_secret_settings
PydanticBaseSettingsSource
The
SecretsSettingsSource
instance.
required
Returns:
Type
Description
tuple
PydanticBaseSettingsSource
, ...]
A tuple containing the sources and their order for loading the settings values.
Source code in
pydantic_settings/main.py
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
@classmethod
def
settings_customise_sources
cls
settings_cls
type
BaseSettings
init_settings
PydanticBaseSettingsSource
env_settings
PydanticBaseSettingsSource
dotenv_settings
PydanticBaseSettingsSource
file_secret_settings
PydanticBaseSettingsSource
tuple
PydanticBaseSettingsSource
...
"""
Define the sources and their order for loading the settings values.
Args:
settings_cls: The Settings class.
init_settings: The `InitSettingsSource` instance.
env_settings: The `EnvSettingsSource` instance.
dotenv_settings: The `DotEnvSettingsSource` instance.
file_secret_settings: The `SecretsSettingsSource` instance.
Returns:
A tuple containing the sources and their order for loading the settings values.
"""
return
init_settings
env_settings
dotenv_settings
file_secret_settings
CliApp
A utility class for running Pydantic
BaseSettings
BaseModel
, or
pydantic.dataclasses.dataclass
CLI applications.
run
staticmethod
run
model_cls
type
cli_args
list
str
Namespace
SimpleNamespace
dict
str
Any
None
None
cli_settings_source
CliSettingsSource
Any
None
None
cli_exit_on_error
bool
None
None
cli_cmd_method_name
str
"cli_cmd"
model_init_data
Any
Runs a Pydantic
BaseSettings
BaseModel
, or
pydantic.dataclasses.dataclass
as a CLI application.
Running a model as a CLI application requires the
cli_cmd
method to be defined in the model class.
Parameters:
Name
Type
Description
Default
model_cls
type
The model class to run as a CLI application.
required
cli_args
list
str
] |
Namespace
SimpleNamespace
dict
str
Any
] | None
The list of CLI arguments to parse. If
cli_settings_source
is specified, this may
also be a namespace or dictionary of pre-parsed CLI arguments. Defaults to
sys.argv[1:]
None
cli_settings_source
CliSettingsSource
Any
] | None
Override the default CLI settings source with a user defined instance.
Defaults to
None
None
cli_exit_on_error
bool
| None
Determines whether this function exits on error. If model is subclass of
BaseSettings
, defaults to BaseSettings
cli_exit_on_error
value. Otherwise, defaults to
True
None
cli_cmd_method_name
str
The CLI command method name to run. Defaults to "cli_cmd".
'cli_cmd'
model_init_data
Any
The model init data.
Returns:
Type
Description
The ran instance of model.
Raises:
Type
Description
SettingsError
If model_cls is not subclass of
BaseModel
pydantic.dataclasses.dataclass
SettingsError
If model_cls does not have a
cli_cmd
entrypoint defined.
Source code in
pydantic_settings/main.py
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
@staticmethod
def
run
model_cls
type
cli_args
list
str
Namespace
SimpleNamespace
dict
str
Any
None
None
cli_settings_source
CliSettingsSource
Any
None
None
cli_exit_on_error
bool
None
None
cli_cmd_method_name
str
'cli_cmd'
model_init_data
Any
"""
Runs a Pydantic `BaseSettings`, `BaseModel`, or `pydantic.dataclasses.dataclass` as a CLI application.
Running a model as a CLI application requires the `cli_cmd` method to be defined in the model class.
Args:
model_cls: The model class to run as a CLI application.
cli_args: The list of CLI arguments to parse. If `cli_settings_source` is specified, this may
also be a namespace or dictionary of pre-parsed CLI arguments. Defaults to `sys.argv[1:]`.
cli_settings_source: Override the default CLI settings source with a user defined instance.
Defaults to `None`.
cli_exit_on_error: Determines whether this function exits on error. If model is subclass of
`BaseSettings`, defaults to BaseSettings `cli_exit_on_error` value. Otherwise, defaults to
`True`.
cli_cmd_method_name: The CLI command method name to run. Defaults to "cli_cmd".
model_init_data: The model init data.
Returns:
The ran instance of model.
Raises:
SettingsError: If model_cls is not subclass of `BaseModel` or `pydantic.dataclasses.dataclass`.
SettingsError: If model_cls does not have a `cli_cmd` entrypoint defined.
"""
not
is_pydantic_dataclass
model_cls
is_model_class
model_cls
)):
raise
SettingsError
'Error:
model_cls
__name__
is not subclass of BaseModel or pydantic.dataclasses.dataclass'
cli_settings
None
cli_parse_args
True
cli_args
None
else
cli_args
cli_settings_source
not
None
isinstance
cli_parse_args
Namespace
SimpleNamespace
dict
)):
cli_settings
cli_settings_source
parsed_args
cli_parse_args
else
cli_settings
cli_settings_source
args
cli_parse_args
elif
isinstance
cli_parse_args
Namespace
SimpleNamespace
dict
)):
raise
SettingsError
'Error: `cli_args` must be list[str] or None when `cli_settings_source` is not used'
model_init_data
'_cli_parse_args'
cli_parse_args
model_init_data
'_cli_exit_on_error'
cli_exit_on_error
model_init_data
'_cli_settings_source'
cli_settings
not
issubclass
model_cls
BaseSettings
class
CliAppBaseSettings
BaseSettings
model_cls
# type: ignore
model_config
SettingsConfigDict
nested_model_default_partial_update
True
case_sensitive
True
cli_hide_none_type
True
cli_avoid_json
True
cli_enforce_required
True
cli_implicit_flags
True
cli_kebab_case
True
model
CliAppBaseSettings
model_init_data
model_init_data
for
field_name
field_info
model
model_fields
items
():
model_init_data
_field_name_for_signature
field_name
field_info
getattr
model
field_name
return
CliApp
_run_cli_cmd
model_cls
model_init_data
cli_cmd_method_name
is_required
False
run_subcommand
staticmethod
run_subcommand
model
PydanticModel
cli_exit_on_error
bool
None
None
cli_cmd_method_name
str
"cli_cmd"
PydanticModel
Runs the model subcommand. Running a model subcommand requires the
cli_cmd
method to be defined in
the nested model subcommand class.
Parameters:
Name
Type
Description
Default
model
PydanticModel
The model to run the subcommand from.
required
cli_exit_on_error
bool
| None
Determines whether this function exits with error if no subcommand is found.
Defaults to model_config
cli_exit_on_error
value if set. Otherwise, defaults to
True
None
cli_cmd_method_name
str
The CLI command method name to run. Defaults to "cli_cmd".
'cli_cmd'
Returns:
Type
Description
PydanticModel
The ran subcommand model.
Raises:
Type
Description
SystemExit
When no subcommand is found and cli_exit_on_error=
True
(the default).
SettingsError
When no subcommand is found and cli_exit_on_error=
False
Source code in
pydantic_settings/main.py
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
@staticmethod
def
run_subcommand
model
PydanticModel
cli_exit_on_error
bool
None
None
cli_cmd_method_name
str
'cli_cmd'
PydanticModel
"""
Runs the model subcommand. Running a model subcommand requires the `cli_cmd` method to be defined in
the nested model subcommand class.
Args:
model: The model to run the subcommand from.
cli_exit_on_error: Determines whether this function exits with error if no subcommand is found.
Defaults to model_config `cli_exit_on_error` value if set. Otherwise, defaults to `True`.
cli_cmd_method_name: The CLI command method name to run. Defaults to "cli_cmd".
Returns:
The ran subcommand model.
Raises:
SystemExit: When no subcommand is found and cli_exit_on_error=`True` (the default).
SettingsError: When no subcommand is found and cli_exit_on_error=`False`.
"""
subcommand
get_subcommand
model
is_required
True
cli_exit_on_error
cli_exit_on_error
return
CliApp
_run_cli_cmd
subcommand
cli_cmd_method_name
is_required
True
SettingsConfigDict
Bases:
ConfigDict
pyproject_toml_depth
instance-attribute
pyproject_toml_depth
int
Number of levels
from the current working directory to attempt to find a pyproject.toml
file.
This is only used when a pyproject.toml file is not found in the current working directory.
pyproject_toml_table_header
instance-attribute
pyproject_toml_table_header
tuple
str
...
Header of the TOML table within a pyproject.toml file to use when filling variables.
This is supplied as a
tuple[str, ...]
instead of a
str
to accommodate for headers
containing a
For example,
toml_table_header = ("tool", "my.tool", "foo")
can be used to fill variable
values from a table with header
[tool."my.tool".foo]
To use the root table, exclude this config setting or provide an empty tuple.
CliSettingsSource
CliSettingsSource
settings_cls
type
BaseSettings
cli_prog_name
str
None
None
cli_parse_args
bool
list
str
tuple
str
...
None
None
cli_parse_none_str
str
None
None
cli_hide_none_type
bool
None
None
cli_avoid_json
bool
None
None
cli_enforce_required
bool
None
None
cli_use_class_docs_for_groups
bool
None
None
cli_exit_on_error
bool
None
None
cli_prefix
str
None
None
cli_flag_prefix_char
str
None
None
cli_implicit_flags
bool
None
None
cli_ignore_unknown_args
bool
None
None
cli_kebab_case
bool
None
None
case_sensitive
bool
None
True
root_parser
Any
None
parse_args_method
Callable
...
Any
None
None
add_argument_method
Callable
...
Any
None
add_argument
add_argument_group_method
Callable
...
Any
None
add_argument_group
add_parser_method
Callable
...
Any
None
add_parser
add_subparsers_method
Callable
...
Any
None
add_subparsers
formatter_class
Any
RawDescriptionHelpFormatter
Bases:
EnvSettingsSource
Generic
Source class for loading settings values from CLI.
Note
CliSettingsSource
connects with a
root_parser
object by using the parser methods to add
settings_cls
fields as command line arguments. The
CliSettingsSource
internal parser representation
is based upon the
argparse
parsing library, and therefore, requires the parser methods to support
the same attributes as their
argparse
library counterparts.
Parameters:
Name
Type
Description
Default
cli_prog_name
str
| None
The CLI program name to display in help text. Defaults to
None
if cli_parse_args is
None
Otherwse, defaults to sys.argv[0].
None
cli_parse_args
bool
list
str
] |
tuple
str
, ...] | None
The list of CLI arguments to parse. Defaults to None.
If set to
True
, defaults to sys.argv[1:].
None
cli_parse_none_str
str
| None
The CLI string value that should be parsed (e.g. "null", "void", "None", etc.) into
None
type(None). Defaults to "null" if cli_avoid_json is
False
, and "None" if cli_avoid_json is
True
None
cli_hide_none_type
bool
| None
Hide
None
values in CLI help text. Defaults to
False
None
cli_avoid_json
bool
| None
Avoid complex JSON objects in CLI help text. Defaults to
False
None
cli_enforce_required
bool
| None
Enforce required fields at the CLI. Defaults to
False
None
cli_use_class_docs_for_groups
bool
| None
Use class docstrings in CLI group help text instead of field descriptions.
Defaults to
False
None
cli_exit_on_error
bool
| None
Determines whether or not the internal parser exits with error info when an error occurs.
Defaults to
True
None
cli_prefix
str
| None
Prefix for command line arguments added under the root parser. Defaults to "".
None
cli_flag_prefix_char
str
| None
The flag prefix character to use for CLI optional arguments. Defaults to '-'.
None
cli_implicit_flags
bool
| None
Whether
bool
fields should be implicitly converted into CLI boolean flags.
(e.g. --flag, --no-flag). Defaults to
False
None
cli_ignore_unknown_args
bool
| None
Whether to ignore unknown CLI args and parse only known ones. Defaults to
False
None
cli_kebab_case
bool
| None
CLI args use kebab case. Defaults to
False
None
case_sensitive
bool
| None
Whether CLI "--arg" names should be read with case-sensitivity. Defaults to
True
Note: Case-insensitive matching is only supported on the internal root parser and does not apply to CLI
subcommands.
True
root_parser
Any
The root parser object.
None
parse_args_method
Callable
[...,
Any
] | None
The root parser parse args method. Defaults to
argparse.ArgumentParser.parse_args
None
add_argument_method
Callable
[...,
Any
] | None
The root parser add argument method. Defaults to
argparse.ArgumentParser.add_argument
add_argument
add_argument_group_method
Callable
[...,
Any
] | None
The root parser add argument group method.
Defaults to
argparse.ArgumentParser.add_argument_group
add_argument_group
add_parser_method
Callable
[...,
Any
] | None
The root parser add new parser (sub-command) method.
Defaults to
argparse._SubParsersAction.add_parser
add_parser
add_subparsers_method
Callable
[...,
Any
] | None
The root parser add subparsers (sub-commands) method.
Defaults to
argparse.ArgumentParser.add_subparsers
add_subparsers
formatter_class
Any
A class for customizing the root parser help text. Defaults to
argparse.RawDescriptionHelpFormatter
RawDescriptionHelpFormatter
Source code in
pydantic_settings/sources.py
1115
1116
1117
1118
1119
1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1139
1140
1141
1142
1143
1144
1145
1146
1147
1148
1149
1150
1151
1152
1153
1154
1155
1156
1157
1158
1159
1160
1161
1162
1163
1164
1165
1166
1167
1168
1169
1170
1171
1172
1173
1174
1175
1176
1177
1178
1179
1180
1181
1182
1183
1184
1185
1186
1187
1188
1189
1190
1191
1192
1193
1194
1195
1196
1197
1198
1199
1200
1201
1202
1203
1204
1205
1206
1207
1208
1209
1210
1211
1212
1213
1214
1215
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1229
1230
1231
1232
1233
1234
1235
1236
def
__init__
self
settings_cls
type
BaseSettings
cli_prog_name
str
None
None
cli_parse_args
bool
list
str
tuple
str
...
None
None
cli_parse_none_str
str
None
None
cli_hide_none_type
bool
None
None
cli_avoid_json
bool
None
None
cli_enforce_required
bool
None
None
cli_use_class_docs_for_groups
bool
None
None
cli_exit_on_error
bool
None
None
cli_prefix
str
None
None
cli_flag_prefix_char
str
None
None
cli_implicit_flags
bool
None
None
cli_ignore_unknown_args
bool
None
None
cli_kebab_case
bool
None
None
case_sensitive
bool
None
True
root_parser
Any
None
parse_args_method
Callable
...
Any
None
None
add_argument_method
Callable
...
Any
None
ArgumentParser
add_argument
add_argument_group_method
Callable
...
Any
None
ArgumentParser
add_argument_group
add_parser_method
Callable
...
Any
None
_SubParsersAction
add_parser
add_subparsers_method
Callable
...
Any
None
ArgumentParser
add_subparsers
formatter_class
Any
RawDescriptionHelpFormatter
None
self
cli_prog_name
cli_prog_name
cli_prog_name
not
None
else
settings_cls
model_config
get
'cli_prog_name'
sys
argv
self
cli_hide_none_type
cli_hide_none_type
cli_hide_none_type
not
None
else
settings_cls
model_config
get
'cli_hide_none_type'
False
self
cli_avoid_json
cli_avoid_json
cli_avoid_json
not
None
else
settings_cls
model_config
get
'cli_avoid_json'
False
not
cli_parse_none_str
cli_parse_none_str
'None'
self
cli_avoid_json
True
else
'null'
self
cli_parse_none_str
cli_parse_none_str
self
cli_enforce_required
cli_enforce_required
cli_enforce_required
not
None
else
settings_cls
model_config
get
'cli_enforce_required'
False
self
cli_use_class_docs_for_groups
cli_use_class_docs_for_groups
cli_use_class_docs_for_groups
not
None
else
settings_cls
model_config
get
'cli_use_class_docs_for_groups'
False
self
cli_exit_on_error
cli_exit_on_error
cli_exit_on_error
not
None
else
settings_cls
model_config
get
'cli_exit_on_error'
True
self
cli_prefix
cli_prefix
cli_prefix
not
None
else
settings_cls
model_config
get
'cli_prefix'
self
cli_flag_prefix_char
cli_flag_prefix_char
cli_flag_prefix_char
not
None
else
settings_cls
model_config
get
'cli_flag_prefix_char'
'-'
self
_cli_flag_prefix
self
cli_flag_prefix_char
self
cli_prefix
cli_prefix
startswith
'.'
cli_prefix
endswith
'.'
not
cli_prefix
replace
'.'
isidentifier
():
# type: ignore
raise
SettingsError
'CLI settings source prefix is invalid:
cli_prefix
self
cli_prefix
'.'
self
cli_implicit_flags
cli_implicit_flags
cli_implicit_flags
not
None
else
settings_cls
model_config
get
'cli_implicit_flags'
False
self
cli_ignore_unknown_args
cli_ignore_unknown_args
cli_ignore_unknown_args
not
None
else
settings_cls
model_config
get
'cli_ignore_unknown_args'
False
self
cli_kebab_case
cli_kebab_case
cli_kebab_case
not
None
else
settings_cls
model_config
get
'cli_kebab_case'
False
case_sensitive
case_sensitive
case_sensitive
not
None
else
True
not
case_sensitive
and
root_parser
not
None
raise
SettingsError
'Case-insensitive matching is only supported on the internal root parser'
super
__init__
settings_cls
env_nested_delimiter
'.'
env_parse_none_str
self
cli_parse_none_str
env_parse_enums
True
env_prefix
self
cli_prefix
case_sensitive
case_sensitive
root_parser
_CliInternalArgParser
cli_exit_on_error
self
cli_exit_on_error
prog
self
cli_prog_name
description
None
settings_cls
__doc__
None
else
dedent
settings_cls
__doc__
formatter_class
formatter_class
prefix_chars
self
cli_flag_prefix_char
allow_abbrev
False
root_parser
None
else
root_parser
self
_connect_root_parser
root_parser
root_parser
parse_args_method
parse_args_method
add_argument_method
add_argument_method
add_argument_group_method
add_argument_group_method
add_parser_method
add_parser_method
add_subparsers_method
add_subparsers_method
formatter_class
formatter_class
cli_parse_args
not
None
False
cli_parse_args
True
cli_parse_args
sys
argv
elif
not
isinstance
cli_parse_args
list
tuple
)):
raise
SettingsError
'cli_parse_args must be List[str] or Tuple[str, ...], recieved
type
cli_parse_args
self
_load_env_vars
parsed_args
self
_parse_args
self
root_parser
cli_parse_args
root_parser
property
root_parser
The connected root parser instance.
DotEnvSettingsSource
DotEnvSettingsSource
settings_cls
type
BaseSettings
env_file
DotenvType
None
ENV_FILE_SENTINEL
env_file_encoding
str
None
None
case_sensitive
bool
None
None
env_prefix
str
None
None
env_nested_delimiter
str
None
None
env_ignore_empty
bool
None
None
env_parse_none_str
str
None
None
env_parse_enums
bool
None
None
Bases:
EnvSettingsSource
Source class for loading settings values from env files.
Source code in
pydantic_settings/sources.py
959
960
961
962
963
964
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
def
__init__
self
settings_cls
type
BaseSettings
env_file
DotenvType
None
ENV_FILE_SENTINEL
env_file_encoding
str
None
None
case_sensitive
bool
None
None
env_prefix
str
None
None
env_nested_delimiter
str
None
None
env_ignore_empty
bool
None
None
env_parse_none_str
str
None
None
env_parse_enums
bool
None
None
None
self
env_file
env_file
env_file
ENV_FILE_SENTINEL
else
settings_cls
model_config
get
'env_file'
self
env_file_encoding
env_file_encoding
env_file_encoding
not
None
else
settings_cls
model_config
get
'env_file_encoding'
super
__init__
settings_cls
case_sensitive
env_prefix
env_nested_delimiter
env_ignore_empty
env_parse_none_str
env_parse_enums
EnvSettingsSource
EnvSettingsSource
settings_cls
type
BaseSettings
case_sensitive
bool
None
None
env_prefix
str
None
None
env_nested_delimiter
str
None
None
env_ignore_empty
bool
None
None
env_parse_none_str
str
None
None
env_parse_enums
bool
None
None
Bases:
PydanticBaseEnvSettingsSource
Source class for loading settings values from environment variables.
Source code in
pydantic_settings/sources.py
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
def
__init__
self
settings_cls
type
BaseSettings
case_sensitive
bool
None
None
env_prefix
str
None
None
env_nested_delimiter
str
None
None
env_ignore_empty
bool
None
None
env_parse_none_str
str
None
None
env_parse_enums
bool
None
None
None
super
__init__
settings_cls
case_sensitive
env_prefix
env_ignore_empty
env_parse_none_str
env_parse_enums
self
env_nested_delimiter
env_nested_delimiter
env_nested_delimiter
not
None
else
self
config
get
'env_nested_delimiter'
self
env_prefix_len
len
self
env_prefix
self
env_vars
self
_load_env_vars
get_field_value
get_field_value
field
FieldInfo
field_name
str
tuple
Any
str
bool
Gets the value for field from environment variables and a flag to determine whether value is complex.
Parameters:
Name
Type
Description
Default
field
FieldInfo
The field.
required
field_name
str
The field name.
required
Returns:
Type
Description
tuple
Any
str
bool
A tuple that contains the value (
None
if not found), key, and
a flag to determine whether value is complex.
Source code in
pydantic_settings/sources.py
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
def
get_field_value
self
field
FieldInfo
field_name
str
tuple
Any
str
bool
"""
Gets the value for field from environment variables and a flag to determine whether value is complex.
Args:
field: The field.
field_name: The field name.
Returns:
A tuple that contains the value (`None` if not found), key, and
a flag to determine whether value is complex.
"""
env_val
str
None
None
for
field_key
env_name
value_is_complex
self
_extract_field_info
field
field_name
env_val
self
env_vars
get
env_name
env_val
not
None
break
return
env_val
field_key
value_is_complex
prepare_field_value
prepare_field_value
field_name
str
field
FieldInfo
value
Any
value_is_complex
bool
Any
Prepare value for the field.
Extract value for nested field.
Deserialize value to python object for complex field.
Parameters:
Name
Type
Description
Default
field
FieldInfo
The field.
required
field_name
str
The field name.
required
Returns:
Type
Description
Any
A tuple contains prepared value for the field.
Raises:
Type
Description
ValuesError
When There is an error in deserializing value for complex field.
Source code in
pydantic_settings/sources.py
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
def
prepare_field_value
self
field_name
str
field
FieldInfo
value
Any
value_is_complex
bool
Any
"""
Prepare value for the field.
* Extract value for nested field.
* Deserialize value to python object for complex field.
Args:
field: The field.
field_name: The field name.
Returns:
A tuple contains prepared value for the field.
Raises:
ValuesError: When There is an error in deserializing value for complex field.
"""
is_complex
allow_parse_failure
self
_field_is_complex
field
self
env_parse_enums
enum_val
_annotation_enum_name_to_val
field
annotation
value
value
value
enum_val
None
else
enum_val
is_complex
value_is_complex
isinstance
value
EnvNoneType
return
value
elif
value
None
# field is complex but no value found so far, try explode_env_vars
env_val_built
self
explode_env_vars
field_name
field
self
env_vars
env_val_built
return
env_val_built
else
# field is complex and there's a value, decode that as JSON, then add explode_env_vars
try
value
self
decode_complex_value
field_name
field
value
except
ValueError
not
allow_parse_failure
raise
isinstance
value
dict
return
deep_update
value
self
explode_env_vars
field_name
field
self
env_vars
else
return
value
elif
value
not
None
# simplest case, field is not complex, we only need to add the value if it was found
return
value
next_field
next_field
field
FieldInfo
Any
None
key
str
case_sensitive
bool
None
None
FieldInfo
None
Find the field in a sub model by key(env name)
By having the following models:
```py
class SubSubModel(BaseSettings):
dvals: Dict
class SubModel(BaseSettings):
vals: list[str]
sub_sub_model: SubSubModel
class Cfg(BaseSettings):
sub_model: SubModel
```
Then
next_field(sub_model, 'vals') Returns the
vals
field of
SubModel
class
next_field(sub_model, 'sub_sub_model') Returns
sub_sub_model
field of
SubModel
class
Parameters:
Name
Type
Description
Default
field
FieldInfo
Any
| None
The field.
required
key
str
The key (env name).
required
case_sensitive
bool
| None
Whether to search for key case sensitively.
None
Returns:
Type
Description
FieldInfo
| None
Field if it finds the next field otherwise
None
Source code in
pydantic_settings/sources.py
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
def
next_field
self
field
FieldInfo
Any
None
key
str
case_sensitive
bool
None
None
FieldInfo
None
"""
Find the field in a sub model by key(env name)
By having the following models:
```py
class SubSubModel(BaseSettings):
dvals: Dict
class SubModel(BaseSettings):
vals: list[str]
sub_sub_model: SubSubModel
class Cfg(BaseSettings):
sub_model: SubModel
```
Then:
next_field(sub_model, 'vals') Returns the `vals` field of `SubModel` class
next_field(sub_model, 'sub_sub_model') Returns `sub_sub_model` field of `SubModel` class
Args:
field: The field.
key: The key (env name).
case_sensitive: Whether to search for key case sensitively.
Returns:
Field if it finds the next field otherwise `None`.
"""
not
field
return
None
annotation
field
annotation
isinstance
field
FieldInfo
else
field
origin_is_union
get_origin
annotation
isinstance
annotation
WithArgsTypes
for
type_
get_args
annotation
type_has_key
self
next_field
type_
key
case_sensitive
type_has_key
return
type_has_key
elif
is_model_class
annotation
is_pydantic_dataclass
annotation
fields
_get_model_fields
annotation
# `case_sensitive is None` is here to be compatible with the old behavior.
# Has to be removed in V3.
for
field_name
fields
items
():
for
env_name
self
_extract_field_info
field_name
case_sensitive
None
case_sensitive
field_name
key
env_name
key
return
elif
field_name
lower
key
lower
env_name
lower
key
lower
():
return
return
None
explode_env_vars
explode_env_vars
field_name
str
field
FieldInfo
env_vars
Mapping
str
str
None
dict
str
Any
Process env_vars and extract the values of keys containing env_nested_delimiter into nested dictionaries.
This is applied to a single field, hence filtering by env_var prefix.
Parameters:
Name
Type
Description
Default
field_name
str
The field name.
required
field
FieldInfo
The field.
required
env_vars
Mapping
str
str
| None]
Environment variables.
required
Returns:
Type
Description
dict
str
Any
A dictionary contains extracted values from nested env values.
Source code in
pydantic_settings/sources.py
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
def
explode_env_vars
self
field_name
str
field
FieldInfo
env_vars
Mapping
str
str
None
dict
str
Any
"""
Process env_vars and extract the values of keys containing env_nested_delimiter into nested dictionaries.
This is applied to a single field, hence filtering by env_var prefix.
Args:
field_name: The field name.
field: The field.
env_vars: Environment variables.
Returns:
A dictionary contains extracted values from nested env values.
"""
is_dict
lenient_issubclass
get_origin
field
annotation
dict
prefixes
env_name
self
env_nested_delimiter
for
env_name
self
_extract_field_info
field
field_name
result
dict
str
Any
for
env_name
env_val
env_vars
items
():
not
any
env_name
startswith
prefix
for
prefix
prefixes
continue
# we remove the prefix before splitting in case the prefix has characters in common with the delimiter
env_name_without_prefix
env_name
self
env_prefix_len
keys
last_key
env_name_without_prefix
split
self
env_nested_delimiter
env_var
result
target_field
FieldInfo
None
field
for
key
keys
target_field
self
next_field
target_field
key
self
case_sensitive
isinstance
env_var
dict
env_var
env_var
setdefault
key
{})
# get proper field with last_key
target_field
self
next_field
target_field
last_key
self
case_sensitive
# check if env_val maps to a complex field and if so, parse the env_val
target_field
is_dict
and
env_val
target_field
is_complex
allow_json_failure
self
_field_is_complex
target_field
else
# nested field type is dict
is_complex
allow_json_failure
True
True
is_complex
try
env_val
self
decode_complex_value
last_key
target_field
env_val
# type: ignore
except
ValueError
not
allow_json_failure
raise
isinstance
env_var
dict
last_key
not
env_var
not
isinstance
env_val
EnvNoneType
env_var
last_key
{}:
env_var
last_key
env_val
return
result
ForceDecode
Annotation to force decoding of a field value.
InitSettingsSource
InitSettingsSource
settings_cls
type
BaseSettings
init_kwargs
dict
str
Any
nested_model_default_partial_update
bool
None
None
Bases:
PydanticBaseSettingsSource
Source class for loading values provided during settings class initialization.
Source code in
pydantic_settings/sources.py
385
386
387
388
389
390
391
392
393
394
395
396
397
def
__init__
self
settings_cls
type
BaseSettings
init_kwargs
dict
str
Any
nested_model_default_partial_update
bool
None
None
self
init_kwargs
init_kwargs
super
__init__
settings_cls
self
nested_model_default_partial_update
nested_model_default_partial_update
nested_model_default_partial_update
not
None
else
self
config
get
'nested_model_default_partial_update'
False
JsonConfigSettingsSource
JsonConfigSettingsSource
settings_cls
type
BaseSettings
json_file
PathType
None
DEFAULT_PATH
json_file_encoding
str
None
None
Bases:
InitSettingsSource
ConfigFileSourceMixin
A source class that loads variables from a JSON file
Source code in
pydantic_settings/sources.py
2015
2016
2017
2018
2019
2020
2021
2022
2023
2024
2025
2026
2027
2028
def
__init__
self
settings_cls
type
BaseSettings
json_file
PathType
None
DEFAULT_PATH
json_file_encoding
str
None
None
self
json_file_path
json_file
json_file
DEFAULT_PATH
else
settings_cls
model_config
get
'json_file'
self
json_file_encoding
json_file_encoding
json_file_encoding
not
None
else
settings_cls
model_config
get
'json_file_encoding'
self
json_data
self
_read_files
self
json_file_path
super
__init__
settings_cls
self
json_data
NoDecode
Annotation to prevent decoding of a field value.
PydanticBaseSettingsSource
PydanticBaseSettingsSource
settings_cls
type
BaseSettings
Bases:
ABC
Abstract base class for settings sources, every settings source classes should inherit from it.
Source code in
pydantic_settings/sources.py
236
237
238
239
240
def
__init__
self
settings_cls
type
BaseSettings
]):
self
settings_cls
settings_cls
self
config
settings_cls
model_config
self
_current_state
dict
str
Any
self
_settings_sources_data
dict
str
dict
str
Any
current_state
property
current_state
dict
str
Any
The current state of the settings, populated by the previous settings sources.
settings_sources_data
property
settings_sources_data
dict
str
dict
str
Any
The state of all previous settings sources.
get_field_value
abstractmethod
get_field_value
field
FieldInfo
field_name
str
tuple
Any
str
bool
Gets the value, the key for model creation, and a flag to determine whether value is complex.
This is an abstract method that should be overridden in every settings source classes.
Parameters:
Name
Type
Description
Default
field
FieldInfo
The field.
required
field_name
str
The field name.
required
Returns:
Type
Description
tuple
Any
str
bool
A tuple that contains the value, key and a flag to determine whether value is complex.
Source code in
pydantic_settings/sources.py
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
@abstractmethod
def
get_field_value
self
field
FieldInfo
field_name
str
tuple
Any
str
bool
"""
Gets the value, the key for model creation, and a flag to determine whether value is complex.
This is an abstract method that should be overridden in every settings source classes.
Args:
field: The field.
field_name: The field name.
Returns:
A tuple that contains the value, key and a flag to determine whether value is complex.
"""
pass
field_is_complex
field_is_complex
field
FieldInfo
bool
Checks whether a field is complex, in which case it will attempt to be parsed as JSON.
Parameters:
Name
Type
Description
Default
field
FieldInfo
The field.
required
Returns:
Type
Description
bool
Whether the field is complex.
Source code in
pydantic_settings/sources.py
286
287
288
289
290
291
292
293
294
295
296
def
field_is_complex
self
field
FieldInfo
bool
"""
Checks whether a field is complex, in which case it will attempt to be parsed as JSON.
Args:
field: The field.
Returns:
Whether the field is complex.
"""
return
_annotation_is_complex
field
annotation
field
metadata
prepare_field_value
prepare_field_value
field_name
str
field
FieldInfo
value
Any
value_is_complex
bool
Any
Prepares the value of a field.
Parameters:
Name
Type
Description
Default
field_name
str
The field name.
required
field
FieldInfo
The field.
required
value
Any
The value of the field that has to be prepared.
required
value_is_complex
bool
A flag to determine whether value is complex.
required
Returns:
Type
Description
Any
The prepared value.
Source code in
pydantic_settings/sources.py
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
def
prepare_field_value
self
field_name
str
field
FieldInfo
value
Any
value_is_complex
bool
Any
"""
Prepares the value of a field.
Args:
field_name: The field name.
field: The field.
value: The value of the field that has to be prepared.
value_is_complex: A flag to determine whether value is complex.
Returns:
The prepared value.
"""
value
not
None
and
self
field_is_complex
field
value_is_complex
return
self
decode_complex_value
field_name
field
value
return
value
decode_complex_value
decode_complex_value
field_name
str
field
FieldInfo
value
Any
Any
Decode the value for a complex field
Parameters:
Name
Type
Description
Default
field_name
str
The field name.
required
field
FieldInfo
The field.
required
value
Any
The value of the field that has to be prepared.
required
Returns:
Type
Description
Any
The decoded value for further preparation
Source code in
pydantic_settings/sources.py
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
def
decode_complex_value
self
field_name
str
field
FieldInfo
value
Any
Any
"""
Decode the value for a complex field
Args:
field_name: The field name.
field: The field.
value: The value of the field that has to be prepared.
Returns:
The decoded value for further preparation
"""
field
and
NoDecode
field
metadata
self
config
get
'enable_decoding'
False
and
ForceDecode
not
field
metadata
return
value
return
json
loads
value
PyprojectTomlConfigSettingsSource
PyprojectTomlConfigSettingsSource
settings_cls
type
BaseSettings
toml_file
Path
None
None
Bases:
TomlConfigSettingsSource
A source class that loads variables from a
pyproject.toml
file.
Source code in
pydantic_settings/sources.py
2068
2069
2070
2071
2072
2073
2074
2075
2076
2077
2078
2079
2080
2081
2082
def
__init__
self
settings_cls
type
BaseSettings
toml_file
Path
None
None
None
self
toml_file_path
self
_pick_pyproject_toml_file
toml_file
settings_cls
model_config
get
'pyproject_toml_depth'
self
toml_table_header
tuple
str
...
settings_cls
model_config
get
'pyproject_toml_table_header'
'tool'
'pydantic-settings'
self
toml_data
self
_read_files
self
toml_file_path
for
key
self
toml_table_header
self
toml_data
self
toml_data
get
key
{})
super
TomlConfigSettingsSource
self
__init__
settings_cls
self
toml_data
SecretsSettingsSource
SecretsSettingsSource
settings_cls
type
BaseSettings
secrets_dir
PathType
None
None
case_sensitive
bool
None
None
env_prefix
str
None
None
env_ignore_empty
bool
None
None
env_parse_none_str
str
None
None
env_parse_enums
bool
None
None
Bases:
PydanticBaseEnvSettingsSource
Source class for loading settings values from secret files.
Source code in
pydantic_settings/sources.py
629
630
631
632
633
634
635
636
637
638
639
640
641
642
def
__init__
self
settings_cls
type
BaseSettings
secrets_dir
PathType
None
None
case_sensitive
bool
None
None
env_prefix
str
None
None
env_ignore_empty
bool
None
None
env_parse_none_str
str
None
None
env_parse_enums
bool
None
None
None
super
__init__
settings_cls
case_sensitive
env_prefix
env_ignore_empty
env_parse_none_str
env_parse_enums
self
secrets_dir
secrets_dir
secrets_dir
not
None
else
self
config
get
'secrets_dir'
find_case_path
classmethod
find_case_path
dir_path
Path
file_name
str
case_sensitive
bool
Path
None
Find a file within path's directory matching filename, optionally ignoring case.
Parameters:
Name
Type
Description
Default
dir_path
Path
Directory path.
required
file_name
str
File name.
required
case_sensitive
bool
Whether to search for file name case sensitively.
required
Returns:
Type
Description
Path
| None
Whether file path or
None
if file does not exist in directory.
Source code in
pydantic_settings/sources.py
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
@classmethod
def
find_case_path
cls
dir_path
Path
file_name
str
case_sensitive
bool
Path
None
"""
Find a file within path's directory matching filename, optionally ignoring case.
Args:
dir_path: Directory path.
file_name: File name.
case_sensitive: Whether to search for file name case sensitively.
Returns:
Whether file path or `None` if file does not exist in directory.
"""
for
dir_path
iterdir
():
name
file_name
return
elif
not
case_sensitive
and
name
lower
file_name
lower
():
return
return
None
get_field_value
get_field_value
field
FieldInfo
field_name
str
tuple
Any
str
bool
Gets the value for field from secret file and a flag to determine whether value is complex.
Parameters:
Name
Type
Description
Default
field
FieldInfo
The field.
required
field_name
str
The field name.
required
Returns:
Type
Description
tuple
Any
str
bool
A tuple that contains the value (
None
if the file does not exist), key, and
a flag to determine whether value is complex.
Source code in
pydantic_settings/sources.py
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
def
get_field_value
self
field
FieldInfo
field_name
str
tuple
Any
str
bool
"""
Gets the value for field from secret file and a flag to determine whether value is complex.
Args:
field: The field.
field_name: The field name.
Returns:
A tuple that contains the value (`None` if the file does not exist), key, and
a flag to determine whether value is complex.
"""
for
field_key
env_name
value_is_complex
self
_extract_field_info
field
field_name
# paths reversed to match the last-wins behaviour of `env_file`
for
secrets_path
reversed
self
secrets_paths
path
self
find_case_path
secrets_path
env_name
self
case_sensitive
not
path
# path does not exist, we currently don't return a warning for this
continue
path
is_file
():
return
path
read_text
strip
(),
field_key
value_is_complex
else
warnings
warn
'attempted to load secret file "
path
" but found a
path_type_label
path
instead.'
stacklevel
return
None
field_key
value_is_complex
TomlConfigSettingsSource
TomlConfigSettingsSource
settings_cls
type
BaseSettings
toml_file
PathType
None
DEFAULT_PATH
Bases:
InitSettingsSource
ConfigFileSourceMixin
A source class that loads variables from a TOML file
Source code in
pydantic_settings/sources.py
2043
2044
2045
2046
2047
2048
2049
2050
def
__init__
self
settings_cls
type
BaseSettings
toml_file
PathType
None
DEFAULT_PATH
self
toml_file_path
toml_file
toml_file
DEFAULT_PATH
else
settings_cls
model_config
get
'toml_file'
self
toml_data
self
_read_files
self
toml_file_path
super
__init__
settings_cls
self
toml_data
YamlConfigSettingsSource
YamlConfigSettingsSource
settings_cls
type
BaseSettings
yaml_file
PathType
None
DEFAULT_PATH
yaml_file_encoding
str
None
None
Bases:
InitSettingsSource
ConfigFileSourceMixin
A source class that loads variables from a yaml file
Source code in
pydantic_settings/sources.py
2114
2115
2116
2117
2118
2119
2120
2121
2122
2123
2124
2125
2126
2127
def
__init__
self
settings_cls
type
BaseSettings
yaml_file
PathType
None
DEFAULT_PATH
yaml_file_encoding
str
None
None
self
yaml_file_path
yaml_file
yaml_file
DEFAULT_PATH
else
settings_cls
model_config
get
'yaml_file'
self
yaml_file_encoding
yaml_file_encoding
yaml_file_encoding
not
None
else
settings_cls
model_config
get
'yaml_file_encoding'
self
yaml_data
self
_read_files
self
yaml_file_path
super
__init__
settings_cls
self
yaml_data
get_subcommand
get_subcommand
model
PydanticModel
is_required
bool
True
cli_exit_on_error
bool
None
None
Optional
PydanticModel
Get the subcommand from a model.
Parameters:
Name
Type
Description
Default
model
PydanticModel
The model to get the subcommand from.
required
is_required
bool
Determines whether a model must have subcommand set and raises error if not
found. Defaults to
True
True
cli_exit_on_error
bool
| None
Determines whether this function exits with error if no subcommand is found.
Defaults to model_config
cli_exit_on_error
value if set. Otherwise, defaults to
True
None
Returns:
Type
Description
Optional
PydanticModel
The subcommand model if found, otherwise
None
Raises:
Type
Description
SystemExit
When no subcommand is found and is_required=
True
and cli_exit_on_error=
True
(the default).
SettingsError
When no subcommand is found and is_required=
True
and
cli_exit_on_error=
False
Source code in
pydantic_settings/sources.py
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
def
get_subcommand
model
PydanticModel
is_required
bool
True
cli_exit_on_error
bool
None
None
Optional
PydanticModel
"""
Get the subcommand from a model.
Args:
model: The model to get the subcommand from.
is_required: Determines whether a model must have subcommand set and raises error if not
found. Defaults to `True`.
cli_exit_on_error: Determines whether this function exits with error if no subcommand is found.
Defaults to model_config `cli_exit_on_error` value if set. Otherwise, defaults to `True`.
Returns:
The subcommand model if found, otherwise `None`.
Raises:
SystemExit: When no subcommand is found and is_required=`True` and cli_exit_on_error=`True`
(the default).
SettingsError: When no subcommand is found and is_required=`True` and
cli_exit_on_error=`False`.
"""
model_cls
type
model
cli_exit_on_error
None
and
is_model_class
model_cls
model_default
model_cls
model_config
get
'cli_exit_on_error'
isinstance
model_default
bool
cli_exit_on_error
model_default
cli_exit_on_error
None
cli_exit_on_error
True
subcommands
list
str
for
field_name
field_info
_get_model_fields
model_cls
items
():
_CliSubCommand
field_info
metadata
getattr
model
field_name
not
None
return
getattr
model
field_name
subcommands
append
field_name
is_required
error_message
'Error: CLI subcommand is required
", "
join
subcommands
subcommands
else
'Error: CLI subcommand is required but no subcommands were found.'
raise
SystemExit
error_message
cli_exit_on_error
else
SettingsError
error_message
return
None
Was this page helpful?
Thanks for your feedback!
Thanks for your feedback!