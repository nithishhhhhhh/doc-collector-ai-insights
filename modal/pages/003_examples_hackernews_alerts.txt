URL: https://modal.com/docs/examples/hackernews_alerts
==================================================

Featured
Getting started
Hello, world
Simple web scraper
Serving web endpoints
Large language models (LLMs)
Deploy an OpenAI-compatible LLM service with vLLM
Run DeepSeek-R1 and Phi-4 with llama.cpp
Low-latency, serverless TensorRT-LLM
Run Vision-Language Models with SGLang
Run a multimodal RAG chatbot to answer questions about PDFs
Fine-tune an LLM to replace your CEO
Images, video, & 3D
Fine-tune Wan2.1 video models on your face
Run Flux fast with torch.compile
Fine-tune Flux with LoRA
Animate images with LTX-Video
Generate video clips with LTX-Video
Generate video clips with Mochi
Run Stable Diffusion with a CLI, API, and web UI
Deploy ControlNet demos with Gradio
Audio
Run Text to Speech (TTS) with Chatterbox
Deploy a Moshi voice chatbot
Create music with MusicGen
Real-time communication
Serverless WebRTC
Real-time audio transcription using Parakeet
WebRTC quickstart with FastRTC
Computational biology
Fold proteins with Chai-1
Build a protein-folding dashboard
Fold proteins with Boltz-2
Sandboxed code execution
Run a LangGraph agent's code in a secure GPU sandbox
Build a stateful, sandboxed code interpreter
Run Node.js, Ruby, and more in a Sandbox
Run a sandboxed Jupyter notebook
Embeddings
Embed millions of documents with TEI
Turn satellite images into vectors and store them in MongoDB
Parallel processing and job scheduling
Transcribe podcasts with Whisper
Deploy a Hacker News Slackbot
Run a Document OCR job queue
Serve a Document OCR web app
Training models from scratch
Train an SLM with early-stopping grid search over hyperparameters
Run long, resumable training jobs
Hosting popular libraries
FastHTML: Deploy 100,000 multiplayer checkboxes
YOLO: Fine-tune and serve computer vision models
MultiOn: Create an agent for AI news
Blender: Build a 3D render farm
Streamlit: Run and deploy Streamlit apps
ComfyUI: Run Flux on ComfyUI as an API
SQLite: Publish explorable data with Datasette
Algolia: Build docsearch with a crawler
Connecting to other APIs
Discord: Deploy and run a Discord Bot
Google Sheets: Sync databases and APIs to a Google Sheet
OpenAI: Run a RAG Q&A chatbot
Tailscale: Add Modal Apps to your VPN
Prometheus: Publish custom metrics with Pushgateway
Managing data
Mount S3 buckets in Modal apps
Build your own data warehouse with DuckDB, DBT, and Modal
Create a LoRA Playground with Modal, Gradio, and S3
Miscellaneous
View on GitHub
Run cron jobs in the cloud to search Hacker News
In this example, we use Modal to deploy a cron job that periodically queries Hacker News for
new posts matching a given search term, and posts the results to Slack.
Import and define the app
Let’s start off with imports, and defining a Modal app.
import
from
datetime
import
datetime, timedelta
import
modal
app = modal.App(
"example-hn-bot"
Copy
Now, let’s define an image that has the
slack-sdk
package installed, in which we can run a function
that posts a slack message.
slack_sdk_image = modal.Image.debian_slim().pip_install(
"slack-sdk"
Copy
Defining the function and importing the secret
Our Slack bot will need access to a bot token.
We can use Modal’s
Secrets
interface to accomplish this.
To quickly create a Slack bot secret, click the “Create new secret” button.
Then, select the Slack secret template from the list options,
and follow the instructions in the “Where to find the credentials?” panel.
Name your secret
hn-bot-slack.
Now, we define the function
post_to_slack
, which simply instantiates the Slack client using our token,
and then uses it to post a message to a given channel name.
@app.function
image
=slack_sdk_image,
secrets
=[modal.Secret.from_name(
"hn-bot-slack"
required_keys
"SLACK_BOT_TOKEN"
])],
async
post_to_slack
message
import
slack_sdk
client = slack_sdk.WebClient(
token
=os.environ[
"SLACK_BOT_TOKEN"
client.chat_postMessage(
channel
"hn-alerts"
text
=message)
Copy
Searching Hacker News
We are going to use Algolia’s
Hacker News Search API
to query for posts
matching a given search term in the past X days. Let’s define our search term and query period.
QUERY =
"serverless"
WINDOW_SIZE_DAYS =
Copy
Let’s also define an image that has the
requests
package installed, so we can query the API.
requests_image = modal.Image.debian_slim().pip_install(
"requests"
Copy
We can now define our main entrypoint, that queries Algolia for the term, and calls
post_to_slack
on all the results. We specify a
schedule
in the function decorator, which means that our function will run automatically at the given interval.
@app.function
image
=requests_image)
search_hackernews
import
requests
url =
"http://hn.algolia.com/api/v1/search"
threshold = datetime.utcnow() - timedelta(
days
=WINDOW_SIZE_DAYS)
params = {
"query"
: QUERY,
"numericFilters"
"created_at_i>
threshold.timestamp()
response = requests.get(url, params,
timeout
).json()
urls = [item[
"url"
item
response[
"hits"
item.get(
"url"
print
"Query returned
(urls)
items."
post_to_slack.for_each(urls)
Copy
Test running
We can now test run our scheduled function as follows:
modal run hackernews_alerts.py::app.search_hackernews
Defining the schedule and deploying
Let’s define a function that will be called by Modal every day
@app.function
schedule
=modal.Period(
days
run_daily
search_hackernews.remote()
Copy
In order to deploy this as a persistent cron job, you can run
modal deploy hackernews_alerts.py
Once the job is deployed, visit the
apps page
page to see
its execution history, logs and other stats.
Run cron jobs in the cloud to search Hacker News
Import and define the app
Defining the function and importing the secret
Searching Hacker News
Test running
Defining the schedule and deploying
Try this on Modal!
You can run this example on Modal in 60 seconds.
Create account to run
After creating a free account, install the Modal Python package, and
create an API token.
install
modal
modal
setup
Copy
Clone the
modal-examples
repository and run:
clone
https://github.com/modal-labs/modal-examples
modal-examples
modal
05_scheduling/hackernews_alerts.py
Copy