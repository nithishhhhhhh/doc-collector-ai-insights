URL: https://modal.com/docs/reference/modal.Image
==================================================

Changelog
API Reference
modal.App
modal.Client
modal.CloudBucketMount
modal.Cls
modal.Cron
modal.Dict
modal.Error
modal.FilePatternMatcher
modal.Function
modal.FunctionCall
modal.Image
modal.NetworkFileSystem
modal.Period
modal.Proxy
modal.Queue
modal.Retries
modal.Sandbox
modal.SandboxSnapshot
modal.Secret
modal.Tunnel
modal.Volume
modal.asgi_app
modal.batched
modal.call_graph
modal.concurrent
modal.container_process
modal.current_function_call_id
modal.current_input_id
modal.enable_output
modal.enter
modal.exit
modal.fastapi_endpoint
modal.file_io
modal.forward
modal.gpu
modal.interact
modal.io_streams
modal.is_local
modal.method
modal.parameter
modal.web_endpoint
modal.web_server
modal.wsgi_app
modal.exception
modal.config
CLI Reference
modal app
modal config
modal container
modal deploy
modal dict
modal environment
modal launch
modal nfs
modal profile
modal queue
modal run
modal secret
modal serve
modal setup
modal shell
modal token
modal volume
modal.Image
class
Image
modal
object
Object
Copy
Base class for container images to run functions in.
Do not construct this class directly; instead use one of its static factory methods,
such as
modal.Image.debian_slim
modal.Image.from_registry
, or
modal.Image.micromamba
hydrate
hydrate
self
client
: Optional[_Client] =
None
) -> Self:
Copy
Synchronize the local object with its identity on the Modal server.
It is rarely necessary to call this method explicitly, as most operations
will lazily hydrate when needed. The main use case is when you need to
access object metadata, such as its ID.
Added in v0.72.39
: This method replaces the deprecated
.resolve()
method.
add_local_file
add_local_file
self
local_path
: Union[
, Path],
remote_path
, *,
copy
bool
False
) ->
"_Image"
Copy
Adds a local file to the image at
remote_path
within the container
By default (
copy=False
), the files are added to containers on startup and are not built into the actual Image,
which speeds up deployment.
copy=True
to copy the files into an Image layer at build time instead, similar to how
COPY
works in a
Dockerfile
copy=True can slow down iteration since it requires a rebuild of the Image and any subsequent
build steps whenever the included files change, but it is required if you want to run additional
build steps after this one.
Added in v0.66.40
: This method replaces the deprecated
modal.Image.copy_local_file
method.
add_local_dir
add_local_dir
self
local_path
: Union[
, Path],
remote_path
copy
bool
False
# Predicate filter function for file exclusion, which should accept a filepath and return `True` for exclusion.
# Defaults to excluding no files. If a Sequence is provided, it will be converted to a FilePatternMatcher.
# Which follows dockerignore syntax.
ignore
: Union[Sequence[
], Callable[[Path],
bool
]] = [],
) ->
"_Image"
Copy
Adds a local directory’s content to the image at
remote_path
within the container
By default (
copy=False
), the files are added to containers on startup and are not built into the actual Image,
which speeds up deployment.
copy=True
to copy the files into an Image layer at build time instead, similar to how
COPY
works in a
Dockerfile
copy=True can slow down iteration since it requires a rebuild of the Image and any subsequent
build steps whenever the included files change, but it is required if you want to run additional
build steps after this one.
Usage:
from
modal
import
FilePatternMatcher
image = modal.Image.debian_slim().add_local_dir(
"~/assets"
remote_path
"/assets"
ignore
"*.venv"
image = modal.Image.debian_slim().add_local_dir(
"~/assets"
remote_path
"/assets"
ignore
lambda
: p.is_relative_to(
".venv"
image = modal.Image.debian_slim().add_local_dir(
"~/assets"
remote_path
"/assets"
ignore
=FilePatternMatcher(
"**/*.txt"
# When including files is simpler than excluding them, you can use the `~` operator to invert the matcher.
image = modal.Image.debian_slim().add_local_dir(
"~/assets"
remote_path
"/assets"
ignore
=~FilePatternMatcher(
"**/*.py"
# You can also read ignore patterns from a file.
image = modal.Image.debian_slim().add_local_dir(
"~/assets"
remote_path
"/assets"
ignore
=FilePatternMatcher.from_file(
"/path/to/ignorefile"
Copy
Added in v0.66.40
: This method replaces the deprecated
modal.Image.copy_local_dir
method.
add_local_python_source
add_local_python_source
self
modules
copy
bool
False
ignore
: Union[Sequence[
], Callable[[Path],
bool
]] = NON_PYTHON_FILES
) ->
"_Image"
Copy
Adds locally available Python packages/modules to containers
Adds all files from the specified Python package or module to containers running the Image.
Packages are added to the
/root
directory of containers, which is on the
PYTHONPATH
of any executed Modal Functions, enabling import of the module by that name.
By default (
copy=False
), the files are added to containers on startup and are not built into the actual Image,
which speeds up deployment.
copy=True
to copy the files into an Image layer at build time instead. This can slow down iteration since
it requires a rebuild of the Image and any subsequent build steps whenever the included files change, but it is
required if you want to run additional build steps after this one.
Note:
This excludes all dot-prefixed subdirectories or files and all
.pyc
__pycache__
files.
To add full directories with finer control, use
.add_local_dir()
instead and specify
/root
the destination directory.
By default only includes
-files in the source modules. Set the
ignore
argument to a list of patterns
or a callable to override this behavior, e.g.:
# includes everything except data.json
modal.Image.debian_slim().add_local_python_source(
"mymodule"
ignore
"data.json"
# exclude large files
modal.Image.debian_slim().add_local_python_source(
"mymodule"
ignore
lambda
: p.stat().st_size >
Copy
Added in v0.67.28
: This method replaces the deprecated
modal.Mount.from_local_python_packages
pattern.
from_id
staticmethod
from_id
image_id
client
: Optional[_Client] =
None
) ->
"_Image"
Copy
Construct an Image from an id and look up the Image result.
The ID of an Image object can be accessed using
.object_id
pip_install
pip_install
self
packages
: Union[
, list[
# A list of Python packages, eg. ["numpy", "matplotlib>=3.5.0"]
find_links
: Optional[
None
# Passes -f (--find-links) pip install
index_url
: Optional[
None
# Passes -i (--index-url) to pip install
extra_index_url
: Optional[
None
# Passes --extra-index-url to pip install
bool
False
# Passes --pre (allow pre-releases) to pip install
extra_options
# Additional options to pass to pip install, e.g. "--no-build-isolation --no-clean"
force_build
bool
False
# Ignore cached builds, similar to 'docker build --no-cache'
secrets
: Sequence[_Secret] = [],
: GPU_T =
None
) ->
"_Image"
Copy
Install a list of Python packages using pip.
Examples
Simple installation:
image = modal.Image.debian_slim().pip_install(
"click"
"httpx~=0.23.3"
Copy
More complex installation:
image = (
modal.Image.from_registry(
"nvidia/cuda:12.2.0-devel-ubuntu22.04"
add_python
"3.11"
.pip_install(
"ninja"
"packaging"
"wheel"
"transformers==4.40.2"
.pip_install(
"flash-attn==2.5.8"
extra_options
"--no-build-isolation"
Copy
pip_install_private_repos
pip_install_private_repos
self
repositories
git_user
find_links
: Optional[
None
# Passes -f (--find-links) pip install
index_url
: Optional[
None
# Passes -i (--index-url) to pip install
extra_index_url
: Optional[
None
# Passes --extra-index-url to pip install
bool
False
# Passes --pre (allow pre-releases) to pip install
extra_options
# Additional options to pass to pip install, e.g. "--no-build-isolation --no-clean"
: GPU_T =
None
secrets
: Sequence[_Secret] = [],
force_build
bool
False
# Ignore cached builds, similar to 'docker build --no-cache'
) ->
"_Image"
Copy
Install a list of Python packages from private git repositories using pip.
This method currently supports Github and Gitlab only.
Github:
Provide a
modal.Secret
that contains a
GITHUB_TOKEN
key-value pair
Gitlab:
Provide a
modal.Secret
that contains a
GITLAB_TOKEN
key-value pair
These API tokens should have permissions to read the list of private repositories provided as arguments.
We recommend using Github’s
‘fine-grained’ access tokens
These tokens are repo-scoped, and avoid granting read permission across all of a user’s private repos.
Example
image = (
modal.Image
.debian_slim()
.pip_install_private_repos(
"github.com/ecorp/private-one@1.0.0"
"github.com/ecorp/private-two@main"
"github.com/ecorp/private-three@d4776502"
# install from 'inner' directory on default branch.
"github.com/ecorp/private-four#subdirectory=inner"
git_user
"erikbern"
secrets
=[modal.Secret.from_name(
"github-read-private"
Copy
pip_install_from_requirements
pip_install_from_requirements
self
requirements_txt
# Path to a requirements.txt file.
find_links
: Optional[
None
# Passes -f (--find-links) pip install
index_url
: Optional[
None
# Passes -i (--index-url) to pip install
extra_index_url
: Optional[
None
# Passes --extra-index-url to pip install
bool
False
# Passes --pre (allow pre-releases) to pip install
extra_options
# Additional options to pass to pip install, e.g. "--no-build-isolation --no-clean"
force_build
bool
False
# Ignore cached builds, similar to 'docker build --no-cache'
secrets
: Sequence[_Secret] = [],
: GPU_T =
None
) ->
"_Image"
Copy
Install a list of Python packages from a local
requirements.txt
file.
pip_install_from_pyproject
pip_install_from_pyproject
self
pyproject_toml
optional_dependencies
: list[
] = [],
find_links
: Optional[
None
# Passes -f (--find-links) pip install
index_url
: Optional[
None
# Passes -i (--index-url) to pip install
extra_index_url
: Optional[
None
# Passes --extra-index-url to pip install
bool
False
# Passes --pre (allow pre-releases) to pip install
extra_options
# Additional options to pass to pip install, e.g. "--no-build-isolation --no-clean"
force_build
bool
False
# Ignore cached builds, similar to 'docker build --no-cache'
secrets
: Sequence[_Secret] = [],
: GPU_T =
None
) ->
"_Image"
Copy
Install dependencies specified by a local
pyproject.toml
file.
optional_dependencies
is a list of the keys of the
optional-dependencies section(s) of the
pyproject.toml
file
(e.g. test, doc, experiment, etc). When provided,
all of the packages in each listed section are installed as well.
poetry_install_from_file
poetry_install_from_file
self
poetry_pyproject_toml
poetry_lockfile
: Optional[
None
# Path to lockfile. If not provided, uses poetry.lock in same directory.
ignore_lockfile
bool
False
# If set to True, do not use poetry.lock, even when present
# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336
old_installer
bool
False
force_build
bool
False
# Ignore cached builds, similar to 'docker build --no-cache'
# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)
with_
: list[
] = [],
# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)
without
: list[
] = [],
only
: list[
] = [],
# Only install dependency groups specifed in this list.
secrets
: Sequence[_Secret] = [],
: GPU_T =
None
) ->
"_Image"
Copy
Install poetry
dependencies
specified by a local
pyproject.toml
file.
If not provided as argument the path to the lockfile is inferred. However, the
file has to exist, unless
ignore_lockfile
is set to
True
Note that the root project of the poetry project is not installed, only the dependencies.
For including local python source files see
add_local_python_source
dockerfile_commands
dockerfile_commands
self
dockerfile_commands
: Union[
, list[
context_files
: dict[
] = {},
secrets
: Sequence[_Secret] = [],
: GPU_T =
None
context_mount
: Optional[_Mount] =
None
# Deprecated: the context is now inferred
context_dir
: Optional[Union[Path,
]] =
None
# Context for relative COPY commands
force_build
bool
False
# Ignore cached builds, similar to 'docker build --no-cache'
ignore
: Union[Sequence[
], Callable[[Path],
bool
]] = AUTO_DOCKERIGNORE,
) ->
"_Image"
Copy
Extend an image with arbitrary Dockerfile-like commands.
Usage:
from
modal
import
FilePatternMatcher
# By default a .dockerignore file is used if present in the current working directory
image = modal.Image.debian_slim().dockerfile_commands(
"COPY data /data"
image = modal.Image.debian_slim().dockerfile_commands(
"COPY data /data"
ignore
"*.venv"
image = modal.Image.debian_slim().dockerfile_commands(
"COPY data /data"
ignore
lambda
: p.is_relative_to(
".venv"
image = modal.Image.debian_slim().dockerfile_commands(
"COPY data /data"
ignore
=FilePatternMatcher(
"**/*.txt"
# When including files is simpler than excluding them, you can use the `~` operator to invert the matcher.
image = modal.Image.debian_slim().dockerfile_commands(
"COPY data /data"
ignore
=~FilePatternMatcher(
"**/*.py"
# You can also read ignore patterns from a file.
image = modal.Image.debian_slim().dockerfile_commands(
"COPY data /data"
ignore
=FilePatternMatcher.from_file(
"/path/to/dockerignore"
Copy
entrypoint
entrypoint
self
entrypoint_commands
: list[
) ->
"_Image"
Copy
Set the entrypoint for the image.
shell
shell
self
shell_commands
: list[
) ->
"_Image"
Copy
Overwrite default shell for the image.
run_commands
run_commands
self
commands
: Union[
, list[
secrets
: Sequence[_Secret] = [],
: GPU_T =
None
force_build
bool
False
# Ignore cached builds, similar to 'docker build --no-cache'
) ->
"_Image"
Copy
Extend an image with a list of shell commands to run.
micromamba
staticmethod
micromamba
python_version
: Optional[
None
force_build
bool
False
# Ignore cached builds, similar to 'docker build --no-cache'
) ->
"_Image"
Copy
A Micromamba base image. Micromamba allows for fast building of small Conda-based containers.
micromamba_install
micromamba_install
self
# A list of Python packages, eg. ["numpy", "matplotlib>=3.5.0"]
packages
: Union[
, list[
# A local path to a file containing package specifications
spec_file
: Optional[
None
# A list of Conda channels, eg. ["conda-forge", "nvidia"].
channels
: list[
] = [],
force_build
bool
False
# Ignore cached builds, similar to 'docker build --no-cache'
secrets
: Sequence[_Secret] = [],
: GPU_T =
None
) ->
"_Image"
Copy
Install a list of additional packages using micromamba.
from_registry
staticmethod
from_registry
secret
: Optional[_Secret] =
None
setup_dockerfile_commands
: list[
] = [],
force_build
bool
False
# Ignore cached builds, similar to 'docker build --no-cache'
add_python
: Optional[
None
kwargs
) ->
"_Image"
Copy
Build a Modal Image from a public or private image registry, such as Docker Hub.
The image must be built for the
linux/amd64
platform.
If your image does not come with Python installed, you can use the
add_python
parameter
to specify a version of Python to add to the image. Otherwise, the image is expected to
have Python on PATH as
python
, along with
You may also use
setup_dockerfile_commands
to run Dockerfile commands before the
remaining commands run. This might be useful if you want a custom Python installation or to
set a
SHELL
. Prefer
run_commands()
when possible though.
To authenticate against a private registry with static credentials, you must set the
secret
parameter to
modal.Secret
containing a username (
REGISTRY_USERNAME
) and
an access token or password (
REGISTRY_PASSWORD
To authenticate against private registries with credentials from a cloud provider,
Image.from_gcp_artifact_registry()
Image.from_aws_ecr()
Examples
modal.Image.from_registry(
"python:3.11-slim-bookworm"
modal.Image.from_registry(
"ubuntu:22.04"
add_python
"3.11"
modal.Image.from_registry(
"nvcr.io/nvidia/pytorch:22.12-py3"
Copy
from_gcp_artifact_registry
staticmethod
from_gcp_artifact_registry
secret
: Optional[_Secret] =
None
setup_dockerfile_commands
: list[
] = [],
force_build
bool
False
# Ignore cached builds, similar to 'docker build --no-cache'
add_python
: Optional[
None
kwargs
) ->
"_Image"
Copy
Build a Modal image from a private image in Google Cloud Platform (GCP) Artifact Registry.
You will need to pass a
modal.Secret
containing
your GCP service account key data
SERVICE_ACCOUNT_JSON
. This can be done from the
Secrets
page.
Your service account should be granted a specific role depending on the GCP registry used:
For Artifact Registry images (
pkg.dev
domains) use
“Artifact Registry Reader”
role
For Container Registry images (
gcr.io
domains) use
“Storage Object Viewer”
role
Note:
This method does not use
GOOGLE_APPLICATION_CREDENTIALS
as that
variable accepts a path to a JSON file, not the actual JSON string.
Image.from_registry()
for information about the other parameters.
Example
modal.Image.from_gcp_artifact_registry(
"us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"
secret
=modal.Secret.from_name(
"my-gcp-secret"
required_keys
"SERVICE_ACCOUNT_JSON"
add_python
"3.11"
Copy
from_aws_ecr
staticmethod
from_aws_ecr
secret
: Optional[_Secret] =
None
setup_dockerfile_commands
: list[
] = [],
force_build
bool
False
# Ignore cached builds, similar to 'docker build --no-cache'
add_python
: Optional[
None
kwargs
) ->
"_Image"
Copy
Build a Modal image from a private image in AWS Elastic Container Registry (ECR).
You will need to pass a
modal.Secret
containing
AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY
, and
AWS_REGION
to access the target ECR registry.
IAM configuration details can be found in the AWS documentation for
“Private repository policies”
Image.from_registry()
for information about the other parameters.
Example
modal.Image.from_aws_ecr(
"000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"
secret
=modal.Secret.from_name(
"aws"
required_keys
"AWS_ACCESS_KEY_ID"
"AWS_SECRET_ACCESS_KEY"
"AWS_REGION"
add_python
"3.11"
Copy
from_dockerfile
staticmethod
from_dockerfile
path
: Union[
, Path],
# Filepath to Dockerfile.
context_mount
: Optional[_Mount] =
None
# Deprecated: the context is now inferred
force_build
bool
False
# Ignore cached builds, similar to 'docker build --no-cache'
context_dir
: Optional[Union[Path,
]] =
None
# Context for relative COPY commands
secrets
: Sequence[_Secret] = [],
: GPU_T =
None
add_python
: Optional[
None
ignore
: Union[Sequence[
], Callable[[Path],
bool
]] = AUTO_DOCKERIGNORE,
) ->
"_Image"
Copy
Build a Modal image from a local Dockerfile.
If your Dockerfile does not have Python installed, you can use the
add_python
parameter
to specify a version of Python to add to the image.
Usage:
from
modal
import
FilePatternMatcher
# By default a .dockerignore file is used if present in the current working directory
image = modal.Image.from_dockerfile(
"./Dockerfile"
add_python
"3.12"
image = modal.Image.from_dockerfile(
"./Dockerfile"
add_python
"3.12"
ignore
"*.venv"
image = modal.Image.from_dockerfile(
"./Dockerfile"
add_python
"3.12"
ignore
lambda
: p.is_relative_to(
".venv"
image = modal.Image.from_dockerfile(
"./Dockerfile"
add_python
"3.12"
ignore
=FilePatternMatcher(
"**/*.txt"
# When including files is simpler than excluding them, you can use the `~` operator to invert the matcher.
image = modal.Image.from_dockerfile(
"./Dockerfile"
add_python
"3.12"
ignore
=~FilePatternMatcher(
"**/*.py"
# You can also read ignore patterns from a file.
image = modal.Image.from_dockerfile(
"./Dockerfile"
add_python
"3.12"
ignore
=FilePatternMatcher.from_file(
"/path/to/dockerignore"
Copy
debian_slim
staticmethod
debian_slim
python_version
: Optional[
None
force_build
bool
False
) ->
"_Image"
Copy
Default image, based on the official
python
Docker images.
apt_install
apt_install
self
packages
: Union[
, list[
# A list of packages, e.g. ["ssh", "libpq-dev"]
force_build
bool
False
# Ignore cached builds, similar to 'docker build --no-cache'
secrets
: Sequence[_Secret] = [],
: GPU_T =
None
) ->
"_Image"
Copy
Install a list of Debian packages using
Example
image = modal.Image.debian_slim().apt_install(
"git"
Copy
run_function
run_function
self
raw_f
: Callable[..., Any],
secrets
: Sequence[_Secret] = (),
# Optional Modal Secret objects with environment variables for the container
: Union[GPU_T, list[GPU_T]] =
None
# Requested GPU or or list of acceptable GPUs( e.g. ["A10", "A100"])
volumes
: dict[Union[
, PurePosixPath], Union[_Volume, _CloudBucketMount]] = {},
# Volume mount paths
network_file_systems
: dict[Union[
, PurePosixPath], _NetworkFileSystem] = {},
# NFS mount paths
: Optional[
float
None
# How many CPU cores to request. This is a soft limit.
memory
: Optional[
None
# How much memory to request, in MiB. This is a soft limit.
timeout
: Optional[
# Maximum execution time of the function in seconds.
force_build
bool
False
# Ignore cached builds, similar to 'docker build --no-cache'
cloud
: Optional[
None
# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.
region
: Optional[Union[
, Sequence[
]]] =
None
# Region or regions to run the function on.
args
: Sequence[Any] = (),
# Positional arguments to the function.
kwargs
: dict[
, Any] = {},
# Keyword arguments to the function.
include_source
: Optional[
bool
None
) ->
"_Image"
Copy
Run user-defined function
raw_f
as an image build step. The function runs just like an ordinary Modal
function, and any kwargs accepted by
@app.function
(such as
Mount
NetworkFileSystem
and resource requests) can be supplied to it.
After it finishes execution, a snapshot of the resulting container file system is saved as an image.
Note
Only the source code of
raw_f
, the contents of
**kwargs
, and any referenced
global
variables
are used to determine whether the image has changed and needs to be rebuilt.
If this function references other functions or variables, the image will not be rebuilt if you
make changes to them. You can force a rebuild by changing the function’s source code itself.
Example
my_build_function
open
"model.pt"
).write(
"parameters!"
image = (
modal.Image
.debian_slim()
.pip_install(
"torch"
.run_function(my_build_function,
secrets
=[...],
mounts
=[...])
Copy
self
vars
: dict[
]) ->
"_Image"
Copy
Sets the environment variables in an Image.
Example
image = (
modal.Image.debian_slim()
.env({
"HF_HUB_ENABLE_HF_TRANSFER"
Copy
workdir
workdir
self
path
: Union[
, PurePosixPath]) ->
"_Image"
Copy
Set the working directory for subsequent image build steps and function execution.
Example
image = (
modal.Image.debian_slim()
.run_commands(
"git clone https://xyz app"
.workdir(
"/app"
.run_commands(
"yarn install"
Copy
self
: list[
]) ->
"_Image"
Copy
Set the default entrypoint argument (
) for the image.
Example
image = (
modal.Image.debian_slim().cmd([
"python"
"app.py"
Copy
imports
@contextlib.contextmanager
imports
self
Copy
Used to import packages in global scope that are only available when running remotely.
By using this context manager you can avoid an
ImportError
due to not having certain
packages installed locally.
Usage:
with
image.imports():
import
torch
Copy
modal.Image
hydrate
add_local_file
add_local_dir
add_local_python_source
from_id
pip_install
pip_install_private_repos
pip_install_from_requirements
pip_install_from_pyproject
poetry_install_from_file
dockerfile_commands
entrypoint
shell
run_commands
micromamba
micromamba_install
from_registry
from_gcp_artifact_registry
from_aws_ecr
from_dockerfile
debian_slim
apt_install
run_function
workdir
imports