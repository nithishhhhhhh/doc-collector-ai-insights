URL: https://modal.com/docs/reference/modal.App
==================================================

Changelog
API Reference
modal.App
modal.Client
modal.CloudBucketMount
modal.Cls
modal.Cron
modal.Dict
modal.Error
modal.FilePatternMatcher
modal.Function
modal.FunctionCall
modal.Image
modal.NetworkFileSystem
modal.Period
modal.Proxy
modal.Queue
modal.Retries
modal.Sandbox
modal.SandboxSnapshot
modal.Secret
modal.Tunnel
modal.Volume
modal.asgi_app
modal.batched
modal.call_graph
modal.concurrent
modal.container_process
modal.current_function_call_id
modal.current_input_id
modal.enable_output
modal.enter
modal.exit
modal.fastapi_endpoint
modal.file_io
modal.forward
modal.gpu
modal.interact
modal.io_streams
modal.is_local
modal.method
modal.parameter
modal.web_endpoint
modal.web_server
modal.wsgi_app
modal.exception
modal.config
CLI Reference
modal app
modal config
modal container
modal deploy
modal dict
modal environment
modal launch
modal nfs
modal profile
modal queue
modal run
modal secret
modal serve
modal setup
modal shell
modal token
modal volume
modal.App
class
object
Copy
A Modal App is a group of functions and classes that are deployed together.
The app serves at least three purposes:
A unit of deployment for functions and classes.
Syncing of identities of (primarily) functions and classes across processes
(your local Python interpreter and every Modal container active in your application).
Manage log collection for everything that happens inside your code.
Registering functions with an app
The most common way to explicitly register an Object with an app is through the
@app.function()
decorator. It both registers the annotated function itself and
other passed objects, like schedules and secrets, with the app:
import
modal
app = modal.App()
@app.function
secrets
=[modal.Secret.from_name(
"some_secret"
schedule
=modal.Period(
days
pass
Copy
In this example, the secret and schedule are registered with the app.
__init__
self
name
: Optional[
None
image
: Optional[_Image] =
None
# default image for all functions (default is `modal.Image.debian_slim()`)
secrets
: Sequence[_Secret] = [],
# default secrets for all functions
volumes
: dict[Union[
, PurePosixPath], _Volume] = {},
# default volumes for all functions
include_source
: Optional[
bool
None
) ->
None
Copy
Construct a new app, optionally with default image, mounts, secrets, or volumes.
image = modal.Image.debian_slim().pip_install(...)
secret = modal.Secret.from_name(
"my-secret"
volume = modal.Volume.from_name(
"my-data"
app = modal.App(
image
=image,
secrets
=[secret],
volumes
"/mnt/data"
: volume})
Copy
name
property
name
self
) -> Optional[
Copy
The user-provided name of the App.
is_interactive
property
is_interactive
self
) ->
bool
Copy
Whether the current app for the app is running in interactive mode.
app_id
property
app_id
self
) -> Optional[
Copy
Return the app_id of a running or stopped app.
description
property
description
self
) -> Optional[
Copy
The Appâ€™s
name
, if available, or a fallback descriptive identifier.
lookup
staticmethod
lookup
name
client
: Optional[_Client] =
None
environment_name
: Optional[
None
create_if_missing
bool
False
) ->
"_App"
Copy
Look up an App with a given name, creating a new App if necessary.
Note that Apps created through this method will be in a deployed state,
but they will not have any associated Functions or Classes. This method
is mainly useful for creating an App to associate with a Sandbox:
app = modal.App.lookup(
"my-app"
create_if_missing
True
modal.Sandbox.create(
"echo"
"hi"
=app)
Copy
set_description
set_description
self
description
Copy
image
property
image
self
) -> _Image:
Copy
@contextmanager
self
client
: Optional[_Client] =
None
detach
bool
False
interactive
bool
False
environment_name
: Optional[
None
) -> AsyncGenerator[
"_App"
None
Copy
Context manager that runs an ephemeral app on Modal.
Use this as the main entry point for your Modal application. All calls
to Modal Functions should be made within the scope of this context
manager, and they will correspond to the current App.
Example
with
app.run():
some_modal_function.remote()
Copy
To enable output printing (i.e., to see App logs), use
modal.enable_output()
with
modal.enable_output():
with
app.run():
some_modal_function.remote()
Copy
Note that you should not invoke this in global scope of a file where you have
Modal Functions or Classes defined, since that would run the block when the Function
or Cls is imported in your containers as well. If you want to run it as your entrypoint,
consider protecting it:
__name__
"__main__"
with
app.run():
some_modal_function.remote()
Copy
You can then run your script with:
python
app_module.py
Copy
deploy
deploy
self
name
: Optional[
None
# Name for the deployment, overriding any set on the App
environment_name
: Optional[
None
# Environment to deploy the App in
# Optional metadata that will be visible in the deployment history
client
: Optional[_Client] =
None
# Alternate client to use for RPCs
) -> typing_extensions.Self:
Copy
Deploy the App so that it is available persistently.
Deployed Apps will be avaible for lookup or web-based invocations until they are stopped.
Unlike with
App.run
, this method will return as soon as the deployment completes.
This method is a programmatic alternative to the
modal deploy
CLI command.
Examples:
app = App(
"my-app"
app.deploy()
Copy
To enable output printing (i.e., to see build logs), use
modal.enable_output()
app = App(
"my-app"
with
modal.enable_output():
app.deploy()
Copy
Unlike with
App.run
, Function logs will not stream back to the local client after the
App is deployed.
Note that you should not invoke this method in global scope, as that would redeploy
the App every time the file is imported. If you want to write a programmatic deployment
script, protect this call so that it only runs when the file is executed directly:
__name__
"__main__"
with
modal.enable_output():
app.deploy()
Copy
Then you can deploy your app with:
python
app_module.py
Copy
registered_functions
property
registered_functions
self
) -> dict[
, _Function]:
Copy
All modal.Function objects registered on the app.
registered_classes
property
registered_classes
self
) -> dict[
, _Cls]:
Copy
All modal.Cls objects registered on the app.
registered_entrypoints
property
registered_entrypoints
self
) -> dict[
, _LocalEntrypoint]:
Copy
All local CLI entrypoints registered on the app.
registered_web_endpoints
property
registered_web_endpoints
self
) -> list[
Copy
Names of web endpoint (ie. webhook) functions registered on the app.
local_entrypoint
local_entrypoint
self
_warn_parentheses_missing
: Any =
None
, *,
name
: Optional[
None
) -> Callable[[Callable[..., Any]], _LocalEntrypoint]:
Copy
Decorate a function to be used as a CLI entrypoint for a Modal App.
These functions can be used to define code that runs locally to set up the app,
and act as an entrypoint to start Modal functions from. Note that regular
Modal functions can also be used as CLI entrypoints, but unlike
local_entrypoint
those functions are executed remotely directly.
Example
@app.local_entrypoint
main
some_modal_function.remote()
Copy
You can call the function using
modal run
directly from the CLI:
modal
app_module.py
Copy
Note that an explicit
app.run()
is not needed, as an
is automatically created for you.
Multiple Entrypoints
If you have multiple
local_entrypoint
functions, you can qualify the name of your app and function:
modal
app_module.py::app.some_other_function
Copy
Parsing Arguments
If your entrypoint function take arguments with primitive types,
modal run
automatically parses them as
CLI options.
For example, the following function can be called with
modal run app_module.py --foo 1 --bar "hello"
@app.local_entrypoint
main
some_modal_function.call(foo, bar)
Copy
Currently,
float
bool
, and
datetime.datetime
are supported.
modal run app_module.py --help
for more information on usage.
function
@warn_on_renamed_autoscaler_settings
function
self
_warn_parentheses_missing
: Any =
None
image
: Optional[_Image] =
None
# The image to run as the container for the function
schedule
: Optional[Schedule] =
None
# An optional Modal Schedule for the function
secrets
: Sequence[_Secret] = (),
# Optional Modal Secret objects with environment variables for the container
: Union[
GPU_T, list[GPU_T]
None
# GPU request as string ("any", "T4", ...), object (`modal.GPU.A100()`, ...), or a list of either
serialized
bool
False
# Whether to send the function over using cloudpickle.
network_file_systems
: dict[
Union[
, PurePosixPath], _NetworkFileSystem
] = {},
# Mountpoints for Modal NetworkFileSystems
volumes
: dict[
Union[
, PurePosixPath], Union[_Volume, _CloudBucketMount]
] = {},
# Mount points for Modal Volumes & CloudBucketMounts
# Specify, in fractional CPU cores, how many CPU cores to request.
# Or, pass (request, limit) to additionally specify a hard limit in fractional CPU cores.
# CPU throttling will prevent a container from exceeding its specified limit.
: Optional[Union[
float
, tuple[
float
float
]]] =
None
# Specify, in MiB, a memory request which is the minimum memory required.
# Or, pass (request, limit) to additionally specify a hard limit in MiB.
memory
: Optional[Union[
, tuple[
]]] =
None
ephemeral_disk
: Optional[
None
# Specify, in MiB, the ephemeral disk size for the Function.
min_containers
: Optional[
None
# Minimum number of containers to keep warm, even when Function is idle.
max_containers
: Optional[
None
# Limit on the number of containers that can be concurrently running.
buffer_containers
: Optional[
None
# Number of additional idle containers to maintain under active load.
scaledown_window
: Optional[
None
# Max time (in seconds) a container can remain idle while scaling down.
proxy
: Optional[_Proxy] =
None
# Reference to a Modal Proxy to use in front of this function.
retries
: Optional[Union[
, Retries]] =
None
# Number of times to retry each input in case of failure.
timeout
: Optional[
None
# Maximum execution time of the function in seconds.
name
: Optional[
None
# Sets the Modal name of the function within the app
is_generator
: Optional[
bool
None
# Set this to True if it's a non-generator function returning a [sync/async] generator object
cloud
: Optional[
None
# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.
region
: Optional[Union[
, Sequence[
]]] =
None
# Region or regions to run the function on.
enable_memory_snapshot
bool
False
# Enable memory checkpointing for faster cold starts.
block_network
bool
False
# Whether to block network access
restrict_modal_access
bool
False
# Whether to allow this function access to other Modal resources
# Maximum number of inputs a container should handle before shutting down.
# With `max_inputs = 1`, containers will be single-use.
max_inputs
: Optional[
None
i6pn
: Optional[
bool
None
# Whether to enable IPv6 container networking within the region.
# Whether the function's home package should be included in the image - defaults to True
include_source
: Optional[
bool
None
# When `False`, don't automatically add the App source to the container.
experimental_options
: Optional[dict[
, Any]] =
None
# Parameters below here are experimental. Use with caution!
_experimental_scheduler_placement
: Optional[
SchedulerPlacement
None
# Experimental controls over fine-grained scheduling (alpha).
_experimental_proxy_ip
: Optional[
None
# IP address of proxy
_experimental_custom_scaling_factor
: Optional[
float
None
# Custom scaling factor
_experimental_enable_gpu_snapshot
bool
False
# Experimentally enable GPU memory snapshots.
# Parameters below here are deprecated. Please update your code as suggested
keep_warm
: Optional[
None
# Replaced with `min_containers`
concurrency_limit
: Optional[
None
# Replaced with `max_containers`
container_idle_timeout
: Optional[
None
# Replaced with `scaledown_window`
allow_concurrent_inputs
: Optional[
None
# Replaced with the `@modal.concurrent` decorator
_experimental_buffer_containers
: Optional[
None
# Now stable API with `buffer_containers`
allow_cross_region_volumes
: Optional[
bool
None
# Always True on the Modal backend now
) -> _FunctionDecoratorType:
Copy
Decorator to register a new Modal
Function
with this App.
@typing_extensions.dataclass_transform
field_specifiers
=(parameter,),
kw_only_default
True
@warn_on_renamed_autoscaler_settings
self
_warn_parentheses_missing
: Optional[
bool
None
image
: Optional[_Image] =
None
# The image to run as the container for the function
secrets
: Sequence[_Secret] = (),
# Optional Modal Secret objects with environment variables for the container
: Union[
GPU_T, list[GPU_T]
None
# GPU request as string ("any", "T4", ...), object (`modal.GPU.A100()`, ...), or a list of either
serialized
bool
False
# Whether to send the function over using cloudpickle.
network_file_systems
: dict[
Union[
, PurePosixPath], _NetworkFileSystem
] = {},
# Mountpoints for Modal NetworkFileSystems
volumes
: dict[
Union[
, PurePosixPath], Union[_Volume, _CloudBucketMount]
] = {},
# Mount points for Modal Volumes & CloudBucketMounts
# Specify, in fractional CPU cores, how many CPU cores to request.
# Or, pass (request, limit) to additionally specify a hard limit in fractional CPU cores.
# CPU throttling will prevent a container from exceeding its specified limit.
: Optional[Union[
float
, tuple[
float
float
]]] =
None
# Specify, in MiB, a memory request which is the minimum memory required.
# Or, pass (request, limit) to additionally specify a hard limit in MiB.
memory
: Optional[Union[
, tuple[
]]] =
None
ephemeral_disk
: Optional[
None
# Specify, in MiB, the ephemeral disk size for the Function.
min_containers
: Optional[
None
# Minimum number of containers to keep warm, even when Function is idle.
max_containers
: Optional[
None
# Limit on the number of containers that can be concurrently running.
buffer_containers
: Optional[
None
# Number of additional idle containers to maintain under active load.
scaledown_window
: Optional[
None
# Max time (in seconds) a container can remain idle while scaling down.
proxy
: Optional[_Proxy] =
None
# Reference to a Modal Proxy to use in front of this function.
retries
: Optional[Union[
, Retries]] =
None
# Number of times to retry each input in case of failure.
timeout
: Optional[
None
# Maximum execution time of the function in seconds.
cloud
: Optional[
None
# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.
region
: Optional[Union[
, Sequence[
]]] =
None
# Region or regions to run the function on.
enable_memory_snapshot
bool
False
# Enable memory checkpointing for faster cold starts.
block_network
bool
False
# Whether to block network access
restrict_modal_access
bool
False
# Whether to allow this class access to other Modal resources
# Limits the number of inputs a container handles before shutting down.
# Use `max_inputs = 1` for single-use containers.
max_inputs
: Optional[
None
include_source
: Optional[
bool
None
# When `False`, don't automatically add the App source to the container.
experimental_options
: Optional[dict[
, Any]] =
None
# Parameters below here are experimental. Use with caution!
_experimental_scheduler_placement
: Optional[
SchedulerPlacement
None
# Experimental controls over fine-grained scheduling (alpha).
_experimental_proxy_ip
: Optional[
None
# IP address of proxy
_experimental_custom_scaling_factor
: Optional[
float
None
# Custom scaling factor
_experimental_enable_gpu_snapshot
bool
False
# Experimentally enable GPU memory snapshots.
# Parameters below here are deprecated. Please update your code as suggested
keep_warm
: Optional[
None
# Replaced with `min_containers`
concurrency_limit
: Optional[
None
# Replaced with `max_containers`
container_idle_timeout
: Optional[
None
# Replaced with `scaledown_window`
allow_concurrent_inputs
: Optional[
None
# Replaced with the `@modal.concurrent` decorator
_experimental_buffer_containers
: Optional[
None
# Now stable API with `buffer_containers`
allow_cross_region_volumes
: Optional[
bool
None
# Always True on the Modal backend now
) -> Callable[[Union[CLS_T, _PartialFunction]], CLS_T]:
Copy
Decorator to register a new Modal
with this App.
include
include
self
, /,
other_app
"_App"
) -> typing_extensions.Self:
Copy
Include another Appâ€™s objects in this one.
Useful for splitting up Modal Apps across different self-contained files.
app_a = modal.App(
@app.function
app_b = modal.App(
@app.function
app_a.include(app_b)
@app_a.local_entrypoint
main
# use function declared on the included app
bar.remote()
Copy
modal.App
name
is_interactive
app_id
description
lookup
set_description
image
deploy
registered_functions
registered_classes
registered_entrypoints
registered_web_endpoints
local_entrypoint
function
include